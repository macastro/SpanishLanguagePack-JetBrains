abstract.class.not.allowed=La clase abstracta no está permitida
access.static.via.instance=Acceso a miembros estáticos a través de referencia de instancia
accessible.name.change.modifier=Cambiar modificador
action.GotoSuperClass.MainMenu.text=Ir a s_uperclase
action.GotoSuperClass.description=Navegar a la declaración de una clase que la clase actual extiende o implementa
action.GotoSuperClass.text=Ir a la clase padr_e
action.analyzing.cyclic.dependencies.in.scope=Dependencias cíclicas de {0}
action.create.new.class=Crear nueva clase
action.create.new.class.description=Crear nueva clase de Java
action.create.new.module-info.description=Crear nuevo module-info.java
action.create.new.module-info.title=module-info.java
action.create.new.package-info.description=Crear nuevo package-info.java
action.create.new.package-info.title=package-info.java
action.cyclic.dependency.title=Análisis de Dependencia Cíclica
action.description.copy.whole.thread.dump.to.clipboard=Copiar volcado de subproceso completo al portapapeles
action.description.group.by.scope=Agrupar por tipos de ámbito (producción, test, bibliotecas)
action.description.group.threads.with.identical.stacktraces=Agrupar hilos con rastro de pila idéntico
action.description.infer.nullity.annotations=Deducir anotaciones de nulidad
action.description.mark.directory.as.a.0.for.generated.files=Marcar el directorio como {0} para archivos generados
action.description.mark.directory.as.an.ordinary.0=Marcar directorio como {0} normal
action.description.show.only.threads.containing.a.specific.string=Mostrar solo hilos que contengan una cadena específica
action.dfa.from.stacktrace.text=Buscar por qué ''{0}'' podría ser {1}
action.expand.static.import.text=Expandir importación estática
action.find.similar.stack.call.diverged=Es probable que los números de línea estén divididos. Intenta buscar la ubicación actual dentro de ''{0}.{1}()''
action.find.similar.stack.call.location.not.found=No se ha encontrado una ubicación similar dentro de ''{0}.{1}()''
action.find.similar.stack.call.methods=Métodos similares a ''{0}.{1}()''
action.find.similar.stack.call.methods.not.found=No se encontraron métodos similares a ''{0}.{1}()''
action.find.similar.stack.call.similar.calls=Ubicaciones posibles dentro de ''{0}.{1}()''
action.go.to.functional.implementation.text=Buscar implementaciones de interfaz funcionales
action.go.to.implementation.text=Ir a Implementación(es)
action.go.to.overriding.methods.text=Ir a métodos sobrescritos
action.go.to.subclass.text=Ir a subclase(s)
action.go.to.super.method.text=Ir al método Super
action.group.by.package=Por paquete
action.group.by.scope.type=Agrupar por tipo de alcance
action.implement.method=Implementar método
action.implement.methods=Implementar métodos
action.override.method=Sobrescribir método
action.override.methods=Sobrescribir métodos
action.sort.by.percent.classes.which.overrides.method.description=Ordenar por porcentaje de subclases que redefinen el método
action.sort.by.percent.classes.which.overrides.method.text=Ordenar por porcentaje de subclases que sobreescriben el método
action.text.0.on.parameter.1={0} on parameter "{1}"
action.text.choose.class.in.0=selecciona la clase en {0}...
action.text.copy.to.clipboard=Copiar al Portapapeles
action.text.edit.template=Editar plantilla
action.text.enter.class.name=introduce el nombre de clase...
action.text.generated.root.0=Generado {0}
action.text.merge.identical.stacktraces=Fusionar Stacktraces Identicos
action.text.show.methods.to.implement=Mostrar métodos para implementar
action.text.unmark.generated.0=Desmarcar generado {0}
action.title.infer.nullity.annotations=Inferir Anotaciones de Nulidad
add.methods.dialog.or=o
add.to.permits.list=Agregar ''{0}'' a la lista de permisos de la clase sellada ''{1}''
add.to.permits.list.family.name=Añadir clase a la lista de permisos
adds.ext.library.preview=Agrega biblioteca ''{0}'' a módulo ''{1}''
adds.ext.library.preview.import=Agrega biblioteca ''{0}'' a las dependencias del módulo ''{1}'' e importa ''{2}''
adds.library.preview=Agrega {0, choice, 1#la biblioteca ''''{1}''''|2#una de {2}} a las dependencias del módulo ''{3}'' e importa la no resuelta ''{4}''
adds.library.preview.no.import=Agrega {0, choice, 1#"la biblioteca ''{1}''"|2#"una de {2}"} a las dependencias del módulo ''{3}''
adds.module.dependencies.preview=Agrega {0, choice, 1#módulo ''''{1}''''|2#uno de los {2}} a las dependencias del módulo ''{3}'' e importa las clases no resueltas
advanced.setting.code.vision.java.minimal.usages=Visión de código: Usos mínimos requeridos para mostrar consejos en línea
advanced.setting.compiler.automake.allow.when.app.running=Permite que Automake se inicie incluso si la aplicación desarrollada se está ejecutando
advanced.setting.compiler.automake.allow.when.app.running.description=El make iniciado automáticamente puede acabar eliminando algunas clases que la aplicación necesita
advanced.setting.compiler.lower.process.priority=Ejecutar la compilación con prioridad baja
advanced.setting.compiler.lower.process.priority.description=Ejecutar proceso JPS externo con prioridad IDLE en Windows y nice nivel 10 en Linux/macOS
advanced.setting.compiler.unified.ic.implementation=Habilitar implementación de compilación incremental unificada Java/Kotlin
advanced.setting.compiler.unified.ic.implementation.description=El proceso JPS externo utiliza una nueva implementación de compilación incremental que puede procesar el código de bytes generado por Java y Kotlin
advanced.setting.java.completion.qualifier.as.argument=Habilitar completitud para métodos estáticos, que utilizan calificador como primer argumento
advanced.setting.java.sdkmanrc.watcher=Iniciar escucha de cambios en '.sdkmanrc' al abrir proyecto
advanced.setting.java.show.irrelevant.templates.in.source.roots=Mostrar plantillas de nuevo archivo irrelevantes en las raíces del código fuente Java
advanced.settings.group.compiler=Compilador
advanced.settings.group.java=Java
align.types.in.multi.catch=Alinear tipos en multi-catch
annotate.intention.chooser.title=Elegir anotación para añadir
annotation.types.cannot.be.inlined=Los tipos de anotación no pueden ser inline
arch.checker.notification.content=El JDK y la arquitectura de sistema no coinciden. Esto podría ralentizar la construcción de forma importante.
arch.checker.notification.project.structure=Configuración del JDK
arch.checker.notification.title=El JDK puede provocar que la compilación sea más lenta
assignment.array.element.to.itself.problem.descriptor=El elemento del array se ha asignado a sí mismo
assignment.to.declared.variable.problem.descriptor=La variable ''{0}'' se inicializa con autoasignación
assignment.to.itself.problem.descriptor=La variable '{0}' se asigna a sí misma
base.package.parameter.wizard.label=Paquete base:(&P)
base.package.project.wizard.error.x.not.valid.package={0} no es un nombre de paquete válido
bean.property=Propiedad de Bean
boolean.method.is.always.inverted.display.name=Método booleano siempre invertido
boolean.method.is.always.inverted.problem.descriptor=Las llamadas al método booleano '#ref()' siempre están invertidas
button.add=Añadir...
button.add.blank=Agregar en blanco
button.add.class=Agregar clase...
button.add.dependency=Añadir dependencia
button.add.package=Agregar paquete...
button.add.pattern=Agregar patrón...
button.annotations=Anotaciones...
button.base.method=Método base(&B)
button.code.patterns=Patrones de código...
button.current.method=Método actual(&C)
button.text.settings=Configuración...
button.to.another.directory=Ir a directorio(&D)
button.to.another.source.root=A Raíz de origen(&S)
caller.chooser.referenced.code.title=Código referenciado
cast.expression=Insertar expresión de conversión
cast.to.0=Convertir a ''{0}''
change.color.command.text=Cambiar color
change.signature.from.usage.short.name=<html> Cambiar la firma de {0}({1})</html>
change.uid.action.name=Cambiar aleatoriamente el inicializador de 'serialVersionUID'
checkbox.after.description=Después de la descripción
checkbox.after.parameter.descriptions=Tras descripciones de parámetros
checkbox.after.return.tag=Después del tag de retorno
checkbox.align.parameter.descriptions=Alinear descripciones de parámetros
checkbox.align.thrown.exception.descriptions=Alinear descripciones de excepciones lanzadas
checkbox.annotate.local.variables=Comentar variables locales
checkbox.check.for.jdk.updates=Comprobar actualizaciones del JDK
checkbox.collapse.annotations=Anotaciones
checkbox.collapse.anonymous.classes=<html>Clases anónimas</html>
checkbox.collapse.closures="Closures" (clases anónimas que implementan un método, antes de Java 8)
checkbox.collapse.end.of.line.comments=Secuencia de comentarios de final de línea
checkbox.collapse.generic.constructor.parameters=Parámetros del constructor y método genéricos
checkbox.collapse.i18n.messages=Cadenas de I18N
checkbox.collapse.inferred.type=Reemplazar 'var' por tipo inferido
checkbox.collapse.inner.classes=Clases anidadas
checkbox.collapse.multiline.comments=Comentarios multilínea
checkbox.collapse.one.line.methods=Métodos de una sola línea
checkbox.collapse.simple.property.accessors=Accesores de propiedad simples
checkbox.collapse.suppress.warnings=@SuppressWarnings
checkbox.declare.var.type=Usar "var" para declaración de variable local
checkbox.deprecated.members=Miembros obsoletos
checkbox.do.not.indent.top.level.class.members=No sangrar elementos de clase de nivel superior
checkbox.do.not.wrap.after.single.annotation=No ajustar línea después de una sola anotación
checkbox.do.not.wrap.one.line.comments=No ajustar los comentarios de una sola línea
checkbox.don.t.warn.in.case.of.multiline.lambda=No advertir si el parámetro de 'List.replaceAll()' es una lambda multilineal
checkbox.enable.javadoc.formatting=Habilitar formateado de JavaDoc
checkbox.enable.leading.asterisks=Habilitar asteriscos de inicio
checkbox.generate.p.on.empty.lines=Generar "<p>" en líneas vacías
checkbox.html.report.inaccessible.symbols=<html>Reportar símbolos inaccesibles<br>(puede que la herramienta javadoc no pueda crear hipervínculos)
checkbox.ignore.chains=Ignorar métodos encadenables
checkbox.ignore.fields.used.in.multiple.methods=Ignorar campos usados en múltiples métodos
checkbox.insert.imports.for.inner.classes=Insertar importaciones para clases internas
checkbox.iterate.unknown.stream.sources.via.stream.iterator=Iterar fuentes Stream desconocidas por medio de Stream.iterator()
checkbox.keep.empty.lines=Mantener líneas vacías
checkbox.keep.empty.param.tags=Mantener @param vacío
checkbox.keep.empty.return.tags=Mantener las @return tags vacías
checkbox.keep.empty.throws.tags=Mantener vacías las etiquetas @throws
checkbox.keep.invalid.tags=Mantener etiquetas inválidas
checkbox.make.generated.local.variables.final=Hacer variables locales generadas finales
checkbox.make.generated.parameters.final=Definir como final los parámetros generados
checkbox.param.description.on.new.line=Descripción de los parámetros en nueva línea
checkbox.param.indent.on.continuation=Indentar líneas de continuación
checkbox.prefer.longer.names=Preferir nombres más largos
checkbox.preserve.line.feeds=Conservar saltos de línea
checkbox.spaces.around.annotation.eq=Alrededor de '=' en par valor de anotación
checkbox.spaces.before.colon.in.foreach=Espacios antes de los dos puntos en foreach
checkbox.spaces.before.deconstruction.list=Lista de descomposición
checkbox.spaces.inside.block.braces.when.body.is.present=Mostrar espacios dentro de los corchetes del bloque cuando hay cuerpo
checkbox.spaces.inside.one.line.enum=Dentro de las llaves de enumeración de una línea
checkbox.spaces.record.header=Grabar cabecera
checkbox.spaces.within.deconstruction.list=Lista de deconstrucción
checkbox.suggest.conversion.to.map.computeifabsent=Sugerir conversión a Map.computeIfAbsent
checkbox.suggest.conversion.to.map.getordefault=Sugerir conversión a Map.getOrDefault
checkbox.suggest.conversion.to.map.merge=Sugerir conversión a Map.merge
checkbox.suggest.conversion.to.map.putifabsent=Sugiere conversión a Map.putIfAbsent
checkbox.suggest.conversion.to.map.replaceall=Sugerir conversión a Map.replaceAll
checkbox.suggest.replacement.even.if.lambda.may.have.side.effects=Sugerir reemplazo incluso si lambda puede tener efectos secundarios
checkbox.suppress.with.suppresswarnings=Suprimir con @SuppressWarnings
checkbox.treat.get.k.null.the.same.as.containskey.k.may.change.semantics=Tratar 'get(k) != null' como 'containsKey(k)' (puede cambiar la semántica)
checkbox.use.fully.qualified.class.names=Utilizar nombres de clase completamente calificados
checkbox.use.single.class.import=Usar importación de clase única
checkbox.use.throws.rather.than.exception=Usar @throws en lugar de @exception
checkbox.warn.if.only.foreach.replacement.is.available=Avisar solo si está disponible el reemplazo 'forEach'
checkbox.warn.if.the.loop.is.trivial=Avisar si el bucle es trivial
checkbox.wrap.at.right.margin=Ajustar en el margen derecho
choose.class=Seleccionar clase
choose.super.class.popup.title=Elegir superclase
chooser.text.choose.where.to.save.0=Elegir donde guardar ''{0}''
chooser.title.select.path.to.save.jar=Seleccionar ruta para guardar JAR
class.can.be.record.conversion.make.member.more.accessible=Si los miembros se vuelven más accesibles:
class.can.be.record.conversion.strategy.convert.silently=Conversión silenciosa
class.can.be.record.conversion.strategy.do.not.convert=No sugerir conversión
class.can.be.record.conversion.strategy.show.members=Mostrar vista de conflictos
class.can.be.record.display.name=La clase puede ser clase de registro
class.can.be.record.quick.fix=Convertir a clase registro
class.can.be.record.suggest.renaming.accessors=Sugerir renombrar métodos de acceso
class.can.be.record.suppress.conversion.if.annotated=Suprimir conversión si una clase está anotada con:
class.can.be.record.suppress.conversion.if.annotated.fix.name=Suprimir conversión de registro si se anota con ''{0}''
class.cannot.be.inlined.because.a.call.to.its.constructor.is.unresolved=No se puede integrar la clase porque una llamada a su constructor necesita resolverse
class.cannot.be.inlined.because.an.interface.implemented.by.it.cannot.be.resolved=No se puede incluir en línea la clase porque no se puede resolver una interfaz implementada por ésta
class.cannot.be.inlined.because.it.has.static.fields.with.non.constant.initializers=La clase no puede ser inline porque tiene campos static con inicializadores no constantes
class.cannot.be.inlined.because.it.has.static.initializers=La clase no se puede incrustar porque tiene inicializadores estáticos
class.cannot.be.inlined.because.it.has.static.inner.classes=No se puede alinear la clase porque tiene clases internas estáticas
class.cannot.be.inlined.because.it.has.static.methods=La clase no se puede convertir en línea porque tiene métodos estáticos
class.cannot.be.inlined.because.it.has.static.non.final.fields=No se puede incrustar la clase porque tiene campos estáticos no finales
class.cannot.be.inlined.because.it.has.usages.of.fields.not.inherited.from.its.superclass=No puede empotrarse la clase ya que usa campos que no heredó de su superclase
class.cannot.be.inlined.because.it.has.usages.of.its.class.literal=No se puede implementar la clase porque se utiliza su literal de clase
class.cannot.be.inlined.because.it.has.usages.of.its.inner.classes=No se puede insertar la clase porque tiene usos de sus clases internas
class.cannot.be.inlined.because.it.is.used.as.a.this.qualifier=La clase no se puede alinear porque se usa como un calificador "this"
class.cannot.be.inlined.because.it.is.used.in.a.catch.clause=La clase no puede estar en línea porque se usa en una cláusula 'catch'
class.cannot.be.inlined.because.it.is.used.in.a.throws.clause=La clase no puede ser incorporada en línea porque es usada en una cláusula 'throws'
class.cannot.be.inlined.because.its.constructor.contains.return.statements=La clase no puede ser en línea porque su constructor contiene sentencias 'return'
class.cannot.be.inlined.because.its.superclass.cannot.be.resolved=La clase no se puede insertar en línea porque no se puede resolver la superclase
class.cannot.be.inlined.because.there.are.usages.of.its.methods.not.inherited.from.its.superclass.or.interface=La clase no puede inlinearse porque existen usos de sus métodos que no se han heredado de su superclase ni interfaz
class.decorator.or.has.default.constructor=''{0}'' debe tener un constructor por defecto o implementar el patrón ''Decorator''
class.filter.editor.add.dialog.title=Nuevo filtro
class.filter.editor.choose.class.title=Elegir clase
class.filter.editor.table.model.column.name.isActive=Está Activo
class.filter.editor.table.model.column.name.pattern=Patrón
class.has.no.default.constructor=''{0}'' no tiene un constructor predeterminado
class.is.not.a.subclass=''{0}'' no es asignable a ''{1}''
class.is.not.concrete=''{0}'' no es una clase concreta
class.is.not.public=''{0}'' no es público
class.not.found.error.message=No se encontró la clase ''{0}''
class.patterns.error.class.pattern.0.must.be.a.valid.java.qualifier=El patrón debe ser un nombre de Java válido, solo se aceptan '*' como marcadores de posición
class.patterns.error.method.pattern.0.must.be.a.valid.java.identifier=El patrón de método ''{0}'' debe ser un identificador java válido, sólo se aceptan ''*'' como marcadores de posición
class.patterns.panel.add.class=Agregar clase
class.patterns.separator.mark.code.as.entry.point.if.qualified.name.matches=Marcar código como punto de entrada si coincide el nombre cualificado
code.style.generation.override.method.signature=Sobre escribir firma de método
code.style.generation.repeat.synchronized.modifier=Repetir modificador synchronized
code.style.generation.replace.null.check=Reemplazar comprobación nula con Objects::nonNull u Objects::isNull
code.style.generation.settings.error.not.valid.identifier.part.in.prefix=Parte del identificador Java no válida en el prefijo: ''{0}''
code.style.generation.settings.error.not.valid.identifier.part.in.suffix=La parte del identificador de Java en el sufijo '{0}' no es válida
code.style.generation.use.class.isInstance=Utilizar Class::isInstance y Class::cast siempre que sea posible
code.style.generation.use.integer.sum=Usa Integer::sum, etc. si es posible
code.style.settings.angle.spacing.brackets=corchetes angulares
code.style.settings.spacing.after.closing.angle.bracket=Después del ángulo de cierre
code.style.settings.spacing.around.type.bounds=Alrededor de los límites del tipo
code.vision.implementations.hint={0, choice, 1#1 implementación|2#{0,number} implementaciones}
code.vision.inheritors.hint={0, choice, 1#1 heredero|2#{0,number} herederos}
code.vision.overrides.hint={0, choice, 1#1 sobreescritura|2#{0,number} sobreescrituras}
column.name.class.entry.point=Clase
column.name.method.entry.point=Punto de entrada del método
column.name.with.subclasses.entry.point=Con subclases
combobox.paste.insert.imports=Insertar imports al pegar:(&I)
command.create.class.from.template=Crear clase desde plantilla
command.create.new.subdirectory=Crear nuevo subdirectorio
command.name.delegate.detected.change=Delegado
command.name.generate.tostring=Generar toString()
command.name.insert.block.statement=Insertar Bloque de Declaración
command.name.replace.type=Reemplazar tipo
command.name.updating.package.statement=Actualizando la declaración del paquete
comment.the.class.will.be.created.in.the.package.0=La clase se creará en el paquete ''{0}''
compiler.options=Opciones del compilador
completion.class.name.hint.2=Presione {0} una vez más para ignorar las dependencias del módulo durante la búsqueda
completion.generate.via.wizard=(generar mediante asistente)
completion.inner.scope=scope interno
completion.inner.scope.tail.text=(desde el bloque {0}) 
completion.no.suggestions.of.type=No hay sugerencias de tipo {0}
completion.override.implement.methods=Sobreescribir/Implementar métodos...
completion.provider.method.declaration.type=provider() Declaración de método
completion.smart.aslist.hint=Pulsa {0} una vez más para buscar matrices de {1}
completion.smart.chain.hint=Presione {0} una vez más para buscar en llamadas de métodos encadenados
completion.smart.hint=Presiona {0} para mostrar sólo variantes que sean adecuadas por tipo
completion.smart.toar.hint=Pulsa de nuevo {0} para encontrar colecciones de {1}
completion.smart.type.generate.anonymous.body=generar cuerpo anónimo
completion.unknown.type=Tipo desconocido {0}
configurable.EqualsHashCodeTemplatesPanel.display.name=Plantillas
configurable.GenerateToStringConfigurable.display.name=Ajustes
configurable.TemplatesPanel.display.name=Plantillas
configure.annotations.option=Configurar anotaciones...
conflict.message.method.will.override.method.base.class=El renombrado {0} sobrescribirá el método de la clase base {1}
convert.compareto.expression.to.equals.call=Convertir la expresión 'compareTo()' a llamada a 'equals()'
convert.compareto.expression.to.equals.call.may.change.semantics=Puedes convertir la expresión 'compareTo()' en la llamada 'equals()' (puede cambiar la semántica)
convert.number.binary=binario
convert.number.decimal=decimal
convert.number.hex=hex
convert.number.octal=octal
convert.number.plain.format=formato sin formato
convert.number.scientific.format=formato científico
copy.abstract.method.intention.name=Utilizar la implementación existente de ''{0}''
copy.abstract.method.no.existing.implementations.found=No se ha encontrado ninguna implementación existente
copy.abstract.method.popup.title=Elige la implementación para copiar
copy.abstract.method.title=Utiliza la implementación del método abstracto
copy.paste.reference.notification=<html>Se {0, choice, 1#añadió|2#añadieron} {0} {0, choice, 1#importación|2#importaciones}<p><span><a href=''show''>Revisar importaciones añadidas...</a></span></html>
create.class.mapping.dialog.title=Seleccionar {0} clase
cyclic.dependencies.progress.text=Construyendo el grafo de dependencias
cyclic.dependencies.scope.dialog.module.button={0} el módulo ''{1}''(&M)
cyclic.dependencies.scope.dialog.project.button={0} Todo el proyecto
cyclic.dependencies.scope.dialog.title=Especificar alcance de {0}
cyclic.dependencies.scope.include.test.sources.option=Incluir fuentes test
cyclic.dependencies.tree.cycle.node.text=ciclo
cyclic.dependencies.usage.view.initial.text=Selecciona un paquete a analizar en el árbol lateral
cyclic.dependencies.usage.view.root.node.text=Usos del paquete ''{0}'' en el paquete ''{1}''
dataflow.from.here=Flujo de datos desde aquí
dataflow.to.here=Dataflow a Aquí
deannotate.intention.action.family.name=Quitar anotación
deannotate.intention.action.several.text=Desanotar...
deannotate.intention.action.text=Quitar anotación a {0}
deannotate.intention.chooser.title=Elige la anotación a eliminar
default.package.presentable.name=<default>
default.param.value.warning={0, choice, 0#Constructor|1#Método} con la firma seleccionada ya existe
delete.assignment.completely=Eliminar asignación completamente
delete.initializer.completely=Eliminar inicializador completamente
dependant.sdk.unsatisfied.dependency.message=Necesitas configurar un SDK de Java primero
dependencies.libraries.node.text=Librerías
dependencies.tree.node.default.package.abbreviation=<paquete predeterminado>
destination.combo.source.root.not.expected.conflict=Se seleccionó la raíz de origen cuando se esperaba seleccionar la raíz de la prueba
destination.combo.test.root.not.expected.conflict=Se ha seleccionado la raíz de prueba aunque la raíz de origen es la que se esperaba
dfa.constraint.0.not.null={0} (no nulo)
dfa.constraint.not.null=no-nulo
dfa.constraint.null.or.0=null o {0}
dialog.create.class.destination.package.label=Paquete destino:
dialog.create.class.label=Crear {0}:
dialog.create.class.name=Crear {0} {1}
dialog.create.class.package.chooser.title=Selecciona el paquete de destino
dialog.edit.template.checkbox.smart.type.completion=Completado de tipo de concordancia(&O)
dialog.edit.template.checkbox.use.static.import=Si es posible usar importación estática(&I)
dialog.import.on.paste.title=Seleccionar clases a importar
dialog.import.on.paste.title2=Seleccionar elementos a importar
dialog.import.on.paste.title3=Seleccionar importación para eliminar
dialog.message.0.update.existing.class={0}. ¿Actualizar clase existente?
dialog.message.class.not.found=Clase de plantilla ''{0}'' no encontrada
dialog.message.create.test.in.the.same.source.root=¿Crear prueba en la misma raíz fuente?
dialog.message.infer.nullity.annotations.requires.the.project.language.level=Las anotaciones de inferencia de nulidad requieren que el nivel de lenguaje del proyecto sea 1.5 o superior.
dialog.message.jetbrains.annotations.library.is.missing=Falta la biblioteca de anotaciones de JetBrains.\nSin la biblioteca, IntelliJ IDEA no puede ejecutar el análisis. ¿Desea agregarla?
dialog.message.modules.dont.refer.to.existing.annotations.library={0, choice, 0#Módulo|2#Módulos} {1} {0, choice, 0#no|2#no} se refieren a la biblioteca ''{2}'' existente con anotaciones de nulidad de IntelliJ IDEA. ¿Desea agregar las {0, choice, 0#dependencias|2#dependencias} ahora?
dialog.message.no.places.found.to.infer.nullable.notnull=No se han encontrado lugares para inferir @Nullable/@NotNull
dialog.message.parameter.has.write.usages.inline.not.supported=El parámetro tiene usos de escritura. No se admite la inserción en línea.
dialog.message.template.not.applicable=La plantilla no aplica
dialog.message.template.not.found=No se encontró la plantilla
dialog.paste.on.import.text=<html>El fragmento de código que has pegado usa clases que no son accesibles por importación en el nuevo contexto.<br/>Selecciona las clases que deseas importar al nuevo archivo.</html>
dialog.paste.on.import.text2=<html>El fragmento de código que has pegado utiliza elementos que no son accesibles por importaciones en el nuevo contexto.<br/>Selecciona los elementos que deseas importar al nuevo archivo.</html>
dialog.paste.on.import.text3=<html>El fragmento de código que has pegado ha introducido nuevas importaciones en el contexto actual.<br/>Selecciona las importaciones que quieres eliminar.</html>
dialog.title.check.configuration=Verificar la configuración...
dialog.title.check.functional.interface.candidates=Comprobar candidatos a la interfaz funcional...
dialog.title.choose.0.parameters=Elegir {0} parámetros
dialog.title.choose.annotation=Elija {0} Anotación
dialog.title.choose.class=Seleccione clase
dialog.title.choose.logger=Seleccionar registrador
dialog.title.configure.annotations=Configuración de anotaciones
dialog.title.configure.code.patterns=Configurar Patrones de Código
dialog.title.copy.template=Copiar plantilla
dialog.title.create.class.in.package=Crear clase en paquete
dialog.title.create.missing.tests=Crear test perdidos
dialog.title.create.new.template=Crear plantilla nueva
dialog.title.edit.method.contract=Editar Contrato del Método
dialog.title.edit.range=Editar rango de ''{0}''
dialog.title.infer.nullity=Inferir NULLidad
dialog.title.infer.nullity.results=Resultados de la inferencia de nulidad
dialog.title.move.directory=Mover directorio
dialog.title.no.test.roots.found=No se han encontrado raíces de prueba
dialog.title.process.duplicates=Procesar duplicados
dialog.title.super.method.found=Método Super Encontrado
dialog.title.testdatapath.file.generate=Generar archivos desde clase a @TestDataPath
dialog.title.testdatapath.method.generate=Generar métodos desde @TestDataPath
disable.report.inaccessible.symbols.fix=No notificar símbolos inaccesibles
do.not.import.inner.classes.for=Excluye clases internas por nombre corto:
do.not.import.inner.classes.no.classes=No se han definido clases internas
edit.contract.dialog.checkbox.impure.method=El método puede producir efectos secundarios(&S)
edit.contract.dialog.hint=<html>Por favor, especifica el texto del contrato<p>Ejemplo: <code>_, null -> false</code><br><small>Ver la descripción de la acción para más detalles</small></html>
edit.contract.dialog.mutates.hint=Especifica elementos separados por comas que pueden ser mutados<p>Ejemplo: <code>this,param1</code><p>Déjalo vacío para efectos secundarios no especificados.
edit.range.dialog.message=Dejar vacío si es sin restricciones
edit.range.error.invalid.value=Valor inválido
edit.range.should.not.be.greater.than.to=El rango no debe ser mayor que 'to'
edit.range.should.not.be.less.than.from=No debe ser menor que 'from'
edit.range.value.should.be.bigger.than=No debe ser mayor que {0}
edit.range.value.should.be.less.than=No debería ser menor que {0}
editbox.blank.lines.field.in.interface=Antes del campo en la interfaz
editbox.blank.lines.field.with.annotations=Antes del campo con anotaciones:
editbox.blank.lines.field.without.annotations=Antes de los campos sin anotaciones:
editbox.blanklines.around.initializer=Líneas en blanco alrededor del inicializador:
editbox.class.count.to.use.import.with.star=Número de clases para usar import con '*':
editbox.names.count.to.use.static.import.with.star=Cuenta de nombres para usar la importación estática con '*':
empty.title=Vacío
encapsulate.fields.dialog.javadoc.title=Javadoc
enum.constant.ordinal=Número Ordinal de Constante de Enumeración:
enum.not.allowed=Enum no permitido
enums.cannot.be.inlined=Las enumeraciones no se pueden insertar
environment.key.description.project.jdk=Ruta absoluta al JDK del proyecto
environment.key.description.project.jdk.name=Nombre del JDK del proyecto visible en el IDE.
error.attempt.to.generate.constructor.for.anonymous.class=No se puede añadir el constructor en una clase anónima
error.attempt.to.generate.constructor.for.implicit.class=No se puede añadir un constructor a una clase declarada implícitamente
error.hint.no.expression.found=No se ha encontrado ninguna expresión
error.message.ide.does.not.support.starting.processes.using.old.java=El IDE no soporta el inicio de un proceso Java utilizando Java {0}, la versión mínima soportada es 1.7. Cambia la configuración de ejecución para utilizar una versión de Java más nueva.
error.package.already.contains.package-info='package-info.java' existe para el paquete ''{0}''
error.package.already.contains.package.html=El paquete ''{0}'' ya tiene un archivo ''package.html''. ¿Crear ''package-info.java'' de todas formas?
error.package.html.found.title='package.html' encontrado
error.text.this.is.not.a.valid.java.class.name=Este no es un nombre de clase Java válido
exclude.0.from.auto.import=Excluir ''{0}'' de la importación automática
exclude.0.from.completion=Excluir ''{0}'' de la autocompletar
exclude.accessors=Excluye Accesores
exclude.from.completion.group=Excluir de la autoimportación y el autocompletado:
exclude.from.imports.no.exclusions=Agregar clase, paquete o miembro
exclude.from.imports.no.exclusions.2=para excluir de la importación y finalización automáticas
exclude.import.wildcard.comment=Utiliza el comodín * para excluir todos los miembros de una clase o paquete especificado
exclude.table.mask=Clase, paquete o miembro
exclude.table.scope.column=Alcance
export.to.html.generate.hyperlinks.checkbox=Generar hipervínculos a clases
external.annotation.prompt=Solicitud de anotiones externa
external.annotations.external.option=Agregar Externo
external.annotations.in.code.option=Añadir en el código
external.annotations.open.file=Abrir archivo de annotaciones
external.annotations.problem.parse.error=Archivo: {0}<br>Problema: {1}
external.annotations.problem.title=No se pueden leer las anotaciones externas
external.annotations.root.chooser.description=Las anotaciones externas se guardan en la carpeta de componentes externos
external.annotations.root.chooser.title=Seleccionar la raíz de anotaciones externas para {0}
external.annotations.roots=Raíces de anotaciones
external.annotations.suggestion.message=<html><body>Si no desea anotaciones en su código, puede usar almacenamiento externo.<br> Para configurar anotaciones externas, especifique el directorio raíz donde se colocaran los archivos con anotaciones</body></html>
extract.interface.command.name=Extraer interfaz
extract.superclass.command.name=Extraer superclase
extracted.class.should.have.unique.name=La clase extraída debe tener un nombre único. El nombre ''{0}'' ya está en uso por una de las clases internas
filetype.spi.description=Interfaz de programa de servicio
find.field.accessors.prompt=¿Buscar accesores para el campo ''{0}''?
find.field.accessors.title=Accesores de campo encontrados
find.jar.hint.text.no.libraries.found.for.fqn=No se encontraron bibliotecas para ''{0}''
find.options.include.accessors.base.checkbox=Buscar métodos básicos de accesores
find.options.include.accessors.base.checkbox.comment=Utilizar por defecto métodos de jerarquía de máximo nivel como objetivos para búsqueda de uso
find.options.include.accessors.checkbox=Incluir accesores(&A)
find.options.include.overloaded.methods.checkbox=Métodos sobrecargados(&V)
find.options.search.overriding.methods.checkbox=Buscar en métodos sobreescritos
find.what.derived.classes.checkbox=Clases derivadas(&D)
find.what.derived.interfaces.checkbox=Interfaces derivadas(&D)
find.what.fields.usages.checkbox=Usages de los fields
find.what.implementing.classes.checkbox=Clases de implementación(&I)
find.what.implementing.methods.checkbox=Implementación de métodos(&I)
find.what.implicit.to.string.checkbox=Llamadas implícitas
find.what.methods.usages.checkbox=Usos de métodos
find.what.overriding.methods.checkbox=Métodos sobreeescritos
find.what.search.for.base.methods.checkbox=Búsqueda de usos de métodos base
find.what.search.for.base.methods.checkbox.comment=Utilizar métodos de jerarquía superior como objetivos base de búsqueda por defecto
find.what.usages.checkbox=Usos
find.what.usages.of.classes.and.interfaces=Usos de clases e interfaces
fix.move.to.source.root=Mover a la raíz de la fuente
generate.button.title=Generar
generate.constructor.already.exists=El constructor ya existe
generate.constructor.fields.chooser.title=Seleccionar campos para inicializar por constructor
generate.constructor.super.constructor.chooser.title=Elegir constructor de superclase
generate.delegate.target.chooser.title=Seleccionar destino para generar delegados
generate.equals.and.hashcode.already.defined.title=Generar 'equals()' y 'hashCode()'
generate.equals.and.hashcode.already.defined.warning=Los métodos ''boolean equals(Object)'' y ''int hashCode()'' ya están definidos para la clase {0}.\n¿Desea eliminarlos y continuar?
generate.equals.and.hashcode.already.defined.warning.anonymous=Los métodos 'boolean equals(Object)' y 'int hashCode()' ya están definidos\npara esta clase anónima. ¿Desea eliminarlos y continuar?
generate.equals.hashcode.accept.sublcasses=Aceptar sublcasses como parámetro del método equals()
generate.equals.hashcode.accept.sublcasses.explanation=<html><body>Aunque normalmente no cumple el contrato de `Object.equals()`, es posible que sea necesario aceptar<br>subclases para los elementos generados
generate.equals.hashcode.comparison.table=<html><table><tr><th><th>instanceof<th>getClass()<tr><td>Permite que las instancias de subclases sean iguales a las instancias de la superclase<td align=center>Sí<td align=center>No<tr><td>Permite que las instancias de diferentes subclases sean iguales entre sí<td align=center>Sí<td align=center>No<tr><td>Sobrescribir el método equals() generado no rompe su contrato<td align=center>No<td align=center>Sí<tr><td>Evita la comprobación adicional de nulos<td align=center>Sí<td align=center>No<tr><td>Cumple con el principio de sustitución de Liskov<td align=center>Sí<td align=center>No</table></html>
generate.equals.hashcode.equals.fields.chooser.title=Elegir campos que se incluirán en equals()(&F)
generate.equals.hashcode.getclass.type.comparison=getClass() expresión de comparación
generate.equals.hashcode.hashcode.fields.chooser.title=Elegir los campos a incluir en hashCode()
generate.equals.hashcode.instanceof.type.comparison=Expresión instanceof(&I)
generate.equals.hashcode.internal.error=Error interno
generate.equals.hashcode.non.null.fields.chooser.title=Seleccionar todos los campos no nulos(&F)
generate.equals.hashcode.template=Plantilla:(&T)
generate.equals.hashcode.type.comparison.label=Para comparación de tipo de clase en método equals() generar:
generate.equals.hashcode.use.getters=Utilizar getters cuando esté disponible
generate.equals.hashcode.warning.hashcode.for.arrays.is.not.supported=hashCode() no está soportado para arrays
generate.equals.hashcode.wizard.title=Generar equals() y hashCode()
generate.equals.no.fields.for.generation=No hay campos que incluir en equals/hashCode
generate.equals.template.title=Plantilla para equals:
generate.equals.warning.equals.for.nested.arrays.not.supported=equals() para arreglos anidados no es soportado
generate.equals.warning.generated.equals.could.be.incorrect=equals() generado para Object[] puede ser incorrecto
generate.equals.wizard.title=Generar equals()
generate.file.extension.text=Ingresa la extensión del archivo: .php, .java, .kt, .cpp ...
generate.file.extension.validation.error=La extensión de archivo ''{0}'' no es válida. Debe comenzar con ''.'', no puede contener espacios ni estar vacía
generate.getter.and.setter.error.no.fields=No hay campos para generar los getters/setters
generate.getter.and.setter.error.no.fields.without.getters.and.setters=No se encontraron campos sin getters/setters
generate.getter.and.setter.error.setters.for.read.only.not.generated=No se generaron los setters para los campos de solo lectura
generate.getter.error.no.fields=No se encontraron campos para generar getters
generate.getter.error.no.fields.without.getters=No se encontraron campos sin getter
generate.getter.fields.chooser.title=Seleccionar campos para generar getters
generate.getter.setter.generate.all.annotations=Copiar todas las anotaciones(&A)
generate.getter.setter.generate.all.annotations.tooltip=Copia todas las anotaciones aplicables del campo. De lo contrario, solo se copiarán las anotaciones de nulabilidad.
generate.getter.setter.header.visibility.hint.=La visibilidad se aplica de acuerdo a Archivo | Ajustes | Editor | Estilo de código | Java | Generación de código
generate.getter.setter.title=Selecciona los campos para generar los Getters y Setters
generate.getter.template=Plantilla Getter:(&G)
generate.hashcode.template.title=Plantilla HashCode:
generate.hashcode.wizard.title=Generar hashCode()
generate.logger.no.place.found.dialog.message=No se encontraron lugares donde insertar el registrador
generate.logger.no.place.found.dialog.title=Lugar no encontrado
generate.logger.specify.place.popup.title=Seleccionar ubicación
generate.members.implement.command=impl
generate.members.nothing.to.insert=No se encontró nada que insertar
generate.method.nofiles.warn=No se encontraron métodos de prueba en la clase {0}
generate.method.nosuites.warn=No se encontraron conjuntos de pruebas en @TestDataPath("{0}")
generate.missed.tests.action.error.no.tests.found=No se encontraron exámenes
generate.missed.tests.action.failed.to.detect.framework=No se pudo detectar el framework de pruebas para {0}
generate.quickfix.files=Crear escenarios QF (con sufijo '.after')
generate.record.constructor.title=Generar Constructor de Registros
generate.select.default.modifier.text=Seleccionar modificador
generate.setter.fields.chooser.title=Seleccionar campos para generar setters
generate.setter.template=Plantilla de ajuste:(&S)
generate.setters.no.fields=No se encontraron campos para generar setters
generate.setters.no.fields.without.setters=No se encontraron campos sin un setter
generate.test.support.method.error.cannot.generate.method=No se puede generar el método: {0}
generate.test.support.method.error.method.already.exists=El método {0} ya existe
generate.test.support.method.error.no.template.found.for.framework=No se ha encontrado ninguna plantilla para {0}:{1}
generate.tostring.already.exist.border=Cuando el método ya existe
generate.tostring.available.implicit.variables.label=Variables implícitas disponibles:<br/>{0}
generate.tostring.exclude..transient=Excluir campos transitorios
generate.tostring.exclude.by.field.name=Excluir campos por nombre (reg exp)
generate.tostring.exclude.by.field.type=Excluir campos por tipo de nombre (reg exp)
generate.tostring.exclude.by.name=Excluir métodos por nombre (expresión regular)
generate.tostring.exclude.by.return.type=Excluir métodos por nombre del tipo de retorno (expresión regular)
generate.tostring.exclude.constant.fields=Excluir campos constantes
generate.tostring.exclude.enum.fields=Excluir campos de enumeración
generate.tostring.exclude.logger=Excluir campos de registro (Log4j, Registro JDK, Registro de Jakarta Commons)
generate.tostring.exclude.static.fields=Excluye campos estáticos
generate.tostring.fully.qualified.class.name=Utilizar clase completa en toString() generado ($classname)
generate.tostring.getters.in.generated.code=Utilizar getters en toString() generado cuando estén disponibles ($methods)
generate.tostring.handle.exception.error.message=Se lanzó una excepción irrecuperable durante la ejecución de la acción; consultar el registro de IDEA para obtener más detalles (el seguimiento de la pila debe estar en idea.log):\n{0}
generate.tostring.handle.exception.plugin.warning.message=Se ha lanzado una PluginException al realizar la acción. Consulta el log de IDEA para obtener más información (el stacktrace debería estar en idea.log):\n{0}
generate.tostring.handle.exception.velocity.error.message=Error de Velocity al generar el código - vea el registro del IDE para más detalles (la traza de pila debe estar en idea.log): \n{0}
generate.tostring.insert.border=¿Dónde insertar?
generate.tostring.method.already.exists.dialog.me=mensaje=Reemplazar el método {0} existente
generate.tostring.method.already.exists.dialog.title=Método ya existente
generate.tostring.move.to.generated.checkbox=Mueve el cursor al método generado
generate.tostring.settings=Configuraciones
generate.tostring.sort.ascending=Ascendente
generate.tostring.sort.checkbox=Ordenar elementos
generate.tostring.sort.descending=Descendente
generate.tostring.sort.super=Primero los miembros de la súper clase
generate.tostring.tab.title=Configuraciones de generación toString()
generate.tostring.template.label=Plantilla:(&T)
generate.tostring.title=Generar toString()
generate.type.use.before.type=Generar anotaciones permitidas por TYPE_USE antes del tipo (&B)
generate.type.use.before.type.description=Las anotaciones que tienen TYPE_USE como destino se colocan directamente antes del tipo. De lo contrario, se colocan antes de todos los modificadores.
goto.super.class.chooser.title=Seleccionar superclase o interfaz
group.javadoc.alignment=Alineación
group.javadoc.blank.lines=Líneas en blanco
group.javadoc.invalid.tags=Etiquetas inválidas
group.javadoc.other=Otros
gutter.implemented.method=Método implementado
gutter.implementing.method=Implementando método
gutter.overridden.method=Método sobreescrito
gutter.overriding.method=Método override
gutter.service=Servicio
gutter.sibling.inherited.method=Método heredado de hermano
header.method.to.be.converted=Método a convertir
hide.out.of.cyclic.packages.action.description=Ocultar paquetes sin dependencias cíclicas
hide.out.of.cyclic.packages.action.text=Ocultar paquetes sin dependencias cíclicas
highlight.exceptions.thrown.chooser.title=Seleccionar Clases de Excepción para Resaltar
highlight.imported.classes.chooser.title=Seleccionar clases importadas para resaltar
highlight.imported.members.chooser.title=Seleccionar Miembros Importados para Destacar
highlight.overridden.classes.chooser.title=Seleccionar clases para resaltar métodos anulados
highlight.suppressed.warnings.choose.inspections=Elegir inspecciones para resaltar problemas suprimidos de
highlight.throws.class.name=Resaltar Throw {0}
highlight.throws.popup.throwing.places=Lugares donde se lanza {0}
highlight.throws.popup.usages=Usos de {0}
hint.text.added.imports=, {0} {1, choice, 0#importación añadida|1#importaciones añadidas}
hint.text.not.valid.java.identifier=No es un identificador Java válido
hint.text.occurrences.were.inlined={0} apariciones fueron incrustadas
hint.text.press.to.go.through.inlined.occurrences=Presiona {0} para recorrer {1} ocurrencias en línea
hint.text.rearranged.imports=Importaciones reorganizadas
hint.text.removed.imports=Se eliminaron {0} {1, choice, 0#importación|1#importaciones}
hint.text.tostring.method.could.not.be.created.from.template=No se pudo crear el método ''toString()'' a partir de la plantilla ''{0}''
hint.text.tostring.template.invalid=La plantilla ''{0}'' de toString() es inválida
icon.preview=Vista previa del icono
ignore.imports.and.formatting=Ignorar importaciones y formateo
illegal.name.validation.info=Nombre ilegal: {0}
implement.abstract.method.potential.implementations.with.weaker.access=Se encuentran posibles implementaciones con privilegios de acceso más débiles: {0}
implement.method.no.methods.to.implement=No se han encontrado métodos para implementar
import.layout.panel.all.other.imports=todas las otras importaciones
import.layout.panel.blank.line.entry=<línea en blanco>
import.layout.panel.down.button=Abajo
import.layout.panel.up.button=Arriba
import.layout.static.imports.separately=Importar diseños staticos por separado
import.statically=Importación estática
include.accessors=Incluir Accesores(&I)
increase.language.level.preview.description=El nivel de lenguaje para el módulo ''{0}'' será cambiado a ''{1}''
infer.nullity.progress=Procesando resultados...
inlay.MethodChainsInlayProvider.description=Tipos de retorno de métodos en la llamada de cadenas.
inlay.annotation.hints.external.annotations=Anotaciones que se almacenan fuera de tu código fuente.<br>Estas anotaciones son útiles cuando necesitas una anotación, pero añadirla al código fuente no es una opción (por ejemplo, cuando trabajas con un código de una biblioteca).<br><br><a href='https://www.jetbrains.com/help/idea/external-annotations.html'>Documentación</a>
inlay.annotation.hints.inferred.annotations=Anotaciones que IntelliJ IDEA genera escaneando librerías y código del proyecto. Estas anotaciones te ayudan a entender los contratos de código y mejorar las capacidades del análisis estático. Incluyen: <br> @Contract <br> @Nullable <br> @NotNull <br> @Unmodifiable <br>@UnmodifiableView <br><br><a href='https://www.jetbrains.com/help/idea/inferring-nullity.html#inferred-annotations'>Documentación</a>
inlay.parameters.java.build.like.method=Métodos que devuelven una instancia de la clase en la que operan, por ejemplo, llamadas en cadenas StringBuilder u operaciones intermedias en Java 8 Stream API.
inlay.parameters.java.clear.expression.type=Llamadas a método que utilizan una expresión compleja como argumento, por ejemplo, el operador ternario o una sentencia switch de Java 13.
inlay.parameters.java.enums=Declaraciones de constantes de enumeraciones que utilizan un constructor parametrizado.
inlay.parameters.java.method.name.contains.parameter.name=Métodos que toman un solo argumento cuando el argumento esperado está claro desde el nombre del método, como en métodos de acceso.
inlay.parameters.java.multiple.params.same.type=Llamadas a métodos con más de un argumento no literal del mismo tipo.
inlay.parameters.java.new.expr=Llamadas a constructores parametrizados.
inlay.parameters.java.simple.sequentially.numbered=Métodos que toman múltiples parámetros, cuyos nombres consisten en una letra seguida de un número.
insert.override.annotation=Insertar anotación @Override(&O)
inspection.anonymous.2.method.ref.display.name=Tipo anónimo puede ser reemplazado con referencia de método
inspection.assert.quickfix=Estimar ''{0}''
inspection.auto.add.module.requirements.quickfix=Completar dependencias del módulo
inspection.bulk.file.attributes.read.description=Se puede usar la llamada masiva 'Files.readAttributes()'
inspection.bulk.file.attributes.read.message=LLamadas de atributos de múltiples archivos pueden ser reemplazadas con una sola llamada 'Files.readAttributes()'
inspection.call.message=Llamada redundante a ''{0}()''
inspection.capturing.cleaner=Runnable pasado a Cleaner.register() captura la referencia ''{0}''
inspection.capturing.cleaner.description=El limpiador captura la referencia al objeto
inspection.cast.can.be.removed.narrowing.variable.type.fix.family.name=Cambiar el tipo de variable y eliminar la conversión
inspection.cast.can.be.removed.narrowing.variable.type.fix.name=Cambiar el tipo de ''{0}'' a ''{1}'' y eliminar la conversión
inspection.cast.can.be.removed.narrowing.variable.type.message=El cast puede ser eliminado cambiando el tipo de ''{0}'' a ''{1}''
inspection.cast.can.be.removed.narrowing.variable.type.name=El tipo de variable demasiado limitado conduce a un envío innecesario
inspection.charset.object.can.be.used.display.name=Se puede utilizar el objeto 'Charset' estándar
inspection.charset.object.can.be.used.fix.family.name=usar constante Charset
inspection.charset.object.can.be.used.message={0} puede ser utilizado en su lugar
inspection.collection.add.all.can.be.replaced.with.constructor.display.name=Llamada 'Collection.addAll()' redundante
inspection.collection.factories.fix.family.name=Reemplazar con llamada a fábrica de colecciones
inspection.collection.factories.fix.name=Reemplazar con llamada ''{0}.{1}()''
inspection.collection.factories.message=Se puede reemplazar por la llamada ''{0}.{1}()''
inspection.collection.factories.option.ignore.non.constant=Sólo reportar cuando el contenido es constante
inspection.collection.factories.option.suggest.ofentries=Sugerir `Map.ofEntries()`
inspection.collection.used.as.vararg.display.name=El iterable se usa como vararg
inspection.collection.used.as.vararg.message=Iterable se pasa como vararg: se pretendía un array
inspection.comparator.combinators.display.name=Se puede utilizar el combinador 'Comparator'
inspection.comparator.result.comparison.display.name=Uso sospechoso del método comparar
inspection.comparator.result.comparison.fix.family.name=Arreglar comparación de resultados de comparador
inspection.comparator.result.comparison.problem.display.name=Comparación del método de comparacion del resultado con una constante específica
inspection.condition.covered.by.further.condition.display.name=Condición cubierta por otra condición
inspection.conditional.break.in.infinite.loop=Mover condición a bucle
inspection.conditional.break.in.infinite.loop.allow.condition.fusion=Permitir fusión con la condición de bucle existente
inspection.conditional.break.in.infinite.loop.description=Break condicional dentro de bucle
inspection.conditional.break.in.infinite.loop.no.conversion.with.do.while=No sugerir reemplazar con 'do while'
inspection.conditional.break.in.infinite.loop.suggest.conversion.when.if.is.single.stmt.in.loop=Sugerir conversión cuando 'if' es una sola sentencia en un loop
inspection.conditional.can.be.optional.display.name=La condicional puede ser reemplazada por Optional
inspection.convert.2.method.ref.display.name=Lambda se puede reemplazar con referencia al método
inspection.convert.2.streamapi.display.name=Se puede Contraer un bucle mediante la API Stream
inspection.convert.to.local.quickfix=Convertir a local
inspection.data.flow.constant.values.display.name=Valores constantes
inspection.data.flow.display.name=Problemas de nulidad y flujo de datos
inspection.data.flow.filter.notnull.quickfix=Inserta un paso 'filter(Objects::nonNull)'
inspection.data.flow.ignore.assert.statements=ignorar sentencias assert
inspection.data.flow.nullable.quickfix.option=Sugerír la anotación @Nullable para métodos/campos/parámetros donde se utilizan valores nulos
inspection.data.flow.optional.of.nullable.misuse.display.name=Uso de Optional.ofNullable con un argumento nulo o no nulo
inspection.data.flow.report.not.null.required.parameter.with.null.literal.argument.usages=Informar parámetro obligatorio no nulo con usos de argumento de literal nulo
inspection.data.flow.report.nullable.methods.that.always.return.a.non.null.value=Indicar métodos que admiten valores nulos y que siempre devuelven un valor que no es nulo
inspection.data.flow.report.problems.that.happen.only.on.some.code.paths=Reportar problemas que solo ocurren en algunas rutas de código
inspection.data.flow.treat.non.annotated.members.and.parameters.as.nullable=Manejar parámetros y miembros no anotados como @Nullable
inspection.data.flow.true.asserts.option=No reportar aserciones con una condición que estáticamente se ha demostrado que siempre es verdadera
inspection.data.flow.unreachable.code.display.name=Código inalcanzable
inspection.data.flow.unreachable.code.option.ignore.trivial.description=No informar las sentencias de alcance nulo como <code>return 0</code>, <code>break</code>, etc., ya que podrían ser necesarias para cumplir las reglas de flujo de control Java.
inspection.data.flow.unreachable.code.option.ignore.trivial.name=Ignorar sentencias de salida triviales
inspection.data.flow.unreachable.code.option.respect.suppression.description=Trate de evitar informar código inalcanzable si es causado por una condición constante, donde se suprime la advertencia correspondiente.
inspection.data.flow.unreachable.code.option.respect.suppression.name=Respetar las supresiones de la inspección "Valor constante"
inspection.data.flow.use.computeifpresent.quickfix=Sustituir 'compute' con 'computeIfPresent'
inspection.dead.code.option.applet=Applets
inspection.dead.code.option.external=Clases con usos en archivos no Java
inspection.dead.code.option.main=<html><code>void main(String args[])</code> métodos</html>
inspection.dead.code.option.servlet=Servlets
inspection.default.annotation.param=Valor del parámetro de anotación por defecto
inspection.duplicate.branches.in.switch.default.message=La rama de 'switch' es duplicada de la rama por defecto
inspection.duplicate.branches.in.switch.delete.fix.family.name=Eliminar ramas redundantes del 'switch'
inspection.duplicate.branches.in.switch.delete.fix.name=Eliminar rama 'switch' redundante
inspection.duplicate.branches.in.switch.display.name=Ramas duplicadas en 'switch'
inspection.duplicate.branches.in.switch.merge.fix.family.name=Fusionar ramas duplicadas en 'switch'
inspection.duplicate.branches.in.switch.merge.fix.name=Unir con ''{0}''
inspection.duplicate.branches.in.switch.merge.with.default.fix.name=Combinar con la rama 'switch' predeterminada
inspection.duplicate.branches.in.switch.message=Brancas duplicadas en 'switch'
inspection.duplicate.expressions.complexity.threshold=Umbral de complejidad de expresiones
inspection.duplicate.expressions.display.name=Múltiples apariciones de la misma expresión
inspection.duplicate.expressions.introduce.variable.fix.family.name=Introducir variable
inspection.duplicate.expressions.introduce.variable.fix.name=Introducir variable para ''{0}''
inspection.duplicate.expressions.message=Múltiples ocurrencias de <code>#ref</code> #loc
inspection.duplicate.expressions.replace.other.occurrences.fix.family.name=Sustituir otras ocurrencias de la expresión con variable
inspection.duplicate.expressions.replace.other.occurrences.fix.name=Reemplazar con ''{0}'' otras {1} de ''{1}''
inspection.duplicate.expressions.reuse.variable.fix.family.name=Reutilizar variable
inspection.duplicate.expressions.reuse.variable.fix.name=Reutilizar variable ''{0}'' para ''{1}''
inspection.empty.module.info.file=Archivo 'module-info.java' vacío
inspection.endless.stream.description=La operación no de cortocircuito consume una transmisión sin fin
inspection.equals.hashcode.display.name='equals()' y 'hashCode()' no están apareados
inspection.equals.hashcode.generate.equals.quickfix=Generar 'equals()'
inspection.equals.hashcode.generate.equals.quickfix.preview=Abre un cuadro de diálogo para configurar la generación de 'equals()'.
inspection.equals.hashcode.generate.hashcode.quickfix=Generar 'hashCode()'
inspection.equals.hashcode.generate.hashcode.quickfix.preview=Abre un diálogo para configurar la generación de 'hashCode()'.
inspection.excessive.lambda.fix.family.name=Reemplazar lambda por una constante
inspection.excessive.lambda.fix.name=Utiliza el método ''{0}'' sin lambda
inspection.excessive.lambda.message=Uso excesivo de lambda
inspection.excessive.lambda.usage.display.name=Uso excesivo de lambda
inspection.excessive.range.check.display.name=Comprobación de rango excesivo
inspection.explicit.argument.can.be.lambda.display.name=Los argumentos explícitos pueden ser un lambda
inspection.explicit.argument.can.be.lambda.fix.family.name=Reemplazar argumento explícito con función
inspection.explicit.argument.can.be.lambda.fix.name=Use ''{0}'' method with lambda expression
inspection.explicit.argument.can.be.lambda.message=El argumento explícito puede convertirse en lambda
inspection.explicit.array.filling.description=Se puede reemplazar con una sola llamada al método ''Arrays.{0}()''
inspection.explicit.array.filling.display.name=Llenado explícito de arreglos
inspection.explicit.array.filling.fix.family.name=Reemplazar bucle por una llamada al método ''Arrays.{0}()''
inspection.explicit.array.filling.no.suggestion.for.set.all=No sugerir el uso de 'Arrays.setAll()'
inspection.explicit.array.filling.redundant.loop.description=Inicialización redundante de un nuevo array creado
inspection.explicit.array.filling.suggest.set.all=Sugiere 'Arrays.setAll()'
inspection.explicit.to.implicit.class.migration.fix.name=Convertir a clase declarada implícitamente
inspection.explicit.to.implicit.class.migration.name=Declaración de clase explícita puede ser convertida en clase declarada implícitamente
inspection.export.results.callees=Cadena de llamadas
inspection.export.results.implicit.constructor=constructor implícito de
inspection.export.results.overrides.library.methods=Anulaciones de métodos de biblioteca
inspection.export.results.package=paquete
inspection.export.results.type.references=Los siguientes usos este tipo
inspection.field.can.be.local.display.name=El campo puede ser local
inspection.field.can.be.local.problem.descriptor=El campo puede convertirse a una variable local
inspection.field.can.be.local.quickfix.constructor=Convertir campo a variable local en el constructor
inspection.field.can.be.local.quickfix.initializer=Convertir campo a variable local en la sección de inicializador
inspection.field.can.be.local.quickfix.one.method=Convertir campo a variable local en método ''{0}''
inspection.fill.permits.list.display.name=Las subclases del mismo archivo faltan en la cláusula de permisos de una clase sellada
inspection.fill.permits.list.fix.name=Añadir subclases perdidas a la cláusula de permisos
inspection.fill.permits.list.no.missing.inheritors=La clase sellada no tiene herederos faltantes
inspection.fold.expression.fix.family.name=Plegar expresión
inspection.fold.expression.into.stream.display.name=La expresión se puede contraer en cadena de Stream
inspection.fold.expression.into.stream.fix.name=Plegar la expresión en la cadena del Stream
inspection.fold.expression.into.string.display.name=Se puede plegar la expresión en 'String.join'
inspection.fold.expression.into.string.fix.name=Plegar expresion en 'String.join'
inspection.forward.compatibility.name=Compatibilidad de versiones futuras
inspection.frequently.used.inheritor.inspection.display.name=La clase puede extender a una clase base de uso frecuente
inspection.functional.expression.can.be.folded.display.name=Expresión funcional que puede ser plegada
inspection.fuse.stream.operations.display.name=Los pasos siguientes se pueden fusionar en la cadena de la API de Stream
inspection.fuse.stream.operations.fix.family.name=Fusiona más instrucciones a la cadena API de transmisiones
inspection.fuse.stream.operations.fix.name=Fusiona {0} con la cadena de Stream API
inspection.fuse.stream.operations.message=El Stream se puede extender reemplazando {0}
inspection.fuse.stream.operations.option.strict.mode=No sugerir col. 'toList()' o 'toSet()'
inspection.handle.signature.change.type.fix.name=Cambiar el tipo a ''{0}''
inspection.handle.signature.field.cannot.resolve=No se puede resolver el campo ''{0}''
inspection.handle.signature.field.not.static=El campo ''{0}'' no es estático
inspection.handle.signature.field.static=El campo ''{0}'' es estático
inspection.handle.signature.field.type=El tipo del campo ''{0}'' es ''{1}''
inspection.handle.signature.method.abstract=El método ''{0}'' es abstracto en ''{1}''
inspection.handle.signature.method.not.static=El método ''{0}'' no es estático
inspection.handle.signature.method.static=El método ''{0}'' es estático
inspection.handle.signature.name=Tipo de MethodHandle/VarHandle no coincidente
inspection.handle.signature.not.subclass=La clase del que llama ''{0}'' debe ser una subclase de ''{1}''
inspection.handle.signature.use.constructor.fix.family.name=Usar una de estas sobrecargas de constructor
inspection.handle.signature.use.constructor.fix.name=Usa el constructor ''{0}''
inspection.handle.signature.use.method.fix.family.name=Usar una de las sobrecargas del método
inspection.handle.signature.use.method.fix.name=Usar método ''{0}''
inspection.idempotent.loop.body=Cuerpo de bucle idempotente
inspection.illegal.character=Carácter ilegal
inspection.implicit.to.explicit.class.backward.migration.fix.name=Convertir clase declarada implícitamente a clase regular
inspection.implicit.to.explicit.class.backward.migration.name=La clase declarada implícitamente se puede reemplazar por una clase ordinaria
inspection.inconsistent.text.block.indent.message=La sangría del bloque de texto consta de tabulaciones y espacios
inspection.inconsistent.text.block.indent.name=Indentación inconsistente de espacios en bloque de texto
inspection.inconsistent.text.block.indent.spaces.to.tabs.many.to.one.fix=Reemplazar espacios por tabulaciones ({0} espacios = 1 tabulación)
inspection.inconsistent.text.block.indent.spaces.to.tabs.one.to.one.fix=Remplazar espacios por tabulaciones (1 espacio = 1 tabulación)
inspection.inconsistent.text.block.indent.tabs.to.spaces.one.to.many.fix=Reemplazar tabulaciones por espacios (1 tab = {0} espacios)
inspection.inconsistent.text.block.indent.tabs.to.spaces.one.to.one.fix=Reemplazar las tabulaciones por espacios (1 tabulación = 1 espacio)
inspection.input.stream.constructor.message=InputStream se puede construir usando Files.newInputStream()
inspection.insert.literal.underscores.display.name=Literal numérico no legible
inspection.insert.literal.underscores.family.name=Insertar guiones bajos en el literal numérico
inspection.io.stream.constructor.description='InputStream' y 'OutputStream' pueden ser construidos utilizando métodos 'Files'
inspection.java.8.collection.remove.if.display.name=El bucle se puede sustituir por 'Collection.removeIf()'
inspection.java.8.list.replace.all.display.name=El bucle puede ser reemplazado con 'List.replaceAll()'
inspection.java.8.map.api.display.name=Operaciones 'Map' simplificables
inspection.java.9.collection.factory.display.name=La creación de una colección immutable puede reemplazarse con una llamada a la factoría de colecciones
inspection.javadoc.blank.lines.display.name=La línea en blanco se debe reemplazar con <p> para llevar a cabo un salto de línea
inspection.javadoc.blank.lines.fix.family.name=Reemplazar líneas en blanco por <p>
inspection.javadoc.blank.lines.fix.name=Insertar <p>
inspection.javadoc.blank.lines.message=Línea en blanco será ignorada
inspection.javadoc.label.text=Etiquetas Javadoc adicionales:
inspection.javadoc.link.as.plain.text.display.name=Enlace especificado como texto sin formato
inspection.javadoc.link.as.plain.text.message=Enlace especificado como texto simple
inspection.javadoc.lint.display.name=Problemas de HTML en Javadoc(DocLint)
inspection.javadoc.method.problem.missing.param.tag=Falta la etiqueta <code>@param</code> de parámetro {0}
inspection.javadoc.method.problem.missing.tag.description={0} Falta la descripción de la etiqueta
inspection.javadoc.option.ignore.deprecated=Ignorar elementos marcados como @deprecated
inspection.javadoc.option.ignore.period=omitir problemas de punto
inspection.javadoc.option.ignore.self.ref=Ignorar Javadoc que apunta a mismo
inspection.javadoc.option.ignore.simple=Ignorar simples accesores de propiedad
inspection.javadoc.option.ignore.throws=Ignorar etiqueta duplicada 'throws'
inspection.javadoc.option.tab.title=Clase
inspection.javadoc.option.tab.title.field=Campo
inspection.javadoc.option.tab.title.inner.class=Clase interna
inspection.javadoc.option.tab.title.method=Método
inspection.javadoc.option.tab.title.module=Módulo
inspection.javadoc.option.tab.title.package=Paquete
inspection.javadoc.problem.add.param.tag=Añadir etiqueta @param para param ''{0}''
inspection.javadoc.problem.add.param.tag.family=Añadir etiqueta Javadoc @param faltante
inspection.javadoc.problem.add.tag=Añadir etiqueta @{0} {1}
inspection.javadoc.problem.add.tag.family=Añadir etiqueta Javadoc faltante
inspection.javadoc.problem.cannot.resolve=No puede resolverse el símbolo {0}
inspection.javadoc.problem.descriptor=Falta Javadoc requerido
inspection.javadoc.problem.descriptor1=Falta el punto en la documentación. El punto es utilizado por la herramienta Javadoc para generar el comentario de la página de descripción
inspection.javadoc.problem.disallowed.tag=La etiqueta {0} no está permitida aquí
inspection.javadoc.problem.duplicate.param=Etiqueta @param duplicada para el parámetro ''{0}''
inspection.javadoc.problem.duplicate.tag=Etiqueta @{0} duplicada
inspection.javadoc.problem.duplicate.throws=Etiqueta @throws o @exception duplicada para la excepción ''{0}''
inspection.javadoc.problem.inaccessible=Símbolo {0} es inaccesible desde aquí
inspection.javadoc.problem.missing.tag=Falta la etiqueta {0} requerida
inspection.javadoc.problem.missing.tag.description=Falta {0} después de la etiqueta @{1}
inspection.javadoc.problem.name.expected=Se espera un nombre
inspection.javadoc.problem.pointing.to.itself=Javadoc que apunta a sí misma
inspection.javadoc.problem.see.tag.expecting.ref=Se espera una referencia de clase/método, un texto entre comillas o un enlace HTML después de la etiqueta @see
inspection.javadoc.problem.snippet.tag.is.not.available=La etiqueta '@snippet' no está disponible en este nivel de lenguaje
inspection.javadoc.problem.wrong.tag=Etiqueta errónea {0}
inspection.javadoc.ref.display.name=La declaración tiene problemas en las referencias de Javadoc
inspection.javadocDeclaration.display.name=Problemas de declaración de javadoc
inspection.join.declaration.and.assignment.display.name=Se puede unir la asignación con la declaración
inspection.join.declaration.and.assignment.fix.family.name=Unir declaración y asignación
inspection.join.declaration.and.assignment.fix.title=Unir declaración y asignación
inspection.join.declaration.and.assignment.message=La asignación puede juntarse con la declaración de ''{0}''
inspection.labeled.switch.rule.redundant.code.block.display.name=La regla de Switch con etiqueta tiene un bloque de código redundante
inspection.labeled.switch.rule.redundant.code.block.message=El bloque de código de la regla etiquetada es redundante
inspection.labeled.switch.rule.redundant.code.fix.name=Desempaquetar bloque de código de regla etiquetada
inspection.lambda.can.be.method.call.display.name=La lambda se puede reemplazar con la llamada al método
inspection.lambda.to.method.call.fix.family.name=Reemplazar expresión lambda con llamada a método
inspection.lambda.to.method.call.fix.name=Sustituir expresión lambda con ''{0}''
inspection.magic.constant.display.name=Constante mágica
inspection.magic.constants.should.be.one.of.values=Debe ser uno de: {0}{1,choice,0#|1# o su combinación}
inspection.manual.min.max.calculation.description=Puede reemplazarse por llamada ''Math.{0}()''
inspection.manual.min.max.calculation.disable.for.non.integral=Desactivar para float y double
inspection.manual.min.max.calculation.display.name=Cálculo manual de min/max
inspection.map.foreach.display.name=Se puede utilizar Map.forEach()
inspection.map.foreach.option.no.loops=No reportar bucles
inspection.mapping.before.count.family.name=Llamada a map() anterior a count()
inspection.mapping.before.count.message=La llamada ''{0}()'' no modifica el conteo final y podría optimizarse.
inspection.meaningless.record.annotation.description=Anotación de registro sin sentido
inspection.meaningless.record.annotation.message.method=La anotación no tiene efecto: su destino es METHOD pero se ha declarado explícitamente el descriptor de acceso correspondiente
inspection.meaningless.record.annotation.message.method.and.parameter=La anotación no tiene efecto: sus objetivos son MÉTODO y PARÁMETRO, pero se declaran explícitamente el constructor canónico y el accesor
inspection.meaningless.record.annotation.message.parameter=La anotación no tiene efecto: su destino es PARAMETER pero el constructor canónico está explícitamente declarado
inspection.message.anonymous.ref.loc.can.be.replaced.with.method.reference=Ref. #loc anónima puede reemplazarse con referencia de método
inspection.message.can.be.replaced.with.0.constructor=Se puede reemplazar con el constructor ''{0}''
inspection.message.can.be.replaced.with.files.readstring=Se puede reemplazar con 'Files.readString()'
inspection.message.can.be.replaced.with.files.writestring=Se puede reemplazar con 'Files.writeString()'
inspection.message.can.be.replaced.with.optional.of.nullable=Puede sustituirse por Optional.ofNullable()
inspection.message.can.be.replaced.with.single.expression.in.functional.style=Se puede reemplazar por una simple expresión en estilo funcional
inspection.message.can.be.replaced.with.string.repeat=Puede reemplazarse con 'String.repeat()'
inspection.message.external.snippet.differs.from.inline.snippet=El fragmento externo difiere del fragmento en línea
inspection.message.filter.is.present.chain.can.be.replaced.with.anymatch=La cadena ''filter().{0}().isPresent()'' se puede reemplazar por ''anyMatch()''
inspection.message.full.description=Descripción completa
inspection.message.lambda.parameter.type.is.redundant=El tipo de parámetro de lambda es redundante
inspection.message.pattern.variables.can.be.replaced.with.cast=Usando "instanceof" con patrones
inspection.message.pattern.variables.can.be.replaced.with.cast.family.name=Reemplazar sin patrones
inspection.message.pattern.variables.can.be.replaced.with.cast.fix.name=Reemplazar ''{0}'' con conversiones
inspection.message.pattern.variables.can.be.replaced.with.cast.preserve.option=Intentar preservar variables no usadas de patrones durante la acción rápida
inspection.message.pseudo.functional.style.code=Código estilo pseudofuncional
inspection.message.record.can.be.converted.to.class=El registro puede convertirse en una clase
inspection.message.redundant.default.parameter.value.assignment=Asignación de valor de parámetro predeterminado redundante
inspection.message.replace.optional.with.if.statements=Reemplazar Optional con sentencias if
inspection.message.snippet.file.not.found=No se encontró el archivo de snippet ''{0}''
inspection.message.snippet.region.not.found=No se encuentra la región
inspection.missingJavadoc.display.name=Javadoc ausente
inspection.missingJavadoc.label.minimalVisibility=Visibilidad mínima:
inspection.missingJavadoc.label.requiredTags=Etiquetas requeridas:
inspection.move.field.assignment.to.initializer.display.name=Es posible mover la asignación de campo al inicializador
inspection.no.jdk.error.message=JDK no está configurado adecuadamente para este proyecto. La inspección no puede proceder.
inspection.no.modules.error.message=Este proyecto no contiene módulos. La inspección no puede seguir.
inspection.notnull.field.not.initialized.display.name=El campo @NotNull no está inicializado
inspection.notnull.field.not.initialized.message=Se deben inicializar los campos {0}
inspection.notnull.field.not.initialized.option.implicit=Ignorar campos que podrían inicializarse implícitamente
inspection.notnull.field.not.initialized.option.implicit.description=Cuando está activada, los campos que se sabe que se inicializan implícitamente (por ejemplo, mediante inyección de dependencias) no se reportarán
inspection.notnull.field.not.initialized.option.setup=Ignorar los campos inicializados en el método setUp()
inspection.notnull.field.not.initialized.option.setup.description=Si está seleccionada, no se informará sobre los campos en las clases de casos de prueba que se inicializan en los métodos de configuración (p. ej., anotados mediante `@Before` o `@BeforeEach`).
inspection.null.value.for.optional.assigned.ignore.fix.name=No mostrar advertencias al comparar Optional con null
inspection.null.value.for.optional.assigned.message=El valor optional se compara con null
inspection.null.value.for.optional.context.assignment=asignación
inspection.null.value.for.optional.context.declaration=declaración
inspection.null.value.for.optional.context.lambda=expresión lambda
inspection.null.value.for.optional.context.parameter=parámetro
inspection.null.value.for.optional.context.return=sentencia return
inspection.null.value.for.optional.fix.family.name=Reemplazar con método `Optional` vacío
inspection.null.value.for.optional.message=Utilizado null para tipo ''Optional'' en {0}
inspection.null.value.for.optional.option.comparisons=Informe la comparación de Opcional con nulo
inspection.nullable.problems.display.name=Problemas de @NotNull/@Nullable
inspection.nullable.problems.ignore.external.notnull=Ignorar @NotNull externo(&I)
inspection.nullable.problems.method.overrides.notnull.option=Informar @NotNull  parámetros que anulan @Nullable y viceversa(&P)
inspection.nullable.problems.method.overrides.option=Reportar métodos o parámetros no anotados que sobrescriban @NotNull(&A)
inspection.nullable.problems.not.annotated.getters.for.annotated.fields=Informar getters(obtenedores) y parámetros setter(fijadores) sin anotación de campos anotados(&S)
inspection.nullable.problems.notnull.overrides.option=Informar @NotNull parameters anulando no anotado
inspection.nullable.problems.notnull.parameters.with.null.literal.option=Reportar parámetros @NotNull con usos de argumentos de tipo literal nulo
inspection.obvious.null.check.display.name=Se llama a método de comprobación de nulidad con un argumento que obviamente no es nulo
inspection.optional.assigned.to.null.display.name=Valor nulo para tipo opcional
inspection.optional.get.without.is.present.display.name=Optional.get() se llama sin comprobación isPresent()
inspection.optional.get.without.is.present.message=<code>{0}.#ref()</code> sin comprobación ''isPresent()''
inspection.optional.get.without.is.present.method.reference.message=<code>#ref</code> sin comprobación `isPresent()`
inspection.optional.is.present.display.name=Uso de estilo no funcional 'Optional.isPresent()'
inspection.optional.to.if.display.name='Opcional' puede ser reemplazado con una secuencia de declaraciones 'if'
inspection.output.stream.constructor.message='OutputStream' puede construirse utilizando 'Files.newOutputStream()'
inspection.overflowing.loop.index.inspection.description=El bucle se ejecuta cero o miles de millones de veces
inspection.overflowing.loop.index.inspection.name=El bucle se ejecuta cero o miles de millones de veces
inspection.overwritten.key.array.message=Elemento sobreescrito de arreglo
inspection.overwritten.key.display.name=Elemento sobreescrito de array, Set, o mapa
inspection.overwritten.key.map.message=Clave de mapa duplicada
inspection.overwritten.key.set.message=Elemento Set duplicado
inspection.parameter.can.be.local.display.name=Valor pasado como parámetro jamás leído
inspection.parameter.can.be.local.problem.descriptor=El parámetro puede convertirse en una variable local
inspection.preview.feature=Advertencia de la función de previsualización
inspection.preview.feature.0.is.preview.api.message={0} es una API en modo preview que puede eliminarse en una futura versión
inspection.quickfix.assert.family=Aserción
inspection.raw.use.of.parameterized.type.problem.descriptor=Uso directo de clase parametrizada <code>#ref</code> #loc
inspection.read.write.string.can.be.used.display.name="Puede utilizar 'Files.readString()' o 'Files.writeString()'"
inspection.redundant.array.creation.display.name=Creación de matriz redundante
inspection.redundant.array.creation.for.varargs.call.descriptor=Creación de array redundante para llamada a método varargs
inspection.redundant.array.creation.quickfix=Quitar la creación de matriz explícita
inspection.redundant.explicit.close=Cierre explícito redundante
inspection.redundant.file.creation.description=<code>#ref</code> es redundante #loc
inspection.redundant.file.creation.display.name=Creación de instancia redundante de "Archivo"
inspection.redundant.file.creation.quickfix=Reemplazar con nombre de archivo
inspection.redundant.lambda.parameter.type.display.name=Tipos de parámetros lambda redundantes
inspection.redundant.null.check.always.fail.message=La comprobación de nulidad siempre fallará: {0} nunca es nulo
inspection.redundant.null.check.fix.family.name=Eliminar verificación nula redundante
inspection.redundant.null.check.fix.notnull.family.name=Eliminar erróneo '!= null'
inspection.redundant.null.check.message=Comprobación de nulidad redundante: {0} nunca es nulo
inspection.redundant.operation.on.empty.array.message=El array `#ref` está siempre vacío
inspection.redundant.operation.on.empty.collection.message=La colección <code>#ref</code> siempre está vacía
inspection.redundant.operation.on.empty.container.display.name=Operación redundante en un contenedor vacío
inspection.redundant.operation.on.empty.map.message=Mapa <code>#ref</code> siempre vacío
inspection.redundant.record.constructor.can.be.compact.message=El constructor canónico se puede convertir a una forma compacta
inspection.redundant.record.constructor.canonical.message=Constructor canónico redundante
inspection.redundant.record.constructor.compact.message=Constructor compacto redundante
inspection.redundant.record.constructor.description=Constructor de registro redundante
inspection.redundant.record.constructor.fix.family.name=Convertir constructor canónico a forma compacta
inspection.redundant.record.constructor.statement.message=Asignación de campo redundante en constructor compacto
inspection.redundant.stream.optional.call.display.name=Paso redundante en la cadena de llamadas 'Stream' u 'Optional'
inspection.redundant.stream.optional.call.explanation.at.most.one=El flujo contiene como máximo un elemento
inspection.redundant.stream.optional.call.explanation.distinct=hay una llamada 'distinct()' anterior en la cadena
inspection.redundant.stream.optional.call.explanation.distinct.set=los elementos serán diferentes de todos modos cuando se recopilen en un conjunto
inspection.redundant.stream.optional.call.explanation.filter=filtrado el predicado siempre es verdadero
inspection.redundant.stream.optional.call.explanation.map.flatMap=La llamada previa de 'map()' puede reemplazar el paso de 'flatMap()'
inspection.redundant.stream.optional.call.explanation.parallel=existe una llamada ''{0}()'' posterior que anula esta llamada
inspection.redundant.stream.optional.call.explanation.parallel.single=stream creado desde un único elemento no se paralelizará
inspection.redundant.stream.optional.call.explanation.parallel.source=la secuencia fue creada con "parallelStream()", por lo que ya es una secuencia paralela
inspection.redundant.stream.optional.call.explanation.sequential.source=el stream fue creado a través de 'stream()', por lo que ya es secuencial
inspection.redundant.stream.optional.call.explanation.sorted=la llamada posterior ''{0}()'' no depende del orden de clasificación
inspection.redundant.stream.optional.call.explanation.sorted.parallel=La operación ''{0}()'' posterior no depende del orden de clasificación de flujos paralelos
inspection.redundant.stream.optional.call.explanation.sorted.twice=existe una llamada 'sorted()' posterior en la cadena
inspection.redundant.stream.optional.call.explanation.unordered=existe una llamada 'unordered()' previa en la cadena
inspection.redundant.stream.optional.call.fix.bind.name=Combinar el paso ''{0}()'' con el paso anterior ''{1}()''
inspection.redundant.stream.optional.call.fix.collect.to.ordered.family.name=Recolecta a 'LinkedHashSet'
inspection.redundant.stream.optional.call.fix.family.name=Quitar llamada en cadena redundante
inspection.redundant.stream.optional.call.fix.name=Quitar llamada ''{0}()''
inspection.redundant.stream.optional.call.fix.replace.terminal=Reemplazar la operación terminal
inspection.redundant.stream.optional.call.fix.replace.terminal.text=Reemplazar operación de terminal con ''{0}()''
inspection.redundant.stream.optional.call.message=Llamada redundante ''{0}()''
inspection.redundant.stream.optional.call.message.with.explanation=Llamada redundante de ''{0}()'': {1}
inspection.redundant.stream.optional.call.option.streamboxing=Reportar boxing redundante en Stream.map()
inspection.redundant.unmodifiable.call.description=Uso redundante de envoltorios de colecciones inmodificables
inspection.redundant.unmodifiable.call.display.name="Uso redundante del contenendor ''{0}''"
inspection.redundant.unmodifiable.call.unwrap.argument.quickfix=Desenvolver argumento
inspection.reflect.handle.invocation.argument.not.array=El argumento es de tipo no arreglo
inspection.reflect.handle.invocation.argument.not.exact=El tipo de argumento debe ser exactamente ''{0}''
inspection.reflect.handle.invocation.primitive.argument.null=El argumento del tipo ''{0}'' no puede ser ''null''
inspection.reflect.handle.invocation.receiver.incompatible=El tipo del receptor de la llamada es incompatible: se espera ''{0}''
inspection.reflect.handle.invocation.receiver.null=El receptor de la llamada es 'nulo'
inspection.reflect.handle.invocation.result.not.assignable=Debe ser casted a ''{0}'' o su superclase
inspection.reflect.handle.invocation.result.not.exact=Debe ser convertido a ''{0}''
inspection.reflect.handle.invocation.result.null=Valor devuelto es siempre 'null'
inspection.reflect.handle.invocation.result.void=El tipo de retorno es 'void'
inspection.reflection.invocation.argument.count={0,choice,0#No se esperan argumentos|1#Se espera un argumento|1<Se esperan {0} argumentos}
inspection.reflection.invocation.argument.not.assignable=El argumento no se puede asignar a ''{0}''
inspection.reflection.invocation.array.not.assignable=El arreglo {0,choice,1#tiene|1<tiene} {0,choice,1#tipo|1<tipos} incompatibles
inspection.reflection.invocation.item.count={0,choice,0#Un array vacío es|1#El array con un solo elemento es|1<{0} elementos en el array} son esperados
inspection.reflection.invocation.item.not.assignable=El elemento de la matriz no se puede asignar a ''{0}''
inspection.reflection.invocation.name=Desajuste de argumentos de invocación de Reflection
inspection.reflection.member.access.cannot.resolve.constructor.arguments=No se puede resolver el constructor con tipos de argumentos especificados
inspection.reflection.member.access.cannot.resolve.field=No se puede resolver el campo ''{0}''
inspection.reflection.member.access.cannot.resolve.method=No se puede resolver el método ''{0}''
inspection.reflection.member.access.cannot.resolve.method.arguments=No se puede resolver el método ''{0}'' con los tipos de argumento especificados
inspection.reflection.member.access.check.exists=Verifica que el campo/método exista en clases no finales
inspection.reflection.member.access.check.exists.exclude.chooser=Clase para excluir
inspection.reflection.member.access.check.exists.exclude.label=Excluir clases:
inspection.reflection.member.access.constructor.not.public=El constructor no es público
inspection.reflection.member.access.field.not.in.class=El campo ''{0}'' no está declarado en la clase ''{1}''
inspection.reflection.member.access.field.not.public=El campo ''{0}'' no es público
inspection.reflection.member.access.fix.family.name=Usa método de reflexión apropiado
inspection.reflection.member.access.method.not.in.class=El método ''{0}'' no está declarado en la clase ''{1}''
inspection.reflection.member.access.method.not.public=El método ''{0}'' no es público
inspection.reflection.member.access.name=Acceso reflexivo a miembro de clase no existente o no visible
inspection.reflection.visibility.name=Problemas de acceso reflexivo a través de módulos
inspection.remove.literal.underscores.display.name=Guiones bajos en literales numéricos
inspection.remove.literal.underscores.family.name=Eliminar guiones bajos de literales numéricos
inspection.replace.inefficient.stream.count.display.name=Cadenas de llamadas a Stream API ineficaces que terminan con count()
inspection.replace.javadoc.display.name=Comentario reemplazable con Javadoc
inspection.replace.methodref.ternary.quickfix=Reemplazar con lambda que verifique nulos
inspection.replace.ternary.quickfix=Reemplazar con ''{0} != null ?:''
inspection.replace.with.bulk.file.attributes.read.fix.family.name=Reemplazar por llamada masiva a "Files.readAttributes()"
inspection.replace.with.bulk.fix.family.name=Reemplazar con llamada a método en bloque
inspection.replace.with.bulk.fix.name=Reemplazar iteración con llamada a granel ''{0}()''
inspection.replace.with.bulk.message=La iteración se puede reemplazar con llamada masiva ''{0}()''
inspection.replace.with.bulk.wrap.arrays=Utilizar 'Arrays.asList()' para encapsular arrays
inspection.replace.with.enhanced.switch.statement.fix.name=Reemplazar por 'switch' mejorado
inspection.replace.with.javadoc=Reemplazar con comentario Javadoc
inspection.replace.with.javadoc.comment=El comentario se puede convertir a Javadoc
inspection.replace.with.old.style.switch.statement.fix.name=Reemplazar por una declaración 'switch' de estilo antiguo
inspection.replace.with.regular.string.literal.fix=Reemplazar con literal de cadena regular
inspection.replace.with.string.concatenation.fix=Reemplazar por concatenación de cadenas
inspection.replace.with.string.template.fix=Reemplazar con plantilla de cadena
inspection.replace.with.switch.expression.fix.family.name=Migrar a switch expression mejorada
inspection.replace.with.switch.expression.fix.name=Reemplazar con expresión 'switch'
inspection.replace.with.text.block.fix=Reemplazar con bloque de texto
inspection.replace.with.trivial.lambda.fix.family.name=Reemplazar por lambda trivial
inspection.replace.with.trivial.lambda.fix.name=Reemplazar con lambda que devuelva ''{0}''
inspection.require.non.null=Sustituir comprobación null por llamada estática Objects/Stream
inspection.require.non.null.description=Se puede reemplazar la verificación de Null por una llamada al método
inspection.require.non.null.message={0, choice, 1#''if'' instrucción|2#Expresión condicional} puede reemplazarse con una llamada a ''{1}()''
inspection.require.non.null.no.warning.replacement.bigger=No advertir si el reemplazo es más largo que el original
inspection.require.non.null.quickfix=Sustituir {0, choice, 1#sentencia ''if''|2#expresión condicional} por llamada ''{1}()''
inspection.return.separated.from.computation.descriptor=Retorno separado del cálculo del valor de ''{0}''
inspection.return.separated.from.computation.family.quickfix=Mover 'return' mas próxima al cómputo del resultado
inspection.return.separated.from.computation.name='return' separado del resultado de la computación
inspection.return.separated.from.computation.quickfix=Acercar ''return'' al cálculo del valor de  ''{0}''
inspection.same.parameter.display.name=El parámetro del método siempre tiene el mismo valor
inspection.same.parameter.fix.family.name=Inlinear parámetro como valor constante
inspection.same.parameter.fix.name=Valor embutido ''{1}'' para el parámetro ''{0}''
inspection.same.parameter.problem.descriptor=El valor real del parámetro <code>#ref</code> siempre es ''{0}''
inspection.simplifiable.comparator.comparing.message=Llamada de ''{0}()'' innecesaria
inspection.simplifiable.comparator.display.name=Se puede simplificar el método Comparator
inspection.simplifiable.comparator.entry.comparator.message=''{0}'' puede usarse en su lugar
inspection.simplifiable.comparator.fix.comparing.family.name=Eliminar llamada redundante
inspection.simplifiable.comparator.fix.entry.comparator.family.name=Usar comparador de 'Map.Entry' predefinido
inspection.simplifiable.comparator.fix.remove.name=Eliminar llamada a ''{0}()''
inspection.simplifiable.comparator.fix.replace.name=Eliminar la llamada de ''{0}()'' y usar ''{1}()''
inspection.simplifiable.comparator.fix.reversed.family.name=Simplifica el método comparador reemplazando 'max' por 'min'
inspection.simplifiable.comparator.fix.reversed.name=Reemplazar con ''{0}'' simplificando el comparador
inspection.simplifiable.comparator.reversed.message=El método Comparator se puede simplificar si se reemplaza la llamada ''{0}()'' por ''{1}()''
inspection.simplify.collector.display.name=Colector simplificable
inspection.simplify.collector.fix.family.name=Simplificar recolector de cascada
inspection.simplify.collector.fix.name=Usa el recolector ''Collectors.{0}()''
inspection.simplify.collector.message=Se puede simplificar con el ''{0}()'' collector
inspection.simplify.for.each.extract.intermediate.operations=Extraer operaciones intermedias
inspection.simplify.foreach.display.name=Llamada a forEach() simplificable
inspection.simplify.optional.call.chains.display.name=Se puede simplificar la cadena de llamada de Optional
inspection.simplify.stream.api.call.chains.display.name=Se puede simplificar la cadena de llamadas a Stream API
inspection.slow.abstract.set.remove.all.description=La llamada a 'set.removeAll(list)' puede funcionar lentamente
inspection.slow.abstract.set.remove.all.fix.family.name=Usa 'Set.remove' en vez de 'Set.removeAll'
inspection.slow.list.contains.all.description=La llamada a 'list.containsAll(collection)' puede tener un bajo rendimiento
inspection.slow.list.contains.all.fix.family.name=Envolver en constructor 'HashSet'
inspection.slow.list.contains.all.fix.name=Incrustar ''{0}'' en el constructor ''HashSet''
inspection.sorted.collection.with.non.comparable.keys.display.name=Colección ordenada con elementos no comparables
inspection.sorted.collection.with.non.comparable.keys.message=Construcción de colección ordenada con elementos no comparables
inspection.sorted.collection.with.non.comparable.keys.option.type.parameters=No informar parámetros de tipo no comparables
inspection.static.pseudo.functional.style.method.display.name=Llamada de función seudo Guava se puede convertir a llamada de API de secuencia
inspection.stream.api.migration.can.be.replaced.with.call=Puede reemplazarse con llamada ''{0}''
inspection.stream.to.loop.display.name=La cadena de llamadas de la API de secuencia se puede reemplazar por un bucle
inspection.string.repeat.can.be.used.display.name=Se puede utilizar String.repeat()
inspection.string.template.migration.concatenation.message=La concatenación puede reemplazarse por una plantilla de cadena
inspection.string.template.migration.name=Se puede utilizar plantilla de cadena
inspection.string.template.migration.string.message=La cadena se puede reemplazar con plantilla
inspection.string.template.reverse.migration.name=La plantilla de cadena puede ser una cadena concatenada
inspection.string.template.reverse.migration.string.message=Las plantillas de string pueden sustituirse por concatenaciones de string
inspection.surround.if.family=Rodear con condicional if
inspection.surround.if.quickfix=Rodear con ''si ({0}{1})''
inspection.suspicious.list.remove.display.name='List.remove()' sospechoso en bucle
inspection.suspicious.return.byte.input.stream.convert.to.unsigned=Convertir a un byte sin signo
inspection.suspicious.return.byte.input.stream.name=Valor de byte sospechoso regresado desde 'InputStream.read()'
inspection.suspicious.ternary.in.varargs.description=El operador ternario en la llamada vararg contiene ramas de array y no array
inspection.suspicious.ternary.in.varargs.display.name=Operador ternario sospechoso en llamada al método varargs
inspection.suspicious.ternary.in.varargs.quickfix=Envolver en inicializador de matriz
inspection.switch.expression.backward.expression.migration.inspection.name=expresión 'switch' se puede reemplazar con la instrucción antigua 'switch'
inspection.switch.expression.backward.migration.inspection.name=Enhanced "switch"
inspection.switch.expression.backward.statement.migration.inspection.name=El estado 'switch' se puede reemplazar por el antiguo estilo 'switch'
inspection.switch.expression.migration.expression.max.statements=Número máximo de sentencias en una rama para convertir a una expresión de switch
inspection.switch.expression.migration.inspection.name=Declaración reemplazable por 'switch' mejorado
inspection.switch.expression.migration.inspection.switch.description=La declaración de conmutación se puede reemplazar con la 'conmutación' mejorada
inspection.switch.expression.migration.option.expression.max.statements=No reportar switch con más de {0} {0, choice, 1#sentencia|2#sentencias} en una única rama
inspection.switch.expression.migration.warn.only.on.expression=Mostrar advertencia sólo si la conversión a expresión es posible
inspection.switch.labeled.rule.can.be.code.block.display.name=Regla de switch con etiquetas puede tener un bloque de código
inspection.switch.labeled.rule.can.be.code.block.expression.message=La expresión del resultado de la regla con etiqueta puede envolverse con un bloque de código
inspection.switch.labeled.rule.can.be.code.block.fix.expression.name=Envolver la expresión del resultado de la regla etiquetada con el bloque de código.
inspection.switch.labeled.rule.can.be.code.block.fix.statement.name=Envolver la sentencia de regla etiquetada con el bloque de código
inspection.switch.labeled.rule.can.be.code.block.statement.message=La sentencia de la regla etiquetada se puede envolver con un bloque de código
inspection.text.block.backward.migration.message=El bloque de texto se puede convertir a un literal de cadena regular
inspection.text.block.backward.migration.name=El bloque de texto se puede reemplazar con un literal de cadena simple
inspection.text.block.migration.concatenation.message=La concatenación puede ser reemplazada por bloque de texto
inspection.text.block.migration.name=Se puede usar bloque de texto
inspection.text.block.migration.string.message=La cadena puede ser reemplazada por un bloque de texto
inspection.text.block.migration.suggest.literal.replacement=Informar sobre literales de cadena única
inspection.trailing.whitespaces.in.text.block.message=Caracteres de espacio en blanco finales dentro del bloque de texto
inspection.trailing.whitespaces.in.text.block.name=Espacio en blanco final en el bloque de texto
inspection.trailing.whitespaces.in.text.block.remove.whitespaces=Eliminar caracteres en blanco finales
inspection.trailing.whitespaces.in.text.block.replaces.whitespaces.with.escapes=Quitar los espacios en blanco finales
inspection.trivial.functional.expression.usage.display.name=Uso trivial de la expresión funcional
inspection.unchecked.warning.display.name=Advertencia no comprobada
inspection.undeclared.service.usage.message=El uso del servicio ''{0}'' no está declarado en module-info
inspection.undeclared.service.usage.name=Uso de servicio no declarado en 'module-info'
inspection.unresolved.module.dependencies.problem.descriptor=Dependencias no resueltas del módulo
inspection.unused.assignment.display.name=Asignación no utilizada
inspection.unused.assignment.option=Reportar expresiones de prefijos que pueden remplazarse con una expresión binaria
inspection.unused.assignment.option1=Reportar las expresiones postfix donde el valor cambiado no se usa
inspection.unused.assignment.option2=Reportar inicializadores redundantes
inspection.unused.assignment.option3=Informar variables de patrón cuyos valores nunca se utilizan
inspection.unused.assignment.option4=Reportar parámetros de iteración cuyo valor no se usa nunca
inspection.unused.assignment.problem.descriptor1=La variable <code>#ref</code> #loc no se utiliza nunca
inspection.unused.assignment.problem.descriptor2=La variable <code>{0}</code> inicializador <code>#ref</code> #loc es redundante
inspection.unused.assignment.problem.descriptor3=El valor <code>{0}</code> asignado a <code>#ref</code> #loc nunca se utiliza
inspection.unused.assignment.problem.descriptor4=El valor cambiado en <code>#ref</code> #loc nunca se utiliza
inspection.unused.assignment.problem.descriptor5=El valor de la variable patrón <code>#ref</code> #loc nunca es usado
inspection.unused.assignment.problem.descriptor6=El valor del parámetro de iteración foreach <code>#ref</code> #loc nunca se usa
inspection.unused.assignment.remove.assignment.quickfix=Eliminar asignación redundante
inspection.unused.assignment.remove.assignment.quickfix.title=Quitar asignación redundante
inspection.unused.assignment.remove.initializer.quickfix=Quitar inicializador redundante
inspection.unused.assignment.remove.initializer.quickfix.title=Eliminar inicializador redundante
inspection.unused.display.name=Declaración no usada
inspection.unused.parameter.composer=El parámetro <code>#ref</code> no se usa en ninguna implementación
inspection.unused.parameter.composer1=El parámetro <code>#ref</code> no se usa en este método ni en ninguno de sus métodos de anulación
inspection.unused.parameter.delete.family=Eliminar parámetro(s) no usado(s) de forma segura
inspection.unused.parameter.delete.quickfix=Eliminación segura del parámetro no utilizado ''{0}''
inspection.unused.parameter.problem.descriptor=Parámetro <code>#ref</code> no se usa
inspection.unused.return.value.display.name=Método puede declararse 'void'
inspection.unused.return.value.make.void.quickfix=Hacer el método 'void'
inspection.unused.return.value.problem.descriptor=El valor de retorno del método nunca es usado
inspection.unused.symbol.check.accessors=Getters/setters
inspection.unused.symbol.check.classes=Clases:
inspection.unused.symbol.check.fields=Campos:
inspection.unused.symbol.check.inner.classes=Clases internas:
inspection.unused.symbol.check.localvars=Variables locales
inspection.unused.symbol.check.methods=Métodos:
inspection.unused.symbol.check.parameters=Parámetros en
inspection.unused.symbol.check.parameters.excluding.hierarchy=Excluyendo jerarquía
inspection.use.bulk.operation.display.name=Se puede utilizar una operación masiva en lugar de la iteración
inspection.value.based.warnings=Advertencias basadas en el valor
inspection.value.based.warnings.synchronization=Intenta sincronizar una instancia de una clase basada en valores
inspection.variable.assigned.to.itself.display.name=Variable asignada a sí misma
inspection.wrapper.type.may.be.primitive.display.name=Tipo de wrapper puede ser primitivo
inspection.wrapper.type.may.be.primitive.fix.name=Convertir el tipo contenedor a primitivo
inspection.wrapper.type.may.be.primitive.name=El tipo puede ser primitivo
intention.add.explicit.type.arguments.family=Añadir argumentos de tipo explícitos
intention.add.on.demand.static.import.family=Add import static bajo demanda
intention.add.on.demand.static.import.text=Agregar importación estática a petición para ''{0}''
intention.add.single.member.import.text=Añadir import de ''{0}''
intention.add.single.member.static.import.family=Añadir importación estática de miembro único
intention.add.single.member.static.import.text=Añadir importación estática para ''{0}''
intention.assign.field.from.parameter.family=Asignar parámetro a campo
intention.assign.field.from.parameter.text=Asignar parámetro a campo ''{0}''
intention.bind.fields.from.parameters.family=Vincular parámetros a campos
intention.bind.fields.from.parameters.text=Vincular los {0} parámetros a los campos
intention.break.string.on.line.breaks.text=Dividir cadena en '\n'
intention.category.annotations=Java/Anotaciones
intention.category.collections=Java/Colecciones
intention.category.comments=Java/Comentarios
intention.category.concurrency=Java/Simultaneidad
intention.category.conditional.operator=Java/Condiciones
intention.category.control.flow=Java/Flujo de control
intention.category.declaration=Java/Declaración
intention.category.expressions=Java/Expresiones
intention.category.i18n=Java/Internacionalización
intention.category.imports=Java/Imports
intention.category.junit=Java/JUnit
intention.category.other=Java/Otros
intention.category.refactorings=Java/Refactorizaciones
intention.category.streams=Java/Streams
intention.category.strings=Java/Cadenas
intention.category.try.statements=Java/Instrucciones try
intention.compose.function.family=Reemplace llamada anidada de función con composición
intention.compose.function.text=Reemplazar la llamada de función anidada con la llamada andThen
intention.convert.color.representation.family=Convertir representación del color
intention.convert.color.representation.text=Convertir a ''nuevo Color{0}''
intention.convert.compact.constructor.to.canonical=Convertir constructor compacto a canónico
intention.convert.to.single.return.command.text=Transformar cuerpo para formar un único punto de salida
intention.convert.to.single.return.name=Transformar el cuerpo a la forma de punto de salida único
intention.convert.to.single.return.progress.title=Transformar cuerpo a forma de un solo punto de salida
intention.create.annotation.method.from.usage=Crear método de anotación ''{0}()''
intention.create.field.from.parameter.family=Crear campo de parámetro
intention.create.field.from.parameter.text=Crear campo para el parámetro ''{0}''
intention.create.switch.statement=Crear switch
intention.create.test.dialog.choose.super.class=Elegir superclase
intention.create.test.dialog.class.name=Nombre de la clase:
intention.create.test.dialog.fix.library=Arreglar
intention.create.test.dialog.generate=Generar:
intention.create.test.dialog.java=Java
intention.create.test.dialog.library.not.found={0} biblioteca no encontrada en el módulo
intention.create.test.dialog.select.methods=Generar prueba y métodos por:
intention.create.test.dialog.setUp=Configurar/@Before
intention.create.test.dialog.show.inherited=Mostrar métodos inherited
intention.create.test.dialog.super.class=Superclase:
intention.create.test.dialog.tearDown=tearDown/@After
intention.create.test.dialog.testing.library=Probar library:
intention.encapsulate.field.text=Encapsular campo
intention.error.cannot.create.class.message=No se puede crear la clase ''{0}''
intention.error.cannot.create.class.title=No se ha podido crear la clase
intention.error.make.sealed.class.different.modules=Algunos de los herederos están en módulos diferentes
intention.error.make.sealed.class.different.packages=El módulo no tiene nombre y algunos de los herederos están en un paquete distinto
intention.error.make.sealed.class.has.anonymous.or.local.inheritors=Algunos herederos son anónimos o locales
intention.error.make.sealed.class.inheritors.not.in.java.file=Algunos de los herederos no están en archivos Java
intention.error.make.sealed.class.interface.has.no.inheritors=La interfaz no tiene herederos
intention.error.make.sealed.class.is.used.in.functional.expression=La clase se utiliza en la expresión funcional
intention.extract.if.condition.family=Extraer condición 'if'
intention.extract.if.condition.text=Extraer si ({0})
intention.extract.map.step.family=Extraer al método de mapeo separado
intention.extract.map.step.text=Extraer la variable ''{0}'' a la operación ''{1}''
intention.extract.method.text=Extraer método
intention.extract.set.from.comparison.chain.family=Extraer conjunto de cadena de comparación
intention.extract.set.from.comparison.chain.popup.title=Extraer conjunto de la cadena de comparación
intention.extract.set.from.comparison.chain.replace.all=Reemplazar todas las ocurrencias
intention.extract.set.from.comparison.chain.replace.only.this=Reemplazar solo esta ocurrencia
intention.family.add.javadoc=Añadir Javadoc
intention.family.copy.abstract.method.implementation=Copiar la implementación del método abstracto
intention.family.create.a.class.in.package=Crear clase en el paquete
intention.family.edit.method.contract=Edita el contrato del método
intention.family.edit.range=Editar rango
intention.family.expand.static.import=Expandir importación estática
intention.family.fix.bounded.wildcards=Arreglar los comodines delimitados
intention.family.make.external.annotations.explicit=Hacer explícitas las anotaciones externas
intention.family.make.inferred.annotations.explicit=Hacer explícitas las anotaciones inferidas
intention.family.move.it=Desplázalo
intention.family.name.add.main.method=Añadir método 'main'
intention.family.name.box.primitive.in.conditional.branch=Valor primitivo de caja en rama condicional
intention.family.name.convert.record.to.class=Convertir registro a clase
intention.family.name.delete.possible.side.effects=Eliminar posibles efectos secundarios
intention.family.name.delete.private.method=Eliminar método privado
intention.family.name.dismiss=Descartar
intention.family.name.extract.possible.side.effects=Extraer posibles efectos secundarios
intention.family.name.ignore.project=No volver a mostrar en este proyecto
intention.family.name.make.sealed=Sellar clase
intention.family.name.move.class.to.test.root=Mover clase a raíz de pruebas
intention.family.name.rename.to.ignored=Renombrar a ignorado
intention.family.name.set.explicit.variable.type=Establecer tipo de variable explícita
intention.family.name.synchronize.inline.snippet=Sincronizar fragmento en línea
intention.family.name.upgrade.jdk=Actualizar JDK
intention.family.put.arguments.on.one.line=Poner argumentos en una línea
intention.family.put.arguments.on.separate.lines=Poner los argumentos en líneas separadas
intention.family.put.parameters.on.one.line=Poner parámetros en una línea
intention.family.put.parameters.on.separate.lines=Poner parámetros en líneas separadas
intention.family.put.record.components.on.one.line=Poner componentes de registro en una línea
intention.family.put.record.components.on.separate.lines=Colocar componentes registro en líneas separadas
intention.family.replace.optional.ispresent.condition.with.functional.style.expression=Replace Optional presence condition with functional style expression
intention.family.sort.content=Ordenar contenido
intention.family.swap.if.statements=Intercambiar instrucciones 'if'
intention.family.unimplement.interface.class=Cancelar implementación interfaz/clase
intention.family.variable.access.from.inner.class=Mover a objeto anónimo
intention.implement.abstract.class.default.text=Implementar Clase Abstracta
intention.implement.abstract.class.family=Implementar clase abstracta o interfaz
intention.implement.abstract.method.command.name=Implementar método
intention.implement.abstract.method.error.no.classes.message=No se encontraron clases donde se puede implementar este método
intention.implement.abstract.method.error.no.classes.title=No se han encontrado clases
intention.implement.abstract.method.family=Implementar método abstracto
intention.implement.abstract.method.searching.for.descendants.progress=Buscando descendientes...
intention.implement.abstract.method.text=Implementar método ''{0}''
intention.inline.map.family=Método de mapeo de stream en línea
intention.inline.map.inline.text=Cuerpo interno ''{0}()'' en la siguiente llamada ''{1}()''
intention.inline.map.merge.text=Fusionar llamada ''{0}()'' y llamada ''{1}()''
intention.introduce.variable.text=Introducir variable local
intention.invert.if.condition=Invertir condición 'if'
intention.make.final.fixer.if=Hacer que ''{0}'' sea efectivamente final moviendo el inicializador a la sentencia ''if''
intention.make.final.fixer.stream=Hacer ''{0}'' efectivamente final usando API de flujo
intention.merge.filter.family=Combinar filtros
intention.merge.filter.text=Combinar cadena de filtros
intention.move.field.assignment.to.declaration=Mover asignación a declaración de campo
intention.move.initializer.to.constructor=Pasar inicializador a constructor
intention.move.initializer.to.set.up=Mover el inicializador al método de configuración
intention.name.collapse.into.loop=Contraer en bucle
intention.name.copy.to.final.temp.variable=Copiar ''{0}'' a una variable temporal {1, choice, 0#|1#final }
intention.name.delete.method=Eliminar método ''{0}()''
intention.name.delete.method.only=... y nada más
intention.name.delete.method.title=Eliminar método ''{0}()''
intention.name.delete.method.with.callees=… junto con otros métodos privados utilizados solo allí
intention.name.extract.method.to.new.interface=Extraer método ''{0}'' a nueva interfaz
intention.name.iterate.over=Iterar sobre {0}
intention.name.make.variable.final=Hacer que {1, choice, 0#''''{0}''''|1#variables} sean finales
intention.name.move.class.to.test.root=Mover ''{0}'' a raíz de prueba
intention.name.move.into.if.branches=Mover hacia arriba dentro de las ramas de la sentencia `if`
intention.name.pull.method.up=Subir el método ''{0}''
intention.name.pull.method.up.and.make.it.abstract.conditionally=Mover método ''{0}'' a ''{1}''{2, choice, 0# y hacerlo abstracto|1#}
intention.name.pull.method.up.make.it.abstract=Subir método ''{0}'' y convertirlo en abstracto
intention.name.set.variable.type=Establecer tipo de variable a ''{0}''
intention.name.transform.variables.into.final.one.element.array=Transformar {1, choice, 0#''''{0}''''|1#variables} en matriz de un único elemento final
intention.name.upgrade.jdk.to=Actualizar JDK a {0}+
intention.override.method.text=Sobreescribir el método ''{0}''
intention.replace.concatenation.with.formatted.output.family=Reemplazar concatenación con salida formateada
intention.replace.concatenation.with.formatted.output.text=Reemplazar '+' con 'java.text.MessageFormat.format()'
intention.sequenced.collection.can.be.used.display.name=Se puede usar el método SequencedCollection
intention.sequenced.collection.can.be.used.fix.name=Reemplazar por la llamada al método SequencedCollection
intention.split.declaration.assignment.text=Dividir en declaración y asignación
intention.split.declaration.family=Dividir declaración
intention.split.filter.family=Dividir filtro
intention.split.filter.text=Dividir en cadena de filtrado
intention.split.if.family=Dividir 'si'
intention.split.if.text=Dividir en 2 sentencias 'si'
intention.split.switch.branch.with.several.case.values.copy.text=Copiar rama del 'switch'
intention.split.switch.branch.with.several.case.values.family=Dividir rama switch con varios valores de caso en ramas 'switch' individuales
intention.split.switch.branch.with.several.case.values.split.text=Separar valores de rama 'switch'
intention.surround.resource.with.ARM.block=Rodear con bloque try-with-resources
intention.surround.with.ARM.block.template=try-con-recursos
intention.text.add.method.contract.to.0=Añadir el contrato de método a ''{0}()''...
intention.text.add.range.to.0=Añadir rango a ''{0}''...
intention.text.annotate.externally=Anotar externamente
intention.text.collapse.repeating.annotations=Contraer anotaciones repetidas
intention.text.create.a.class.in.0=Crear una clase en ''{0}''
intention.text.create.a.class.in.package.preview=Abre un diálogo para crear una clase en el paquete ''{0}''
intention.text.edit.method.contract.of.0=Editar contrato del método ''{0}()''...
intention.text.edit.range.of.0=Editar rango de ''{0}''...
intention.text.fix.method.0.parameters.with.bounded.wildcards=Corregir los parámetros del método ''{0}'' con comodines delimitados
intention.text.generate.missing.test.methods=Generar métodos de prueba faltantes
intention.text.implements.list.remove.others=Quitar otras referencias de ''{0}''
intention.text.replace.all.delete.import=Reemplazar todo y eliminar la importación
intention.text.replace.implements.with.static.import=Reemplazar implements con importación estática
intention.text.replace.static.import.with.qualified.access.to.0=Reemplazar importación estática por acceso calificado a {0}
intention.text.replace.this.occurrence.keep.import=Reemplazar esta aparición y conservar la importación
intention.text.unimplement.0=Desimplementar {0}
intention.unroll.loop.family=Desenrollar bucle
intention.unwrap.else.branch=Desplegar rama 'else'
intention.unwrap.else.branch.changes.semantics=Desempaquetar la rama 'else' (cambia la semántica)
intention.use.single.member.static.import.text=Utilizar importación estática para ''{0}''
intention.wrap.with.unmodifiable=Envolver con una colección o mapa inmutable
intention.wrap.with.unmodifiable.list=Envolver con lista no modificable
intention.wrap.with.unmodifiable.map=Envolver con mapa inmodificable
intention.wrap.with.unmodifiable.set=Envolver con conjunto inmodificable
interface.not.allowed=No se permite la interfaz
interfaces.cannot.be.inlined=Las interfaces no se pueden insertar
introduce.functional.variable.accessibility.conflict=La variable {0} no es efectivamente final y no será accesible dentro de la expresión funcional
introduce.functional.variable.interface.chooser.title=Elija la interfaz funcional aplicable: {0} -> {1}
introduce.functional.variable.nothing.found.message=No se encontraron interfaces funcionales aplicables
introduce.parameter.advertisement.text=Presiona {0} para delegar mediante un método de sobrecarga o {1} para mostrar más opciones
introduce.parameter.inlay.title.delegate=Delegado
introduce.parameter.inlay.tooltip.delegate=Delegar mediante método de sobrecarga
introduce.parameter.object.no.accessor.conflict.message={0, choice, 0#Getter|1#Setter} es requerido para el campo ''{1}''
introduce.variable.change.semantics.warning=Extraer la expresión seleccionada cambiaría la semántica de toda la expresión.
introduce.variable.change.type.adv=Presiona {0} para cambiar el tipo
introduce.variable.reassign.adv=Presiona {0} para reasignar la variable existente
invalid.extracted.class.name=''{0}'' es un nombre de clase extraído no válido
invert.quickfix.preview=Abre un cuadro de diálogo para invertir el booleano seleccionado y elegir su nuevo nombre.
java.completion.tag={0, choice, 1#Etiqueta:|2#Etiquetas:}
java.configurable.logger.identifier.long=El identificador es demasiado largo
java.configurable.logger.not.found=No se encontró el registrador dentro del proyecto
java.configurable.logger.unspecified=No especificado
java.implicit.types.inlay.provider.name=Tipos implícitos
java.implicit.types.lambda.inlay.provider.name=Tipos de parámetro lambda
java.implicit.types.local.inlay.provider.name=Tipos implícitos
java.line.markers=Marcadores de línea Java
java.method.chains.inlay.provider.name=Cadenas de métodos
java.platform.module.system.name=Sistema del Módulo de la Plataforma Java
java.preview.features.accept.notification.link=Aceptar
java.preview.features.alert.title=Alerta de función experimental
java.preview.features.legal.notice=Debes aceptar los términos del aviso legal de la especificación de Java beta para habilitar la compatibilidad con "{0}".<br/><br/><b>La implementación de un borrador previo de la especificación desarrollada en Java Community Process (JCP) se pone a tu disposición únicamente para realizar pruebas y evaluaciones; no es compatible con ninguna especificación de JCP.</b>{1}
java.preview.features.notification.title=Características de la vista previa de Java
java.preview.features.unsupported=El nivel de lenguaje Java <b>{0} (Versión preliminar)</b> utilizado en este proyecto ya no es compatible. Las funciones de análisis de código podrían no funcionar correctamente.<br>Se recomienda encarecidamente migrar a una versión más reciente de Java o dejar de usar las funciones de la versión preliminar.
java.preview.features.unsupported.title=Funciones de vista previa de Java no compatibles
java.preview.features.warning=Versiones más recientes del IDE pueden interrumpir el soporte para las funciones de vista previa de Java. Cuando se publique Java {0}, es posible que se elimine el soporte para el nivel de idioma {1} (Vista previa).
java.preview.level={0} (Vista preliminar)
java.terms.exception=excepción
java.terms.instance.initializer=inicializador de instancia
java.terms.of.annotation.type=Términos de {0} para el tipo de anotación {1}
java.terms.of.anonymous.class={0} de clase anónima
java.terms.of.class=Términos de la clase {1}: {0}
java.terms.of.enum={0} de enum {1}
java.terms.of.interface=términos de la interfaz {1} de {0}
java.terms.region=región
java.terms.static.initializer=inicializador static
java.terms.type.parameter=parámetro de tipo
java.terms.variable.of.method={0} de {1}
javadoc.apiNote=Nota de API:
javadoc.author=Autor:
javadoc.candidates.not.found=<html>No se encontraron candidatos para la llamada al método <b>{0}</b>.</html>
javadoc.constructor.candidates=<html>Los candidatos para nuevo <b>{0}</b>() son:<br>{1}</html>
javadoc.deprecated=Deprecated
javadoc.description.copied.from.class=Desde la clase:
javadoc.description.copied.from.field=Copiado de campo:
javadoc.description.copied.from.interface=De la interface:
javadoc.description.inferred.annotation.hint=i
javadoc.documentation.url.checked=Se {0, choice, 1#ha|2#han} comprobado la siguiente documentación {0, choice, 1#URL|2#URL}:
javadoc.edit.api.docs.paths=Editar rutas de documentación API
javadoc.gen.error.module.source.path.is.not.evaluated=IDEA no puede generar Javadoc ya que no se puede evaluar el module-source-path
javadoc.gen.error.modules.without.module.info=IDEA no puede generar Javadoc ya que los módulos {0} no contienen el archivo module-info.java
javadoc.generate.arguments=Argumentos de línea de comandos:
javadoc.generate.exited=\n"javadoc" finalizó con el código de salida $EXIT_CODE$
javadoc.generate.heap.size=Tamaño máximo del montón:(&M)
javadoc.generate.include.jdk.library.sources.in.sourcepath.option=Incluir fuentes JDK y de librerías en -sourcepath
javadoc.generate.link.to.jdk.documentation.option=Enlace a la documentación del JDK (usar la opción -link)
javadoc.generate.locale=Ubicación:(&L)
javadoc.generate.no.classes.in.selected.packages.error=El alcance seleccionado no contiene clases Java
javadoc.generate.no.javadoc.tool=No se puede generar JavaDoc - No se encontró herramienta JavaDoc en {0} o {1}. Por favor, especifique un JDK válido en Configuración | Estructura del Proyecto.
javadoc.generate.no.jdk=No se puede generar JavaDoc: no hay ningún SDK de Java configurado para el proyecto. Especifica un SDK de Java en Ajustes | Estructura del proyecto
javadoc.generate.ok=Generar
javadoc.generate.open.in.browser=Abrir documentación generada en navegador
javadoc.generate.options.hierarchy=Generar árbol de jerarquía
javadoc.generate.options.index=Generar índice
javadoc.generate.options.index.per.letter=Separar índice por letra
javadoc.generate.options.navigator=Generar navegador
javadoc.generate.options.separator=Opciones JavaDoc
javadoc.generate.output.directory=Directorio de salida:(&D)
javadoc.generate.output.directory.browse=Explorar directorio de salida
javadoc.generate.scope.row=Nivel de visibilidad:
javadoc.generate.sources.progress=Buscando fuentes para generar Javadoc
javadoc.generate.tag.list.deprecated=Listado de elementos deprecated
javadoc.generate.temp.file.does.not.exist=El archivo temporal no existe o no se puede abrir
javadoc.generate.temp.file.error=No se puede crear un archivo temporal
javadoc.generate.title=Generar JavaDoc
javadoc.generate.validation.error=Especifica el directorio de salida.
javadoc.implNote=Implementación<br>Nota:
javadoc.implSpec=Implementación<br>Requisitos:
javadoc.method.in.class={0} en clase {1}
javadoc.method.in.interface=Método {0} de la interfaz {1}
javadoc.method.overrides=Sobreescrituras:
javadoc.method.specified.by=Especificado por:
javadoc.option.automatically.insert.closing.tag.javadoc=Insertar etiqueta de cierre automáticamente en JavaDoc
javadoc.option.javadoc.title=JavaDoc
javadoc.see.also=Ver también:
javadoc.settings.title=Javadoc
javadoc.since=Desde:
javadoc.snippet.error.both.substring.and.regex=@{0}: se debe especificar expresión regular o subcadena, pero no ambas
javadoc.snippet.error.duplicate.attribute=@{0}: atributo duplicado: ''{1}''
javadoc.snippet.error.malformed.regular.expression=@{0}: expresión regular mal formada: {1}
javadoc.snippet.error.malformed.replacement=@{0}: sustitución de expresión regular mal formada ''{1}'': {2}
javadoc.snippet.error.markup.tag.expected=Expected markup tag or attribute = Se esperaba una etiqueta de marcado o un atributo
javadoc.snippet.error.missing.required.attribute=@{0}: atributo ''{1}'' ausente
javadoc.snippet.error.regex.too.complex=@{0}: Expresión regular ''{1}'' demasiado compleja
javadoc.snippet.error.unknown.enum.value=@{0}: valor de enumeración desconocido ''{2}'' para {1}; solo se admite {3}
javadoc.snippet.error.unsupported.attribute=@{0}: atributo no soportado: ''{1}''
javadoc.snippet.not.found=fragmento no encontrado: {0}
javadoc.snippet.region.not.found=Región no encontrada: {0}
javadoc.type.parameters=Parámetros de tipo:
javadoc.version=Versión:
jrt.node.short=[JRT]
jvm.logging.configurable.display.name=Registro JVM
jvm.logging.configurable.id=jvm.logging
jvm.logging.configurable.java.group.display.name=Java
label.add.math.max.0.count.to.avoid.possible.semantics.change=Agrega Math.max(0, count) para evitar posibles cambios semánticos
label.canonical.constructor=Constructor canónico
label.class.filter.editor.add.dialog.filter.pattern=Ingresar patrón de filtro:
label.class.pattern.syntax.explanation=Dejar el método en blanco para representar constructores\nCualquier * coincidirá con uno o más caracteres en el nombre calificado (incluidos puntos)
label.compact.constructor=Constructor compacto
label.configurable.logger.generation.variable.name=Nombre de variable::
label.configurable.logger.type=Logger:
label.contract=Contrato:(&C)
label.enter.fully.qualified.class.name=Introduzca el nombre de clase completamente calificado
label.entry.points=Puntos de entrada:
label.forbid.api.usages=Prohibir usos de API más reciente que
label.forbid.api.usages.project=(según configuración del proyecto)
label.from.inclusive=Desde (incluido):
label.ignore.complicated.fix=Ignorar cuando no se puede proporcionar una solución rápida
label.ignored.exceptions=Excepciones ignoradas:
label.implementation=Implementación:
label.implements.method.of_class_or_interface.name=implementa el método de la {0, choice, 0#interfaz|1#clase} ''{1}''.
label.implements.method.of_interfaces=implementa métodos de las siguientes clases/interfases:
label.jvm.class.name=Nombre de clase JVM
label.jvm.field.name=Nombre del campo JVM
label.jvm.method.name=Nombre del método JVM
label.maximal.reported.method.visibility=Visibilidad máxima del método:
label.method=Método ''{0}''
label.minimal.reported.method.usage.count=Conteo mínimo de usos de método para reportar parámetro:
label.mutates=Muta:(&M)
label.name.prefix=Prefijo de nombre:
label.name.suffix=Sufijo del nombre:
label.naming.field=Campo:
label.naming.local.variable=Variable local:
label.naming.parameter=Parámetro:
label.naming.static.field=Campo estático:
label.naming.subclass=Subclase:
label.naming.test.class=Clase de prueba:
label.new.template.name=Nombre nuevo de la plantilla:
label.overrides.method.of_class_or_interface.name=Sobreescritura del método de {0, choice, 0#interfaz|1#clase} ''{1}''.
label.show.import.popup.for=Mostrar auto-importación del tooltip para:
label.to.inclusive=A (inclusivo):
label.unused.declaration.reachable.from.tests.option=Cuando los puntos de entrada están en fuentes de pruebas, marcar las funciones llamadas como:
lambda.tree.node.presentation=lambda
leave.in.same.source.root.item=Dejar en la misma raíz de origen
library.classes.cannot.be.inlined=Las clases de librería no se pueden implementar como línea
line.marker.recursive.call=Llamada recursiva
line.marker.type.external.annotations=Anotaciones externas
line.marker.type.inferred.contract.annotations=Anotaciones del contrato inferidas
line.marker.type.inferred.nullability.annotations=Anotaciones de nulidad inferidas
link.configurable.logger.generator.display.name=<a href='link'>Configuración</a>
link.configure.classes.excluded.from.completion=Configurar clases excluidas de la terminación
list.item.configuration=[configuración] {0}
list.item.suite=[paquete] {0}
listbox.import.package=Paquete
listbox.import.static=Estático
listbox.import.with.subpackages=Con Subpaquetes
live.template.context.consumer.function=Función consumidor
live.template.context.declaration=Declaración
live.template.context.else='else' posición
live.template.context.expression=Expresión
live.template.context.statement=Sentencia
loading.additional.annotations=Cargando anotaciones adicionales...
macro.array.variable=variableArray()
macro.class.name=Nombre clase
macro.classpath.entry=Entrada en el classpath a la cual pertenece el elemento
macro.component.type.of.array=tipoDeComponente(Array)
macro.descendant.classes.enum=descendantClassesEnum(String)
macro.expression.type=tipo(Expression)
macro.file.fully.qualified.package=Ruta completa al paquete del archivo
macro.file.package=Paquete de archivo
macro.guess.element.type.of.container=adivinarTipoDeElemento(Contenedor)
macro.iterable.component.type=tipoDeComponenteIterable(ArrayOrIterable)
macro.iterable.variable=iterableVariable()
macro.javadoc.output.directory=Directorio de salida del JavaDoc
macro.project.classpath=Ruta de clase del proyecto
macro.variable.of.type=variableDeTipo(Tipo)
megabytes.unit=megabytes
methods.to.implement.chooser.title=Seleccionar métodos a implementar
methods.to.override.chooser.title=Seleccionar Métodos para Sobreescribir
methods.to.override.generate.javadoc=Generar JavaDoc faltante
methods.to.override.implement.chooser.title=Seleccionar los métodos a sobreescribir/implementar
module.not.in.requirements=El módulo ''{0}'' no tiene el módulo ''{1}'' en sus requerimientos
module.package.not.exported=El módulo ''{0}'' no exporta el paquete ''{1}'' al módulo ''{2}''
module.package.not.open=El módulo ''{0}'' no abre el paquete ''{1}'' del módulo ''{2}''
module.type.java.description=Los módulos Java se utilizan para desarrollar aplicaciones de escritorio y web **basadas en JVM**, incluidas las aplicaciones que utilizan **Java EE** y otros marcos de desarrollo empresarial.
module.type.java.name=Módulo Java
move.class.import.from.default.package.conflict={0} no será accesible desde el paquete por defecto
move.classes.destination.class.not.found.message=Clase de destino no encontrada
move.classes.invalid.destination.package.name.message=''{0}'' es un nombre de paquete de destino no válido
move.inner.select.target.package.title=Seleccionar Paquete Objetivo
move.member.enum.conflict=El tipo Enum no será aplicable en el contexto actual
move.member.final.initializer.conflict=El inicializador de la final {0} quedará atrás
multiple.usages.of.static.import.found=Se encontraron varias ocurrencias de la importación estática
navigate.to.duplicate.fix=Navegar al duplicado
new.line.when.body.is.presented=Nueva línea cuando se presenta el cuerpo
no.jre.description=<sin JRE>
no.methods.overriding.0.are.found=No se encontraron métodos que sobreescriban {0, choice, 0#|1#''''{1}''''|2#estas clases}
no.patterns=No se configuraron patrones de clase
node.call.hierarchy.unknown.jsp=jsp desconocida
node.hierarchy.java.lang.object=Toda clase deriva de java.lang.Object
non.code.annotations.explanation.external.and.inferred.available=Anotaciones externas y <i>inferidas</i> disponibles.
non.code.annotations.explanation.external.available=Anotaciones externas disponibles.
non.code.annotations.explanation.full.signature=Firma completa:
non.code.annotations.explanation.inferred.available=Anotaciones <i>inferidas</i> disponibles.
notification.content.added.annotations=Se {0} {0, choice, 1#agregó|2#agregaron} {0, choice, 1#anotación|2#anotaciones}
notification.content.change.jdk=Cambiar JDK
notification.content.was.set.up=El JDK ''{0}'' quedó configurado para el proyecto
notification.group.arch.checker=La arquitectura del JDK y del sistema son diferentes
notification.group.jdk.resolve.problems=Error al resolver JDK
notification.group.jshell=Ocurrió un problema con JShell
notification.group.language.level=La vista previa del nivel de lenguaje Java requiere aceptar la licencia
notification.group.legacy.library=La instalación de la biblioteca heredada depende de la IDE
notification.group.preview.features=La vista previa del nivel de lenguaje Java podría interrumpirse
notification.group.redundant.exports=Se pueden quitar las exportaciones/aperturas redundantes
notification.group.repository=Ficheros JAR sincronizados con el repositorio
notification.group.setup.external.annotations=Falló al cargar anotaciones externas
notification.group.setup.jdk=JDK configurado
notification.group.setup.sdk=SDK JDK configurado
notification.group.source.searcher=Error al buscar los orígenes del archivo JAR
notification.group.testintegration=Fallo al generar pruebas para @TestDataPath
notification.navigation.to.overriding.classes=La navegación a las clases que sobrescriben no es posible durante la actualización del índice
notification.navigation.to.overriding.methods=No es posible navegar a los métodos de sobrecarga durante la actualización del índice
notification.text.full.thread.dump.was.successfully.copied.to.clipboard=Se ha copiado el volcado de hilo completo al portapapeles
null.check.surrounder.description=if (expr != null) { ... }
nullable.notnull.annotation.used.label=Anotación utilizada para la generación de código:
nullable.notnull.annotations.panel.title={0} anotaciones:
nullable.notnull.annotations.runtime.instrumentation.tooltip=Agregar aserciones en tiempo de ejecución para métodos o parámetros con anotaciones notnull
nullable.notnull.configuration.dialog.title=Configuración de valores nulos/no nulos
nullable.stuff.inspection.navigate.null.argument.usages.fix.family.name=Navega a los usos de argumentos 'nulos'
nullable.stuff.inspection.navigate.null.argument.usages.fix.family.preview=Muestra una lista de los usos donde 'null' se pasa como argumento.
nullable.stuff.inspection.navigate.null.argument.usages.view.name=Usar ''null'' argumento para el parámetro {0}
offline.inspections.jdk.not.found={0} no encontrado
offline.inspections.library.urls.were.not.resolved=Las raíces {0} de la biblioteca ''{1}'' del módulo ''{2}'' no fueron resueltas
offline.inspections.library.was.not.resolved=Configurar la librería ''{0}'' utilizada en el módulo ''{1}''
offline.inspections.no.source.roots=No se ha detectado ningún directorio raíz del código fuente para el módulo ''{0}''
open.settings.dialog.for.module.preview.text=Abrir el cuadro de diálogo de configuración para el módulo ''{0}''
options.java.attribute.descriptor.abstract.class=Clases e Interfaces//Clase abstracta
options.java.attribute.descriptor.abstract.method=Métodos//Método abstracto
options.java.attribute.descriptor.annotation.attribute.name=Anotaciones//Nombre del atributo de anotación
options.java.attribute.descriptor.annotation.name=Anotaciones//Nombre de la anotación
options.java.attribute.descriptor.anonymous.class=Clases e Interfaces//Clase anónima
options.java.attribute.descriptor.class=Clases e Interfaces//Clase
options.java.attribute.descriptor.constructor.call=Métodos//Llamada al constructor
options.java.attribute.descriptor.constructor.declaration=Métodos//Declaración constructor
options.java.attribute.descriptor.enum=Clases e Interfaces//Enum
options.java.attribute.descriptor.implicit.anonymous.parameter=Parámetros//Parámetro implícito de clase anónima
options.java.attribute.descriptor.inherited.method=Métodos//Método heredado
options.java.attribute.descriptor.instance.field=Campos de clase//Campo de instancia
options.java.attribute.descriptor.instance.final.field=Campos de clases//Campos finales de la instancia
options.java.attribute.descriptor.interface=Clases e interfaces//Interfaz
options.java.attribute.descriptor.javadoc.comment=Comentarios//JavaDoc//Texto
options.java.attribute.descriptor.javadoc.markup=Comentarios//JavaDoc//Marcado
options.java.attribute.descriptor.javadoc.tag=Comentarios//JavaDoc//Etiqueta
options.java.attribute.descriptor.javadoc.tag.value=Comentarios//JavaDoc//Valor de etiqueta
options.java.attribute.descriptor.lambda.parameter=Parámetros//Parámetro lambda
options.java.attribute.descriptor.method.call=Métodos//Llamada a método
options.java.attribute.descriptor.method.declaration=Métodos//Declaración de método
options.java.attribute.descriptor.method.imported.call=Métodos//Llamada a método importado estático
options.java.attribute.descriptor.package.private=Visibilidad//Package-private
options.java.attribute.descriptor.private=Visibilidad//Privado
options.java.attribute.descriptor.protected=Visibilidad//Protected
options.java.attribute.descriptor.public=Visibilidad//Public
options.java.attribute.descriptor.reassigned.local.variable=Variables//Variable local reasignada
options.java.attribute.descriptor.reassigned.parameter=Parámetros//Parámetro reasignado
options.java.attribute.descriptor.static.field=Atributos de clase//Campo estático
options.java.attribute.descriptor.static.final.field=Campos clase//constante (final estático)
options.java.attribute.descriptor.static.final.imported.field=Campos de clase//Constante (campo importado estático y final)
options.java.attribute.descriptor.static.imported.field=Campos de clase // Campo estático importado
options.java.attribute.descriptor.static.method=Métodos//Método estático
options.java.attribute.descriptor.type.parameter=Parametros//Parámetro de tipo
options.java.display.name=Java
override.implement.broken.file.template.message=Por favor, corrija la plantilla de "Cuerpo del método anulado/implementado"
override.implement.broken.file.template.title=Error de Plantilla de Archivo
override.methods.error.no.methods=No se han encontrado métodos para sobrescribir
package.chooser.modal.progress.title=Buscando paquetes...
package.classes=Clases del paquete:
package.dependencies.production.node.text=Clases de producción
package.dependencies.test.node.text=Clases de prueba
package.pattern.provider.hint.label=Utiliza <b>*.txt</b> para buscar todos los archivos 'txt' en el proyecto, <b>file:pathinproject//*</b> para buscar de forma recursiva todos los archivos de un archivo, <b>src:foo..*</b> para buscar de forma recursiva todas las clases en un paquete.
packaging.jlink.artifact.name=JLink
packaging.jlink.artifact.title=Imagen en tiempo de ejecución (JLink)
packaging.jlink.compression.first.level=String sharing
packaging.jlink.compression.level=Nivel de compresión
packaging.jlink.compression.second.level=Archivo comprimido
packaging.jlink.compression.zero.level=Sin compresión
packaging.jlink.verbose.tracing=Habilitar el rastreo detallado
paste.class.command.name=Pegar clase ''{0}''
please.report.a.bug=Informe un error
popup.content.tests.were.not.found.in.module=No se encontraron pruebas en el módulo ''{0}''.
popup.content.tests.were.not.found.in.module.search.in.dependencies=Buscar en las dependencias del módulo en su lugar
popup.content.tests.were.not.found.in.module.use.instead=En su lugar, utilice {0, choice, 0#el módulo {1} |1#uno de {2} }
popup.title.choose.framework=Escoger Framework
popup.title.choose.target.class=Elegir clase destino
popup.title.choose.test=Seleccionar Prueba
popup.title.debug.recent.tests=Depurar pruebas recientes
popup.title.remove.unused.variable=Eliminar variables no usadas
popup.title.select.a.jar.file=Seleccionar un archivo JAR
popup.title.select.qualified.name=Seleccionar nombre completo
popup.title.select.target.code.block=Seleccionar el bloque de código objetivo
postfix.template.condition.array.name=array
postfix.template.condition.boolean.name=booleano
postfix.template.condition.non.void.name=no void
postfix.template.condition.not.primitive.type.name=no es un tipo primitivo
postfix.template.condition.number.name=número
postfix.template.condition.void.name=vacío
postfix.template.editor.choose.class.title=Seleccionar clase
postfix.template.language.level.title=Nivel mínimo de lenguaje:
postfix.template.provider.name=Java
presentable.text.anonymous.class=Clase anónima
presentable.text.code.display=Código
presentable.text.code.from.context=Código de {0}
presentable.text.invalid.element.name=NO VALIDO
press.0.to.see.inheritors.of.1=Pulsa {0} para ver herederos de {1}
press.0.to.see.non.imported.classes=Pulse {0} para ver clases no importadas
pressing.0.twice.without.a.class.qualifier=Al presionar {0} dos veces sin un calificador de clase, se mostrarán todos los métodos estáticos accesibles
progress.creating.class=Creando clase {0}
progress.title.calculate.applicable.types=Calculando tipos aplicables...
progress.title.check.applicability=Comprobar aplicabilidad...
progress.title.checking.if.class.exists=Comprobando si existe la clase de destino ''{0}''
progress.title.collect.method.overriders=Recopilando métodos sobreescritos...
progress.title.detect.overridden.methods=Comprobación de métodos anulados
progress.title.detecting.jdk=Detectando JDK
progress.title.download.library.descriptor=Descargar descriptor de librería
progress.title.find.references.in.implement.extends.lists=Buscar referencias en listas de implementación/extensión...
progress.title.finding.cause=Buscando causa
progress.title.looking.for.jdk=Buscando JDK...
progress.title.looking.for.libraries=Buscando librerías
progress.title.optimize.imports=Optimizando imports...
progress.title.preprocess.usages=Usos de Preprocesador
progress.title.restore.references=Restaurando referencias
progress.title.search.for.overriding.methods=Buscando métodos para reemplazar...
progress.title.searching.for.sub.classes=Buscando subclases
project.problems.fix.description=Encontrados problemas relacionados con '{0}'
project.problems.fix.text=Mostrar problemas relacionados
project.problems.hint.text={0} {0, choice, 0#problema|2#problemas} relacionados
project.problems.title=Problemas relacionados
project.problems.window.title=Problemas relacionados con {0}
prompt.choose.base.class.of.the.hierarchy=Seleccionar clase Base de la Jerarquía para Buscar
prompt.create.non.existing.package=El paquete {0} no existe.\n¿Desea crearlo?
prompt.delete.class={0,choice,1#clase|2#clases}
prompt.delete.field={0,choice,1#campo|2#campos}
prompt.delete.interface={0,choice,1#interfaz|2#interfaces}
prompt.delete.method={0,choice,1#método|2#métodos}
prompt.delete.package={0,choice,1#paquete|2#paquetes}
prompt.delete.type.parameter={0,choice,1#parámetro de tipo|2#parámetros de tipo}
prompt.do.you.want.to.action_verb.the.method.from_class=¿Deseas {1} el método base {0,choice,1#|2#s} en su lugar?
psi.error.incorrect.class.template.message=No se puede crear {0}: plantilla de {1} incorrecta.
psi.search.overriding.progress=Buscando métodos de anulación...
pull.members.up.fix.name=Subir miembros
pull.up.accessible.conflict={0} no será accesible
pull.up.accessible.conflict.1={0} no será accesible desde {1}
pull.up.concrete.inherit.abstract.method.conflict=El diseño concreto {0} heredará un nuevo método abstracto
pull.up.members.usage.view.description.code.references.node=Clase para mover miembros a "{0}"
pull.up.members.usage.view.description.processed.elements.node=Subir miembros de la clase {0}
push.down.anonymous.conflict=No se pueden enviar implementaciones a clases anónimas
push.down.missed.implementation.conflict=El no abstracto {0} no implementará {1}
push.down.static.nonstatic.conflict=Estático {0} no se puede enviar a no estático {1}
push.down.super.method.call.changed.conflict=La llamada al método super se resolverá en otro método
push.method.down.command.name=Push method down...
qualify.static.access.command.name=Calificar acceso estático
qualify.static.call.fix.text=Calificar llamada estática
qualify.static.constant.access=Calificar acceso constante estático
quickfix.add.variable.family.name=Inicializar variable
quickfix.add.variable.text=Inicializar variable ''{0}´´
quickfix.family.avoid.mutation.using.stream.api=Evitar mutación usando Stream API
quickfix.family.change.javadoc.to=Cambiar a ...
quickfix.family.find.cause=Halla el origen
quickfix.family.remove.javadoc.tag=Quitar etiqueta
quickfix.family.remove.redundant.parameter=Eliminar parámetro redundante
quickfix.family.remove.redundant.parameter.types=Eliminar tipos de parámetros redundantes
quickfix.family.replace.cast.type=Cambiar tipo de conversión
quickfix.family.replace.inefficient.stream.count=Reemplazar ineficiente Stream.count()
quickfix.family.replace.optional.chain.with.if.statements=Reemplazar cadena opcional con sentencias if
quickfix.family.replace.stream.api.chain.with.loop=Reemplazar cadena de API de Stream con bucle
quickfix.family.replace.with.java.stream.api.pipeline=Reemplazar con canalización Java Stream API
quickfix.family.replace.with.magic.constant=Sustituir por constante mágica
quickfix.family.replace.with.method.reference=Reemplazar con una referencia de método
quickfix.family.replace.with.optional.of.nullable.chain=Reemplazar con cadena Optional.ofNullable()
quickfix.family.replace.with.stream.api.equivalent=Sustituir con equivalente de Stream API
quickfix.family.simplify.foreach.lambda=Simplifica forEach lambda
quickfix.family.simplify.stream.call.chain=Simplificar cadena de llamada de flujo
quickfix.family.use.flatmap=Usar 'flatMap'
quickfix.family.wrap.with.mutable.collection=Envolver con colección mutable
quickfix.find.cause.description=Intenta resaltar los elementos del código que provocaron esta advertencia y explicar cómo contribuyen exactamente.
quickfix.name.find.jar.on.web=Buscar JAR en la web
quickfix.text.0.may.not.work.before.jdk.11.0.2={0} (es posible que no funcione antes de JDK 11.0.2)
quickfix.text.avoid.mutation.using.stream.api.0.operation=Evitar mutación usando la operación Stream API ''{0}()''
quickfix.text.remove.javadoc.0=Elimina etiqueta ''@{0}''
quickfix.text.remove.javadoc.0.1=Quitar @{0} {1}
quickfix.text.remove.not.null.annotation=Remover anotación no nula
quickfix.text.replace.0.stream.with.1.2=Reemplazar {0}.stream() con {1}.{2}()
quickfix.text.replace.collect.0.with.1.2=Reemplazar ''collect({0}())'' con ''{1}''{2}
quickfix.text.replace.filter.0.is.present.with.any.match=reemplazar ''filter().{0}().isPresent()'' con ''anyMatch()''
quickfix.text.replace.stream.0.with.1.2=Reemplazar ''stream().{0}()'' con ''{1}()''{2}
quickfix.text.replace.url.with.html=Reemplazar URL con enlace HTML
quickfix.text.replace.url.with.link=Reemplazar URL con enlace
quickfix.text.suffix.may.change.semantics=(Puede cambiar la semántica)
quickfix.text.wrap.0.with.1=Encapsular ''{0}'' con ''{1}''
radio.button.subclass.of.0=Subclase de ''{0}''
radio.button.unused.declaration.unused.option=no usada
radio.button.unused.declaration.used.option=usado
radio.button.with.provider.method=Con el método 'provider()'
radio.use.fully.qualified.class.names.in.javadoc=Usar nombres de clase completos en JavaDoc:
radio.use.fully.qualified.class.names.in.javadoc.always=Siempre
radio.use.fully.qualified.class.names.in.javadoc.if.not.imported=Si no se ha importado
radio.use.fully.qualified.class.names.in.javadoc.never=Nunca, usa nombre corto y añade import
raw.use.of.parameterized.type.ignore.new.objects.option=Ignorar construcción de nuevos objetos
raw.use.of.parameterized.type.ignore.overridden.parameter.option=Ignorar tipos de parámetros de métodos anulantes
raw.use.of.parameterized.type.ignore.quickfix.not.available.option=Omitir cuando no esté disponible la corrección rápida automática
raw.use.of.parameterized.type.ignore.type.casts.option=Ignorar conversiones de tipo
raw.use.of.parameterized.type.ignore.uncompilable.option=Ignorar donde un parámetro tipo no se compilaría
raw.variable.type.can.be.generic.cast.quickfix=Cambiar tipo de conversión a {0}
raw.variable.type.can.be.generic.cast.quickfix.family=Parametrizar el tipo de conversión
raw.variable.type.can.be.generic.family.quickfix=Añadir parámetros genéricos al tipo
raw.variable.type.can.be.generic.quickfix=Cambiar el tipo de {0} a {1}
records.cannot.be.inlined=Las clases de registro no se pueden insertar en línea
refactoring.method.reference.to.lambda.conflict=La referencia al método se convertirá en lambda
remove.var.keyword.text=Quitar 'var'
rename.package.class.already.exist.conflict=La clase con nombre calificado ''{0}'' ya existe
rename.package.command.name=Renombrar paquete
rename.package.ignored.name.warning=Intentando crear un paquete con un nombre ignorado, el resultado no será visible
rename.package.invalid.name.error=No es un nombre de paquete válido
rename.super.base.chooser.popup.title={0} {1, choice, 0# implementa|1# sobreescribe} método de {2}
rename.super.methods.chooser.popup.title={0} tiene super métodos
replace.implements.with.static.import.field.usages.progress=Buscando usos de campo constante...
scheduled.thread.pool.executor.with.zero.core.threads.description='ScheduledThreadPoolExecutor' no debería tener cero hilos centrales
scheduled.thread.pool.executor.with.zero.core.threads.display.name='ScheduledThreadPoolExecutor' con cero hilos core
scope.hierarchy=Jerarquía de {0}
sdk.cannot.create=No se puede crear SDK
sdk.configured="{0}" se ha establecido como JDK del proyecto.
sdk.configured.external.config.title=JDK configurado ({0})
sdk.configured.sdkmanrc=''{0}'' se configura como JDK del proyecto.
sdk.configured.sdkmanrc.title=JDK está configurado (.sdkmanrc)
sdk.java.no.classes=No se encontraron las clases de JDK en ''{0}''
section.title.inspection.suspicious.names.ignore.methods=Ignorar métodos:
separator.annotations.to.copy=Anotaciones a copiar
separator.mark.as.entry.point.if.annotated.by=Marcar como punto de entrada si está anotado por:
separator.mark.field.as.implicitly.written.if.annotated.by=Marcar campo como escrito implícitamente si está anotado por:
set.language.level=Establecer el nivel del lenguaje
set.language.level.to.0=Definir nivel de lenguaje a {0}
settings.completion.ml.java.display.name=Java
settings.inlay.java.annotations=Anotaciones
settings.inlay.java.builder.like.methods=Métodos tipo Builder
settings.inlay.java.complex.expressions.binary.functional.array.access.and.other=Expresiones complejas como argumentos
settings.inlay.java.enum.constants=Constante enumeración
settings.inlay.java.external.annotations=Anotaciones externas
settings.inlay.java.implicit.types=Tipos implícitos
settings.inlay.java.implicit.types.description=Variables locales declaradas con la palabra clave `var` cuando el tipo inferido no se puede obtener de la parte derecha de la asignación, por ejemplo, cuando se usa un método de fábrica.
settings.inlay.java.implicit.types.lambda=Tipos implícitos de lambda
settings.inlay.java.implicit.types.lambda.description=Muestra sugerencias de tipo en línea para los parámetros lambda.
settings.inlay.java.implicit.types.local=Tipos implícitos
settings.inlay.java.implicit.types.local.description=Variables locales declaradas con la palabra clave `var` cuando el tipo inferido no es evidente a partir del lado derecho de la asignación (por ejemplo, al usar un método de fábrica).
settings.inlay.java.inferred.annotations=Anotaciones inferidas
settings.inlay.java.inheritors=Herederos
settings.inlay.java.insert.annotation=Insertar anotación
settings.inlay.java.methods.with.same.named.numbered.parameters=Métodos con parámetros enumerados con el mismo nombre
settings.inlay.java.new.expressions='New' expresiones
settings.inlay.java.non.literals.in.case.of.multiple.parameters.with.the.same.type=No literales en caso de múltiples parámetros con el mismo tipo
settings.inlay.java.parameters.with.names.that.are.contained.in.the.method.name=Parámetros con nombres contenidos en el nombre del método
settings.inlay.java.show.hints.for=Mostrar sugerencias para:
settings.inlay.java.show.parameter.hints.for=Mostrar pistas para parámetros de:
settings.inlay.java.show.parameter.hints.when.expression.type.is.clear.description=Expresiones de inicialización de matriz, switch, condicionales, referencia, instancia de, asignación, llamada, calificado, conversión de tipo, acceso a objetos de clase.
settings.inlay.java.turn.off.external.annotations=Desactivar anotaciones externas
settings.inlay.java.turn.off.inferred.annotations=Desactivar anotaciones inferidas
settings.inlay.java.usages=Usos
show.import.popup.for.classes=Clases(&C)
show.import.popup.for.static.methods.and.fields=Métodos y campos estáticos(&S)
show.siblings.choose.super.class.title=Seleccionar clase padre o interfaz
show.siblings.find.usages.class.title=Super clase/Interfaz
show.siblings.find.usages.method.title=Métodos super
side.effects.expression.presentation=expresión ''{0}''
side.effects.pattern.message=<html>\n<body>\nSe han encontrado posibles efectos secundarios en {0}<br>\nPuede:\n<br>\n-&nbsp;<b>Eliminar</b> los usos de la variable junto con todas las expresiones involucradas, o<br>\n-&nbsp;<b>Transformar</b> las expresiones asignadas a la variable en sentencias independientes.<br>\n<div style="padding-left: 0.6cm;">\n  Es decir,<br>\n  <table border="0">\n    <tr>\n      <td><code>{1};</code></td>\n    </tr>\n  </table>\n  se convierte en: <br>\n  <table border="0">\n    <tr>\n      <td><code>{2};</code></td>\n    </tr>\n  </table>\n</div>\n</body>\n</html>
simplify.optional.chain.inspection.fix.description.optional.chain.can.be.eliminated=La cadena opcional se puede eliminar
simplify.optional.chain.inspection.fix.description.replace.with.value.of.description=La cadena opcional se puede reemplazar con 'String.valueOf()'
simplify.optional.chain.inspection.fix.description.replace.with.value.of.name=Reemplazar con 'String.valueOf()'
simplify.optional.chain.inspection.fix.name.remove.redundant.optional.chain=Eliminar Optional chain redundante
simplify.optional.chain.inspection.map.or.else.description=La cadena opcional puede simplificarse
simplify.optional.chain.inspection.optional.rewrapping.description=Reenvoltura opcional innecesaria
simplify.optional.chain.inspection.optional.rewrapping.name=Desenvolver
simplify.optional.chain.inspection.or.else.non.null.fix.description=La comprobación de null se puede eliminar con 'ifPresent'
simplify.optional.chain.inspection.or.else.non.null.fix.name=Reemplazar comprobación de nulidad con ifPresent()
simplify.optional.chain.inspection.or.else.return.fix.description=Se puede eliminar la comprobación de nulidad
simplify.optional.chain.inspection.or.else.return.fix.name=Reemplazar verificación de nulidad con {0}({1})
simplify.optional.chain.inspection.remove.redundant.steps.from.optional.chain=Eliminar pasos redundantes de la cadena opcional
simplify.optional.chain.inspection.to.x=Simplificar el encadenado opcional a ''{0}''
simplify.stream.collection.creation.fix.name=Reemplazar con constructor ''{0}''
simplify.stream.inspection.iterate.take.while.fix.message=Se puede reemplazar por un 'iterate()' de 3 argumentos
simplify.stream.inspection.iterate.take.while.fix.name=Reemplazar con 'iterate()' de 3 parámetros
simplify.stream.inspection.message.can.be.replaced=''{0}'' puede ser reemplazado por ''{1}''
simplify.stream.inspection.message.can.be.replaced.may.change.semantics=''{0}'' puede ser reemplazado por ''{1}'' (puede cambiar la semántica)
simplify.stream.match.negation.fix.name=Reemplaza {0} con {1}(...)
simplify.stream.remove.boolean.identity.fix.message=Puede fusionarse con la llamada 'map()' anterior
simplify.stream.remove.boolean.identity.fix.name=Fusionar con la llamada 'map()' anterior
simplify.stream.replace.support.with.collection.fix.message=Puede ser reemplazado con la llamada ''{0}.{1}()''
simplify.stream.replace.support.with.collection.fix.name=Reemplaza con la llamada ''{0}.{1}()''
simplify.stream.replace.with.element.iteration.fix.message=Se puede reemplazar con iteración del elemento
simplify.stream.simple.stream.of.fix.name.use.stream.element.explicitly=Usar elemento de Stream explícitamente
simplify.stream.simple.stream.of.message=Stream de un solo elemento innecesario
simplify.stream.swap.filter.and.map.fix.message=Se pueden intercambiar 'filter()' con 'map()'
simplify.stream.swap.filter.and.map.fix.name=Intercambia 'filter()' y 'map()'
slice.filter.parse.error.enum.constant.not.found=Constante de enumeración no encontrada: {0}
slice.filter.parse.error.expression.must.evaluate.to.constant=La expresión debe evaluarse en una constante: {0}
slice.filter.parse.error.incorrect.constant.expected.number=Constante incorrecta (se esperaba un número): {0}
slice.filter.parse.error.incorrect.constant.type=Tipo de constante incorrecto (requerido: {0})
slice.filter.parse.error.incorrect.expression=Expresión incorrecta: {0}
slice.filter.parse.error.not.null.filter.not.applicable.for.primitive.type=''!null'' filtro no es aplicable para el tipo primitivo {0}
slice.filter.parse.error.null.filter.not.applicable.for.primitive.type=''null'' filtro no aplicable para un tipo primitivo {0}
slice.usage.message.assertion.violated=(¡se infringió la aseveración!)
slice.usage.message.in.file.stopped.here=(en {0} archivo - detenido aquí)
slice.usage.message.location=en {0}
slice.usage.message.tracking.container.contents=(Seguimiento del contenido del contenedor "{0}{1}")
sort.threads.by.name=Ordenar hilos por nombre
sort.threads.by.type=Ordenar hilos por tipo
special.annotations.annotations.list=anotaciones especiales adicionales:
special.annotations.annotations.preview=Agrega ''@{0}'' a una lista de anotaciones que esta inspección ignorará
special.annotations.list.add.annotation.class=Agregar clase de anotación
special.annotations.list.annotation.class=Clase de Anotación
special.annotations.list.annotation.pattern=Añadir Patrón de Anotación
special.annotations.list.annotation.pattern.message=Agregar patrón de anotaciones
special.annotations.list.remove.pattern=Eliminar
spi.extension.error.message=Las extensiones registradas deben implementar {0}
spi.no.provider.error.message=No se encontró un proveedor de servicios "{0}"
status.bar.overridden.methods.highlighted.message={0} métodos reemplazados encontrados (presiona {1} nuevamente para quitar el resaltado, Escape para quitar todo el resaltado)
stream.to.loop.inspection.message.replace.foreach.call.with.loop=Reemplazar la llamada a 'forEach()' con un bucle
stream.to.loop.inspection.message.replace.stream.api.chain.with.loop=Reemplazar la cadena de la API Stream con el bucle
surround.with.cast=Envolver con **casting**
surround.with.dowhile.template=do / while
surround.with.for.template=para
surround.with.ifelse.expression.template=si (expr) {...} sino {...}
surround.with.not.instanceof.template=!(expr instanceof Tipo)
surround.with.runnable.template=Runnable
surround.with.synchronized.template=synchronized
surround.with.try.catch.finally.template=try / catch / finally
surround.with.try.catch.incorrect.template.message=Plantilla de archivo incorrecta para el cuerpo catch
surround.with.try.catch.template=try / catch
switch.stmt.template.description=switch (expr) {...}
tab.title.entry.points=Puntos de entrada
tab.title.infer.nullity.preview=Vista previa de inferencia de nulidad
tab.title.members.to.report=Miembros a reportar
tab.title.slices.grouped.by.nullness=(Agrupado por Nulabilidad)
table.cell.constructors=Constructores
target.code.block.presentable.text=Bloque contenedor
title.cannot.create.class=No se puede crear la clase
title.code.vision=Visión de código
title.code.vision.inlay.hints=Visión de código
title.import.layout=Importación de diseño
title.javadoc=JavaDoc
title.naming=Nombre
title.naming.final.modifier=Declaración de variable
title.naming.functional.expressions=Cuerpo lambda
title.naming.variable=Variable
title.package.not.found=Paquete no encontrado
title.packages=Paquetes
title.packages.to.use.import.with=Paquetes para usar Importación con '*'
title.related.problems.inlay.hints=Problemas relacionados
to.import.a.method.statically.press.0=Para importar un método estáticamente, presiona {0}
todo.index.not.available=N/D
tooltip.anonymous=Anónimo
tooltip.has.several.functional.implementations=Tiene varias implementaciones funcionales
tooltip.implements.method=Implementa método
tooltip.implements.method.in=Implementa el método en
tooltip.incorrect.file.template=Plantilla de archivo ''{0}'' incorrecta
tooltip.is.functionally.implemented.in=Se implementa funcionalmente en
tooltip.is.implemented.by=Implementado por
tooltip.is.implemented.by.several.subclasses=Está implementado por varias subclases
tooltip.is.implemented.in=Está implementado en
tooltip.is.implemented.in.several.subclasses=Se implementa en varias subclases
tooltip.is.overridden.by.several.subclasses=Es sobrecargado por varias subclases
tooltip.is.overridden.in=Sobreescrito en
tooltip.is.overridden.in.several.subclasses=Se sobreescribe en varias subclases
tooltip.is.subclassed.by=Es subclaseado por
tooltip.overrides.method=Anula método
tooltip.overrides.method.in=Sobreescribe el método en
tooltip.reassigned.local.variable=Variable local reasignada
tooltip.reassigned.parameter=Parámetro reasignado
tooltip.recursive.call=Llamada recursiva
tooltip.variable.used=Se usa la variable ''{0}''
tooltip.via.subclass=vía subclase
type.information.constraints=Restricciones
type.information.local.object=objeto local
type.information.locality=Localidad
type.information.mutability=Mutabilidad
type.information.not.equal.to=Diferente de
type.information.nullability=Posibilidad de nulo
type.information.range=Rango
type.information.type=Tipo
type.information.value=Valor
type.migration.cannot.convert.message=No se puede convertir el tipo de <b>{0}</b>{3, choice, 0#|1# de '<'b'>'{1}'<'/b'>'} a <b>{2}</b>
type.migration.cannot.convert.tooltip=No se puede convertir el tipo de expresión de {0} a {1}
type.migration.cannot.convert.vararg.message=No se puede convertir la llamada <b>{0}</b> de vararg a no vararg
type.migration.cannot.convert.vararg.tooltip=No se puede convertir la llamada de vararg a no-vararg
type.migration.command.name=MigraciónTipos
type.migration.dialog.message.disjunction.type.not.applicable=Sólo un parámetro del bloque catch se puede migrar a un tipo unión
type.migration.dialog.message.invalid.type=''{0}'' no es un tipo válido
type.migration.dialog.message.vararg.type.not.applicable=Solo el último parámetro de un método se puede migrar a un tipo vararg
type.migration.dialog.message.void.not.applicable=Solo los tipos de retorno del método pueden migrarse a 'void'
type.migration.getter.rename.suggestion.always.migrate.method.names=Siempre migrar nombres de método
type.migration.getter.rename.suggestion.never.migrate.method.names=Nunca migrar nombres de método
type.migration.getter.rename.suggestion.text=¿Renombrar el getter de ''{0}'' a ''{1}'' debido a que el tipo de retorno ha sido migrado a ''{2}''?
type.migration.multi.root.toolwindow.title=Migrar {0} de tipo
type.migration.processed.elements.header=Raíz de la migración de tipo
type.migration.replaced.notification=Reemplazado con {0}
type.migration.single.root.toolwindow.title=Migrar tipo de {0} de ''{1}'' a ''{2}''
type.parameters.cannot.be.inlined=Los parámetros tipo no se pueden ajustar en línea
unchecked.warning.inspection.message.unchecked.generics.array.creation.for.varargs.parameter=Creación de matrices genéricas no comprobadas para el parámetro varargs
unchecked.warning.inspection.reason.expr.has.raw.type.so.result.erased=Razón: ''{0}'' tiene tipo bruto, por tanto el resultado de {1} se borra
unchecked.warning.inspection.settings.ignore.unchecked.assignment=Ignorar asignación desmarcada
unchecked.warning.inspection.settings.ignore.unchecked.call.as.member.of.raw.type=Ignorar llamada no verificada como miembro de tipo genérico
unchecked.warning.inspection.settings.ignore.unchecked.cast=Ignorar conversión sin verificar
unchecked.warning.inspection.settings.ignore.unchecked.generics.array.creation.for.vararg.parameter=Ignorar creación de matriz de genéricos no verificada para el parámetro vararg
unchecked.warning.inspection.settings.ignore.unchecked.overriding=Ignorar sobrescrituras no comprobadas
unknown.library=Biblioteca desconocida
unscramble.detect.analyze.threaddump.from.clipboard.item=Detectar y analizar automáticamente volcados de hilos copiados al portapapeles fuera de IntelliJ IDEA
unscramble.log.path.label=Archivo de Registro:(&L)
unscramble.no.unscrambler.item=<Descifrador no instalado>
unscramble.normalize.button=Normalizar(&N)
unscramble.stacktrace.caption=Coloque aquí un rastreo de pila o un volcado de subproceso completo:
unscramble.unscrambled.deadlock.tab=<Interbloqueo>
unscramble.unscrambled.stacktrace.tab=Traza de pila
unscramble.unscrambled.threaddump.tab=Hilos
unscramble.unscrambler.combobox=Descifrador:
unscramble.use.unscrambler.checkbox=Desofuscar rastreo de pila(&U)
unwrap.anonymous=Desenvolver 'anónimo...'
unwrap.array.initializer=Desempaquetar inicialización de array
unwrap.conditional=Desarrollar 'f ? a : b'
unwrap.lambda=Quitar sangría de 'lambda...'
unwrap.switch.expression=Desempaquetar expresión 'switch'
unwrap.switch.statement=desenvolver sentencia 'switch'
unwrap.synchronized=Desenvolver 'synchronized...'
update.external.annotations=Actualizar anotaciones externas
usage.target.exception=Excepción
usage.target.package.in.directory={0} (en {1})
usages.telescope={0,choice, 0#sin usos|1#1 uso|2#{0,number} usos}
use.external.annotations=Usar anotaciones externas
validator.text.class.not.found=Clase no encontrada
validator.text.no.annotation=Debe ser una anotación
validator.text.not.valid.class.name=No es un nombre de clase válido
validator.text.wrong.superclass=Superclase incorrecta
vm.option.description.category=Categoría:
vm.option.description.default.value=Valor por defecto:
vm.option.description.description=Descripción:
vm.option.description.diagnostic=Diagnóstico
vm.option.description.experimental=Experimental
vm.option.description.option=Opción:
vm.option.description.product=Producto
vm.option.description.requires=(Requiere {0}) 
vm.option.description.standard=Estándar
vm.option.description.type=Tipo:
warning.java.file.outside.source.root=El archivo Java se encuentra fuera de la raíz del módulo de origen, por lo que no se compilará
where.do.you.want.to.move.directory.prompt={0}\n\n¿Desea mover el directorio a otra raíz de origen u otro directorio?
wrap.return.value.anonymous.class.presentation=Anónimo {0}
wrap.return.value.created.class.not.accessible.conflict=La clase creada no será accesible en el lugar de llamada
wrap.return.value.existing.class.does.not.have.appropriate.constructor.conflict=La clase existente no tiene un constructor apropiado
wrap.return.value.existing.class.does.not.have.getter.conflict=La clase existente no tiene método getter para el campo seleccionado
wrapping.annotation.enums=anotaciones de campos Enum
wrapping.annotation.parameters=Parámetros de anotación
wrapping.deconstruction.patterns=Patrón de desestructuración
wrapping.multi.catch.types=Tipos en multi-catch
wrapping.record.components=Componentes de registro
wrapping.semicolon.after.call.chain=Mover ';' a la nueva línea
wrapping.switch.statement.or.expression='switch' sentencia/expresión
wrapping.text.blocks=Bloques de texto
wrong.package.statement=Declaración de paquete incorrecta