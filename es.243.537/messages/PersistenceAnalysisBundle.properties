inspection.jvm.languages.group.name=Lenguajes JVM
jvm.inspections.sql.source.to.sink.flow.display.name=Se usa una cadena no segura como SQL
jvm.inspections.sql.source.to.sink.flow.too.complex=Demasiado complejo para comprobar si la cadena, que se utiliza en SQL, es segura
jvm.inspections.sql.source.to.sink.flow.unsafe=La cadena utilizada en la consulta SQL puede ser no segura
jvm.inspections.sql.source.unsafe.to.sink.flow.check.private.final.field=Considerar campos privados o finales en la misma clase como seguros
jvm.inspections.sql.source.unsafe.to.sink.flow.check.private.final.field.comment=Si está habilitado, se consideran seguras las variables privadas y finales, si no se procesarán según las reglas
jvm.inspections.sql.source.unsafe.to.sink.flow.check.private.methods=Considerar parámetros de métodos privados como seguros
jvm.inspections.sql.source.unsafe.to.sink.flow.check.private.methods.comment=Si está desactivado, los parámetros de los métodos privados se considerarán como desconocidos
jvm.inspections.sql.source.unsafe.to.sink.flow.check.warn.if.complex=Informar strings que sean complejas para verificar
jvm.inspections.sql.source.unsafe.to.sink.flow.check.warn.if.complex.comment=Puede ser útil verificar manualmente esas cadenas
jvm.inspections.sql.source.unsafe.to.sink.flow.safe.class=Clases seguras:
jvm.inspections.sql.source.unsafe.to.sink.flow.safe.class.comment=Estas clases se consideran que contienen solo datos seguros
jvm.inspections.sql.source.unsafe.to.sink.flow.untainted.annotations=Anotaciones de no contaminado:
jvm.inspections.sql.source.unsafe.to.sink.flow.untainted.annotations.comment=Estas anotaciones se usarán como anotaciones '@Untainted' durante el análisis
jvm.inspections.sql.source.unsafe.to.sink.flow.untainted.methods=Métodos no contaminados:
jvm.inspections.sql.source.unsafe.to.sink.flow.untainted.methods.comment=Estos métodos se consideran que devuelven solo objetos seguros