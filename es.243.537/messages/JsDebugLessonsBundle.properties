js.debugger.before.describe.tool.window=Al presionar {0} ocurrieron dos acciones. Primero, ejecutamos un archivo usando Node.js y abrimos la ventana de herramientas {1}, que muestra los resultados de la ejecución del código. En segundo lugar, <ide/> creó una configuración temporal de ejecución/depuración, para que pudiéramos ejecutar un archivo de esa manera. Ocultemos la ventana de herramientas con {2} por ahora y conozcamos mejor las configuraciones de ejecución/depuración.
js.debugger.before.edit=Ahora, ¿qué pasa si desea ajustar la configuración de esta nueva configuración de ejecución/depuración o usar otra? Abra el menú {0} nuevamente y haga clic en {1}.
js.debugger.before.intro.1=Con <ide/> puedes ejecutar y depurar todo tipo de aplicaciones JavaScript directamente donde escribes tu código.
js.debugger.before.intro.2=En este módulo, repasaremos algunos pasos que serán útiles sin importar el tipo de código que depures. En nuestro caso, será una aplicación <a href=''{0}''>Node.js</a> muy básica que debería comparar dos números y devolver {1} o {2}. Asegúrate de que Node.js esté <a href=''{3}''>instalado</a> en tu máquina antes de continuar (para una nueva instalación, tendrás que reiniciar <ide/>). Pulsa {4} si estás listo para continuar.
js.debugger.before.manage.1=Este es un lugar para gestionar configuraciones de ejecución/debug. Tómate un tiempo para explorar lo que se puede encontrar aquí y cierra la ventana una vez estés preparado para continuar.
js.debugger.before.manage.2=Tómate tu tiempo para explorar qué se puede encontrar aquí y cierra la ventana una vez que estés listo para continuar.
js.debugger.before.next=Esto es todo por esta lección. Para comenzar la siguiente, haga clic en el botón de abajo o utilice {0}.
js.debugger.before.save.1=Por lo tanto, estas configuraciones sirven como punto de entrada para ejecutar/depurar aplicaciones. Pueden ser temporales o permanentes. La diferencia principal es que las temporales se eliminan automáticamente si se alcanza el límite predeterminado de 5 configuraciones.
js.debugger.before.save.2=Veamos cómo puede convertir una configuración temporal en una permanente. Abra el menú desplegable {0} ubicado en la esquina superior derecha y seleccione {1}.
js.debugger.before.title=Antes de depurar: Configuraciones de Ejecutar/Depurar
js.debugger.module.description=Aprende a ejecutar un programa paso a paso e identificar problemas en el mismo sin necesidad de salir del IDE.
js.debugger.module.name={0} Depurador 101
js.debugger.part.1.gutter=Los números {0} y {1} que se comparan no son iguales, por lo que el resultado al ejecutar el código debería ser {2}. Averigüemos por qué el resultado es {3}. En la línea 1, coloca un punto de interrupción en el margen (espacio en blanco) entre #1 y el código.
js.debugger.part.1.next=La pestaña {0} lista todos los archivos cargados en el proceso que está ejecutándose actualmente. Puedes ver el contenido de cualquier archivo si haces doble clic en él. Para ir a la segunda parte de esta lección, haz clic en el botón de abajo o usa {1}.
js.debugger.part.1.scripts.tab=La pestaña {0} muestra los mensajes que registra la aplicación, incluidos los errores. Al depurar aplicaciones de Node.js, <ide/> también muestra la pestaña {1} donde puedes ejecutar fragmentos de código JavaScript y ver los mensajes de la consola. Cambia a la pestaña {2} para continuar.
js.debugger.part.1.set.breakpoint=Podemos utilizar puntos de interrupción para pausar la ejecución de la aplicación. El círculo rojo que ves en el margen es el aspecto de un punto de interrupción en <ide/>. Si haces clic en él de nuevo, se eliminará. También puedes hacer clic con el botón derecho para personalizar su comportamiento (por ejemplo, establecer una condición). Pulsa el botón {0} situado en la esquina superior derecha (o pulsa {1}) para continuar.
js.debugger.part.1.start.1=Ahora que tenemos una configuración de ejecución/depuración en su lugar, veamos cómo trabajar con el depurador integrado.
js.debugger.part.1.start.2=Primero, ejecutemos nuestro código una vez más para examinar lo que devuelve, ya que no nos centramos en esto en la lección anterior. Haga clic en el botón {0} ubicado junto a la lista desplegable con configuraciones para ejecutar el que está seleccionado actualmente.
js.debugger.part.1.title=Código de depuración. Parte I
js.debugger.part.1.tool.window.1=Conoce la ventana de herramientas {0}. En su lado izquierdo, puedes encontrar iconos para detener/reejecutar configuraciones y administrar puntos de ruptura. En la parte superior, puedes ver varias pestañas y un grupo de iconos para recorrer el código paso a paso.
js.debugger.part.1.tool.window.2=La pestaña {0} en la que estamos es donde se realiza la mayor parte del trabajo. A la derecha, se pueden ver todos los {1} agrupados por ámbitos, junto con sus valores. La vista {2} muestra la pila de llamadas. Si la revisas, verás el estado de la aplicación en cada punto de la ruta de ejecución. Ahora cambia a la pestaña {3}.
js.debugger.part.2.buttons.1=Para aprender más sobre la depuración del programa, consulta <a href="{0}">nuestra ayuda en línea</a>.
js.debugger.part.2.buttons.2=Ahora, ¿qué pasa si queremos comprobar el valor de una expresión? <ide/> le permite hacerlo rápidamente con la función {0}. Presione {1} para continuar.
js.debugger.part.2.end=¡Enhorabuena! Has llegado al final de {0} y has aprendido algunas formas básicas de depurar todo tipo de aplicaciones. Si lo deseas, puedes ejecutar el código una vez más para confirmar que ahora todo funciona bien. Para profundizar en la depuración de tipos específicos de aplicaciones, echa un vistazo a nuestra <a href=''{1}''>ayuda web</a> y <a href=''{2}''>entradas de blog</a>.
js.debugger.part.2.evaluate.1=Agreguemos {0} como expresión y pulsemos {1}.Miremos el resultado: es igual a {2}. Aquí es donde radica el problema. Para que la función capture diferentes números, necesitamos cambiar levemente la expresión para que su resultado sea igual a {3}.
js.debugger.part.2.evaluate.2=Ahora cerremos el cuadro popup y corrijamos el problema que encontramos en el código. Dentro de {0} en la línea 2, reemplace {1} por {2}.
js.debugger.part.2.step.into.1=<strong>Importante</strong>: Asegúrate de que hay un punto de ruptura en la línea 1 y que el depurador se ha iniciado ({0}) y abierto en la pestaña {1} antes de continuar.
js.debugger.part.2.step.into.2=Sigamos con la localización de errores en nuestro código y aprendiendo algunas cosas más que pueden resultar útiles al depurar en <ide/>. Para entender mejor cómo se ejecuta nuestro código, podemos ponerle más puntos de interrupción y después movernos de uno a otro usando el botón {0} ({1}), pero hay una forma más rápida. Vayamos a la siguiente línea ejecutándose pulsando {2} y usando {3} ({4}).
js.debugger.part.2.stop=Finalmente, vamos a aprender a detener el depurador cuando ya no lo necesites. Primero, haz clic en el punto de interrupción que añadimos para quitarlo. Luego, detén el depurador con {0}({1}) y cierra su ventana de herramientas presionando {2}.
js.debugger.part.2.title=Depuración de código. Parte II