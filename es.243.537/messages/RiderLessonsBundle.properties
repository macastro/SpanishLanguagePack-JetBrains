alt.enter.invert.condition=Invertir condición
alt.enter.remove.parameter=Remover parámetro
basic.completion.activate=Si no se sugiere ningún completado automáticamente, invóquelo manualmente presionando {0}.
basic.completion.choose.first=La mejor coincidencia se resalta en azul en la lista de autocompletado: elígela pulsando {0}.
basic.completion.choose.item=Selecciona {0} en la lista de finalización y presiona {1}.
basic.completion.complete=Puedes insertar automáticamente todos los elementos sintácticos necesarios (paréntesis, llaves, punto y coma y demás) y situarte en la posición donde puedes empezar a escribir la siguiente sentencia. Pulsa {0} para completar esta sentencia.
basic.completion.lesson.name=Completado de código
basic.completion.start.typing=Por defecto, <ide/> muestra sugerencias de autocompletado mientras escribe. Comience escribiendo {0} justo donde está el cursor y verá sugerencias coincidentes.
comment.block.comment=Para comentar un bloque con comentario {0}, seleccionar bloque de código y presionar {1}.
comment.block.uncomment=Para anotar un comentario en bloque, coloque el cursor en cualquier parte dentro del bloque comentado y presione {0}.
comment.lesson.name=Comentar líneas y bloques de código
comment.line.uncomment.several.lines=Para descomentar varias líneas, selecciona todas las líneas comentadas y presiona {0}.
comment.line.uncomment.that.line=Descomenta la línea comentada con el mismo atajo: coloca el cursor donde quieras de dicha línea y presiona {0}.
docker.balloon.right.click.project=Agreguemos soporte de Docker al proyecto {0}. Haz clic derecho sobre el proyecto y selecciona **Agregar** | {1}
docker.check.out.dockerfile={0} ha generado un Dockerfile con todas las instrucciones necesarias para tu proyecto
docker.click.debug=Presiona {0} o da clic en {1} para comenzar la depuración
docker.lesson.name=Introducción a Docker
docker.module.description=Comience con Docker en Rider
docker.module.name=Docker
docker.open.settings=Antes de empezar, aseguremonos de que el demonio de Docker se está ejecutando en su máquina. Abra la configuración pulsando {0}, o haciendo clic en {1} y seleccionando el elemento correspondiente
docker.run=Presione {0} o haga clic en este botón para ejecutar su proyecto en un contenedor de Docker
docker.select.run.config=Para ejecutar su proyecto en un contenedor Docker, seleccione la configuración de ejecución Dockerfile
extract.variable.choose.name=Especifique el nombre de la variable o déjelo como se sugiere. Pulse {0} nuevamente para completar la refactorización.
extract.variable.choose.type=Elija entre utilizar ''var'' o un tipo explícito para la nueva variable y pulse {0}.
extract.variable.replace.all=El código contiene 3 apariciones de la expresión seleccionada. Selecciona el elemento correspondiente para reemplazarlas todas.
file.structure.help.link=Estructura de archivos y otros comandos de navegación de contexto
file.structure.lesson.name=Miembros y estructura de archivo
file.structure.open.popup=Puede resultar difícil navegar en un archivo de gran tamaño; una buena manera de empezar es ver sus miembros. Presiona {0} para enumerar todos los miembros del archivo.
file.structure.request.prefixes=Si deseas encontrar un método con {0} y {1} palabras en su nombre. Escribe {2} (prefijos de las palabras requeridas) para filtrar la lista de métodos.
file.structure.toolwindow=También puedes ver la estructura del fichero en una ventana de herramientas dedicada: pulsa {0} para abrirla.
got.it.balloon.button.text=Siguiente
help.refactor.this='Menú Refactorizar'
onboarding.module.description=Pasos iniciales para configurar y utilizar el IDE
onboarding.module.name=Comienza
onboarding.tour.lesson.name=Tour de iniciación
refactoring.menu.extract.interface=Elegimos el refactor {0} que ayuda a crear rápidamente una nueva interfaz basada en los miembros de la clase actual.
refactoring.menu.extract.interface.dialog=Especifique el nombre para la nueva interfaz y seleccione las casillas de verificación junto a los métodos que deben declararse ahí, entonces pulse **Siguiente** para finalizar la refactorización.
refactoring.menu.finish=Intente presionar {0} cuando el cursor esté sobre un miembro, variable, o literal de cadena para ver los refactorings disponibles en diferentes contextos.
rename.dialog.title=Renombrar
rename.epilogue=Nótese que la refactorización no afecta la propiedad <strong>Name</strong> de <strong>Person</strong>. Es seguro utilizarla incluso si tiene símbolos con nombres similares en el mismo contexto.
rename.press.rename=El refactorizado <strong>Renombrar</strong> actualiza automáticamente todas las referencias al símbolo renombrado. Puedes iniciar el refactorizado desde la declaración o desde cualquier uso del símbolo. Pulsa {0} para renombrar la propiedad {1} de la clase <code>Car</code>.
rename.type.new.name=Escriba un nuevo nombre para esta propiedad (por ejemplo, {0}) y presione {1}.
rider.onboarding.alt.enter={0} es tu atajo número uno en el editor. Por ejemplo, cuando el cursor se encuentra en el parámetro {1}, présionalo para eliminar el parámetro y actualizar los usos.
rider.onboarding.alt.enter.menu=Antes de aplicar la corrección {0}, considere otras opciones útiles que puede realizar en esta ventana emergente.
rider.onboarding.balloon.open.file=Doble clic para abrir {0}
rider.onboarding.balloon.open.learn.window=Cambia a la ventana de herramientas {0} para continuar con esta lección
rider.onboarding.balloon.project.directory=Haga doble clic en el nodo de la solución y luego expanda el proyecto **Aprendizaje**
rider.onboarding.change.ui.settings=Para esta lección, Rider cambia algunos ajustes de UI a los valores predeterminados. Sus preferencias se restaurarán cuando complete o salga de la lección.
rider.onboarding.debug.window.toolbar=Aquí puedes encontrar todas las acciones de depuración. Por ahora, presione {0} o haga clic en {1} para reanudar el programa y deje que se ejecute hasta el final.
rider.onboarding.feedback.system.current.sdk=SDK actual:
rider.onboarding.feedback.system.found.sdks=SDKs encontrados:
rider.onboarding.finish=Eso es todo por esta lección. Ahora puede elegir **Archivo** | **Nueva solución** en el menú principal para iniciar su propia solución, o **Archivo** | **Abrir** para abrir una ya existente.
rider.onboarding.online.help=Ayuda en línea
rider.onboarding.project.view.description=Haz clic en el ícono de la barra lateral o presiona {0} para acceder a los archivos de la solución
rider.onboarding.resume=Presiona {0} o haz clic en {1} para reanudar el programa y dejar que se ejecute hasta el final
rider.onboarding.run.configuration.widget=Aquí puedes configurar y ejecutar las configuraciones de ejecución. Pulsa {0} o haz clic en {1} para comenzar a depurar con la configuración actual.
rider.onboarding.search.everywhere=Para buscar cualquier cosa, presiona {0} dos veces o haz clic en {1}
rider.onboarding.search.everywhere.query=Hay varias pestañas que limitan tu búsqueda a archivos, acciones, etc. Pero por ahora, quedémonos en la pestaña **Todo** y escribe {0}.
rider.onboarding.search.everywhere.result=La consulta coincidió con {0} por las letras iniciales de su nombre compuesto. Selecciónalo en la lista y pulsa {1}.
rider.onboarding.settings=Una última cosa es dónde configurar todo. Pulsa {0}, o haz clic en {1} y elige el elemento correspondiente
rider.onboarding.settings.save=Para aplicar cualquier cambio, haz clic en {0}
rider.onboarding.settings.search=Usa el campo de búsqueda para encontrar opciones específicas
rider.onboarding.settings.theme=Por ejemplo, puede alternar entre temas claros y oscuros en la página {0} | {1}
rider.onboarding.toggle.breakpoint=Vamos a depurar el programa. En primer lugar, alterna un punto de interrupción: haz clic en el número de línea o coloca el cursor en la línea y pulsa {0}.