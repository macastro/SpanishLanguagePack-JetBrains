js.editor.basics.module.description=Domina las funciones básicas del editor: empieza a escribir mejor código y ahorra tiempo en tareas habituales desde el primer día.
js.editor.basics.module.name=Fundamentos del editor
js.editor.code.editing.comment.delete.unselect.move.up.1=Ahora que has seleccionado el código, puedes comentarlo (descomentar)/descomentarlo ({0}), eliminarlo ({1}) o reducir la selección ({2}).
js.editor.code.editing.comment.delete.unselect.move.up.2=Otra cosa que puedes hacer es mover este código arriba o abajo del archivo. Vamos a moverlo arriba con {0}.
js.editor.code.editing.duplicate.delete.comment=Por último, probemos rápidamente las acciones de línea más conocidas, como duplicar línea, eliminar línea o comentarla. Utiliza {0} para duplicar la línea seleccionada ahora. Luego presiona {1} y {2} para probar las demás acciones de línea.
js.editor.code.editing.multi.caret.1=Lo siguiente es la edición multicaret. Úselo para ahorrar tiempo mientras modifica el código en varios lugares a la vez. Coloque el cursor dentro de la primera etiqueta {0} (línea 10). Luego seleccione todas las etiquetas {1} dentro del mismo elemento tr (líneas 10-12): presione {2} seis veces hasta que se seleccionen todas las etiquetas necesarias.
js.editor.code.editing.multi.caret.2=Reemplace {0} por {1} y presione {2} para salir del modo de cursor múltiple.
js.editor.code.editing.next=Eso es todo para esta lección. Haz clic en el botón de abajo para comenzar la siguiente lección o usa {0}.
js.editor.code.editing.reformat.start=Vamos a repasar algunos consejos y trucos que pueden ayudarte a editar código mucho más rápido. Para empezar, no hay necesidad de arreglar manualmente el formato del código con <ide/>. Reformatear el código con {0}.
js.editor.code.editing.select.word=Ahora veamos cómo seleccionar rápidamente fragmentos de código en un archivo. Pulsa {0} un par de veces para seleccionar por completo el segundo elemento tr (líneas 14-18).
js.editor.code.editing.tips.and.tricks.title=Consejos y trucos de edición de código
js.editor.code.inspection.checkmark=Si se fija en la esquina superior derecha, verá una marca de verificación de color verde ({0}) que confirma que el archivo no tiene más problemas. Sin embargo, todavía hay un detalle menor que se puede optimizar para acortar el código. Coloque el cursor en {1} (línea 3) y presione {2}.
js.editor.code.inspection.intro=Mientras trabajas en el editor, <ide/> analiza constantemente tu código, detecta varios problemas en él y sugiere cómo puede ser mejorado. El archivo abierto tiene dos problemas resaltados en las líneas 4 y 5. Vamos a comprobar cuáles son pulsando {0}.
js.editor.code.inspection.make.shorter=Ahora vamos a acortar nuestra expresión de función. Selecciona la revisión rápida {0} y presiona {1}.
js.editor.code.inspection.next=Esto es todo para esta lección. Haz clic en el botón de abajo para comenzar la siguiente o usar {0}.
js.editor.code.inspection.run.intention=Seleccionemos {0} y presionemos {1}.
js.editor.code.inspection.show.intentions.1=También puedes usar {0} para saltar de un error a otro. O puedes explorar los problemas encontrados pasándo el cursor sobre ellos.
js.editor.code.inspection.show.intentions.2=En este archivo, el IDE ha encontrado una variable no resuelta: una que no se definió en ningún lugar del código. Como una de las posibles correcciones, sugiere crear una nueva, {0}, pero en lugar de eso necesitamos agregar un parámetro book. Coloca el cursor en {1} y presiona {2} para ver la lista completa de correcciones.
js.editor.code.inspection.title=Inspección de código
js.editor.completion.add.parameter=Es así como se puede buscar la documentación de JavaScript directamente en <ide/>. Ahora añade {0} dentro de {1} para continuar.
js.editor.completion.choose.lookup=<ide/> está lleno de funciones que te ayudan a escribir mejor código y aumentar tu productividad. Empecemos con la autocompletación de código. Te permite codificar más rápido al completar palabras clave y símbolos de las API de lenguaje y dependencias del proyecto. Escribe {0} y presiona {1} para autocompletar {2}.
js.editor.completion.choose.method=Por lo tanto, la finalización de código muestra sugerencias conscientes del contexto a medida que escribe. Para añadir una de estas sugerencias, puede usar {0} como acabamos de hacer, o pulse {1} para reemplazar un elemento existente. Ahora añada un {2} tras {3}, luego escriba {4} y autocompletar el método {5} con {0}.
js.editor.completion.console.log.argument=Finalmente completemos la instrucción {0}. Coloca el símbolo de intercalación dentro de {1} en la línea 8 y agrega {2} usando el completado de código.
js.editor.completion.next=Lección finalizada. Para empezar la siguiente, haz clic en el botón de abajo o utiliza {0}.
js.editor.completion.parameter.info=El aviso emergente ({0}) que ves tras situar el cursor dentro de {1} permite consultar rápidamente los nombres de los parámetros de métodos y funciones. En algunas situaciones, es posible que desees revisar la documentación más detallada. Vamos a hacerlo pulsando {2}.
js.editor.completion.title=Autocompletado de código
js.editor.navigation.activate.structure=La ventana de herramientas {0} puede ayudarte a examinar un archivo más rápido. Proporciona una vista general de la estructura y te permite saltar a un elemento específico simplemente escribiendo su nombre. Empieza a escribir {1} en cualquier parte del área de la ventana de herramientas, presiona {2} y luego presiona {3} para cerrar el panel y saltar al código.
js.editor.navigation.choose.structure=Con esta ventana emergente puedes saltar rápidamente entre los archivos recientes y las ventanas de herramientas IDE. Una de esas ventanas de herramientas te puede ayudar a navegar por un archivo individual. Haz clic en la pestaña {0} para obtener más información.
js.editor.navigation.find.usages=Como resultado de nuestras acciones, el cursor se ha movido a {0} (línea 9). Vamos a dejarlo ahí y presionar {1} para abrir otra ventana de herramientas que te puede ayudar a encontrar rápidamente los usos de cualquier elemento.
js.editor.navigation.go.to.declaration=Observa el {0} junto a <strong>Ir a la declaración o a los usos</strong>; muestra los usos para la definición y viceversa. Cerremos el cuadro emergente, situemos el cursor en {1} (línea 16) y presionemos {0} para buscar su declaración.
js.editor.navigation.hide.tool.window=Ahora puedes ver los usos de giveTreat a lo largo de todo el proyecto y las bibliotecas. Vamos a cerrar la ventana de herramientas con {0}.
js.editor.navigation.keymap.reference=¡Felicidades! Has llegado al final de {0}. Imprime la <a href="{1}">referencia del mapa de teclas</a> para tener a mano todos los accesos directos a medida que te familiarizas con <ide/>. Haz clic en el botón de abajo para pasar al siguiente módulo.
js.editor.navigation.recent.files=Comencemos por navegar en un proyecto. Presiona {0} para abrir el popup {1}.
js.editor.navigation.search.action=Ahora que estamos en la pestaña {0}, empecemos escribiendo {1} en la barra de búsqueda para buscar un acceso directo a otra función de navegación útil.
js.editor.navigation.search.everywhere=Ahora presiona {0} dos veces para conocer otra característica que puede ayudarte a buscar más rápido.
js.editor.navigation.search.everywhere.tabs=Esta es la ventana emergente {0}. Permite encontrar instantáneamente cualquier acción, archivo, clase o símbolo, y muestra todas las coincidencias en un único lugar. Si deseas llevar a cabo una búsqueda más específica, puedes pulsar {1} para cambiar de {2} a cualquier otra pestaña, como {3} o {4}. También puedes utilizar un acceso directo para abrir una pestaña específica que necesites. Vamos a probar este último con {5}.
js.editor.navigation.title=Navegación
js.editor.refactoring.replace=Ahora reemplaza todas las dos ocurrencias con la variable {0} llamada {1}.
js.editor.refactoring.select.expression=Creemos una nueva variable, {0} que contendrá {1}. Seleccione la expresión {1} de la lista y presione {2}.
js.editor.refactorings.next=Acabas de explorar dos formas para refactorizar código en <ide/>. Imprime la <a href="{0}">referencia de mapa de teclas</a> si prefieres utilizar atajos, o simplemente sigue usando el menú {1}. Haz clic en el botón a continuación para comenzar la siguiente lección o usa {2}.
js.editor.refactorings.rename=Con {0}, no necesitas memorizar todas las refactorizaciones o sus atajos. Haz clic en {1} para ver una de las refactorizaciones más populares en acción.
js.editor.refactorings.rename.apply=Renombra el parámetro {0} a {1} y presiona {2}. Esta acción aplicará los cambios en todos los archivos del proyecto.
js.editor.refactorings.shortcut=¡Bien hecho! Vamos a intentar refactorizar código usando un atajo. Coloca el cursor en la propiedad {0} (línea 4) y presiona {1}.
js.editor.refactorings.this=<ide/> tiene <a href=''{0}''>varios refactorings</a> que pueden reestructurar automáticamente el código existente sin cambiar su comportamiento en todo el proyecto. Veamos la lista de refactorings disponibles para el parámetro {1}. Pulse {2} o seleccione {3} en el menú principal.
js.editor.refactorings.title=Refactorizando Tu Código
js.getting.started.module.description=Descubre cómo agilizar las pruebas unitarias en {0} con un ejemplo de Jest.
js.getting.started.module.name=Primeros pasos con las pruebas
js.readme.description=Este curso interactivo te enseñará a realizar tareas comunes, como refactorizar código o navegar por proyectos.\n\nEl curso es particularmente útil para quienes recién se inician en {0}. No obstante, si eres un usuario experimentado de {0} y quieres comprobar que conoces todos los atajos básicos, te animamos a que lo pruebes.
js.readme.feedback.header=Comparte tus comentarios
js.readme.usage.header=Cómo recorrer el curso
js.testing.jest.coverage.result=Así es como puedes construir rápidamente un informe de cobertura de código mostrando cuántos archivos fueron cubiertos con pruebas, incluyendo el porcentaje de líneas que fueron cubiertas en esos archivos. Ahora cerremos el informe de cobertura con {0}
js.testing.jest.end=¡Enhorabuena! Ha llegado al final de este módulo.Casi todo lo que hemos aprendido también es aplicable a otros ejecutores de pruebas que admite <ide/> (a excepción de la cobertura de código y el modo de vigilancia).Para obtener más sugerencias y trucos sobre cómo probar aplicaciones con Jest, eche un vistazo a <a href="{0}">esta</a> entrada del blog.Si utiliza otros ejecutores de pruebas, quizás quiera explorar nuestra <a href="{1}">ayuda web</a>.
js.testing.jest.fix.test.1=Si ahora pasa el cursor por {0} en el editor, verá una ventana emergente que explica por qué falló la prueba. Desde allí, también puede depurar una prueba si es necesario.
js.testing.jest.fix.test.2=Ahora sustituyamos el valor incorrecto usado para {0}: en la línea 6, sustituyamos {1} por {2}.
js.testing.jest.navigate.1=Ahora podemos ver la ventana de herramientas {0} con los resultados de las pruebas y un rastreo de pila para las pruebas fallidas provenientes de un ejecutor de pruebas. Aparte de simplemente monitorear el progreso de la prueba, puedes hacer muchas otras cosas aquí. Puedes volver a ejecutar todas ({1}) las pruebas o solo las fallidas ({2}), ver las pruebas aprobadas ({3}), o habilitar el <a href="{4}">modo de monitoreo</a> para volver a ejecutar las pruebas automáticamente en caso de cambios.
js.testing.jest.navigate.2=Puedes encontrar rápidamente una prueba específica en {0}, inténtalo ahora: coloca el cursor en {0}, escribe {1} y presiona {2} para ir a la prueba.
js.testing.jest.prepare=Con <ide/> todos los flujos de trabajo de pruebas se vuelven más sencillos. Veamos cómo. Para este módulo, utilizaremos <a href="{0}">Jest</a> y uno de <a href="{1}">sus proyectos de muestra</a> como ejemplo, así que <strong>asegúrate de tener Jest y npm/Yarn instalados</strong> en tu equipo (consulta <a href="{2}">esta</a> página web para obtener más información). Comenzaremos creando una configuración de ejecución/depuración, que será específica de Jest. En el menú principal, selecciona {3}. Luego, haz clic en {4}, agrega la configuración {5} con los parámetros predeterminados y presiona {6} para guardarla.
js.testing.jest.re.run.test.1=Ahora que tenemos el valor correcto para el resultado previsto, podemos volver a ejecutar nuestra prueba. ¿Ves el icono {0} a la izquierda de la prueba en el editor? Este icono no sólo te muestra el estado de la prueba para las pruebas que has ejecutado recientemente, sino que también te permite ejecutar y depurar rápidamente una prueba específica.
js.testing.jest.re.run.test.2=Haz clic en él y selecciona {0}.
js.testing.jest.run=Por lo tanto, ahora la nueva configuración {0} está seleccionada de forma predeterminada. Hagamos clic en el botón {1} ({2}) que está justo al lado de ella.
js.testing.jest.success.run.coverage.1=¡Buen trabajo! Nuestra prueba se ha pasado satisfactoriamente.
js.testing.jest.success.run.coverage.2=Vamos a echar un vistazo a otra herramienta útil. Haga clic en el icono {0} situado junto al menú de configuraciones de ejecución/depuración.
js.testing.jest.title=Fundamentos de la Prueba en {0}