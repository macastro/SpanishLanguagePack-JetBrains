0.field.is.always.initialized.not.null=El campo @{0} siempre es inicializado como no nulo
access.can.be.0=El acceso puede ser ''{0}''
access.can.be.package.private=El acceso puede ser package-private
access.to.field.code.ref.code.outside.of.declared.guards.loc=Acceso al campo <code>#ref</code> fuera de los guardados declarados #loc
add.explicit.type.arguments=Agregar explícitamente argumentos de tipo
annotate.as.safevarargs=Anotar como '@SafeVarargs'
annotate.overridden.methods.parameters=Anotar parámetros del método reemplazado como ''@{0}''
annotate.overridden.methods.parameters.family.name=Anotación de parámetros de métodos sobrescritos
annotation.target.ANNOTATION_TYPE=tipo de anotación
annotation.target.CONSTRUCTOR=constructor
annotation.target.FIELD=campo
annotation.target.LOCAL_VARIABLE=variable local
annotation.target.METHOD=Método
annotation.target.MODULE=módulo
annotation.target.PACKAGE=paquete
annotation.target.PARAMETER=parámetro
annotation.target.RECORD_COMPONENT=componente de registro
annotation.target.TYPE=tipo
annotation.target.TYPE_PARAMETER=parámetro de tipo
annotation.target.TYPE_USE=uso de tipo
anonymous.ref.loc.can.be.replaced.with.0=Referencia anónima #ref #loc puede ser reemplazada con {0}
anonymous.ref.loc.can.be.replaced.with.lambda=Anónimo #referencia #ubicación se puede reemplazar con lambda
arguments.count.mismatch=Se esperaban {0} argumentos, pero se encontraron {1}
assigning.a.collection.of.nullable.elements=Asignando una colección de elementos que permiten valores nulos en una colección de elementos que no permiten valores nulos
call.to.method.code.ref.code.outside.of.declared.guards.loc=Llamada al método <code>#ref()</code> fuera de los guardas declarados #loc
change.type.arguments=Cambiar argumentos de tipo
change.type.arguments.to.0=Cambiar argumentos tipo a <{0}>
change.visibility.level=Hacer {0} {1}
chooser.popup.title.select.class.to.move.members.to=Seleccione la clase de destino
comparision.between.object.and.primitive=La comparación entre objeto y primitivo es ilegal y sólo se acepta en Java 7
contract.return.validator.incompatible.return.parameter.type=El tipo de retorno "{0}" debe ser convertible desde el tipo de parámetro "{1}"
contract.return.validator.method.return.incompatible.with.method.containing.class=El tipo de retorno del método debe ser compatible con la clase que contiene el método
contract.return.validator.not.applicable.for.constructor=no es aplicable para el constructor
contract.return.validator.not.applicable.primitive=no aplica para el tipo de retorno primitivo ''{0}''
contract.return.validator.not.applicable.static=no aplicable para métodos estáticos
contract.return.validator.return.type.must.be.boolean=el tipo de retorno del método debe ser 'boolean'
contract.return.validator.too.few.parameters=no aplicable para el método que tiene {0, choice, 0#sin parámetros|1#un parámetro|2#{0} parámetros}
contract.return.value.validation.prefix=Valor de retorno de contrato ''{0}'':
custom.exception.class.should.have.a.constructor=La clase de excepción personalizada debe tener un constructor con un único parámetro de mensaje de tipo String
dataflow.message.array.index.out.of.bounds=Índice de arreglo fuera de los límites
dataflow.message.arraystore=Alojar elementos de tipo <code>{0}</code> en un array con <code>{1}</code> elementos dará lugar a una <code>ArrayStoreException</code>
dataflow.message.assigning.null=<code>null</code> se asigna a una variable con @NotNull
dataflow.message.assigning.null.notannotated=Asignando valor <code>null</code> al campo no anotado
dataflow.message.assigning.nullable=La expresión <code>#ref</code> podría evaluar a null pero se asigna a una variable que está anotada con @NotNull
dataflow.message.assigning.nullable.notannotated=Expresión <code>#ref</code> #loc puede ser nulo, pero se asigna a un campo no anotado
dataflow.message.cce=Transformar <code>{0}</code> a  <code>#ref</code> #loc puede producir <code>ClassCastException</code>
dataflow.message.cce.always=Cast <code>{0}</code> a <code>#ref</code> #loc producirá <code>ClassCastException</code> por cualquier valor no nulo
dataflow.message.constant.condition=La condición <code>#ref</code> #loc es siempre <code>{0, choice, 0#false|1#true}</code>
dataflow.message.constant.condition.when.reached=La condición <code>#ref</code> #loc siempre es <code>{0, choice, 0#falso|1#verdadero}</code> cuando se activa
dataflow.message.constant.expression=El resultado de <code>#ref</code> #loc es siempre ''{0}''
dataflow.message.constant.method.reference=El resultado del llamado al método es siempre ''{0}''
dataflow.message.constant.no.ref=La condición siempre es {0, choice, 0#false|1#true}
dataflow.message.constant.value=El valor <code>#ref</code> #loc siempre es ''{0}''
dataflow.message.contract.fail=La llamada a '#ref' siempre falla, según los contratos de su método
dataflow.message.contract.fail.index=La llamada a '#ref' siempre falla porque un argumento está fuera de los límites
dataflow.message.fail=La llamada a '#ref' siempre falla con una excepción
dataflow.message.immutable.modified=El objeto inmutable está modificado
dataflow.message.immutable.passed=Se pasa un objeto inmutable donde se espera un objeto mutable
dataflow.message.negative.array.size=Tamaño de array negativo
dataflow.message.npe.array.access=El acceso al arreglo <code>#ref</code> #loc podría generar <code>NullPointerException</code>
dataflow.message.npe.array.access.sure=El acceso a la matriz <code>#ref</code> #loc probablemente generará <code>NullPointerException</code>
dataflow.message.npe.field.access=La desreferenciación de #ref #loc puede producir un NullPointerException
dataflow.message.npe.field.access.sure=La desreferencia de <code>#ref</code> #loc producirá una <code>NullPointerException</code>
dataflow.message.npe.inner.class.construction=La construcción de la clase interna puede producir <code>NullPointerException</code>
dataflow.message.npe.inner.class.construction.sure=La construcción de la clase interna producirá <code>NullPointerException</code>
dataflow.message.npe.method.invocation=La invocación del método <code>#ref</code> #loc puede producir <code>NullPointerException</code>
dataflow.message.npe.method.invocation.sure=La invocación del método <code>#ref</code> #loc producirá <code>NullPointerException</code>
dataflow.message.npe.methodref.invocation=La invocación de referencia a método <code>#ref</code> #loc puede producir una <code>NullPointerException</code>
dataflow.message.npe.template.invocation=La invocación del procesador de plantillas puede producir una `NullPointerException`
dataflow.message.npe.template.invocation.sure=La invocación del procesador de plantillas producirá <code>NullPointerException</code>
dataflow.message.only.switch.label=La etiqueta <code>#ref</code> #loc del conmutador es la única accesible en todo el conmutador
dataflow.message.passing.non.null.argument.to.optional='Optional.ofNullable()' con argumento no nulo debería ser reemplazado por 'Optional.of()'
dataflow.message.passing.null.argument=Pasando un argumento `null` al parámetro anotado como @NotNull
dataflow.message.passing.null.argument.nonannotated=Pasando argumento <code>null</code> a parámetro no anotado
dataflow.message.passing.null.argument.to.optional='Optional.ofNullable()' con argumento nulo debe reemplazarse con 'Optional.empty()'
dataflow.message.passing.nullable.argument=El argumento <code>#ref</code> #loc puede ser nulo
dataflow.message.passing.nullable.argument.methodref=El argumento de referencia a un método puede ser nulo
dataflow.message.passing.nullable.argument.methodref.nonannotated=El argumento de referencia del método puede ser nulo, pero se pasa a un parámetro no anotado
dataflow.message.passing.nullable.argument.nonannotated=El argumento <code>#ref</code> #loc podría ser nulo, pero se pasa a un parámetro no anotado
dataflow.message.pointless.assignment.expression=La condición <code>#ref</code> #loc a la izquierda de la expresión de asignación es siempre <code>{0}</code>. Puede simplificarse
dataflow.message.pointless.same.argument.and.result=El resultado de ''#ref'' es el mismo que el {0,choice,1#primer|2#segundo} argumento que hace que la llamada no tenga sentido
dataflow.message.pointless.same.arguments=Los argumentos de '#ref' son los mismos. Llamar a este método con los mismos argumentos no tiene sentido
dataflow.message.redundant.assignment=La variable ya está asignada a este valor
dataflow.message.redundant.instanceof=La condición #ref #loc es redundante y puede reemplazarse con una comprobación de nulidad
dataflow.message.redundant.update=La actualización de la variable no hace nada
dataflow.message.return.notnull.from.nullable=El método @{0} ''{1}'' siempre retorna un valor distinto de nulo
dataflow.message.return.null.from.notnull=<code>null</code> se regresa desde el método declarado como @{0}
dataflow.message.return.null.from.notnullable=<code>null</code> es devuelto por el método que no está declarado como @{0}
dataflow.message.return.nullable.from.notnull=La expresión <code>#ref</code> podría evaluarse como null pero la devuelve el método declarado como @{0}
dataflow.message.return.nullable.from.notnull.function=La función puede devolver null, pero aquí no se permite
dataflow.message.return.nullable.from.notnullable=La expresión `#ref` puede evaluarse como null, pero es devuelta por el método que no está declarado como @{0}
dataflow.message.storing.array.null=<code>null</code> se guarda en una matriz de elementos @NotNull
dataflow.message.storing.array.nullable=La expresión <code>#ref</code> se puede evaluar como nula pero se almacena en un array de elementos @NotNull
dataflow.message.stream.consumed=El stream ya podría haberse vinculado o consumido
dataflow.message.stream.consumed.always=El flujo ya se ha vinculado o consumido
dataflow.message.unboxing=El desempaquetado de <code>#ref</code> #loc puede producir <code>NullPointerException</code>
dataflow.message.unboxing.method.reference=El uso de <code>#ref</code> #loc requeriría un unboxing que podría producir una <code>NullPointerException</code>
dataflow.message.unboxing.nullable.argument.methodref=Pasar un argumento a la referencia del método requiere desempaquetado, lo que podría producir una <code>NullPointerException</code>
dataflow.message.unknown.nullability=(Nulabilidad desconocida)
dataflow.message.unreachable.switch.label=Etiqueta del switch <code>#ref</code> #loc es inalcanzable
dataflow.method.fails.with.null.argument=El método lanzará una excepción si el parámetro es nulo
dataflow.not.precise={0} es complejo: los resultados del flujo de datos podrían ser imprecisos
dataflow.too.complex={0} es demasiado complejo para analizar mediante el algoritmo de flujo de datos
delete.repeated.0=Borrar duplicado ''{0}''
delete.repeated.interface=Eliminar interfaz repetida
delimiters.argument.contains.duplicated.characters=El argumento 'delimiters' de StringTokenizer contiene caracteres duplicados
deprecated.class.usage.group.xml=XML
deprecated.member.0.is.still.used=Miembro obsoleto ''{0}'' sigue en uso
detach.library.quickfix.name=Desvincular librería
detach.library.roots.quickfix.name=Desconectar raíces de biblioteca no utilizadas
dfa.find.cause.an.execution.might.exist.where=una ejecución podría existir en:
dfa.find.cause.and.another=y {0}
dfa.find.cause.array.length.is.always.non.negative=La longitud del arreglo es siempre no negativa
dfa.find.cause.call.always.fails=la llamada siempre falla
dfa.find.cause.cast.may.fail=el cast puede fallar
dfa.find.cause.collection.size.is.always.non.negative=el tamaño de la colección siempre es no negativo
dfa.find.cause.comparison.arguments.are.different.constants=los argumentos de comparación son constantes diferentes
dfa.find.cause.comparison.arguments.are.the.same=argumentos de comparación son los mismos
dfa.find.cause.compile.time.constant=constante de tiempo de compilación que evalúa a ''{0}''
dfa.find.cause.condition.is.known.from.place=es sabido que ''{0}'' desde PLACE
dfa.find.cause.condition.was.checked.before=la condición ''{0}'' fue chequeada antes
dfa.find.cause.condition.was.deduced=la condición ''{0}'' fue deducida
dfa.find.cause.contract.kind.explicit=contracto
dfa.find.cause.contract.kind.hard.coded=contrato codificado
dfa.find.cause.contract.kind.inferred=contrato inferido
dfa.find.cause.contract.returns.on.condition=según {0}, {1} ''{2}'' devuelve ''{3}'' cuando {4}
dfa.find.cause.contract.throws.on.condition=según {0}, {1} ''{2}'' arroja una excepción cuando {3}
dfa.find.cause.contract.trivial=según {0}, {1} ''{2}'' siempre devuelve el valor ''{3}''
dfa.find.cause.equality.established.from.condition=''{0}'' fue establecido de la condicion
dfa.find.cause.field.assigned.nullability=Se sabe que el campo ''{0}'' siempre se inicializa al valor ''{1}''
dfa.find.cause.field.initializer.nullability=el campo ''{0}'' se inicializa con el valor ''{1}''
dfa.find.cause.instanceof.implies.non.nullity=la comprobación 'instancia de' implica no nulidad
dfa.find.cause.left.operand.range.template=el operando de la izquierda es %s
dfa.find.cause.may.be.null=puede ser nulo
dfa.find.cause.nonnull.expression.kind.concatenation=concatenación
dfa.find.cause.nonnull.expression.kind.literal=literal
dfa.find.cause.nonnull.expression.kind.newly.created.object=objeto recién creado
dfa.find.cause.nonnull.expression.kind.primitive.type=un valor del tipo primitivo ''{0}''
dfa.find.cause.nonnull.expression.kind.this.object='this' objeto
dfa.find.cause.nullability.explicitly.annotated={0} ''{1}'' está anotado como ''{2}''
dfa.find.cause.nullability.externally.annotated={0} ''{1}'' está anotado externamente como ''{2}''
dfa.find.cause.nullability.inferred={0} Se infirió que ''{1}'' era ''{2}''
dfa.find.cause.nullability.inherited.from.class={0} ''{1}'' hereda anotación de la clase {2}, por lo que ''{3}''
dfa.find.cause.nullability.inherited.from.container={0} ''{1}'' hereda la anotación del contenedor, por lo tanto ''{2}''
dfa.find.cause.nullability.inherited.from.named.element={0} ''{1}'' hereda de {2}, por lo tanto ''{3}''
dfa.find.cause.nullability.inherited.from.package={0} ''{1}'' hereda la anotación del paquete {2}, por lo tanto ''{3}''
dfa.find.cause.numeric.cast.operand.template=el operando casting es %s
dfa.find.cause.numeric.range.generic.template=el valor es %s
dfa.find.cause.object.kind.expression=expresión
dfa.find.cause.object.kind.generic=un objeto
dfa.find.cause.object.kind.method.return=retorno de método
dfa.find.cause.obviously.non.null.expression=la expresión no puede ser nula al ser {0}
dfa.find.cause.one.of.the.following.happens=ocurre una de las siguientes situaciones:
dfa.find.cause.operand.of.boolean.expression.is.the.same=El operando #{0} de la cadena #{1, choice, 0#y|1#o} es {2}
dfa.find.cause.or.another=u {0}
dfa.find.cause.place.here=acá
dfa.find.cause.place.line.number=línea #{0}
dfa.find.cause.primitive.boxed=El valor primitivo fue boxeado
dfa.find.cause.range.is.known.from.place=el rango es conocido desde PLACE
dfa.find.cause.range.is.specified.by.annotation=el rango de ''{0}'' está especificado mediante anotación como {1}
dfa.find.cause.result.of.numeric.operation.template=el resultado de ''{0}'' es %s
dfa.find.cause.result.of.primitive.cast.template=el resultado de ''({0})'' que se convierte en %s
dfa.find.cause.right.operand.range.template=el operando derecho es %s
dfa.find.cause.size.is.always.zero=tamaño siempre es cero
dfa.find.cause.special.field.of.something={0} de {1}
dfa.find.cause.string.length.is.always.non.negative=la longitud de cadena es siempre no negativa
dfa.find.cause.type.is.known.from.place=el tipo de ''{0}'' se conoce desde PLACE
dfa.find.cause.type.known={0} tipo es {1}
dfa.find.cause.unable=Imposible encontrar la causa
dfa.find.cause.value.is.always.the.same=el valor siempre es {0}
dfa.find.cause.value.is.known.from.place=''{0}'' se sabe que es ''{1}'' de PLACE
dfa.find.cause.value.x.is.always.the.same=el valor ''{0}'' siempre es ''{1}''
dfa.find.cause.values.cannot.be.equal.because=los valores no pueden ser iguales, porque {0}
dfa.find.cause.variable.is.initialized={0} ''{1}'' se inicializó en {2}
dfa.find.cause.was.assigned=''{0}'' fue asignado
dfa.find.cause.was.assigned.to=''{0}'' fue asignado a ''{1}''
dfa.find.cause.was.dereferenced=''{0}'' fue desreferenciado
dfa.find.cause.was.passed.as.non.null.parameter=''{0}'' se pasó a un argumento de un método que acepta parámetros que no sean null
dftype.presentation.empty.optional=vacío Opcional
dftype.presentation.present.optional=opcional presente
don.t.report.unused.jars.inside.used.library=No reportar jars no usados dentro de la biblioteca usada
duplication.policy.ask=Preguntar
duplication.policy.generate.duplicate=Generar método duplicado
duplication.policy.replace=Reemplazar existente
element.kind.keys=Teclas
element.kind.objects=Objetos
element.kind.values=valores
error.class.not.found=Clase {0} no encontrada
error.message.invalid.java.type=Tipo Java no válido
error.unnamed.field.not.allowed=El campo sin nombre no está permitido
error.unnamed.method.parameter.not.allowed=No se permiten parámetros de método sin nombre
error.unnamed.variable.brackets=No se permiten corchetes después de la declaración de una variable sin nombre
error.unnamed.variable.not.allowed.in.this.context=Las declaraciones de variables sin nombre no son permitidas en este contexto
error.unnamed.variable.without.initializer=La declaración de una variable sin nombre debe tener un inicializador
exception.handler.will.become.unreachable=La sección Catch no será accesible
explicit.type.argument.ref.loc.can.be.replaced.with=El argumento de tipo explícito #ref #loc se puede reemplazar con <>
exports.to.itself.delete.module.ref.fix=Eliminar referencia al módulo ''{0}''
exports.to.itself.delete.statement.fix=Directiva eliminar
find.searching.for.references.to.class.progress=Buscando referencias a la clase {0}...
find.usages.panel.title.base.methods=usos del método base
find.usages.panel.title.base.methods.cap=Usos de método base
find.usages.panel.title.derived.classes=clases derivadas
find.usages.panel.title.derived.classes.cap=Clases derivadas
find.usages.panel.title.derived.interfaces=Interfaces derivadas
find.usages.panel.title.derived.interfaces.cap=Interfaces derivadas
find.usages.panel.title.implementing.classes=Clases implementadoras
find.usages.panel.title.implementing.classes.cap=Clases de implementación
find.usages.panel.title.implementing.methods=métodos implementadores
find.usages.panel.title.implementing.methods.cap=Métodos de implementación
find.usages.panel.title.overloaded.methods.usages=Métodos sobrecargados
find.usages.panel.title.overloaded.methods.usages.cap=Métodos sobrecargados
find.usages.panel.title.overriding.methods=métodos sobreescritos
find.usages.panel.title.overriding.methods.cap=Métodos de sobreescritura
generate.members.position.after.equals.and.hashcode=Después de equals() y hashCode()
generate.members.position.at.caret=En el cursor
generate.members.position.at.the.end.of.class=Al final de la clase
highlighting.try.blocks="Resaltando bloques try..."
html.classes.exposed.with.code.module.info.code.html=<html>Clases expuestas con el <code>module-info</code></html>
html.ignore.overrides.of.deprecated.abstract.methods=<html>Ignorar las sobreescrituras de métodos abstractos desaprobados de superclases no desaprobadas</html>
ignore.casts.in.suspicious.collections.method.calls=Ignorar aclaraciones de conversiones
ignore.exceptions.thrown.by.entry.points.methods=Ignorar excepciones lanzadas por métodos de puntos de entrada
ignore.in.the.same.outermost.class=Ignorar en la misma clase más externa
ignore.in.the.same.project=Ignorar API declarada en este proyecto
ignore.inside.deprecated.members=Ignorar dentro de elementos obsoletos
ignore.inside.non.static.imports=Ignorar dentro de las importaciones no estáticas
ignore.members.of.deprecated.classes=Ignorar miembros de las clases depreciadas
ignore.operation.which.results.in.negative.value=Ignorar operación '<<' que resulta en valor negativo
inspection.annotate.method.quickfix.family.name=Método de anotación
inspection.annotate.method.quickfix.name=Anotar método con ''@{0}''
inspection.annotate.overridden.method.and.self.quickfix.family.name=Annotar métodos sobrecargados y self
inspection.annotate.overridden.method.and.self.quickfix.name=Forzar anotación ''@{0}'' a métodos y sus instancias
inspection.annotate.overridden.method.nullable.quickfix.name=Annotar métodos sobreescritos como ''@{0}''
inspection.annotate.overridden.method.quickfix.family.name=Annotate methods override
inspection.annotate.overridden.method.quickfix.name=Anotar métodos de sobrescritura con ''@{0}''
inspection.anonymous.has.lambda.alternative.display.name=El tipo anónimo contiene alternativa más corta de lambda
inspection.block.marker.comments.display.name=Marcador de bloqueo comentarios
inspection.c.style.array.declarations.option=Ignorar declaraciones tipo C en variables
inspection.can.be.final.accept.quickfix=Convertir en final
inspection.can.be.final.display.name=La declaración puede tener el modificador 'final'
inspection.can.be.final.option=Informar clases
inspection.can.be.final.option1=Reportar métodos
inspection.can.be.final.option2=Informar campos
inspection.can.be.local.parameter.problem.descriptor=El parámetro <code>#ref</code> puede tener el modificador <code>final</code>
inspection.can.be.local.variable.problem.descriptor=La variable <code>#ref</code> puede tener el modificador <code>final</code>
inspection.can.be.replaced.with.message=Se puede reemplazar con ''{0}''
inspection.class.getclass.display.name=Llamada sospechosa a 'Class.getClass()'
inspection.class.getclass.fix.remove.name=Remover la llamada 'getClass()'
inspection.class.getclass.fix.replace.name=Sustituir por 'Class.class'
inspection.class.getclass.message='getClass()' se llama en la instancia Clase
inspection.class.has.no.to.string.method.description=La clase ''{0}'' no sobreescribe el método ''toString()''
inspection.class.has.no.to.string.method.display.name=La clase no sobrescribe el método 'toString()'
inspection.class.has.no.to.string.method.exclude.classes.reg.exp.option=Excluye clases (reg exp):
inspection.class.has.no.to.string.method.ignore.abstract.classes.option=Ignorar abstractas
inspection.class.has.no.to.string.method.ignore.deprecated.classes.option=Ignorar las clases obsoletas
inspection.class.has.no.to.string.method.ignore.enum.classes.option=Ignorar clases enumeradas
inspection.class.has.no.to.string.method.ignore.exception.classes.option=Ignorar clases de excepción
inspection.class.has.no.to.string.method.ignore.inner.classes.option=Ignorar clases internas
inspection.class.has.no.to.string.method.ignore.records.option=Ignorar registros
inspection.class.has.no.to.string.method.ignore.test.classes.option=Ignorar clases de prueba
inspection.common.if.parts.disable.highlight.tail.call=No resaltar partes comunes, si la sentencia de cola es llamada
inspection.common.if.parts.family=Extraer partes comunes de la sentencia 'if'
inspection.common.if.parts.family.else.if=Unir instrucción 'else if'
inspection.common.if.parts.family.else.if.description=se puede fusionar 'else if'
inspection.common.if.parts.family.else.if.invert=Combinar 'else if' invirtiendo la segunda condición
inspection.common.if.parts.settings.highlight.else.if=Resalta cadenas else-if que pueden simplificarse
inspection.common.if.parts.settings.highlight.when.tail.call=Resaltar cuando la última instrucción en común es una llamada
inspection.compiler.javac.quirks.anno.array.comma.fix=Eliminar coma final
inspection.compiler.javac.quirks.anno.array.comma.problem=Las comas finales en los inicializadores de arreglos de anotación pueden causar errores de compilación al utilizar versiones anteriores de javac (por ejemplo, JDK 5 y JDK 6)
inspection.compiler.javac.quirks.illegal.forward.reference=Las referencias hacia delante pueden causar errores de compilación al utilizar versiones anteriores de javac (por ejemplo, JDK 5 y JDK 6)
inspection.compiler.javac.quirks.name=Peculiaridades de javac
inspection.compiler.javac.quirks.qualifier.type.args.fix=Eliminar el parámetro genérico
inspection.compiler.javac.quirks.qualifier.type.args.problem=Los genéricos en referencias de calificadores pueden causar errores de compilación al usar versiones anteriores de javac (por ejemplo, JDK 5 y JDK 6)
inspection.constant.on.wrong.side.of.a.comparison.side.option=La constante debe estar en el lado de la comparación
inspection.contract.checker.boolean.condition.for.nonboolean.parameter=El parámetro ''{0}'' tiene el tipo ''{1}'' (se esperaba booleano)
inspection.contract.checker.clause.syntax=Una cláusula de contrato debe tener la forma arg1, ..., argN -> valor devuelto
inspection.contract.checker.contract.clause.never.satisfied=La cláusula del contrato ''{0}'' nunca se cumple ya que sus condiciones están cubiertas por contratos anteriores
inspection.contract.checker.contract.violated=La cláusula del contrato ''{0}'' está violada
inspection.contract.checker.empty.constraint=La restricción no debe estar vacía
inspection.contract.checker.inferred.notnull.parameter.notnull=El parámetro ''{0}'' se infiere que no es nulo, por lo que ''!null'' siempre se cumple
inspection.contract.checker.inferred.notnull.parameter.null=El parámetro ''{0}'' se infiere como no nulo, por lo que no se puede asignar el ''null''
inspection.contract.checker.method.always.fails.nontrivial=El valor devuelto de la cláusula "{0}" podría reemplazarse por "fail", pues el método siempre falla en este caso
inspection.contract.checker.method.always.fails.trivial=El valor devuelto de la cláusula ''{0}'' could be replaced with ''fail'' como método always fails
inspection.contract.checker.no.exception.thrown=La cláusula del contrato ''{0}'' ha sido violada: no se ha lanzado excepción
inspection.contract.checker.notnull.parameter.notnull=El parámetro ''{0}'' está anotado como no nulo, por lo tanto ''!null'' siempre se cumple
inspection.contract.checker.notnull.parameter.null=El parámetro ''{0}'' está anotado como no nulo, por lo que ''null'' no es aplicable
inspection.contract.checker.parameter.count.mismatch=Método acepta {0} parámetros, mientras que la cláusula de contrato ''{1}'' espera {2}
inspection.contract.checker.primitive.parameter.nullability=El parámetro ''{0}'' tiene un tipo primitivo ''{1}'' por lo que ''{2}'' no es aplicable
inspection.contract.checker.pure.method.mutation.contract=El método puro no puede tener un contrato de mutación
inspection.contract.checker.unknown.constraint=La restricción debe ser una de: {0}. Se encontró: {1}
inspection.contract.checker.unknown.return.value=El valor de retorno debería ser uno de: {0}. Encontrado: {1}
inspection.contract.checker.unreachable.contract.clause=La cláusula del contrato ''{0}'' no es alcanzable: los contratos anteriores cubren todos los casos posibles
inspection.contract.display.name=Problemas de contrato
inspection.convert.2.diamond.display.name=Tipo explícito puede ser reemplazado con '<>'
inspection.convert.2.lambda.display.name=Se puede reemplazar el tipo anónimo con lambda
inspection.data.flow.redundant.instanceof.quickfix=Reemplazar con una comprobación de nulidad
inspection.data.flow.simplify.boolean.expression.quickfix=Simplificar la expresión booleana
inspection.data.flow.simplify.to.assignment.quickfix.name=Simplificar a asignación normal
inspection.data.flow.turn.off.constant.references.quickfix=No mostrar valores que están garantizados como constantes
inspection.data.flow.turn.off.nullable.returning.notnull.quickfix=No informar acerca de métodos anulables que siempre devuelven un valor no nulo
inspection.data.flow.turn.off.true.asserts.quickfix=No reportar afirmaciones siempre verdaderas
inspection.data.flow.warn.when.reading.a.value.guaranteed.to.be.constant=Avisar cuando una constante se almacena en una variable
inspection.depends.on.the.java.feature=Esta inspección depende de la característica de Java ''{0}'', disponible desde Java {1}.
inspection.depends.on.the.java.features=La inspección depende de las siguientes características de Java:
inspection.depends.on.the.java.features.minimal.version=Estas funcionalidades están disponibles desde Java {0} en adelante.
inspection.deprecated.class.usage.inspection.display.name=Uso de API obsoleta en XML
inspection.deprecated.is.still.used.display.name=Miembro en desuso todavía se utiliza
inspection.duplicate.throws.display.name=Lanzamientos duplicados
inspection.duplicate.throws.ignore.subclassing.option=Ignorar excepciones que subclasean otras
inspection.duplicate.throws.more.general.problem=Ya hay una excepción más general, ''{0}'', en la lista de excepciones lanzadas.
inspection.duplicate.throws.problem=Throws duplicado
inspection.equals.hashcode.only.one.defined.problem.descriptor=La clase tiene {0} definido pero no define {1}
inspection.export.results.can.be.final.description=La declaración puede tener un modificador final
inspection.expression.can.be.replaced.with.message=La expresión se puede reemplazar con ''{0}''
inspection.extract.method.dont.suggest.length=No sugerir la extracción de métodos tan cortos
inspection.extract.method.dont.suggest.parameters=No sugerir extraer método con {0} o más parámetros
inspection.extract.method.inspection.name=El método se puede extraer
inspection.extract.method.message=Es posible extraer el método que devuelve ''{0}'' a partir de un método envolvente largo
inspection.extract.method.nothing=nada
inspection.extract.method.option.max.parameters=Número máximo de parámetros:
inspection.extract.method.option.min.length=Longitud mínima para extraer código: | símbolos
inspection.extract.method.preview.html=Extraer {0} sentencias en un método, el cual acepta {1} y retorna <b>{2}</b>
inspection.field.access.not.guarded.display.name=Acceso al campo o llamada a método desprotegida
inspection.field.not.used.in.to.string.description=El método ''{0}'' no se usa en el método ''toString()''
inspection.field.not.used.in.to.string.description2=El campo ''{0}'' no es usado en el método ''toString()''
inspection.field.not.used.in.to.string.display.name=Campo no usado en el método "toString()"
inspection.fix.name.remove.scheduled.for.removal.annotation.by.attribute=Reemplazar '@ScheduledForRemoval' con el atributo 'forRemoval' en la anotación '@Deprecated'
inspection.i18n.quickfix.annotate=Anotar...
inspection.i18n.quickfix.annotate.as=Anotar como ''@{0}''
inspection.i18n.quickfix.annotate.element=Anotar {0} ''{1}''...
inspection.i18n.quickfix.annotate.element.as=Comentar {0} ''{1}'' como ''@{2}''
inspection.implicit.subclass.display.forClass=La clase ''{0}'' puede tener subclases implícitas y no debe ser final
inspection.implicit.subclass.display.name=La declaración final no se puede sobreescribir en tiempo de ejecución
inspection.implicit.subclass.extendable=Hacer ''{0}'' sobrescribible
inspection.implicit.subclass.make.class.extendable=Haga que la clase ''{0}'' {1,choice,0#|1#y el método {2} |1<y los {1} métodos requeridos }extensible
inspection.inconsistent.language.level.display.name=Ajustes de idioma de nivel inconsistentes
inspection.infinite.loop.option=Ignorar cuando se coloca en Thread.run
inspection.instance.guarded.by.static.display.name=Miembro de instancia protegido por campo estático
inspection.invalid.comparator.method.reference.display.name=Referencia de método no válida usada para 'Comparator'
inspection.java.8.list.sort.display.name='Collections.sort()' puede ser reemplazado con 'List.sort()'
inspection.java.9.redundant.requires.statement.display.name="requires" redundante en module-info
inspection.java.module.naming=El nombre del módulo de Java contradice la convención
inspection.java.module.naming.terminal.digits=El componente del nombre del módulo ''{0}'' debe evitar dígitos terminales
inspection.local.can.be.final.display.name=La variable o parámetro local puede ser 'final'
inspection.local.can.be.final.option=Reportar variables locales
inspection.local.can.be.final.option1=Reportar parámetros de método
inspection.local.can.be.final.option2=Reportar parámetros de catch
inspection.local.can.be.final.option3=Reportar parámetros foreach
inspection.local.can.be.final.option4=<html>Reportar variables implícitamente finales<br/>(parámetros multi-catch o try-with-resources)</html>
inspection.local.can.be.final.option5=Informar variables de patrón
inspection.message.code.generation.different.nullability.annotation.will.be.used=El código generado utilizará ''@{1}'' en vez de ''@{0}''
inspection.message.expression.compared.to.itself.description=La expresión se compara consigo misma
inspection.message.javac.quick.intersection.type.problem=El tipo de intersección ''{0}'' no se puede instanciar, porque ''{1}'' es final
inspection.message.non.annotated.method.implements.non.null.method=El método no anotado ''{0}'' de ''{1}'' implementa el método no nulo de ''{2}''
inspection.message.non.annotated.parameter.should.not.override.non.null.parameter=El parámetro sin anotación {{0}} en el método {{1}} de {{2}} no debería sobreescribir el parámetro no nulo de {{3}}
inspection.message.non.null.parameter.should.not.override.non.annotated.parameter=El parámetro no nulo ''{0}'' del método ''{1}'' de ''{2}'' no debiera sobreescribir el parámetro no anotado de ''{3}''
inspection.message.non.null.parameter.should.not.override.nullable.parameter=El parámetro no nulo ''{0}'' en el método ''{1}'' de ''{2}'' no debería sobreescribir el parámetro nulo de ''{3}''
inspection.message.nullable.method.implements.non.null.method=El método nullable ''{0}'' de ''{1}'' implementa el método no nullable de ''{2}''
inspection.message.scheduled.for.removal.annotation.can.be.removed=La anotación @ScheduledForRemoval se puede eliminar
inspection.message.scheduled.for.removal.annotation.can.be.replaced.by.attribute=La anotación @ScheduledForRemoval se puede reemplazar con el atributo 'forRemoval' en la anotación @Deprecated
inspection.module.exports.package.to.itself=Módulo exporta/abre paquete para sí mismo
inspection.name.can.be.replaced.with.long.hashcode=Se puede utilizar el método estándar 'hashCode()'
inspection.name.redundant.scheduled.for.removal.annotation=Anotación redundante @ScheduledForRemoval
inspection.non.final.field.in.immutable.display.name=Campo no final en clase '@Immutable'
inspection.non.final.guard.display.name=Campo '@GuardedBy' no final
inspection.nullable.problems.NotNull.parameter.overrides.Nullable=El parámetro anotado @{0} no puede anular el parámetro @{1}
inspection.nullable.problems.NotNull.parameter.overrides.not.annotated=Parámetro anotado, @{0}, no debe sobreescribir parámetro no anotado
inspection.nullable.problems.NotNull.parameter.receives.null.literal=El parámetro anotado con @{0} no debería recibir ''null'' como argumento
inspection.nullable.problems.Nullable.NotNull.conflict=No se puede anotar con @{0} y @{1}
inspection.nullable.problems.Nullable.method.overrides.NotNull=Método con anotaciones @{0} no puede sobreescribir el método @{1}
inspection.nullable.problems.annotated.field.constructor.parameter.not.annotated=El parámetro del constructor para el campo @{0} puede estar anotado @{0} en sí
inspection.nullable.problems.annotated.field.getter.conflict=Getter para el campo @{0} está anotado con @{1}
inspection.nullable.problems.annotated.field.getter.not.annotated=Getter para el campo @{0} podría estar anotado @{0} como sí mismo
inspection.nullable.problems.annotated.field.setter.parameter.conflict=El parámetro setter para el campo @{0} está anotado con @{1}
inspection.nullable.problems.annotated.field.setter.parameter.not.annotated=El parámetro del setter para el campo @{0} debe estar anotado con @{0}
inspection.nullable.problems.applied.to.package=La anotación con nombre completo debe colocarse antes del último componente
inspection.nullable.problems.at.class=La anotación de nulabilidad no se aplica a clases
inspection.nullable.problems.at.constructor=La anotación de posibilidad de nulo no es aplicable a los constructores
inspection.nullable.problems.at.enum.constant=La anotación de nulidad no aplica para constantes enumerables
inspection.nullable.problems.at.local.variable=La anotación de nulidad no es aplicable a variables locales
inspection.nullable.problems.at.reference.list=La anotación de nulidad no es aplicable a la cláusula extends/implements
inspection.nullable.problems.at.type.parameter=La anotación de nulidad no es aplicable a los parámetros de tipo
inspection.nullable.problems.at.wildcard=La anotación de confiabilidad no es aplicable al tipo comodín
inspection.nullable.problems.method.overrides.NotNull=Método no anotado reemplaza método anotado con @{0}
inspection.nullable.problems.outer.type=El tipo externo es inherentemente no nulo
inspection.nullable.problems.parameter.overrides.NotNull=El parámetro sin anotación sobrescribe el parámetro @{0}
inspection.nullable.problems.primitive.type.annotation=Los miembros de tipos primitivos no pueden ser anotados
inspection.nullable.problems.receiver.annotation=El parámetro de receptor no es nulo inherentemente
inspection.numeric.overflow.display.name=Desbordamiento numérico
inspection.objects.equals.can.be.simplified.display.name='Objects.equals()' puede ser reemplazado por 'equals()'
inspection.quirk.method.reference.return.type.message=El tipo de retorno del método de destino menciona la clase {0} inaccesible, esto causará un IllegalAccessError en tiempo de ejecución
inspection.redundant.cast.display.name=Conversión de tipos redundante
inspection.redundant.cast.methodref.descriptor=La conversión es redundante
inspection.redundant.cast.problem.descriptor=La conversión de <code>{0}</code> a <code>#ref</code> #loc es redundante
inspection.redundant.cast.remove.quickfix=Eliminar casteo(s) redundantes
inspection.redundant.field.initialization.option=Solo avisar en inicialización nula
inspection.redundant.requires.statement.description=Directiva redundante ''requires {0}''.
inspection.redundant.requires.statement.fix.family=Borrar directiva redundante 'requires'
inspection.redundant.requires.statement.fix.name=Eliminar directiva ''requires {0}''
inspection.redundant.requires.statement.message.java.base.implicitly.required=java.base se requiere implícitamente.
inspection.redundant.requires.statement.message.module.unused=No se encontraron usos para el módulo
inspection.redundant.requires.statement.message.transitive.dependencies.on.can.be.used.directly=Las dependencias transitivas en ''{0}'' se pueden usar directamente.
inspection.redundant.throws.display.name=Cláusula 'throws' redundante
inspection.redundant.throws.problem.descriptor=La excepción declarada <code>#ref</code> nunca es lanzada en ninguna implementación de método
inspection.redundant.throws.problem.descriptor1=La excepción declarada <code>#ref</code> nunca se lanza en este método o en sus métodos sobrescritos
inspection.redundant.throws.problem.descriptor2=La excepción declarada <code>#ref</code> nunca es lanzada
inspection.redundant.throws.remove.quickfix=Eliminar declaraciones 'throws' innecesarias
inspection.redundant.tostring.option.notnull.qualifier=Informar sólo cuando se sabe que el calificador no es nulo
inspection.redundant.type.display.name=Argumentos de tipo redundantes
inspection.redundant.type.no.generics.method.reference.problem.descriptor=Los argumentos de tipo son redundantes para la referencia de método no genérica
inspection.redundant.type.no.generics.problem.descriptor=Los argumentos de tipo son redundantes para la llamada de método no genérica
inspection.redundant.type.problem.descriptor=Los argumentos de tipo explícitos se pueden deducir
inspection.redundant.type.remove.quickfix=Eliminar argumentos de tipo
inspection.reference.anonymous.class=Clase anónima
inspection.reference.anonymous.name=anónimo ({0})
inspection.reference.default.lambda.name=lambda
inspection.reference.default.method.reference.name=referencia de método
inspection.reference.default.package=<paquetepordefecto>
inspection.reference.implicit.class=Clase implícita en el archivo ''{0}''
inspection.reference.implicit.constructor.name=Constructor implícito de {0}
inspection.reference.jsp.holder.method.anonymous.name=<% contenido de la página %>
inspection.reference.lambda.name=lambda ({0})
inspection.reference.method.reference.name=Referencia de método ({0})
inspection.requires.auto.module=Dependencias de módulos automáticos
inspection.requires.auto.module.message=La directiva 'requires' para un módulo automático
inspection.requires.auto.module.option=Resaltar solo dependencias transitivas
inspection.requires.auto.module.transitive=Directiva 'requires transitive' para un módulo automático
inspection.safe.varargs.detector.display.name=Posible contaminación de montón desde un tipo varargs parametrizado
inspection.same.return.value.display.name=El método siempre devuelve el mismo valor
inspection.same.return.value.problem.descriptor=El método <code>#ref()</code> siempre devuelve <code>{0}</code>
inspection.same.return.value.problem.descriptor1=El método `#ref()` y todos sus métodos de anulación siempre devuelven `{0}`
inspection.same.return.value.problem.descriptor2=Todas las implementaciones del método <code>#ref()</code> siempre devuelven <code>{0}</code>
inspection.static.guarded.by.instance.display.name=Miembro estático protegido por campo de instancia o this
inspection.string.tokenizer.delimiter.display.name=Delimitadores duplicados en 'StringTokenizer'
inspection.surround.requirenonnull.quickfix=Reemplazar con ''Objects.requireNonNull({0})''
inspection.suspicious.array.method.call.display.name=Llamada al método sospechoso 'Arrays'
inspection.suspicious.array.method.call.problem.arrays=Tipos de array son incompatibles: arrays habitualmente distintos
inspection.suspicious.array.method.call.problem.element=El tipo de elemento no es compatible con el tipo de matriz
inspection.suspicious.collections.method.calls.display.name=Llamada de método de colección sospechoso
inspection.suspicious.collections.method.calls.problem.descriptor=''{0}'' puede no contener {2} del tipo ''{1}''
inspection.suspicious.collections.method.calls.problem.descriptor1=Llamada sospechosa a ''{0}''
inspection.suspicious.getter.setter.field.option=Solo advertir cuando el campo coincida con el nombre getter/setter
inspection.suspicious.integer.div.assignment.option=Reportar divisiones sospechosas pero posiblemente exactas
inspection.unary.plus.unary.binary.option=Informar solo en contextos de expresiones unarias o binarias confusas
inspection.unknown.guard.display.name=Campo '@GuardedBy' desconocido
inspection.unnecessary.super.qualifier.option=Ignorar el calificador "super" de aclaración
inspection.unsatisfied.range.display.name=El valor de retorno está fuera del rango declarado
inspection.unsatisfied.range.message=El rango de valores de retorno ''{0}'' está fuera del rango declarado ''{1}''
inspection.unsatisfied.range.message.value=El valor devuelto ''{0}'' está fuera del rango declarado ''{1}''
inspection.use.compare.method.display.name=El método 'compare()' se puede utilizar para comparar números
inspection.use.compare.method.fix.family.name=Reemplazar por método de comparación único
inspection.use.compare.method.option.double=Sugiere 'Double.compare()' y 'Float.compare()'
inspection.use.compare.method.turn.off.double=No sugerir los métodos Double.compare() y Float.compare()
inspection.visibility.accept.quickfix=Aceptar nivel de acceso sugerido
inspection.visibility.compose.suggestion=Puede ser {0}
inspection.visibility.option.constants=Sugerir menor visibilidad para constantes
inspection.visibility.option.package.private.members=Sugiere el nivel de visibilidad de paquete privado para los miembros de la clase
inspection.visibility.package.private.top.level.classes=Sugerir nivel de visibilidad package-private para las clases de nivel superior
inspection.visibility.private.inner.members=Sugerir 'private' para los miembros de la clase interna cuando se hace referencia sólo desde la clase externa
inspection.weaker.access.display.name=El acceso a la declaración puede ser más débil
instance.member.guarded.by.static.0.loc=Miembro de instancia protegido por estático "{0}" #loc
instance.member.guarded.by.static.ref.loc=Miembro instancia protegido por #ref estática #loc
intention.add.annotation.family=Añadir anotación
intention.add.type.annotation.family=Añadir anotación de tipo
intention.family.name.move.annotation.to.array=Mover anotación a matriz
intention.family.name.move.annotation.to.upper.bound=Mover anotación a límite superior
intention.family.name.move.members.into.class=Mover miembros a clase
intention.family.name.move.members.to=Mover miembros a {0}
intention.family.name.remove.new.family.name="new" remover
intention.family.name.remove.repeating.call=Remover llamada repetida
intention.family.name.replace.with.expression=Reemplazar con expresión
intention.family.name.replace.with.unnamed.pattern=Reemplazar con patrón no nombrado
intention.name.do.not.report.conditions.with.possible.side.effect=No reportar condiciones con posible efecto colateral
intention.name.ignore.exception=Ignorar excepción ''{0}''
intention.name.make.variable.effectively.final=Establecer variable como effectively final
intention.name.move.members.into.class=Mover {0, choice, 1#miembro|2#miembros} a clase
intention.name.qualify.expression=Calificar {0} expresión con ''{1}''
intention.name.remove.repeating.call=Quitar llamada repetida ''{0}()''
intention.text.remove.annotation=Eliminar
make.0.default.annotation=Convertir "{0}" en anotación predeterminada
make.default.the.last.case.family.name=Hacer 'default' el último case
make.final.and.annotate.as.safevarargs=Establecer como final y anotar como '@SafeVarargs'
message.class.inaccessible=La clase ''{0}'' no es accesible aquí
message.class.inaccessible.from.module=La clase ''{0}'' no es accesible desde el módulo ''{1}''
method.reference.mapped.to.comparator=La referencia del método mapeada a la interfaz 'Comparator' no cumple con el contrato 'Comparator'
missorted.imports.inspection.display.name=Importaciones desordenadas
module.0.with.language.level.1.depends.on.module.2.with.language.level.3=El módulo {0} con nivel de lenguaje {1} depende del módulo {2} con nivel de lenguaje {3}
move.0.to.the.beginning=Mover ''{0}'' al principio
move.annotations.to.package.info.file.family.name=Mover anotaciones al archivo de información del paquete
move.to.front=Traer al frente
mutability.modifiable=modificable
mutability.must.not.modify=Parámetro de entrada que no debe modificarse
mutability.unknown=desconocida
mutability.unmodifiable=inmutable
mutability.unmodifiable.view=vista inmutable
mutation.signature.problem.invalid.token=Token no válido: {0}; los admitidos son: ''this'', ''param1'', ''param2'', etc.
mutation.signature.problem.parameter.has.immutable.type=El parámetro #{0} tiene tipo inmutable ''{1}''
mutation.signature.problem.reference.to.parameter.invalid=Referencia a parámetro #{0} es inválida
mutation.signature.problem.static.method.cannot.mutate.this=El método estático no puede modificar 'this'
navigate.to.overridden.methods.title=Métodos que anulan en {0}
non.final.field.code.ref.code.in.immutable.class.loc=Campo no final <code>#ref</code> en clase @Immutable  #loc
non.final.guarded.by.field.0.loc=Campo no final @GuardedBy "{0}" #loc
non.final.guarded.by.field.ref.loc=No final @GuardedBy campo #ref #loc
non.null.type.argument.is.expected=Se espera un argumento de tipo no-nulo
notification.content.cannot.move.file=No se puede mover ''{0}'' a ''{1}'' debido a: {2}
notification.file.system.issue=Inconveniente de operación de archivos
nullability.non.null=no-nulo
nullability.null=nulo
nullability.nullable=nullable
nullable.stuff.error.overriding.notnull.with.nullable=Sobreescribir una colección de elementos no nulos con una colección de elementos con valores NULL
nullable.stuff.error.overriding.nullable.with.notnull=Sobreescribir una colección de elementos que admiten valores nulos con una colección de elementos que no admiten valores nulos
nullable.stuff.problems.overridden.method.parameters.are.not.annotated=Los parámetros sobreescritos del método no están anotados
nullable.stuff.problems.overridden.methods.are.not.annotated=Los métodos sobreescritos no están anotados
parameter.can.be.null=El parámetro puede ser nulo
parameter.is.always.not.null=El parámetro siempre no es nulo
possible.heap.pollution.from.parameterized.vararg.type.loc=Posible contaminación del montón a partir del tipo vararg parametrizado #loc
processing.method.usages=Procesando usos del método...
progress.title.searching.for.overridden.methods=Buscando métodos sobreescritos
provided.type=Proporcionado
qualify.0=Calificar {0}
qualify.with.0.this=Cualificar con {0}.this
reassign.variable.display.name=Variable reasignada
redundant.block.marker=Marcador de bloque redundante
remove.annotation=Quitar anotación
remove.block.marker.comments=Eliminar comentario de marcador de bloque
remove.dependency=Quitar dependencia
remove.left.side.of.assignment=Eliminar lado izquierdo de asignación
remove.switch.branch.0=Eliminar rama switch ''{0}''
remove.switch.label=Eliminar etiqueta de switch
remove.switch.label.0=Eliminar etiqueta switch ''{0}''
replace.0.with=Reemplazar ''''{0}'''' por ''''=''''
replace.anonymous.class.with.lambda.alternative=Reemplazar clase anónima con lambda alternativa
replace.get.class.with.class.literal=Reemplazar getClass() con literal de clase .class
replace.operator.assignment.with.assignment=Reemplazar Asignación de Operadores con Asignación
replace.stringtokenizer.delimiters.parameter.with.unique.symbols=Quitar la duplicidad del argumento 'delimiters'
replace.var.with.explicit.type=Reemplazar 'var' por tipo explícito
replace.with.0=reemplazar con {0}
replace.with.boolean.equals=Reemplazar con Boolean.equals
replace.with.comparator=Sustituir con comparador
replace.with.constant.value=Reemplazar con valor constante
replace.with.constant.value.title=Reemplazar con valor constante
replace.with.expression.lambda=Reemplazar con expresión lambda
replace.with.lambda=Sustituir por lambda
replace.with.stream.api.fix=Reemplazar con stream API ''{0}()''
report.suspicious.but.possibly.correct.method.calls=Informar llamadas a método sospechosas pero posiblemente correctas(&R)
report.when.interface.is.not.annotated.with.functional.interface=Reportar cuando la interfaz no está anotada con @FunctionalInterface
required.type=Tipo requerido
scope.package=Paquete {0}
searching.for.overriding.methods=Buscando Métodos Sobreescritos
service.click.to.navigate=Clic para navegar
service.provides=Provee servicio
service.uses=Usa servicio
special.field.array.length=Longitud del array
special.field.collection.size=Tamaño
special.field.consumed.stream=Flujo enlazado o consumido
special.field.enum.ordinal=Ordinal del enum
special.field.instantiable.class=Clase instanciable
special.field.optional.value=Valor opcional
special.field.string.length=Longitud de la cadena
special.field.unboxed.value=Valor desempaquetado
statement.lambda.can.be.replaced.with.expression.lambda=Sentencia lambda se puede reemplazar con expresión lambda
static.inheritrance.fix.replace.progress=Reemplazando los usos de {0}
static.member.guarded.by.instance.0.loc=Miembro estático protegido por la instancia "{0}" #loc
static.member.guarded.by.instance.ref.loc=Miembro estático guardado por instancia #ref #loc
subclasses.search.progress.title=Buscando métodos sobreescritos
suggest.package.private.visibility.level.for.classes.in.exported.packages.java.9=Sugiere el nivel de visibilidad de package-private para clases en paquetes exportados (Java 9+)
suppress.all.for.class=Suprimir todas las inspecciones para la clase
suppress.for.parameter=Suprimir para el parámetro
suppress.for.statement.with.comment=Suprimir para sentencia con comentario
suppress.inspection.class=Suprimir para clase
suppress.inspection.field=Suprimir por campo
suppress.inspection.member=Suprimir para miembro
suppress.inspection.method=Suprimir para el método
suppress.inspection.module=Suprimir para la declaración del módulo
suspected.module.dependency.problem.descriptor=El módulo ''{0}'' no depende del módulo ''{1}''. No obstante, ''{1}'' no se inspeccionó para las dependencias exportadas que son necesarias para el ámbito ''{2}''
suspicious.invocation.handler.implementation.display.name=Implementación 'InvocationHandler' sospechosa
suspicious.invocation.handler.implementation.method.unused.message=El método nunca se usa en 'invoke()': es poco probable que se implementen correctamente 'hashCode()'', 'equals()' y 'toString()'
suspicious.invocation.handler.implementation.null.returned.for.toString.message=Se podría devolver nulo al utilizar la representación como proxy del método 'toString()': no se recomienda
suspicious.invocation.handler.implementation.null.returned.message=El método ''{0}()'' puede devolver Null al invocar el método proxy: esto puede provocar un NullPointerException
suspicious.invocation.handler.implementation.type.mismatch.message=El tipo incompatible podría regresar cuando se proxy el método ''{0}()'': requerido: {1}; obtenido: {2}
text.raw.ctor.reference.with.type.parameters=Referencia de constructor sin formato con parámetros de tipo explícitos para el constructor
text.shebang.mechanism.in.java.files.not.permitted=El mecanismo Shebang en archivos .java no está permitido
text.unused.import.in.template=Importación no utilizada (especificada en plantilla)
type.constraint.assignability.explanation.definitely.inconvertible={0} se sabe que es {1} cuyo tipo es definitivamente incompatible con {2}
type.constraint.assignability.explanation.exact={0} ya se sabe que es {1}
type.constraint.assignability.explanation.exact.not.subtype={0} es de tipo {1} que no es un subtipo de {2}
type.constraint.assignability.explanation.exact.subtype={0} tipo es exactamente {1} que es un subtipo de {2}
type.constraint.assignability.explanation.not.instance.of={0} se sabe que no es {1}
type.constraint.assignability.explanation.not.instance.of.supertype={0} no es una instancia de {1}, que es un supertipo de {2}
type.constraint.assignability.explanation.subtype.of.subtype={0} ya es conocido como un {1} que es un subtipo de {2}
type.mismatch.reason=motivo: {0}
uast.language.display.name=Lenguajes JVM
unknown.guardedby.reference.0.loc=Desconocido @GuardedBy referencia "{0}" #loc
unknown.guardedby.reference.ref.loc=Desconocido @GuardedBy referencia #ref #loc
unnecessary.module.dependency.display.name=Dependencia de módulo innecesario
unnecessary.module.dependency.problem.descriptor=Los fuentes del módulo ''{0}'' no dependen de los fuentes del módulo ''{1}''
unused.import.display.name=Importación no utilizada
unused.import.statement=Importación no usada
unused.library.display.name=Librería no utilizada
unused.library.problem.descriptor=Librería sin usar ''{0}''
unused.library.roots.problem.descriptor=Raíces no usadas {0} de la librería ''{1}''
var.can.be.replaced.with.explicit.type='var' puede reemplazarse con tipo explícito
vararg.method.call.with.50.poly.arguments=Las llamadas de métodos Vararg con más de 50 argumentos polimórficos puedne provocar una ralentización de la compilación y del análisis