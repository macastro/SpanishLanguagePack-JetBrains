git.annotate.add.shortcut.tip=<strong>Consejo</strong>: Puede especificar una tecla de método abreviado para la acción {0}. Haga clic en este enlace {1} para seleccionar {2}.
git.annotate.choose.annotate=Al seleccionar la opción {0} se mostrará el historial de este archivo.
git.annotate.choose.show.diff=Al seleccionar la opción {0} se mostrarán los cambios realizados en esta confirmación.
git.annotate.click.annotation=Puede obtener una vista previa de la información de esta confirmación haciendo clic en la anotación resaltada.
git.annotate.click.annotation.tooltip=Haga clic derecho en la anotación
git.annotate.click.gutter.balloon=Haga clic derecho en el margen
git.annotate.close.all.windows=Según el mensaje de confirmación resaltado, este extraño valor de {0} no es un error. Ahora que ha terminado su largo viaje a través del historial de este archivo, todo lo que tiene que hacer es cerrar {1,choice,0#todas las ventanas abiertas|1#ventana actual y todas las pestañas abiertas del editor} y regresar al editor. . Presione {2} 3 veces.
git.annotate.close.annotations=Ahora puede cerrar la anotación.
git.annotate.close.by.shortcut=Presione {0}.
git.annotate.close.changes=Según el mensaje de confirmación resaltado, el extraño valor de {0} no es un error. Entonces, después de mirar el historial de este archivo, puede cerrar cualquier ventana abierta y regresar al editor. Presiona 1}.
git.annotate.feature.explanation=La acción {0} le permite acceder fácilmente a la última confirmación que modificó una línea específica en un archivo. Vemos que esta línea fue modificada por última vez por alguien llamado {1}. Haga clic derecho en la anotación resaltada para abrir el menú contextual.
git.annotate.found.needed.commit=¡Bien hecho! Encontré la ubicación donde cambió el valor {0}. Entonces, finalmente investiguemos el motivo de este cambio agregando una anotación a esta ubicación.
git.annotate.go.deeper=Se muestra el valor de {0} antes de esta confirmación. ¡Así que echemos un vistazo más de cerca a los registros!
git.annotate.help.link=Buscar autor del código (anotar con Git Blame)
git.annotate.introduction=Consulte las propiedades destacadas. El valor de la propiedad significa que el gato tiene 4 orejas. Tengo curiosidad sobre el motivo de este cambio. En este punto, puede utilizar la función {0} para examinar el historial del archivo.
git.annotate.invoke.manually=Haga clic derecho en el área resaltada y seleccione la opción {0} en el menú que se abre.
git.annotate.invoke.manually.2=Haga clic derecho en el área resaltada y seleccione la opción {0} del menú.
git.annotate.invoke.shortcut.1=Al hacer clic en {0} se mostrará el historial de este archivo.
git.annotate.invoke.shortcut.2=Mueva el cursor al editor de la izquierda y presione {0} nuevamente.
git.annotate.invoke.shortcut.3=Mueva el cursor al editor derecho y presione {0}.
git.annotate.lesson.name=Agregar anotaciones con Git Blame
git.annotate.open.context.menu=Haga clic derecho en el margen izquierdo resaltado para abrir el menú contextual.
git.annotate.show.diff=Haga clic derecho en la anotación resaltada para abrir el menú contextual y seleccione {0}.
git.changelists.shelf.choose.new.changelist=Haga clic en {0} y luego seleccione el elemento del menú {1}.
git.changelists.shelf.click.changelist.tooltip=Haga clic derecho en la lista de cambios {0}
git.changelists.shelf.click.line.marker.balloon=Haga clic en el marcador de línea
git.changelists.shelf.congratulations=¡Felicidades! Ha aprendido a gestionar listas de cambios y a poner los cambios en espera.
git.changelists.shelf.create.changelist=Asigne a la nueva lista de cambios el nombre <code>Comentarios</code>. Haga clic en {0} o haga clic en {1} para crear una nueva lista de cambios.
git.changelists.shelf.explanation=Además, la función {0} le permite guardar estos cambios en un archivo en su computadora. Los cambios guardados en {0} se pueden aplicar a cualquier rama más adelante. De esta manera no tendrá que preocuparse por perder sus cambios.
git.changelists.shelf.help.link=Trabajar en varias funciones simultáneamente usando Git
git.changelists.shelf.introduction=Digamos que no desea enviar la anotación agregada al repositorio porque solo la necesita localmente. En la mayoría de los casos, estos comentarios representan configuraciones personales. Para evitar cometer comentarios accidentalmente con otros cambios, puede extraerlos a una nueva lista de cambios. Haga clic en el marcador en la línea resaltada para abrir el menú contextual.
git.changelists.shelf.lesson.name=Listas de cambios y elementos pendientes
git.changelists.shelf.open.commit.window=Ahora inspeccionemos la lista de cambios generada.
git.changelists.shelf.open.context.menu=¡Dejemos nuestros cambios en espera! Haga clic derecho en la lista de cambios resaltada para abrir el menú contextual.
git.changelists.shelf.open.shelf.dialog=Seleccione {0} para abrir el cuadro de diálogo {1}.
git.changelists.shelf.open.unshelve.dialog=Puede volver a aplicar sus cambios guardándolos en {0}. Seleccione la lista de cambios resaltada y abra {1} para abrir el cuadro de diálogo <strong>Inpendiente</strong>.
git.changelists.shelf.performed.explanation=Verá que la lista de cambios se guardó correctamente en {0} y los comentarios desaparecieron.
git.changelists.shelf.performed.got.it=Puedes ver que la lista de cambios se ha guardado correctamente en {0}
git.changelists.shelf.remove.changelist=Si ya no necesita esta lista de cambios, haga clic en el botón {0}.
git.changelists.shelf.shelve.changelist=Ahora puedes editar el mensaje o dejarlo como está. Haga clic en {0} para guardar los cambios en {1}.
git.changelists.shelf.unshelve.changelist=Ahora puede editar el nombre de la lista de cambios para ingresar cambios pendientes o dejarlos como están. Haga clic en {0} para aplicar los cambios.
git.click.balloon=Por favor haga clic en {0}
git.click.to.change.settings=O puede cambiar la configuración haciendo <callback id="{0}">hacer clic</callback>.
git.click.to.open=Haga clic para abrir {0}
git.commit.amend.commit=Haga clic en el botón {0} para editar la última confirmación.
git.commit.amend.commit.balloon=Haga clic y edite finalmente la última confirmación.
git.commit.analyze.code.explanation={0} le permite recibir notificaciones sobre advertencias y errores encontrados en los archivos que se van a confirmar. Para esta lección, dejaremos esta opción como está.
git.commit.choose.files=La ventana de herramientas {0} proporciona una amplia personalización de las confirmaciones. Supongamos que no desea incluir {1} como parte de la confirmación. Desmarque la casilla para excluir el artículo.
git.commit.choose.files.balloon=Deseleccionar un archivo resaltado excluirá ese archivo de la confirmación
git.commit.close.commit.options=Después de seleccionar las opciones requeridas, cierre la ventana emergente Opciones de confirmación. Presione {0}.
git.commit.committed.file.explanation=El panel derecho de la ventana de la herramienta <strong>Git</strong> muestra los archivos modificados en la última confirmación.
git.commit.committed.file.got.it=Los archivos modificados desde la última confirmación aparecerán aquí
git.commit.enable.reformat.code=Si selecciona {0}, el archivo se editará automáticamente según su estilo de código.
git.commit.help.link=Confirme y envíe cambios a su repositorio Git
git.commit.lesson.name=Confirmar
git.commit.open.before.commit.options=Ahora editemos las opciones de confirmación. Haga clic en {0} para abrir la ventana emergente de opciones de Git.
git.commit.open.commit.window=Digamos que desea modificar algunos archivos en su proyecto y luego enviarlos a la rama actual.
git.commit.open.git.window=¡excelente! Haga clic en {0} para abrir la ventana de la herramienta <strong>Git</strong> y explore sus confirmaciones en el árbol.
git.commit.open.options.tooltip=Haga clic para abrir {0} opciones
git.commit.perform.commit=Ahora edite el mensaje de confirmación o déjelo como se sugiere. Luego haga clic en el botón {0} para confirmar.
git.commit.select.amend.checkbox=¿Qué pasa si olvidó agregar algunos cambios desde la última confirmación que realizó? La mejor manera es editar la última confirmación usando la función {0}. Haga clic en {1} o seleccione la casilla de verificación {0} en la ventana de herramientas {2}.
git.commit.select.amend.checkbox.balloon=Seleccione la casilla de verificación {0} para editar la última confirmación.
git.commit.select.file=Al seleccionar un archivo resaltado, se agregará ese archivo a la confirmación.
git.commit.select.file.balloon=Seleccionar un archivo lo agregará a su confirmación
git.commit.select.top.commit=Seleccione la confirmación superior en el árbol para ver detalles al respecto.
git.commit.select.top.commit.again=Puede ver información sobre la confirmación modificada seleccionando nuevamente la confirmación superior en la ventana de la herramienta <strong>Git</strong>.
git.commit.select.top.commit.again.balloon=Seleccione la confirmación superior y obtenga una vista previa de los cambios.
git.commit.select.top.commit.balloon=Seleccione una confirmación para ver detalles al respecto.
git.commit.two.committed.files.explanation=Ahora puede ver que la confirmación de destino contiene dos archivos modificados.
git.feature.branch.checkout.and.rebase=Seleccione la sucursal {0} y luego {1}.
git.feature.branch.checkout.branch=Seleccione la rama {0} y luego seleccione {1} en el menú.
git.feature.branch.choose.force.push=Los cambios no se pueden enviar simplemente porque la rama remota {0} entra en conflicto con la rama local actualizada. Usa 1}. Presione la flecha resaltada junto al botón {2} para abrir la lista y seleccione {1}.
git.feature.branch.confirm.force.push=Presione {0} nuevamente y confirme la acción.
git.feature.branch.confirm.update=Haga clic en {0} para buscar actualizaciones.
git.feature.branch.force.push.tip=<strong>Consejo</strong>: No utilices {0} a menos que seas el único que utilice esa rama. Hacerlo puede provocar que se pierdan los compromisos de sus colegas.
git.feature.branch.help.link=Gestión de sucursales de Git
git.feature.branch.introduction.1=Supongamos que después de haber completado su trabajo en la rama {0}, desea enviar sus cambios al control remoto y luego fusionarlos con la rama {1}. Haga clic en {2} para abrir la ventana de la herramienta <strong>Git</strong> y obtener una vista previa del historial de su proyecto.
git.feature.branch.introduction.2=Sin embargo, mientras trabajo en una función, mis compañeros de trabajo también pueden enviar sus cambios a la rama {0}. Comprobemos que cualquier cambio que pueda haber en {0} no entre en conflicto con mis cambios.
git.feature.branch.introduction.check=Comprobaré que los posibles cambios en {0} no entren en conflicto con mis cambios.
git.feature.branch.introduction.got.it=Esta es una nueva confirmación en la rama {0}.
git.feature.branch.lesson.name=Flujo de trabajo de rama de características
git.feature.branch.new.commits.explanation=Puedes ver que hay algunos cambios en la rama {0}.
git.feature.branch.new.commits.got.it=Hay nuevas confirmaciones en la rama {0}.
git.feature.branch.open.branches.popup.1=Primero, revisemos la rama {0}. Abra la lista de sucursales presionando {1} o haciendo clic en la sucursal actual resaltada.
git.feature.branch.open.branches.popup.2=Luego deberás cambiar la base de la rama {0} desde {1}. Vuelva a abrir la lista de sucursales presionando {1} o haciendo clic en la sucursal actual resaltada.
git.feature.branch.open.push.dialog=Después de actualizar la rama {0}, también debe actualizar el repositorio remoto.
git.feature.branch.open.update.dialog=Ahora actualicemos la rama {0} para ver los cambios que puedan haber en el repositorio remoto.
git.interactive.rebase.apply.reword=De forma predeterminada, los mensajes de todas las confirmaciones aplastadas se incluyen en el mensaje resultante. Sin embargo, en esta lección cambiaremos el mensaje a algo como <code>Modificar estilo</code>. Si lo desea, edite el mensaje y presione {0} para aplicar sus modificaciones.
git.interactive.rebase.choose.interactive.rebase=Seleccione {0} de la lista.
git.interactive.rebase.click.commit.tooltip=Haga clic derecho en la confirmación resaltada
git.interactive.rebase.congratulations=¡Felicidades! ¡El historial de su proyecto ahora está perfectamente organizado!
git.interactive.rebase.help.link=Edite el historial del proyecto realizando una rebase interactiva
git.interactive.rebase.introduction=Incluso mirando la secuencia de confirmación resaltada, generalmente es difícil saber qué cambió. En este punto, reordenar o aplastar algunas confirmaciones hará que sea más fácil de entender.
git.interactive.rebase.invoke.fixup=Agregue los cambios de esta confirmación a la primera confirmación presionando {0} o haciendo clic en el botón resaltado y luego seleccionando {1} de la lista.
git.interactive.rebase.invoke.squash=Presione {0} o haga clic en el botón {1} para fusionar confirmaciones.
git.interactive.rebase.lesson.name=Rebase interactivo
git.interactive.rebase.move.commit=Luego mueva esta confirmación al área resaltada. Simplemente use el mouse o presione {0} 3 veces.
git.interactive.rebase.open.context.menu=Utilice <strong>Rebase interactiva</strong> para resolver esta tarea. Haga clic derecho en la confirmación resaltada para abrir el menú contextual.
git.interactive.rebase.open.git.window=Digamos que desea realizar algunos cambios en su proyecto. Haga clic en {0} para abrir la ventana de la herramienta <strong>Git</strong> y obtener una vista previa del historial de su proyecto.
git.interactive.rebase.select.one.commit=Parece que la confirmación resaltada modificó algo en la primera confirmación de la lista. Sería bueno fusionar estos dos compromisos en uno. Seleccione la confirmación resaltada.
git.interactive.rebase.select.three.commits=¡excelente! Las tres confirmaciones resaltadas parecen ser idénticas. Puede fusionar estas confirmaciones en una y modificar el mensaje resultante. Haga clic en la confirmación resaltada o presione {0} para seleccionarla.
git.interactive.rebase.start.rebasing=Finalmente, haga clic en {0}.
git.module.description=Aprenda a utilizar la integración de Git en su IDE
git.module.name=Git
git.not.use.staging.area.warning=Deberá desactivar el <strong>área de preparación</strong> para completar esta lección. Presione {0}, navegue hasta {1} <strong>→</strong> {2} y desmarque {3}.
git.open.tool.window=Presione {0,choice,0#{1} o haga clic en {2}|1#{1}} para abrir la ventana de la herramienta {3}.
git.open.tool.window.balloon=Haga clic para abrir la ventana de herramientas {0}
git.project.history.apply.branch.filter=All branches of your repository are listed in the left pane of the tool window. Double-click the <strong>HEAD</strong> branch to show commits only from the active branch.
git.project.history.apply.message.filter=La barra de búsqueda resaltada le permite buscar confirmaciones por mensaje o hash. Digamos que queremos encontrar una confirmación con parte de un mensaje. Por ejemplo, intente escribir {0} en la ventana resaltada y presione {1}.
git.project.history.apply.user.filter=Hay varios filtros disponibles para ayudarlo a encontrar confirmaciones. Por ejemplo, puede obtener una vista previa de las confirmaciones de un autor específico. Haga clic en el filtro resaltado para abrir la lista de usuarios.
git.project.history.click.changed.file=También hay un árbol que muestra todos los archivos modificados en esta confirmación. Puede obtener una vista previa de los cambios haciendo doble clic en el archivo resaltado.
git.project.history.click.changed.file.popup=Haga doble clic en el archivo resaltado para obtener una vista previa de los cambios.
git.project.history.click.filter.tooltip=Haga clic para abrir la lista de usuarios.
git.project.history.click.head.tooltip=Double-click <strong>HEAD</strong> to show commits only from the active branch
git.project.history.close.diff=Después de revisar sus cambios, cierre la ventana Diff. Presione {0}.
git.project.history.commit.details.explanation=El panel derecho de la ventana de herramientas muestra metadatos para la confirmación seleccionada e información sobre la rama que contiene esa confirmación.
git.project.history.commit.details.got.it=Aquí se muestran los metadatos de confirmación detallados y la rama que contiene esta confirmación.
git.project.history.commits.tree.explanation=El árbol de confirmación está centrado en la ventana de herramientas. Verá resaltada la última confirmación en la rama activa. Todas las confirmaciones debajo de la confirmación resaltada también están en esta rama y se muestran en un color diferente. Las confirmaciones restantes están en otras ramas.
git.project.history.commits.tree.got.it=Esta es la última confirmación en la rama activa.
git.project.history.invitation.to.commit.lesson=¡excelente! En la próxima lección, aprenderemos cómo crear una confirmación.
git.project.history.lesson.name=Historia del proyecto
git.project.history.open.git.window=Presione {0} para abrir el <strong>Historial de proyectos</strong> y obtener una vista previa de todas las confirmaciones confirmadas en una línea de tiempo visual.
git.project.history.select.commit=Seleccione una confirmación resaltada para obtener información sobre esa confirmación.
git.project.history.select.me=Si selecciona {0} de la lista, solo verá mis confirmaciones.
git.quick.start.choose.new.branch.item=Seleccione {0} de la lista.
git.quick.start.clone.dialog.got.it.1=Desde aquí puede clonar el repositorio en un directorio específico usando la URL
git.quick.start.clone.dialog.got.it.2=También puede conectarse a sistemas de control de versiones populares para clonar repositorios almacenados allí.
git.quick.start.close.clone.dialog=Sin embargo, dado que esta clase ya tiene un repositorio sandbox, cierre este cuadro de diálogo.
git.quick.start.commit.window.select.file=Aquí puede seleccionar los archivos que desea confirmar. Haga clic en la casilla de verificación y agregue los archivos que desea confirmar.
git.quick.start.find.action=La acción {0} le permite clonar un repositorio Git existente. Haga doble clic en {1} para abrir la ventana emergente {2}.
git.quick.start.help.link=Configuración del repositorio de Git
git.quick.start.introduction=En este curso, aprenderá cómo aprovechar las características IDE de la integración de Git para clonar un proyecto existente y realizar flujos de trabajo básicos de control de versiones.
git.quick.start.lesson.name=Inicio rápido
git.quick.start.modify.file=Puede cambiar archivos en esta nueva rama y el IDE detectará estos cambios. Por ejemplo, modifiquemos el color de los ojos de un gato en un archivo abierto. Intente cambiar {0} a un color diferente.
git.quick.start.name.new.branch=Nombra la nueva sucursal como quieras. Luego presione {0} o haga clic en {1}.
git.quick.start.open.branches=¡excelente! A continuación, veremos cómo utilizar las funciones del IDE para realizar algunos flujos de trabajo básicos de Git. Por ejemplo, podría tener un flujo de trabajo como <strong>comprar nueva rama → cambiar y confirmar → enviar</strong>. Primero, abra la lista de sucursales presionando {0} o haciendo clic en la sucursal actual resaltada.
git.quick.start.open.commit.window=Ahora puede confirmar los archivos modificados.
git.quick.start.open.push.dialog=Después de realizar una confirmación, puede enviar esa confirmación al repositorio remoto.
git.quick.start.open.vcs.widget=Primero, abra {1} presionando {0} o haciendo clic en el área resaltada.
git.quick.start.perform.commit=Ingrese su mensaje de confirmación en el área resaltada (por ejemplo, <código>Editar el color de ojos del gato con botas</código>). Luego haga clic en {0}.
git.quick.start.perform.push=Ahora haga clic en {0}. No se preocupe por los repositorios remotos. Ya está creado en su computadora para esta lección.
git.quick.start.type.clone=Ingrese {0} en la barra de búsqueda y seleccione la opción resaltada.
git.quick.start.workflow.explanation=¡excelente! Ahora veamos cómo realizar algunos flujos de trabajo básicos de Git utilizando funciones integradas con el IDE. Por ejemplo, podría tener un flujo de trabajo como <strong>verificar nueva rama → cambiar y confirmar → enviar</strong>.
git.use.non.modal.commit.ui.warning=Para completar esta lección, deberá habilitar la interfaz de confirmación no modal. Presione {0}, navegue hasta {1} <strong>→</strong> {2} y seleccione {3}. O <callback id="{4}">haga clic</callback> para cambiar la configuración.
git.window.closed.warning=Al hacer clic en {0} se vuelve a abrir la ventana de herramientas {1}.
