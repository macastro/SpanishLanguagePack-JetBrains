0.already.extends.1.and.will.not.compile.after.converting.2.to.a.class={0} que implementa {2} ya extiende {1} y no compilará después de convertir {2} a una clase
0.implementing.1.will.not.compile.after.converting.1.to.a.class={0} que implementa {1} no compilará después de convertir {1} a una clase
0.is.declared.in.1.but.when.public.should.be.declared.in.a.file.named.2={0} está declarado en {1} pero cuando es public debe declararse en un archivo llamado {2}
0.will.have.incompatible.access.privileges.with.overriding.1={0} tendrá privilegios de acceso incompatibles con la sobrescritura de {1}
0.will.have.incompatible.access.privileges.with.super.1={0} tendrá privilegios de acceso incompatibles con super {1}
0.will.no.longer.be.visible.from.overriding.1={0} ya no será visible desde la sobrescritura de {1}
0.will.not.compile.after.converting.1.to.a.class={0} no compilará después de convertir {1} a una clase
adapter.to.listener.intention.family.name=Reemplazar extensión de adaptador con implementación de listener
adapter.to.listener.intention.name=Reemplazar extensión de ''{0}'' con implementación ''Listener''
annotate.overridden.methods.intention.family.name=Anotar métodos sobrescritos y sus parámetros
annotate.overridden.methods.intention.method.name=Anotar métodos sobrescritos como ''{0}''
annotate.overridden.methods.intention.parameters.name=Anotar mismo parámetro de métodos sobrescritos como ''{0}''
change.modifier.intention.name=Cambiar modificador de acceso
change.to.c.style.comment.intention.family.name=Reemplazar con comentario de bloque
change.to.c.style.comment.intention.name=Reemplazar con comentario de bloque
change.to.end.of.line.comment.intention.family.name=Reemplazar con comentario de fin de línea
change.to.end.of.line.comment.intention.name=Reemplazar con comentario de fin de línea
change.variable.type.to.rhs.type.intention.family.name=Cambiar tipo de variable al tipo del inicializador
change.variable.type.to.rhs.type.intention.name=Declarar ''{0}'' con tipo ''{1}''
char.to.string.intention.family.name=Reemplazar carácter por cadena
char.to.string.intention.name=Reemplazar literal de carácter por cadena
constant.expression.intention.name=Calcular valor constante de ''{0}''
constant.subexpression.intention.family.name=Calcular valor constante para subexpresión
convert.catch.to.throws.intention.family.name=Reemplazar sección catch con declaración throws
convert.catch.to.throws.intention.name=Reemplazar sección 'catch' con declaración 'throws'
convert.catch.to.throws.intention.name.capitalized=Reemplazar Sección 'catch' Con Declaración 'throws'
convert.catch.to.throws.only.current.method=Agregar declaración throws solo al método actual
convert.catch.to.throws.super.and.current.methods=Agregar declaración throws al método actual y métodos super
convert.datapoints.fix.family.name=Convertir contenedor de anotación @DataPoint(s)
convert.interface.to.class.intention.family.name=Convertir interfaz a clase
convert.interface.to.class.intention.name=Convertir a 'class'
convert.to.nested.if.intention.family.name=Expandir booleano a múltiples ifs
convert.to.nested.if.intention.name=Convertir a múltiples 'if's
copy.concatenated.string.to.clipboard.intention.family.name=Copiar texto de concatenación de cadenas al portapapeles
copy.concatenated.string.to.clipboard.intention.name=Copiar texto de concatenación de cadenas al portapapeles
copy.string.literal.to.clipboard.intention.name=Copiar texto literal de cadena al portapapeles
copy.string.template.text.to.clipboard.intention.name=Copiar texto de plantilla de cadena al portapapeles
create.assert.intention.family.name=Crear aserción JUnit
create.assert.intention.name=Crear aserción JUnit
create.missing.switch.branches.family.name=Crear ramas switch faltantes
demorgans.intention.family.name=Leyes de De Morgan
detail.exceptions.intention.family.name=Detallar excepciones
detail.exceptions.intention.name=Detallar excepciones
eliminate.parentheses.intention.name=Eliminar paréntesis
eliminate.parentheses.intention.title=Eliminar Paréntesis
expand.boolean.assignment.intention.name=Expandir asignación booleana a 'if else'
expand.boolean.declaration.intention.name=Expandir declaración booleana a 'if else'
expand.boolean.intention.family.name=Expandir booleano
expand.boolean.return.intention.name=Expandir retorno booleano a 'if else'
extract.increment.intention.family.name=Extraer incremento
extract.increment.intention.name=Extraer ''{0}''
extract.to.method.reference.intention.name=Extraer a referencia de método
extract.while.loop.condition.to.if.statement.intention.family.name=Extraer condición de bucle while a sentencia if interna
extract.while.loop.condition.to.if.statement.intention.name=Extraer condición a sentencia 'if' interna
flip.assert.literal.intention.family.name=Invertir literal de aserción
flip.commutative.method.call.intention.family.name=Invertir llamada a método conmutativo
flip.commutative.method.call.intention.name=Invertir ''.{0}()''
flip.commutative.method.call.intention.name1=Invertir ''.{0}()'' (puede cambiar la semántica)
flip.comparison.intention.family.name=Invertir comparación
flip.comparison.intention.name=Invertir ''{0}'' a ''{1}''
flip.conditional.intention.family.name=Invertir condicional
flip.conditional.intention.name=Invertir '?\:'
flip.expression.intention.family.name=Invertir expresión binaria
flip.setter.call.intention.family.name=Invertir llamada setter
flip.smth.intention.name=Invertir ''{0}''
flip.smth.intention.name1=Invertir ''{0}'' (cambia la semántica)
inline.increment.intention.family.name=Inline incremento/decremento
inline.increment.intention.name=Inline ''{0}''
intention.name.make.default=Hacer ''{0}()'' default
intention.name.replace.field.or.method=Reemplazar por @{0} {1, choice, 0\#campo|1\#método}
invalid.pattern.hint.text=Patrón inválido
join.concatenated.string.literals.intention.family.name=Unir literales de cadena concatenados
join.concatenated.string.literals.intention.name=Unir literales de cadena concatenados
make.call.chain.into.call.sequence.intention.family.name=Expandir cadena de llamadas en secuencia
make.call.chain.into.call.sequence.intention.name=Expandir cadena de llamadas a métodos en secuencia
make.method.default.family.name=Hacer método default
merge.call.sequence.to.chain.intention.family.name=Combinar llamadas secuenciales a métodos en cadena
merge.call.sequence.to.chain.intention.name=Combinar llamadas secuenciales a métodos en cadena
merge.else.if.intention.family.name=Combinar else if
merge.else.if.intention.name=Combinar 'else if'
merge.if.and.intention.family.name=Combinar sentencias 'if' anidadas
merge.if.and.intention.name=Combinar sentencias 'if' anidadas
merge.if.or.intention.family.name=Combinar sentencias 'if' secuenciales
merge.if.or.intention.name=Combinar sentencias 'if' secuenciales
merge.nested.try.statements.intention.family.name=Combinar sentencias try anidadas
merge.nested.try.statements.intention.name=Combinar sentencias 'try' anidadas
merge.parallel.ifs.intention.family.name=Combinar ifs paralelos
merge.parallel.ifs.intention.name=Combinar 'if's
move.comment.to.separate.line.intention.family.name=Mover comentario a línea separada
move.comment.to.separate.line.intention.name=Mover comentario a línea separada
negate.comparison.intention.family.name=Negar comparación
negate.comparison.intention.name=Negar ''{0}''
negate.comparison.intention.name1=Negar ''{0}'' a ''{1}''
negate.conditional.intention.family.name=Negar condicional
negate.conditional.intention.name=Negar '?\:'
objects.require.non.null.intention.family.name=Usar expresión 'java.util.Objects.requireNonNull()'
objects.require.non.null.intention.name=Usar expresión 'java.util.Objects.requireNonNull()'
obscure.thrown.exceptions.intention.family.name=Reemplazar excepciones en cláusula throws con una excepción más general
postfix.prefix.intention.family.name=Invertir expresión prefijo/sufijo
press.escape.to.remove.highlighting.message=Presione Escape para quitar el resaltado
replace.arm.with.try.finally.intention.family.name=Reemplazar try-with-resources con try-finally
replace.arm.with.try.finally.intention.name=Reemplazar 'try-with-resources' con 'try finally'
replace.assert.literal.with.assert.equals.intention.family.name=Reemplazar assertTrue, assertFalse o assertNull con assertEquals
replace.assert.literal.with.assert.equals.intention.name=Reemplazar ''{0}()'' con ''assertEquals({1}, ...)''
replace.assert.literal.with.assert.equals.intention.name1=Reemplazar ''{0}()'' con ''assertEquals(..., {1}, ...)''
replace.assert.literal.with.assert.equals.intention.name2=Reemplazar ''{0}()'' con ''assertEquals()''
replace.assignment.with.postfix.expression.intention.family.name=Reemplazar asignación con expresión postfija
replace.concatenation.with.format.string.intention.family.name=Reemplazar concatenación de strings con String.format()
replace.concatenation.with.format.string.intention.name=Reemplazar '+' con 'String.format()'
replace.concatenation.with.format.string.intention.name.formatted=Reemplazar '+' con 'formatted()'
replace.concatenation.with.string.buffer.intention.family.name=Reemplazar + con StringBuilder.append()
replace.concatenation.with.string.buffer.intention.name=Reemplazar '+' con 'StringBuffer.append()'
replace.concatenation.with.string.builder.intention.name=Reemplazar '+' con 'StringBuilder.append()'
replace.conditional.with.boolean.expression.intention.family.name=Reemplazar expresión condicional con expresión booleana
replace.conditional.with.boolean.expression.intention.name=Reemplazar '?\:' con expresión booleana
replace.do.while.loop.with.while.loop.intention.family.name=Reemplazar bucle do while con bucle while
replace.do.while.loop.with.while.loop.intention.name=Reemplazar bucle 'do while' con bucle 'while'
replace.for.each.loop.with.indexed.for.loop.intention.family.name=Reemplazar bucle for-each con bucle for indexado
replace.for.each.loop.with.indexed.for.loop.intention.name=Reemplazar bucle for-each con bucle 'for' indexado
replace.for.each.loop.with.iterator.for.loop.intention.family.name=Reemplazar bucle for-each con bucle for iterador
replace.for.each.loop.with.iterator.for.loop.intention.name=Reemplazar bucle for-each con bucle 'for' iterador
replace.for.each.loop.with.optimized.indexed.for.loop.intention.family.name=Reemplazar bucle for-each con bucle for indexado optimizado
replace.for.each.loop.with.optimized.indexed.for.loop.intention.name=Reemplazar bucle for-each con bucle 'for' indexado optimizado
replace.format.string.with.concatenation.intention.family.name=Reemplazar String.format() con concatenación
replace.format.string.with.concatenation.intention.name=Reemplazar 'String.format()' con concatenación
replace.multiply.with.shift.intention.family.name=Reemplazar multiplicación con desplazamiento
replace.octal.escape.with.unicode.escape.intention.family.name=Reemplazar escape octal con escape unicode
replace.octal.escape.with.unicode.escape.intention.name=Reemplazar escape octal con escape unicode
replace.on.demand.import.intention.family.name=Reemplazar importación bajo demanda con importaciones de clase única
replace.on.demand.import.intention.name=Reemplazar con importaciones de clase única
replace.operator.assignment.with.assignment.intention.family.name=Reemplazar asignación de operador con asignación
replace.operator.assignment.with.postfix.expression.intention.family.name=Reemplazar asignación de operador con expresión postfija
replace.postfix.expression.with.assignment.intention.family.name=Reemplazar expresión postfija con asignación
replace.postfix.expression.with.operator.assignment.intention.family.name=Reemplazar expresión postfija con asignación de operador
replace.shift.with.multiply.intention.family.name=Reemplazar desplazamiento con multiplicación
replace.switch.with.if.intention.family.name=Reemplazar switch con if
replace.switch.with.if.intention.name=Reemplazar 'switch' con 'if'
replace.with.arrays.as.list.intention.family.name=Reemplazar con 'Arrays.asList()'
replace.with.mutable.collection.intention.family.name=Reemplazar con colección mutable
replace.with.mutable.collection.intention.intention.name=Reemplazar con ''{0}''
reverse.for.loop.direction.intention.family.name=Invertir dirección del bucle for
reverse.for.loop.direction.intention.name=Invertir dirección del bucle for
show.example.date.time.output.intention.family.name=Mostrar ejemplo de salida de fecha y hora
split.declaration.and.initialization.intention.family.name=Dividir declaración e inicialización
split.declaration.and.initialization.intention.name=Dividir en declaración e inicialización
split.else.if.intention.family.name=Dividir else if
split.else.if.intention.name=Dividir 'else if'
unicode.unescape.intention.family.name=Reemplazar escape unicode con carácter sin escape
unicode.unescape.intention.name=Reemplazar escape unicode con carácter
wrap.vararg.arguments.with.explicit.array.intention.family.name=Envolver argumentos vararg con creación explícita de array
wrap.vararg.arguments.with.explicit.array.intention.name=Envolver argumentos vararg con creación explícita de array