js.debugger.before.describe.tool.window=Al presionar {0} ocurrieron dos cosas. Primero, el archivo se ejecutó con Node.js y se abrió la ventana de herramientas {1} mostrando el resultado del código ejecutado. Segundo, <ide/> creó una configuración temporal de ejecución/depuración para ejecutar el archivo de esta manera. Ahora oculte la ventana de herramientas usando {2} para entender mejor las configuraciones de ejecución/depuración.
js.debugger.before.edit=Ahora, ¿qué pasa si quiere ajustar la configuración de esta nueva configuración de ejecución/depuración o usar una diferente? Abra el menú {0} nuevamente y haga clic en "{1}".
js.debugger.before.intro.1=Con <ide/> puede ejecutar y depurar varios tipos de aplicaciones JavaScript donde escribe su código.
js.debugger.before.intro.2=Cubriremos algunos pasos en este módulo que son útiles sin importar qué código esté depurando. Usaremos como ejemplo una aplicación <a href\=''{0}''>Node.js</a> muy básica que debería comparar dos números y devolver {1} o {2}. Antes de continuar, asegúrese de tener Node.js <a href\=''{3}''>instalado</a> en su computadora (para instalaciones nuevas, necesitará reiniciar <ide/>). Cuando esté listo para continuar, presione {4}.
js.debugger.before.manage.1=Aquí es donde se administran las configuraciones de ejecución/depuración. Tómese un momento para ver qué hay aquí y cierre la ventana cuando esté listo para continuar.
js.debugger.before.manage.2=Tómese un momento para ver qué hay aquí y cierre la ventana cuando esté listo para continuar.
js.debugger.before.next=Eso es todo para esta lección. Para comenzar la siguiente, haga clic en el botón de abajo o use {0}.
js.debugger.before.save.1=Entonces, estas configuraciones actúan como puntos de entrada para ejecutar/depurar su aplicación. Pueden ser temporales o permanentes. La principal diferencia es que las configuraciones temporales se eliminarán automáticamente si se alcanza el límite predeterminado de 5 configuraciones.
js.debugger.before.save.2=Veamos cómo convertir una configuración temporal en permanente. Abra el menú desplegable {0} en la esquina superior derecha y seleccione {1}.
js.debugger.before.title=Antes de depurar\: Configuraciones de ejecución/depuración
js.debugger.module.description=Aprenda cómo ejecutar su programa paso a paso y encontrar problemas sin salir del IDE.
js.debugger.module.name=Depurador {0} 101
js.debugger.part.1.gutter=Los números {0} y {1} que se comparan no son iguales, por lo que ejecutar el código debería dar {2}. Averigüemos por qué obtenemos {3}. En la línea 1, haga clic en el margen (área en blanco) entre \#1 y el código para colocar un punto de interrupción.
js.debugger.part.1.next=La pestaña {0} enumera todos los archivos cargados en el proceso actualmente en ejecución. Puede hacer doble clic para ver el contenido de cualquier archivo. Para pasar a la parte II de esta lección, haga clic en el botón de abajo o use {1}.
js.debugger.part.1.scripts.tab=La pestaña {0} muestra mensajes como errores registrados por su aplicación. Al depurar aplicaciones Node.js, <ide/> también muestra la pestaña {1} desde donde puede ejecutar fragmentos de JavaScript y ver mensajes de consola. Cambie a la pestaña {2} para continuar.
js.debugger.part.1.set.breakpoint=Podemos usar puntos de interrupción para pausar la ejecución de la aplicación. El círculo rojo que ve en el margen es un punto de interrupción en <ide/>. Puede eliminarlo haciendo clic nuevamente o hacer clic derecho para personalizar su comportamiento, como establecer una condición. Haga clic en el botón {0} en la esquina superior derecha (o presione {1}) para continuar.
js.debugger.part.1.start.1=Ahora que tenemos una configuración de ejecución/depuración, veamos cómo usar el depurador incorporado.
js.debugger.part.1.start.2=Primero, ejecutemos el código nuevamente para ver qué devuelve, ya que no nos enfocamos en eso en la última lección. Haga clic en el botón {0} junto al menú desplegable con la configuración para ejecutar la configuración seleccionada actualmente.
js.debugger.part.1.title=Depurando código. Parte I
js.debugger.part.1.tool.window.1=Familiarícese con la ventana de herramientas "{0}". A la izquierda hay iconos para detener/reiniciar la configuración y administrar puntos de interrupción. En la parte superior hay varias pestañas y un conjunto de iconos para ejecutar el código paso a paso.
js.debugger.part.1.tool.window.2=Estamos en la pestaña "{0}" donde se realiza la mayor parte del trabajo. A la derecha están todas las {1} y sus valores agrupados por alcance. La vista "{2}" muestra la pila de llamadas. Si mira de cerca, verá el estado de su aplicación en cada punto de la ruta de ejecución. Ahora, cambie a la pestaña "{3}".
js.debugger.part.2.buttons.1=Para aprender más sobre cómo ejecutar el programa paso a paso, consulte <a href\="{0}">nuestra ayuda en línea</a>.
js.debugger.part.2.buttons.2=Ahora, ¿qué pasa si queremos verificar el valor de una expresión? <ide/> le permite hacer esto rápidamente con la función {0}. Presione {1} para continuar.
js.debugger.part.2.end=¡Felicitaciones\! Ha completado {0} y ha aprendido algunos conceptos básicos sobre cómo depurar diferentes tipos de aplicaciones. Si lo desea, puede ejecutar el código una vez más para confirmar que todo funciona correctamente ahora. Para profundizar en la depuración de tipos específicos de aplicaciones, consulte nuestra <a href\=''{1}''>ayuda web</a> y <a href\=''{2}''>publicaciones de blog</a>.
js.debugger.part.2.evaluate.1=Agregue {0} como expresión y presione {1}. Mire el resultado\: es igual a {2}. Ahí está el problema. Para que la función capture números diferentes, necesitamos cambiar ligeramente la expresión para que su resultado sea igual a {3}.
js.debugger.part.2.evaluate.2=Ahora cierre la ventana emergente y arregle el problema que encontramos en nuestro código. En la línea 2 en {0}, reemplace {1} con {2}.
js.debugger.part.2.step.into.1=<strong>Importante</strong>\: asegúrese de tener un punto de interrupción en la línea 1 y que el depurador esté iniciado ({0}) y abierto en la pestaña {1} antes de continuar.
js.debugger.part.2.step.into.2=Continuemos buscando el error en nuestro código y aprendamos algunas otras cosas útiles sobre la depuración en <ide/>. Para entender mejor cómo se ejecuta el código, podríamos agregar más puntos de interrupción y usar el botón {0} ({1}) para movernos entre ellos, pero hay una manera más rápida. Presionemos {2} y usemos {3} ({4}) para entrar en la siguiente línea de ejecución.
js.debugger.part.2.stop=Finalmente, veamos cómo detener el depurador cuando ya no lo necesitemos. Primero, haga clic en el punto de interrupción que agregó para eliminarlo. Luego use {0} ({1}) para detener el depurador y presione {2} para cerrar su ventana de herramientas.
js.debugger.part.2.title=Depurando código. Parte II