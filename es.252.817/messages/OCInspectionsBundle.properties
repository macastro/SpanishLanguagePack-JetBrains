checkbox.simplify.condition.true=Simplificar "condición == true"
checkbox.simplify.condition1.true.condition2=Simplificar "condition1 ? true : condition2"
checkbox.simplify.if.condition1.return.true.return.condition2=Simplificar "if (condition1) return true; return condition2;"
checkbox.simplify.if.true.while.false=Simplificar "if (true)", "while (false)"
clang.based.inspection.api.notes.issue=Problema de nota de API
clang.based.inspection.arc.and.properties=ARC y @properties
clang.based.inspection.concepts.issue=Problema de conceptos
clang.based.inspection.coroutines.issue=Problema de corutinas
clang.based.inspection.dependency.directive.source.minimization.issue=Problema de minimización de origen de la directiva de dependencia
clang.based.inspection.lexical.or.preprocessor.issue=Problema léxico o del preprocesador
clang.based.inspection.openmp.issue=Problema de OpenMP
clang.based.inspection.vtable.issue=Inspección de ABI VTable
configurable.naming.convention.header.guard.style=Estilo de protección de cabecera:
configurable.naming.convention.several.rules.hint=Si hay varias reglas para un tipo de entidad, se utilizará la última de la lista.
dfa.batch.action.subject=Análisis
dfa.batch.action.title=Analizar flujo de datos global
dfa.message.preparing=Preparando {0}...
inspection.accessors.were.overridden=Accesores sobreescritos
inspection.arc.issues=Problemas ARC
inspection.array.index.out.of.bounds.display.name=Índice de la matriz fuera de los límites
inspection.assign.in.condition=asignación '=' en expresión condicional
inspection.assign.in.condition.with.self='=' en expression condicional con 'self'
inspection.clangd.general=Errores y advertencias Clangd
inspection.constant.conditions=Condición constante
inspection.constant.function.result.display.name=Resultado de función constante
inspection.constant.parameter.display.name=Parametro constante
inspection.context.sensitive.analysis=Análisis sensible al contexto
inspection.dangling.pointer.display.name=Puntero Dangling
inspection.deprecated.api=Uso de API obsoleta
inspection.dfa.group.display.name=Análisis de Flujo de Datos
inspection.display.name.simplifiable.statement=Sentencia simplificable
inspection.endless.loop.display.name=Bucle sin fin
inspection.functions.group.display.name=Funciones
inspection.global.unused.analysis=Análisis global no utilizado
inspection.group.name.general=General
inspection.hides.class.scope=Alcance de clase oculto
inspection.hiding.non.virtual.function=Ocultación de función no virtual
inspection.inconsistent.naming=Nombres inconsistentes
inspection.infinite.recursion.display.name=Recursión infinita
inspection.kr.unspecified.parameters=Pasando argumentos a la función con la sintaxis de parámetros no especificados de KR
inspection.local.value.escapes.scope.display.name=Escape de alcance de valor local
inspection.loop.condition.is.not.updated=La condición del bucle no se actualiza dentro del bucle
inspection.memory.leak.display.name=Fuga de memoria
inspection.message.address.local.object.may.escape.function=La dirección del objeto temporal local puede escapar de la función
inspection.message.address.local.variable.may.escape.function=La dirección de {0} puede escapar de la función
inspection.message.allocated.memory.leaked=Memoria asignada está filtrada
inspection.message.calls.unreachable=Todas las llamadas de {0} son inaccesibles
inspection.message.condition.always.false=Condición siempre falsa
inspection.message.condition.always.false.when.reached=La condición siempre es falsa cuando se alcanza
inspection.message.condition.always.true=La condición es siempre verdadera
inspection.message.condition.always.true.when.reached=La condición siempre es verdadera al alcanzarse
inspection.message.endless.loop=Bucle infinito
inspection.message.error.after.macro.substitution=Error después de la sustitución de macros:
inspection.message.expression.can.be.simplified.to=La expresión puede simplificarse a ''{0}''
inspection.message.file.too.complex.to.perform.data.flow.analysis=El archivo es demasiado complejo para realizar el análisis de flujo de datos
inspection.message.hides.non.virtual.function={0} esconde una función no-virtual de {1}
inspection.message.if.statement.has.identical.branches='if' expresión tiene ramas idénticas
inspection.message.infinite.recursion=Recursión infinita
inspection.message.invalid.suffix.on.raw.string=Sufijo no válido en una cadena sin procesar
inspection.message.is.never.used={0} nunca se usa
inspection.message.may.point.to.deallocated.memory={0} puede apuntar a memoria desasignada
inspection.message.may.point.to.invalidated.memory={0} puede que apunte a memoria invalidada
inspection.message.may.point.to.out.of.scope.memory={0} puede apuntar a memoria que está fuera de alcance
inspection.message.memory.leak=Fuga de memoria asignada en la función ''{0}''
inspection.message.modern.syntax.can.be.used=Se puede utilizar sintaxis moderna
inspection.message.never.used={0} {1, choice, 0#se asigna pero nunca se accede|1#nunca se utiliza}
inspection.message.non.localized.string=Cadena no localizada: {0}
inspection.message.not.initialized.field.usage=Uso de campo no inicializado {0}
inspection.message.not.released.in.dealloc.method={0} no se liberó en el método ''dealloc''
inspection.message.not.updated.in.loop={0} usado en la condición de bucle no se actualiza en el bucle
inspection.message.only.assigned.but.never.accessed={0} sólo está asignado, pero nunca se accede
inspection.message.reference.may.be.choice.null=Referencia puede ser nula
inspection.message.statement.can.be.simplified=La instrucción puede simplificarse
inspection.message.unreachable.code=Código inaccesible
inspection.message.unterminated.string.literal=Literal de cadena no terminado
inspection.message.value.never.used=El valor nunca se usa
inspection.message.was.not.declared.in={0} no fue declarado en {1}
inspection.method.is.later.in.the.scope=Declaración de método es posterior en el scope
inspection.missing.return.display.name=Retorno faltante
inspection.modern.syntax=Se puede usar sintaxis moderna
inspection.name.unconstrained.variable.type=Tipo de variable no restringido
inspection.naming.convention.edit.settings.link=Editar la configuración del estilo del código
inspection.naming.convention.rename.fix=Renombrar a {0}
inspection.naming.convention.rename.header.guard.fix=Renombrar la protección de cabecera a {0}
inspection.non.localized.string=String no localizada
inspection.not.implemented.functions.display.name=Funciones no implementadas
inspection.not.implements.protocol=Protocolo no implementado
inspection.not.in.hierarchy.message=Mensaje no está en la jerarquía
inspection.not.initialized.field.display.name=Campo no inicializado
inspection.not.initialized.variable.display.name=Variable no inicializada
inspection.not.released.var=Release debe estar en 'dealloc' o en sus funciones llamadas
inspection.null.dereference.display.name=Anulación de referencia nula
inspection.replace.enable_if.with.require=Reemplazar enableif con requerimiento
inspection.sending.dealloc='dealloc' enviado directamente
inspection.simplifiable.statement=Declaración simplificable
inspection.simplify=Simplificar {0}
inspection.simplify.condition=Simplificar "condition == true"
inspection.simplify.ternary=Simplificar "condicion1 ? verdadera : condición2"
inspection.unreachable.calls.display.name=Llamadas inalcanzables de función
inspection.unreachable.code.display.name=Código inalcanzable
inspection.unused.class.display.name=Clase no utilizada
inspection.unused.concept.display.name=Concepto no usado
inspection.unused.directive.display.name=Directiva de inclusión sin utilizar
inspection.unused.expression.result.display.name=Resultado de la expresión no utilizada
inspection.unused.global.declaration.display.name=Declaración global no utilizada
inspection.unused.import.statement.display.name=Sentencia de importación no utilizada
inspection.unused.include.directive.completely.not.directly=Detectar directivas de inclusión no usadas directamente
inspection.unused.include.directive.completely.not.required=Detectar no necesario
inspection.unused.include.directive.completely.unused=Detectar directiva de inclusión completamente no utilizada
inspection.unused.instance.variable.display.name=Variable de instancia no utilizada
inspection.unused.local.variable.display.name=Variable local no utilizada
inspection.unused.localization.display.name=Localización sin usar
inspection.unused.macro.display.name=Macro no utilizada
inspection.unused.method.display.name=Método no utilizado
inspection.unused.parameter.display.name=Parámetro no utilizado
inspection.unused.property.display.name=Propiedad no utilizada
inspection.unused.struct.display.name=Estructura no utilizada
inspection.unused.template.parameter.display.name=Parametro de plantilla no usado
inspection.unused.type.alias.display.name=Alias de tipo no usado
inspection.unused.value.display.name=Valor sin usar
inspection.usage.of.api.unavailable=Utilizando API no disponible
inspections.memory.leak.allocating.functions=Asignando funciones
inspections.memory.leak.deallocating.functions=Liberando funciones
intention.dialog.message.change.type.as.well=¿Quiere cambiar también el tipo de {0}?
intention.dialog.message.existing.default.values.removed=Se eliminarán los valores predeterminados existentes de los parámetros de {0}. ¿Continuar?
intention.family.name.add.bridge.cast=Agregar conversión de puente
intention.family.name.add.call.to.super.dealloc=Añadir llamada a [super dealloc]
intention.family.name.add.return.statement=Añadir return
intention.family.name.change.to.nil=Cambiar a 'nil'
intention.family.name.change.type.to.auto=Cambiar tipo ''{0}'' a ''auto''
intention.family.name.convert.literal.type=Convertir tipo literal: añadir '@'
intention.family.name.delete.method=Eliminar metodo
intention.family.name.extract.assignment=Extraer asignación
intention.family.name.inline.parameter=Parámetro en línea
intention.family.name.leave.initializer={0} y omitir inicializador
intention.family.name.make.default=Establecer como predeterminado {0}
intention.family.name.remove=Eliminar {0}
intention.family.name.remove.declaration=Eliminar {1, choice, 0#{0}|1#declaración de|2#nombre de}
intention.family.name.remove.directive=Quitar directiva
intention.family.name.remove.extra.initializers=Quitar inicializadores adicionales
intention.family.name.remove.initializer=Quitar inicializador
intention.family.name.remove.statement=Eliminar sentencia
intention.family.name.safe.delete=Borrado seguro
intention.family.name.send.message=Enviar mensaje ''{0}''
intention.family.name.simplify=Simplificar {0}
intention.family.name.simplify.choice=Simplificar {1, choice, 0#expresión|1#{0}}
intention.family.name.simplify.condition=Simplificar la condición a ''{0}''
intention.family.name.simplify.expression=Simplificar expresión
intention.family.name.use.enum.constant=Usar constante enum
intention.import.command.name=Importar {0}
intention.import.popup.title=Símbolo a importar
intention.name.add=Añadir "{0}"
intention.name.add.call.to.base.constructor=Adiciona llamada al constructor base de ''{0}''
intention.name.add.constructor.initializer=Añadir inicializador de constructor para {0}
intention.name.add.last.parameter=Añadir el último parámetro ''{0}'' a {1}
intention.name.add.parameters=Agregar parámetros a {0}
intention.name.add.suffix=Agregar sufijo
intention.name.add.type.modifier=Convertir {0} en {1}
intention.name.call=Llamar a {0}
intention.name.cast.expression.to=Convertir expresión a ''{0}''
intention.name.change.format.specifier=Cambiar formateador de ''{0}'' a ''{0}''
intention.name.change.signature=Cambiar firma de {0} a ''{1}''
intention.name.change.superclass=Cambiar superclase de {0} de ''{1}'' a ''{2}''
intention.name.change.type=Cambiar {0, choice, 0#retorno |1#}tipo de {1} a ''{2}''{3}
intention.name.change.visibility=Convertir {0} {1}
intention.name.choice.enable.disable={0, choice, 0#Habilitar ''|1#Deshabilitar ''}{1}'' para {2}
intention.name.choice.superclass={1, choice, 0#{0} |1#}superclase de {2}
intention.name.class=clase
intention.name.cpp.class=clase en C++
intention.name.create.new=Crear nuevo {0}
intention.name.create.new.category=Crear nueva categoría en {0} con {1}
intention.name.delete=Eliminar {0}
intention.name.import=Importar {0}
intention.name.import.from=desde {0}
intention.name.import.which={0, choice, 0#cual|1#símbolo} ''{1}''
intention.name.initialize=Inicializar {0}
intention.name.inline=Línea {0}
intention.name.leave.initializer={0} y dejar inicializador
intention.name.make=Convertir {0} en {1}
intention.name.make.class.method.instance.method=Convertir ''{0}{1, choice, 0#'' en un método de clase|1#'' en un método de instancia}
intention.name.make.function.const=Hacer {0}{1, choice, 0# constante|1# no constante}
intention.name.make.function.virtual=Convertir {0}::{1} en {2, choice, 0# función pura virtual|1# función virtual}
intention.name.make.function.volatile=Hacer {0}{1, choice, 0# volátil|1# no volátil}
intention.name.move.declaration=Mover la declaración de {0}{1}
intention.name.predeclare.protocol.class=Predeclarar {0, choice, 0#protocolo ''|1#clase ''|2#estructura ''}{1}''
intention.name.remove=Eliminar {0}
intention.name.remove.last.parameter=Eliminar el último parámetro ''{0}'' de {1}
intention.name.remove.type.modifier=Dejar {0} no-{1}
intention.name.rename=Renombrar {0}
intention.name.rename.reference=Renombrar referencia
intention.name.reuse.previous.declaration=Reutilizar la declaración previa de {0}
intention.name.safe.delete=Borrado seguro {0}
intention.name.set.superclass=Establecer ''{0}'' como una {1}
intention.name.simplify=Simplificar {0}
intention.name.static=estático
intention.name.use.constant=Usar constante ''{0}''
intention.suffix.called.from=cuando es llamada desde la función ''{0}''
intention.suffix.called.from.global.scope=cuando se llama desde el ámbito global
intentions.add.braces.statement=Agrega llaves a sentencia ''{0}''
intentions.add.braces.statement.family=Añadir llaves a la sentencia
intentions.add.constructor.initializer.for.field=Agregar un inicializador del constructor para el campo
intentions.add.initializer=Añadir inicializadores
intentions.add.modifier=Agregar ''{0}''
intentions.add.parameter.initWith=Agregar parámetro a 'initWith...'
intentions.add.parameters.to.constructor=Agregar ''{0}'' como un parámetro al constructor
intentions.add.parameters.to.constructor.family=Añadir campo como parámetro al constructor
intentions.add.super.constructor.call=Agregar llamada a constructor base faltante
intentions.add.super.protocol.by.class=Adoptar el protocolo por la clase
intentions.add.super.protocol.by.private.category=Adoptar protocolo por categoría privada
intentions.cast.expression=Convertir expresión
intentions.change.function.const.action=Cambiar el calificador const
intentions.change.function.signature=Cambiar firma de función
intentions.change.function.volatile.action=Cambiar calificador volatile
intentions.change.gcc.attribute.action=Cambiar atributo ''{0}''
intentions.change.method.signature.add.parameters=Añadir parámetros
intentions.change.property.attribute.action=Cambiar atributo a propiedad
intentions.change.superclass=Cambiar superclase
intentions.change.type=Cambiar a
intentions.change.type.capitalized=Cambiar tipo
intentions.change.visibility=Cambiar visibilidad
intentions.check.raw.string=Comprobar secuencia sin procesar
intentions.convert.id.to.instance=Reemplaza el tipo de retorno 'id' con 'instancetype'
intentions.convert.objc.literal=Cambiar a literal Objective-C
intentions.convert.to.instance.variable=Convertir a variable de instancia
intentions.convert.to.property=Convertir a propiedad
intentions.convert.type=Convertir tipo
intentions.create.implementation=Crea la implementación de {0}
intentions.create.interface=Crear interfaz para {0}
intentions.create.matching.constructor=Crear constructor para coincidir con las clases base
intentions.create.matching.constructor.in=Crear constructor por defecto en {0}
intentions.create.missing.default.switch.case=Crear caso omitido por defecto en switch
intentions.create.missing.switch.cases=Crear casos de switch faltantes
intentions.create.new.constructor=Crear nuevo constructor ''{0}()''
intentions.create.new.matching.constructor=Crear un nuevo constructor en {0} que coincida con la(s) clase(s) base
intentions.deMorgan.law=Ley de DeMorgan
intentions.declare.member.in=Declarar en:
intentions.declare.method.in=Declarar método en {0}
intentions.declare.method.in.interface=Declarar método en interfaz
intentions.declare.method.in.private.category=Declarar método en categoría privada
intentions.declare.property.as.readwrite=Declarar la propiedad como 'readwrite' en categoría privada
intentions.extract.category=Extraer la categoría de esta clase
intentions.extract.if=Extraer 'if'
intentions.extract.if.with.text=Extraer ''if ({0})''
intentions.extract.private.category=Extraer categoría privada de esta clase
intentions.extract.protocol=Extraer el protocolo de esta clase
intentions.extract.super.class=Extraer superclase
intentions.extract.super.protocol=Extraer súper protocolo
intentions.flip.binary.operation=Invertir operación binaria
intentions.flip.operator=Invertir {0}
intentions.flip.operator.to=voltear {0} a {1}
intentions.generate.property=Generar propiedad
intentions.group=C y C++
intentions.group.control.flow=C y C++/Flujo de control
intentions.group.declarations=C y C++/Declaraciones
intentions.group.definition=C y C++/Definiciones
intentions.group.objc=Objective-C
intentions.group.operators=C y C++/Operadores
intentions.implement.accessor.methods=Implementar métodos de acceso
intentions.implement.accessor.methods.for=Implementar métodos de acceso para {0}
intentions.implement.method=Implementar {0}
intentions.implement.required.methods=Implementar métodos necesarios de interfaz ''{0}''
intentions.import.predeclare.symbol=Importar/predecarar símbolo
intentions.insert.cast.use.modern=Usar operadores de conversión C++
intentions.introduce.typedef=Introducir typedef
intentions.introduce.typedef.for.type=Introducir typedef para tipo {0}
intentions.invert.if.condition=Invertir la condición 'if'
intentions.merge.if.else=Fusionar 'si else'
intentions.merge.nested.ifs=Fusionar 'if' anidados
intentions.move.instance.variables=Mover variables de instancia a la implementación
intentions.move.to.interface=Mover a la interfaz
intentions.move.to.private.category=Mover a categoría privada
intentions.predeclare.function=Predeclarar {0}
intentions.release.variables=Liberar variables
intentions.remove.braces.statement=Remover llaves de la sentencia ''{0}''
intentions.remove.braces.statement.family=Eliminar llaves del bloque
intentions.remove.private.category.message=¿Eliminar categoría privada vacía?
intentions.remove.private.category.title=Remover categoría privada
intentions.remove.subj=Quitar ''{0}''
intentions.remove.suppression=Suprimir remove
intentions.remove.unnecessary.parentheses=Quitar paréntesis innecesarios
intentions.rename.reference=Renombrar referencia
intentions.rename.symbol=Renombrar símbolo
intentions.replace.and.with.or=Reemplazar '' por '||'
intentions.replace.if.else.with.ternary=Reemplazar 'if else' con '?:'
intentions.replace.or.with.and=Reemplazar '||' con ''
intentions.replace.ternary.with.if.else=Reemplazar ':?' con 'if else'
intentions.replace.type.with.auto=Reemplazar el tipo con 'auto'
intentions.reuse.declaration=Reutilizar declaración
intentions.split.declaration=Dividir en declaración y asignación
intentions.split.function=Separar función en declaración y definición
intentions.split.function.progress.text=Determinando el lugar de la definición...
intentions.split.into.separate.declarations=Dividir en declaraciones separadas
intentions.suppress.all.for.file=Suprimir todos los diagnósticos {0} para el archivo
intentions.suppress.for=Suprimir para {0}
intentions.suppress.for.file=Suprimir del archivo
intentions.suppress.for.method=Suprimir para el método/función
intentions.suppress.for.statement=Suprimir por declaración
intentions.suppress.option.for=Suprimir "{0}" para {1}
intentions.surround.with.if.responds=Encerrar con "if ([ respondsToSelector: ])"
intentions.switch.property.dot.method=Cambiar '.' y notación de método
intentions.switch.to.dot.notation=Cambiar a la notación '.'
intentions.switch.to.getter.notation=Cambiar a notación de método getter
intentions.switch.to.setter.notation=Cambiar a notación de metodo setter
intentions.synthesize.property=Sintetizar propiedad
intentions.wrap.with.stringFormat=Envolver con 'stringWithFormat'
no.suggestions.for.members=No hay sugerencias para miembros de {0}
no.suggestions.for.properties.of.class=No hay sugerencias para las propiedades de la clase {0}
progress.text.evaluating.unused.symbols=Evaluando símbolos no usados
quick.fix.add_return_statement=Añadir instrucción return
quick.fix.append.nil.argument=Añadir el argumento "nil"
quick.fix.change.format.specifier=Cambiar especificador de formato
quick.fix.change.pure.specifier=Cambiar especificador puro a '= 0'
quick.fix.copy.superclass.from.interface=Copiar superclase de interfaz
quick.fix.copy.superclass.to.interface=Copiar superclase a interfaz
quick.fix.insert.keyword=Insertar ''{0}''
quick.fix.make_default=Establecer {0} predeterminado
quick.fix.optimize.imports=Optimizar imports
quick.fix.optimize.includes=Optimizar include
quick.fix.place.parentheses.around=Colocar paréntesis alrededor
quick.fix.remove.accessor=Eliminar accessor
quick.fix.remove.arguments=Eliminar argumento(s)
quick.fix.remove.attribute=Eliminar atributo
quick.fix.remove.declaration=Eliminar declaración
quick.fix.remove.extra.declarators=Eliminar declaradores adicionales
quick.fix.remove.from.base.classes.list=Quitar ''{0}'' de la lista de clases base
quick.fix.remove.initializer=Eliminar inicializador
quick.fix.remove.instance.variable.list=Quitar lista de variables de instancia
quick.fix.remove.method.body=Remover el cuerpo del método
quick.fix.remove.property=Eliminar propiedad
quick.fix.remove.protocols.list=Eliminar lista de protocolos
quick.fix.remove.pure.specifier=Eliminar especificador puro
quick.fix.remove.redundant.cast=Eliminar conversión redundante
quick.fix.remove.statement=Eliminar instrucción
quick.fix.remove.superclass=Eliminar superclase
quick.fix.remove.superclass.reference=Eliminar referencia de superclase
quick.fix.remove.synthesize.dynamic.statement=Eliminar sentencia '@synthesize'/'@dynamic'
quick.fix.remove.synthesize.statement=Quitar expresión '@synthesize'
quick.fix.remove.useless.import=Quitar importación inútil
quick.fix.remove.useless.include=Eliminar include inútil
quick.fix.remove.user.defined.getter.method=Eliminar método getter definido por el usuario
quick.fix.remove.user.defined.setter.method=Eliminar método setter definido por el usuario
quick.fix.send.release.message.instead.dealloc=Lanzar mensaje "release" en lugar de "dealloc"
unused.inspection.run.in.headers=Ejecutar inspección en archivos de cabecera