js.editor.basics.module.description=Domina los fundamentos del editor - comienza a escribir mejor código y ahorra tiempo en tareas comunes desde el primer día.
js.editor.basics.module.name=Conceptos Básicos del Editor
js.editor.code.editing.comment.delete.unselect.move.up.1=Ahora que has seleccionado el código, puedes (des)comentarlo ({0}), eliminarlo ({1}), o reducir la selección ({2}).
js.editor.code.editing.comment.delete.unselect.move.up.2=Otra cosa que puedes hacer es mover este código arriba o abajo en el archivo. Movámoslo hacia arriba con {0}.
js.editor.code.editing.duplicate.delete.comment=Finalmente, probemos rápidamente las acciones de línea más populares, como duplicar línea, eliminar línea o comentarla. Usa {0} para duplicar la línea seleccionada ahora. Luego presiona {1} y {2} para probar las otras acciones de línea.
js.editor.code.editing.multi.caret.1=A continuación está la edición multi-cursor. Úsala para ahorrar tiempo al modificar código en varios lugares a la vez. Coloca el cursor dentro de la primera etiqueta {0} (línea 10). Luego selecciona todas las etiquetas {1} dentro del mismo elemento tr (líneas 10-12)\: presiona {2} seis veces hasta que todas las etiquetas necesarias estén seleccionadas.
js.editor.code.editing.multi.caret.2=Reemplacemos {0} con {1} y presionemos {2} para salir del modo multi-cursor.
js.editor.code.editing.next=Eso es todo para esta lección. Haz clic en el botón de abajo para comenzar la siguiente o usa {0}.
js.editor.code.editing.reformat.start=Repasemos algunos consejos y trucos que pueden ayudarte a editar código mucho más rápido. Para empezar, no hay necesidad de arreglar manualmente el formato del código con <ide/>. Reformatea el código con {0}.
js.editor.code.editing.select.word=Ahora veamos cómo seleccionar rápidamente fragmentos de código en un archivo. Presiona {0} varias veces para seleccionar completamente el segundo elemento tr (líneas 14-18).
js.editor.code.editing.tips.and.tricks.title=Consejos y Trucos de Edición de Código
js.editor.code.inspection.checkmark=Si ahora miras en la esquina superior derecha del editor, verás una marca de verificación verde ({0}) confirmando que el archivo no tiene más problemas. Sin embargo, todavía hay un detalle menor que puede optimizarse para hacer el código más corto. Coloca el cursor en {1} (línea 3) y presiona {2}.
js.editor.code.inspection.intro=Mientras trabajas en el editor, <ide/> analiza constantemente tu código, detecta varios problemas y sugiere cómo puede mejorarse. El archivo abierto tiene dos problemas resaltados en las líneas 4 y 5. Veamos qué son presionando {0}.
js.editor.code.inspection.make.shorter=Ahora hagamos nuestra expresión de función más corta. Selecciona la solución rápida {0} y presiona {1}.
js.editor.code.inspection.next=Eso es todo para esta lección. Haz clic en el botón de abajo para comenzar la siguiente o usa {0}.
js.editor.code.inspection.run.intention=Seleccionemos {0} y presionemos {1}.
js.editor.code.inspection.show.intentions.1=También puedes usar {0} para saltar de un error a otro. O puedes explorar los problemas encontrados pasando el cursor sobre ellos.
js.editor.code.inspection.show.intentions.2=En este archivo, el IDE ha localizado una variable no resuelta - una que no fue definida en ninguna parte del código. Sugiere crear una nueva, {0}, como una de las posibles soluciones, pero necesitamos agregar un parámetro book en su lugar. Coloca el cursor en {1} y presiona {2} para ver la lista completa de soluciones.
js.editor.code.inspection.title=Inspecciones de Código
js.editor.completion.add.parameter=Así es como puedes consultar la documentación de JavaScript directamente en <ide/>. Ahora agrega {0} dentro de {1} para continuar.
js.editor.completion.choose.lookup=<ide/> está lleno de funciones que te ayudan a escribir mejor código y aumentar tu productividad. Empecemos con el autocompletado de código. Te permite codificar más rápido completando palabras clave y símbolos de las APIs del lenguaje y las dependencias del proyecto. Escribe {0} y presiona {1} para autocompletar {2}.
js.editor.completion.choose.method=Así, el autocompletado de código muestra sugerencias contextuales mientras escribes. Para agregar una de estas sugerencias, puedes usar {0} como acabamos de hacer, o presionar {1} para reemplazar un elemento existente. Ahora agrega {2} después de {3}, luego escribe {4} y autocompleta el método {5} con {0}.
js.editor.completion.console.log.argument=Finalmente, completemos la declaración {0}. Coloca el cursor dentro de {1} en la línea 8 y agrega {2} usando el autocompletado de código.
js.editor.completion.next=Eso es todo para esta lección. Para comenzar la siguiente, haz clic en el botón de abajo o usa {0}.
js.editor.completion.parameter.info=El tooltip ({0}) que obtuvimos después de colocar el cursor dentro de {1} te permite consultar rápidamente los nombres de los parámetros en métodos y funciones. En algunas situaciones, es posible que desees revisar documentación más detallada. Hagámoslo ahora presionando {2}.
js.editor.completion.title=Autocompletado de Código
js.editor.navigation.activate.structure=La ventana de herramientas {0} puede ayudarte a examinar un archivo más rápido. Proporciona una vista general de su estructura y te permite saltar a un elemento específico simplemente escribiendo su nombre. Comienza a escribir {1} en cualquier lugar del área de la ventana de herramientas, presiona {2}, y luego presiona {3} para cerrar el panel y saltar al código.
js.editor.navigation.choose.structure=Con esta ventana emergente, puedes saltar rápidamente entre archivos recientes y ventanas de herramientas del IDE. Una de esas ventanas de herramientas puede ayudarte a navegar por un solo archivo. Haz clic en la pestaña {0} para aprender más sobre ella.
js.editor.navigation.find.usages=Como resultado de nuestras acciones, el cursor se ha movido a {0} (línea 9). Dejémoslo ahí y presionemos {1} para abrir otra ventana de herramientas que puede ayudarte a encontrar rápidamente los usos de cualquier elemento.
js.editor.navigation.go.to.declaration=Observa el {0} junto a <strong>Ir a Declaración o Usos</strong> - te muestra los usos para la definición y viceversa. Cerremos la ventana emergente, coloquemos el cursor en {1} (línea 16), y presionemos {0} para buscar su declaración.
js.editor.navigation.hide.tool.window=Ahora puedes ver los usos de giveTreat en todo el proyecto y las bibliotecas. Cerremos la ventana de herramientas con {0}.
js.editor.navigation.keymap.reference=¡Felicitaciones\! Has llegado al final de {0}. Imprime la <a href\="{1}">referencia de atajos de teclado</a> para tener todos los atajos a mano mientras te familiarizas con <ide/>. Haz clic en el botón de abajo para pasar al siguiente módulo.
js.editor.navigation.recent.files=Empecemos con la navegación por el proyecto. Presiona {0} para abrir la ventana emergente {1}.
js.editor.navigation.search.action=Ahora que estamos en la pestaña {0}, empecemos a escribir {1} en la barra de búsqueda para buscar un atajo para otra función útil de navegación.
js.editor.navigation.search.everywhere=Ahora presiona {0} dos veces para conocer otra función que puede ayudarte a buscar más rápido.
js.editor.navigation.search.everywhere.tabs=Esta es la ventana emergente {0}. Te permite encontrar instantáneamente cualquier acción, archivo, clase o símbolo, y muestra todas las coincidencias en un solo lugar. Si quieres realizar una búsqueda más específica, puedes presionar {1} para cambiar de {2} a cualquier otra pestaña, como {3} o {4}. O puedes usar un atajo para abrir una pestaña específica que necesites. Probemos esto último con {5}.
js.editor.navigation.title=Navegación
js.editor.refactoring.replace=Ahora reemplaza las dos ocurrencias con la variable {0} llamada {1}.
js.editor.refactoring.select.expression=Creemos una nueva variable, {0} que contendrá {1}. Selecciona la expresión {1} de la lista y presiona {2}.
js.editor.refactorings.next=Acabas de explorar dos formas de refactorizar código en <ide/>. Imprime la <a href\="{0}">referencia de atajos de teclado</a> si prefieres usar atajos, o simplemente sigue usando el menú {1}. Haz clic en el botón de abajo para comenzar la siguiente lección o usa {2}.
js.editor.refactorings.rename=Con {0}, no necesitas memorizar todas las refactorizaciones o sus atajos. Haz clic en {1} para ver una de las refactorizaciones más populares en acción.
js.editor.refactorings.rename.apply=Renombra el parámetro {0} a {1} y presiona {2}. Esta acción aplicará los cambios en todos los archivos del proyecto.
js.editor.refactorings.shortcut=¡Bien hecho\! Intentemos refactorizar código usando un atajo. Coloca el cursor en la propiedad {0} (línea 4) y presiona {1}.
js.editor.refactorings.this=<ide/> tiene <a href\=''{0}''>varias refactorizaciones</a> que pueden reestructurar automáticamente el código existente sin cambiar su comportamiento en todo el proyecto. Veamos la lista de refactorizaciones disponibles para el parámetro {1}. Presiona {2} o selecciona {3} del menú principal.
js.editor.refactorings.title=Refactorizando Tu Código
js.getting.started.module.description=Descubre cómo optimizar las pruebas unitarias en {0} siguiendo un ejemplo usando Jest.
js.getting.started.module.name=Comenzando con las Pruebas
js.readme.description=Este curso interactivo te ayudará a aprender cómo realizar algunas tareas comunes, como refactorizar código o navegar a través de proyectos.\n\nEl curso será más útil para aquellos que son nuevos en {0}. Sin embargo, si eres un usuario experimentado de {0} y quieres comprobar si conoces todos los atajos básicos, también te animamos a probarlo.
js.readme.feedback.header=Compartir feedback
js.readme.usage.header=Cómo seguir el curso
js.testing.jest.coverage.result=Así es como puedes generar rápidamente un informe de cobertura de código que muestra cuántos archivos fueron cubiertos con pruebas, incluyendo el porcentaje de líneas cubiertas en esos archivos. Ahora cerremos el informe de cobertura con {0}.
js.testing.jest.end=¡Felicitaciones\! Has llegado al final de este módulo. La mayoría de lo que hemos aprendido también se aplica a los otros ejecutores de pruebas que soporta <ide/> (excepto la cobertura de código y el modo de observación). Para más consejos y trucos sobre pruebas de aplicaciones con Jest, por favor echa un vistazo a <a href\="{0}">esta</a> publicación del blog. Si usas otros ejecutores de pruebas, es posible que quieras explorar nuestra <a href\="{1}">ayuda web</a>.
js.testing.jest.fix.test.1=Si ahora pasas el cursor sobre {0} en el editor, verás una ventana emergente que explica por qué falló la prueba. Desde allí, también puedes depurar una prueba si es necesario.
js.testing.jest.fix.test.2=Ahora reemplacemos el valor incorrecto usado para {0}\: en la línea 6, reemplaza {1} con {2}.
js.testing.jest.navigate.1=Ahora podemos ver la ventana de herramientas {0} con los resultados de las pruebas y un seguimiento de pila para las pruebas fallidas provenientes del ejecutor de pruebas. Además de simplemente rastrear el progreso de las pruebas, puedes hacer muchas otras cosas aquí. Puedes volver a ejecutar todas ({1}) o solo las pruebas fallidas ({2}), ver las pruebas aprobadas ({3}), o habilitar el <a href\="{4}">modo de observación</a> para volver a ejecutar automáticamente las pruebas cuando hay cambios.
js.testing.jest.navigate.2=También puedes encontrar rápidamente una prueba específica en {0}. Probémoslo ahora\: coloca el cursor en cualquier lugar del área {0}, escribe {1} y presiona {2} para saltar a nuestra prueba.
js.testing.jest.prepare=Con <ide/>, todos los flujos de trabajo de pruebas se vuelven más fáciles. Veamos cómo. Para este módulo, usaremos <a href\="{0}">Jest</a> y uno de <a href\="{1}">sus proyectos de ejemplo</a>, así que por favor <strong>asegúrate de tener Jest y npm/Yarn instalados</strong> en tu máquina (consulta <a href\="{2}">esta</a> página web para más información). Comenzaremos creando una configuración de ejecución/depuración específica para Jest. En el menú principal, selecciona {3}. Luego haz clic en {4}, agrega la configuración {5} con los parámetros predeterminados y presiona {6} para guardarla.
js.testing.jest.re.run.test.1=Ahora que tenemos el valor correcto para el resultado esperado, podemos volver a ejecutar nuestra prueba. ¿Ves el icono {0} a la izquierda de la prueba en el editor? Este icono no solo te muestra el estado de las pruebas que has ejecutado recientemente, sino que también te permite ejecutar y depurar rápidamente una prueba específica.
js.testing.jest.re.run.test.2=Haz clic en él y selecciona {0}.
js.testing.jest.run=Ahora la nueva configuración {0} está seleccionada por defecto. Hagamos clic en el botón {1} ({2}) justo al lado.
js.testing.jest.success.run.coverage.1=¡Excelente trabajo\! Nuestra prueba ha pasado exitosamente.
js.testing.jest.success.run.coverage.2=Echemos un vistazo a otra herramienta útil. Haz clic en el icono {0} ubicado junto al menú de configuraciones de ejecución/depuración.
js.testing.jest.title=Fundamentos de Pruebas en {0}