java.basic.completion.activate=Para activar "Finalización básica", pulse {0} y el menú de búsqueda aparecerá de nuevo.
java.basic.completion.choose.first=Puede seleccionar el primer elemento del menú Búsqueda presionando {0}.
java.basic.completion.choose.item=Selecciona {0} en el menú de búsqueda y pulsa {1}.
java.basic.completion.complete=Presiona {0} para completar este enunciado.
java.basic.completion.deeper.level=A veces necesitas ver las sugerencias de las constantes o métodos estáticos. Pulsa dos veces {0} para que aparezcan en la búsqueda.
java.basic.completion.module.promotion=En el módulo {0} encontrarás más información sobre las refactorizaciones.
java.debug.workflow.confirm.hot.swap=Confirmar la recarga de <strong>Hot Swap</strong>.
java.debug.workflow.drop.frame=Hemos parcheado nuestro método, pero todavía estamos ejecutando el obsoleto {0} que lanzará la excepción de nuevo. Dejemos ir el frame y volvamos al estado anterior a que se llamara a {1}. Haz clic en {2} cerca de la llamada superior en el frame de la pila o presiona {3}.
java.debug.workflow.hotswap.disabled.warning=La función <strong>Hot Swap</strong> está deshabilitada en la configuración del IDE. Habilítala en {0} | {1} | {2} <strong>→</strong> {3} o simplemente <callback id="{4}">haz clic para activar</callback>.
java.debug.workflow.invalid.drop=Parece que realizaste una acción no planificada por la lección. Por favor, reinicia la lección.
java.debug.workflow.no.confirmation=<strong>Intercambio en caliente</strong> se realiza automáticamente en segundo plano. Puede que veas un mensaje correspondiente en la esquina inferior izquierda.
java.debug.workflow.rebuild=Podríamos volver a ejecutar nuestro pequeño programa después de la corrección, pero para programas grandes, volver a ejecutar puede llevar mucho tiempo. Si la corrección solo afecta a un método puro (como en este caso), podemos reconstruir el proyecto y aplicar <strong>Hot Swap</strong> en lugar de volver a ejecutar. Presiona {0} para compilar el proyecto.
java.editor.coding.assistance.press.to.fix=Pulsa {0} para reemplazar el argumento con un array vacío.
java.extract.method.edit.method.name=Edita el nombre del nuevo método o conserva el propuesto por el IDE. Luego, presiona {0}.
java.inheritance.hierarchy.choose.any.implementation=Selecciona cualquier implementación y pulsa {0} o haz clic en ella.
java.inheritance.hierarchy.goto.implementation=Pulsa {0} para buscar implementaciones de {1}.
java.inheritance.hierarchy.help.link=Jerarquía del código fuente
java.inheritance.hierarchy.hide.find.tool.window=Pulsa {0} para ocultar la ventana de herramientas {1}
java.inheritance.hierarchy.hide.method.hierarchy=Ocultemos también {0}. Presiona {1} otra vez.
java.inheritance.hierarchy.invoke.implementations.again=La declaración del método base tiene su propio icono de canalón {0}. Haz clic en él o pulsa {1} otra vez.
java.inheritance.hierarchy.last.note=<strong>Nota:</strong> Las acciones {0} y {1} también pueden aplicarse a clases. Las acciones {2} y {3} raramente se usan, pero siempre puedes encontrarlas con {4} usando el filtro {5}.
java.inheritance.hierarchy.lesson.name=Jerarquía de herencia
java.inheritance.hierarchy.navigate.to.base=Desde el derivado, puede navegar a un supermétodo. Pulse {0} o haga clic en el icono {1} en el canalón del editor.
java.inheritance.hierarchy.open.class.hierarchy=Para abrir la jerarquía de clases, pulsa {0}.
java.inheritance.hierarchy.open.in.find.tool.window=Para jerarquías grandes, quizá quieras buscar implementaciones en la ventana de herramientas {0}. Haz clic en {1}.
java.inheritance.hierarchy.open.method.hierarchy=Es posible que desees explorar toda la jerarquía de este método. Presiona {0}.
java.missed.sdk.click.setup=<ide/> no puede encontrar el JDK en el ordenador. El IDE necesita el JDK para ejecutar programas Java y proporcionarte ayuda de código. Para configurar el JDK, haz clic en el enlace {0} resaltado.
java.missed.sdk.configure=Configure JDK utilizando una de las opciones sugeridas. Puede descargarla o especificar una ruta al directorio de inicio de JDK existente en su ordenador.
java.missed.sdk.read.more.tip=<strong>Consejo</strong>: puedes leer más acerca del SDK de Java en <a href=''{0}''>la documentación</a>.
java.missed.sdk.show.options=Clica para ver las opciones disponibles
java.missed.sdk.wait.installation=Espere mientras el IDE instala el JDK
java.onboarding.apply.action=Selecciona la acción "{0}" y presiona {1}.
java.onboarding.apply.intention=Selecciona {0} y presiona {1}.
java.onboarding.balloon.about.debug.panel=La ventana de herramientas {0} ofrece una barra de herramientas con distintas acciones de depuración. Puede tomar la lección de {1} más adelante para probarlas.
java.onboarding.balloon.click.here=Haz clic aquí para establecer un punto de interrupción
java.onboarding.balloon.open.file=Haz doble clic para abrir {0}
java.onboarding.balloon.open.learn.toolbar=Cambia a la ventana de herramientas {0} para continuar con esta lección
java.onboarding.balloon.project.view=Haz clic para abrir la **vista de proyecto**
java.onboarding.balloon.source.directory=Expande el directorio {0} para ver los archivos fuente del proyecto
java.onboarding.balloon.start.debugging=Haga clic en el icono para comenzar a depurar
java.onboarding.balloon.stop.debugging=Haz clic en el icono para detener la depuración
java.onboarding.case.changed=Se ha cambiado el caso
java.onboarding.change.ui.settings=Durante esta lección, IDEA cambia algunos ajustes de IU al estado predeterminado. Sus preferencias se restablecerán cuando complete o salga de la lección.
java.onboarding.choose.values.item=Puedes comenzar a escribir {0} para reducir la lista de finalización o seleccionar este elemento y pulsar {1}.
java.onboarding.epilog=¡Felicidades! Has completado el recorrido de incorporación. Ahora puedes:\n- <callback id="{0}">Cerrar</callback> el proyecto de aprendizaje{1}\n- <callback id="{2}">Mostrar</callback> más lecciones
java.onboarding.feedback.system.current.jdk=JDK actual:
java.onboarding.feedback.system.found.jdks=JDK encontrados:
java.onboarding.feedback.system.jdk.at.start=JDK al inicio:
java.onboarding.feedback.system.lang.level=Nivel de lenguaje:
java.onboarding.indexing.description=Cuando abres un proyecto por primera vez, <ide/> escanea el JDK y el proyecto en sí para recolectar detalles requeridos para asistencia de codificación. Para continuar, espera hasta que se complete la indexación.
java.onboarding.invoke.completion=Ahora, escribamos un punto {0} para mostrar todas las opciones de autocompletado disponibles.
java.onboarding.invoke.completion.balloon=Teclea un punto {0} para mostrar todas las opciones de finalización disponibles
java.onboarding.invoke.completion.tip=<strong>Sugerencia:</strong> <ide/> muestra automáticamente las opciones de finalización mientras escribes. Además, puedes presionar {0} para mostrar los elementos de finalización en cualquier lugar del código.
java.onboarding.invoke.intention.for.code=Las intenciones también te ahorran tiempo y simplifican la programación. Vamos a usar una intención para reformatear la concatenación de cadenas. Presiona {0} para mostrar las opciones posibles.
java.onboarding.invoke.intention.for.code.balloon=Pulsa {0} para mostrar las intenciones disponibles
java.onboarding.invoke.intention.for.warning.1=Acabas de corregir un error, pero puedes mejorar el aspecto de este código. IDEA resalta y agrega un foco amarillo a las líneas de código que se pueden mejorar.
java.onboarding.invoke.intention.for.warning.2=Presiona {0} para obtener una vista previa de las advertencias y aplicar una corrección rápida.
java.onboarding.invoke.intention.for.warning.balloon=Presiona {0} para mostrar correcciones rápidas disponibles
java.onboarding.invoke.search.everywhere.1=Mientras trabajas en <ide/>, es posible que quieras buscar archivos en tu proyecto, símbolos, clases o incluso acciones de IDE. En esta clase, buscaremos la acción {0} para hacer que la cadena {1} sea minúscula.
java.onboarding.invoke.search.everywhere.2=Teclea {0} dos veces para abrir el diálogo {1}.
java.onboarding.lesson.name=Familiarízate con IntelliJ IDEA
java.onboarding.module.description=Una breve descripción de las funciones principales en {0}.
java.onboarding.module.name=Presentación guiada de incorporación
java.onboarding.project.view.description=La <strong>vista Proyecto</strong> es una de las principales ventanas de herramientas. Contiene el directorio del proyecto, librerías externas específicas del SDK y archivos temporales. Haz clic en el botón con rayas para previsualizar el contenido del proyecto de demostración. También puedes abrirlo pulsando {0}.
java.onboarding.run.options.community=Otras operaciones como correr con cobertura {0} pueden mostrarse en {1}.
java.onboarding.run.options.ultimate=Se pueden mostrar otras acciones como perfilado {0}, y ejecución con cobertura {1}, haciendo clic en {2}.
java.onboarding.run.sample=Por ahora, vamos a ejecutar el archivo actual, haz clic en {0} o presiona {1}.
java.onboarding.run.sample.balloon=Vamos a ejecutar el archivo actual, haz clic en {0} o presiona {1}
java.onboarding.search.everywhere.description=Como puedes ver, el texto seleccionado, {0}, ha sido copiado automáticamente a la cadena. Vamos a escribir {1} en lugar de {0}.
java.onboarding.select.fix=Aplica el primer elemento: {0}. En este caso, el bucle <strong>for-each</strong> hará que el código sea más fácil de entender.
java.onboarding.start.debugging=Haz clic en el ícono {0} para iniciar el proceso de depuración.
java.onboarding.stop.debugging=Finalicemos la depuración. Haz clic en el icono {0}.
java.onboarding.temporary.configuration.description=Acabas de abrir el sample de demostración. ¡Ahora ejecutámoslo! En {0} resaltado, puedes ver acciones de ejecución populares para la configuración seleccionada. Por ejemplo, puedes ejecutar tu código {1} o depurarlo {2}
java.onboarding.toggle.breakpoint.1=Usted puede notar que en vez del valor esperado {0}, el metodo {1}, retorna {2}. Vamos a detener la declaración de retorno para depurar el código problemático.
java.onboarding.toggle.breakpoint.2=Haga clic en el canal dentro del área resaltada para establecer un punto de interrupción.
java.onboarding.type.division=Una vez descubras el problema en el código, solucionémoslo. Divide la suma resultante entre la longitud de los valores. El script de la lección ya insertó {0}.
java.onboarding.wait.indexing=Espere mientras el IDE está indexando los archivos JDK
java.postfix.completion.complete=Selecciona {0} de la lista o escribe el mismo valor en el editor. Presiona {1} para completar la declaración.
java.postfix.completion.type=Escribe {0} después del paréntesis para ver la lista de sugerencias de finalización de sufijo.
java.refactoring.menu.confirm.constant=En este diálogo, puede elegir el tipo de nueva constante, el nombre, la clase principal y la visibilidad. Puede dejar los valores predeterminados y presionar {0} o hacer clic en {1}.
java.refactoring.menu.inline.variable=Ahora reemplazaremos el uso único de la variable {0} con una expresión que la define. Puede presionar {1} y seleccionar {2} de la lista o presionar {3} para invocar esta acción directamente.
java.refactoring.menu.inline.variable.eng=Ahora, reemplacemos el único uso de la variable {0} por una expresión que la defina. Puede pulsar {1} y filtrar el menú de refactorización por <strong>iv</strong> (<strong>i</strong>nline <strong>v</strong>ariable). Elija este elemento o pulse {2}.
java.refactoring.menu.introduce.constant=Finalmente, extraigamos una extensión del nombre del archivo. De nuevo, puedes presionar {0} y seleccionar {1} o presionar {2}
java.refactoring.menu.introduce.constant.eng=Finalmente, extraigamos una extensión del nombre del archivo. Nuevamente, puede presionar {0} y filtrar por <strong>ic</strong> (<strong>i</strong>ntroduce <strong>c</strong>onstant) o presionar {1}.
java.rename.confirm.accessors.rename=<ide/> está detectando los getters/setters correspondientes y sugiere renombrarlo como corresponde.Ahora sólo presiona {0} o cliquea {1}
java.rename.press.rename=Presiona {0} para renombrar el campo {1}.
java.rename.type.new.name=Escriba un nuevo nombre para este campo (por ejemplo, {0}) y presione {1}
java.run.configuration.lets.run=Existen varias formas de ejecutar tu código. Vamos a ejecutarlo desde el margen haciendo clic en {0} y seleccionando el elemento {1}. También puedes pulsar {2}.
java.smart.type.completion.apply=La finalización de tipo inteligente filtra la lista de sugerencias para incluir solo los tipos aplicables en el contexto actual. Pulsa {0} para ver la lista de sugerencias coincidentes. Pulsa {1} para seleccionar la primera.
java.smart.type.completion.return=La Smart Type Completion puede sugerir código para una sentencia return. Pulsa {0} para ver el menú Lookup para un return. Elige el primero pulsando {1}
java.statement.completion.complete.condition=Agrega una condición dentro de los paréntesis {0} y presiona {1} para saltar a la sentencia {2}.
java.statement.completion.complete.finish.body=Escribe una línea de código: {0}; luego presiona {1} para completar la sentencia y aplicar el formato.
java.statement.completion.complete.for=Presiona {0} para completar la sentencia {1}.
java.statement.completion.complete.if=Escribe {0} y presiona {1} para generar el enunciado.
java.statement.completion.help.link=Completar sentencia
java.statement.completion.lesson.name=Completado de sentencias
toggle.case.part=alternar mayúsculas y minúsculas