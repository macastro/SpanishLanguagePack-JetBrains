ACT.CMD.use.import=Usar un módulo importado
ACT.from.some.module.import=Importar de...
ACT.qualify.with.module=Calificar con un módulo importado
ANN.assign.to.none=Asignación a Ninguno
ANN.assignment.expression.as.a.target=Expresión de asignación no se puede utilizar como objetivo aquí
ANN.assignment.expression.in.an.iterable=Las expresiones de asignación no pueden utilizarse en una iteración con comprensión
ANN.assignment.expressions.within.a.comprehension.cannot.be.used.in.a.class.body=Las expresiones de asignación dentro de una comprensión no se pueden usar en un cuerpo de clase
ANN.assignment.to.keyword=Asignación a palabra reservada
ANN.async.for.outside.function='async for' fuera de una función async
ANN.async.with.outside.function='async with' fuera de una función async
ANN.await.outside.async.function='await' fuera de la función asíncrona
ANN.break.outside.loop='break' fuera del bucle
ANN.can.t.use.starred.expression.here=No se puede utilizar aquí la expresión marcada con asterisco
ANN.cannot.assign.to.debug=No se puede asignar a debug
ANN.cant.assign.to.await.expr=No se puede asignar a la expresión await
ANN.cant.assign.to.call=No se puede asignar a una llamada a función
ANN.cant.assign.to.comprh=No se puede asignar a la comprensión de listas
ANN.cant.assign.to.dict.comprh=No se puede asignar a una comprensión de dict
ANN.cant.assign.to.generator=No es posible asignar a la expresión generador
ANN.cant.assign.to.lambda=No es posible asignar a lambda
ANN.cant.assign.to.literal=No se puede asignar a un literal
ANN.cant.assign.to.operator=No se puede asignar al operador
ANN.cant.assign.to.parens=No se puede asignar a ()
ANN.cant.assign.to.set.comprh=No se puede asignar a comprensión de conjunto
ANN.cant.aug.assign.starred.assignment.target.must.be.in.list.or.tuple=El destino de la asignación con asterisco debe estar en una lista o tupla
ANN.cant.aug.assign.to.comprh=No es posible realizar una asignación aumentada a una comprensión de lista
ANN.cant.aug.assign.to.dict.comprh=No es posible una asignación aumentada a comprensión de diccionario
ANN.cant.aug.assign.to.generator=No es posible una asignación aumentada a la expresión del generador
ANN.cant.aug.assign.to.list.or.comprh=La asignación aumentada a una lista literal o a una comprensión no es posible
ANN.cant.aug.assign.to.set.comprh=Asignación aumentada a comprensión de conjuntos no es posible
ANN.cant.aug.assign.to.tuple.or.generator=No se puede asignar aumentado a la literación de una tupla o expresión de generador
ANN.cant.delete.call=No se puede eliminar la llamada a función
ANN.cant.delete.literal=No se puede eliminar literal
ANN.continue.break.or.return.in.star.except='break', 'continue' y 'return' no pueden aparecer en un bloque except*
ANN.continue.outside.loop=continuar fuera del bucle
ANN.default.except.must.be.last=El 'except:' por defecto debe ser el último
ANN.deleting.none=Eliminando ninguno
ANN.duplicate.param.name=Nombre de parámetro duplicado
ANN.exception.group.in.star.except=ExceptionGroup no puede usarse en except*
ANN.fstrings.illegal.conversion.character=Carácter de conversión ilegal ''{0}'': debe ser uno de ''s'', ''r'', ''a''
ANN.fstrings.missing.conversion.character=Se esperaba un carácter de conversión: debe ser uno de los siguientes: 's', 'r', 'a'
ANN.fstrings.single.right.brace.not.allowed.inside.fstrings=No se permite una '}' sola dentro de f-strings
ANN.generator.expression.must.be.parenthesized.if.not.sole.argument=La expresión de generator debe estar entre paréntesis si no es el único argumento
ANN.ignore.errors.like.this=Ignorar errores como este.
ANN.illegal.target.for.variable.annotation=Objetivo ilegal para una anotación de variable
ANN.missing.closing.quote=Falta comilla de cierre [{0}]
ANN.missing.closing.triple.quotes=Comillas triples de cierre faltantes
ANN.multiple.args=múltiples * parámetros no están permitidos
ANN.multiple.kwargs=no se permiten múltiples parámetros **
ANN.multiple.slash=No se permiten múltiples / parámetros
ANN.name.used.both.as.global.and.param=El nombre ''{0}'' es usado como un parámetro y como una variable global
ANN.named.parameters.after.star=los parámetros con nombre deben seguir a un * sin parámetros
ANN.named.parameters.before.slash=Los parámetros con nombre deben estar antes de la diagonal
ANN.no.exception.to.reraise=No hay excepciones para relanzar
ANN.non.default.param.after.default=parámetro no predeterminado sigue al parámetro predeterminado
ANN.non.empty.return.inside.asynchronous.generator=Retorno no vacío dentro del generador asíncrono
ANN.patterns.attribute.name.is.repeated=El nombre del atributo ''{0}'' está repetido
ANN.patterns.double.star.pattern.cannot.be.used.outside.mapping.patterns=El patrón de doble estrella no se puede utilizar fuera de los patrones de mapeo
ANN.patterns.invalid.complex.number.literal=Literal de número complejo no válido
ANN.patterns.key.pattern.can.only.be.value.or.literal.pattern=El patrón de clave solo puede ser un patrón de valor o un patrón literal
ANN.patterns.name.already.bound=El nombre ''{0}'' ya está vinculado
ANN.patterns.pattern.does.not.bind.names=El patrón no enlaza {0,choice,1#nombre|2#nombres} {1}
ANN.patterns.pattern.makes.remaining.alternatives.unreachable=El patrón hace que las alternativas restantes sean inalcanzables
ANN.patterns.pattern.makes.remaining.case.clauses.unreachable=El patrón hace que el resto de cláusulas case sean inalcanzables
ANN.patterns.repeated.star.pattern=Patrón de estrellas repetido
ANN.patterns.single.star.pattern.cannot.be.used.outside.sequence.patterns=El patrón de un solo asterisco no puede usarse fuera de los patrones de secuencia
ANN.positional.only.param.after.keyword=El parámetro de solo posición sigue a un parámetro que no es de solo posición
ANN.python.does.not.support.yield.from.inside.async.functions=Python no soporta 'yield from' dentro de las funciones asíncronas
ANN.regular.param.after.keyword=Parámetros después del carácter **
ANN.regular.param.after.vararg=parámetro regular después del parámetro *
ANN.return.outside.of.function='return' fuera de una función
ANN.slash.param.after.keyword=/ el parámetro debe preceder al parámetro **
ANN.slash.param.after.vararg=/ el parámetro debe preceder al parámetro *
ANN.star.import.at.top.only='import *' sólo está permitido a nivel del módulo
ANN.starred.param.after.kwparam=* parámetro después de ** parámetro
ANN.try.except.can.not.have.except.and.star.except=La instrucción Try no puede contener except y except*
ANN.tuple.py3=El desempaquetado de parámetros de tupla no está soportado en Python 3
ANN.unparenthesized.assignment.expression.statement=Las expresiones de asignación sin parentesis no están permitidas en el nivel superior de una expresión de declaración
ANN.unparenthesized.assignment.expression.value=Las expresiones de asignación sin paréntesis están prohibidas en el nivel superior del lado derecho de una sentencia de asignación
ANN.variable.annotation.cannot.be.combined.with.tuple.unpacking=No se puede combinar la anotación de variable con la descomposición de tuplas
ANN.variable.annotation.cannot.be.used.in.assignment.with.multiple.targets=La anotación de variable no se puede utilizar en la asignación con múltiples objetivos
ANN.yield.outside.of.function='yield' fuera de la función
INLAY.function.return=Tipos de retorno de función
INLAY.reveal.type=Tipo de argumento de 'reveal_type'
INLAY.type.hints=Sugerencias de tipo de Python
INSP.GROUP.python=Python
INSP.NAME.abstract.class=La clase debe implementar todos los métodos abstractos
INSP.NAME.argument.equal.default=El argumento de la función es igual al valor del parámetro por defecto
INSP.NAME.assert.type=typing.assert_type
INSP.NAME.assignment.to.loop.or.with.parameter=Asignaciones a parámetro de sentencia 'for' o 'with'
INSP.NAME.attribute.outside.init=Un atributo de instancia se define fuera de 'init'
INSP.NAME.augment.assignment=La asignación puede ser reemplazada por una asignación aumentada
INSP.NAME.bad.except.clauses.order=Orden incorrecto de las cláusulas "except"
INSP.NAME.byte.literal=Un literal de bytes contiene un caracter no ASCII
INSP.NAME.calling.non.callable=Intento de llamar a un objeto no invocable
INSP.NAME.chained.comparisons=Comparaciones en cadena demasiado complejas
INSP.NAME.check.can.be.simplified=Verificación de variables booleanas redundantes
INSP.NAME.class.has.no.init=La clase no tiene método `init`
INSP.NAME.class.var.variables=Uso de variables de ClassVar no válido
INSP.NAME.classic.class.usage=Uso clásico del estilo de clase
INSP.NAME.comparison.with.none=Uso de operadores de igualdad para comparar con None
INSP.NAME.compatibility=El código es incompatible con versiones específicas de Python
INSP.NAME.coroutine.is.not.awaited=La corrutina ''{0}'' no ha sido aguardada
INSP.NAME.dataclass.definition.and.usages=Definición y uso inválidos de clases de datos
INSP.NAME.decorator.outside.class=Decorador específico de la clase utilizado fuera de la clase
INSP.NAME.default.argument=El argumento por defecto es mutable
INSP.NAME.deprecated.function.class.or.module=Función, clase o módulo obsoleto
INSP.NAME.dict.creation=La creación del diccionario se puede reescribir como un literal de diccionario
INSP.NAME.docstring.types=El tipo en el docstring no coincide con el tipo inferido
INSP.NAME.dunder.slots=Usos no válidos de clases con definiciones 'slots'
INSP.NAME.duplicate.keys=El diccionario contiene llaves duplicadas
INSP.NAME.enum=Definición y usos inválidos de enumeración
INSP.NAME.exception.not.inherit=Las excepciones no heredan de la clase estándar 'Exception'
INSP.NAME.final.classes.methods.and.variables=Usos inválidos de clases, métodos y variables final
INSP.NAME.first.arg.assign=El primer parámetro del método se reasigna
INSP.NAME.from.future.import=Importación incorrecta de from future import
INSP.NAME.global.undefined=Variable global no definida a nivel de módulo
INSP.NAME.inconsistent.indentation=Sangría inconsistente
INSP.NAME.inconsistent.returns=Instrucciones de retorno inconsistentes
INSP.NAME.incorrect.call.arguments=Argumentos de llamada incorrectos
INSP.NAME.incorrect.docstring=Docstring incorrecta
INSP.NAME.init.return=Método init que devuelve un valor
INSP.NAME.invalid.interpreter=Intérprete no válido
INSP.NAME.invalid.usages.of.override.decorator=Usos inválidos del decorador @override
INSP.NAME.list.creation=No es óptima la declaración de lista
INSP.NAME.mandatory.encoding=Codificación no especificada para archivo
INSP.NAME.method.may.be.static=El método no puede ser declarado estático
INSP.NAME.method.over=La firma del método no coincide con la firma del método sobreescrito
INSP.NAME.missing.or.empty.docstring=Docstring faltante o vacío
INSP.NAME.missing.super.constructor=Falta llamada a 'init' de la superclase
INSP.NAME.missing.type.hints=Faltan sugerencias de tipo para la definición de la función
INSP.NAME.nested.decorators=Anidación Problematica de decoradores
INSP.NAME.new.init.signature=Firmas incompatibles de new y init
INSP.NAME.new.style.generics.type.param.syntax=Parámetros de tipo de estilo nuevo y pseudónimos de tipos de uso no válido
INSP.NAME.new.type=Uso no válido de NewType
INSP.NAME.new.type.cannot.be.subclassed=''{0}'' no se puede subclasificar
INSP.NAME.new.type.expected.class=Clase esperada
INSP.NAME.new.type.new.type.cannot.be.generic=NewType no puede ser genérico
INSP.NAME.new.type.new.type.cannot.be.used.with=NewType no se puede usar con ''{0}''
INSP.NAME.new.type.variable.name.does.not.match.new.type.name=El nombre de la variable ''{0}'' no coincide con el nombre de NewType ''{1}''
INSP.NAME.non.ascii=El archivo contiene un caracter no ASCII
INSP.NAME.none.function.assignment=Asignación de llamadas a funciones que no devuelven nada
INSP.NAME.oldstyle.class=Clase old-style que contiene las características de una clase new-style
INSP.NAME.overloads.in.regular.python.files=Sobrecargas en archivos Python normales
INSP.NAME.pep8.naming=Infracción de la convención de nombres PEP 8
INSP.NAME.problematic.first.parameter=Primer parámetro incorrecto
INSP.NAME.property.access=Acceso inadecuado a propiedades
INSP.NAME.property.definition=Definición de propiedad incorrecta
INSP.NAME.protected.member=Acceso a un miembro protegido de una clase o módulo
INSP.NAME.protocol.definition.and.usages=Definiciones y usos de protocolo inválidos
INSP.NAME.pytest-parametrized=Argumentos incorrectos en @pytest.mark.parametrize
INSP.NAME.pytest.unpassed.fixture=El fijador no es solicitado por las funciones de prueba
INSP.NAME.redeclaration=Nombres redeclarados sin uso
INSP.NAME.redundant.parentheses=Paréntesis redundantes
INSP.NAME.relative.import=Importaciones relativas sospechosas
INSP.NAME.requirements=Requisitos de paquetes sin satisfacer
INSP.NAME.set.function.to.literal=La llamada de función puede reemplazarse con la literatura establecida
INSP.NAME.shadowing.builtins=Nombes incorporados de sombreado
INSP.NAME.single.quoted.docstring=Docstring entre comillas simples
INSP.NAME.statement.effect=La sentencia no tiene ningún efecto
INSP.NAME.str.format=Errores en operaciones de formateo de cadenas de texto
INSP.NAME.too.broad.exception.clauses=Cláusulas de excepción poco claras
INSP.NAME.trailing.semicolon=Punto y coma final prohibido en una sentencia
INSP.NAME.tuple.assignment.balance=El balance de asignación de tuplas es incorrecto
INSP.NAME.tuple.item.assignment=Prohibida asignación de elemento de tupla
INSP.NAME.type.checker=Error de tipo
INSP.NAME.type.hints=Definiciones y usos de sugerencias de tipo inválidas
INSP.NAME.typed.dict=Definición y usos de TypedDict inválidos
INSP.NAME.unbound=Variables locales no vinculadas
INSP.NAME.unnecessary.backslash=Barra invertida innecesaria
INSP.NAME.unreachable.code=Código inalcanzable
INSP.NAME.unresolved.refs=Referencias no resueltas
INSP.NAME.unused=Símbolos locales no usados
INSP.NAME.unused.imports=Importaciones no usadas
INSP.NAME.wrong.super.arguments=Argumentos incorrectos para llamar a super
INSP.abstract.class.abstract.methods.are.allowed.in.classes.whose.metaclass.is.abcmeta=Se permiten métodos abstractos en las clases cuya metaclase es 'ABCMeta'
INSP.abstract.class.add.to.superclasses=Agregar ''{0}'' a las superclases
INSP.abstract.class.cannot.instantiate.abstract.class=No se puede instanciar la clase abstracta ''{0}''
INSP.abstract.class.class.must.implement.all.abstract.methods=La clase {0} debe implementar todos los métodos abstractos
INSP.abstract.class.set.as.metaclass=Establecer ''{0}'' como metaclase
INSP.argument.equals.to.default=El argumento es igual al valor del parámetro predeterminado
INSP.arguments.not.declared.but.provided.by.decorator=Los siguientes argumentos no están declarados pero son proporcionados por el decorador: {0}
INSP.assert.type.expected.type.got.type.instead=Se esperaba el tipo ''{0}'', pero se obtuvo ''{1}'' en su lugar
INSP.assignment.can.be.replaced.with.augmented.assignment=La asignación puede ser reemplazada con una asignación aumentada
INSP.assignment.to.loop.or.with.parameter=La variable ''{0}'' ya fue declarada en el bucle ''for'' or en la declaración ''with'' anterior
INSP.async.call=Sintaxis `await` faltante en llamadas de corrutinas
INSP.attribute.outside.init=Atributo de instancia {0} definido fuera de init
INSP.auto.to.manual.field.numbering=No se puede cambiar de numeración automática de campos a especificación manual de campos
INSP.bad.except.exception.class.already.caught=La clase de excepción ''{0}'' ya ha sido capturada
INSP.bad.except.superclass.of.exception.class.already.caught=''{0}'', superclase de la clase de excepción ''{1}'', ya ha sido capturada
INSP.byte.literal.contains.illegal.characters=El literal de byte contiene caracteres >255
INSP.cant.return.value.from.init=No se puede devolver un valor desde init
INSP.chained.comparisons.ignore.statements.with.constant.in.the.middle=Ignorar expresiones con una constante en medio
INSP.class.has.no.init=Clase no tiene método init
INSP.class.is.not.subtype.of.class=''{0}'' no es una instancia o una subclase de ''{1}''
INSP.class.object.is.not.callable=''{0}'' no es invocable
INSP.class.var.can.be.used.only.in.class.body='ClassVar' solo se puede usar para asignaciones en el cuerpo de la clase
INSP.class.var.can.not.be.assigned.to.instance=No se puede asignar a la variable de clase ''{0}'' mediante instancia
INSP.class.var.can.not.be.nested='ClassVar' no se puede anidar
INSP.class.var.can.not.be.used.in.annotation.for.function.return.value='ClassVar' no debe usarse en la anotación, para el valor de la función, que devuelve
INSP.class.var.can.not.be.used.in.annotations.for.function.parameters=ClassVar no puede ser usada en anotaciones para parámetros de función
INSP.class.var.can.not.be.used.in.function.body=No es posible usar 'ClassVar' en anotaciones para variables locales
INSP.class.var.can.not.include.type.variables='ClassVar' No se puede incluir variables de tipo en el parámetro "ClassVar"
INSP.class.var.can.not.override.class.variable=No se puede sobreescribir la variable de clase ''{0}'' (previamente declarada en la clase base ''{1}'') con una variable de instancia
INSP.class.var.can.not.override.instance.variable=No se puede sobreescribir la variable de instancia ''{0}'' (previamente declarada en la clase base ''{1}'') con una variable de clase
INSP.class.var.can.only.be.parameterized.with.one.type='ClassVar' solo puede ser parametrizado con un tipo
INSP.class.var.is.not.allowed.here='ClassVar' no está permitido aquí
INSP.class.var.not.a.valid.type=Tipo no válido
INSP.classic.class.usage.old.style.class=Clase antigua
INSP.classic.class.usage.old.style.class.ancestors=Clase antigua, porque todas las clases de las que hereda son antiguas
INSP.comparison.with.none.performed.with.equality.operators=La comparación con None se realizó con operadores de igualdad
INSP.compatibility.basestring.type.not.available.in.py3=El tipo basestring no está disponible en Python 3
INSP.compatibility.check.for.compatibility.with.python.versions=Comprobar compatibilidad con versiones de Python
INSP.compatibility.feature.allow.async.and.await.as.names=permite 'async' y 'await' como nombres
INSP.compatibility.feature.allow.backslashes.in.f-strings=permitir backslashes dentro de las partes de la expresión de f-strings
INSP.compatibility.feature.allow.deep.expression.nesting.in.f-strings=permitir anidar expresiones en especificadores de formato hasta esta profundidad
INSP.compatibility.feature.allow.duplicate.kwargs=permitir **expresiones duplicadas
INSP.compatibility.feature.allow.duplicate.positional.varargs=permite expresiones duplicadas *
INSP.compatibility.feature.allow.keyword.arguments.after.kwargs=permitir argumentos de palabra clave después de la expresión **
INSP.compatibility.feature.allow.new.lines.in.f-strings=permitir nuevas líneas en partes de expresión de f-strings no entrecomilladas triples
INSP.compatibility.feature.allow.positional.arguments.after.expression=permitir argumentos posicionales después de *expresión
INSP.compatibility.feature.allow.quote.reuse.in.f-strings=permite anidar literales de cadena con el mismo tipo de comillas dentro de las f-strings
INSP.compatibility.feature.allow.to.mix.bytes.and.non.bytes.literals=permitir mezclar literales de bytes y no bytes
INSP.compatibility.feature.allow.trailing.comma.after.kwargs=permite una coma final después de la ** expresión
INSP.compatibility.feature.allow.trailing.comma.after.positional.vararg=permite una coma al final después de *expresión
INSP.compatibility.feature.have.method=método {0} no existe
INSP.compatibility.feature.have.module=tiene módulo {0}
INSP.compatibility.feature.have.module.builtin=tiene módulo builtin
INSP.compatibility.feature.have.module.builtins=tienen la función módulos de insertados
INSP.compatibility.feature.have.nonlocal.keyword=tiene clave no local
INSP.compatibility.feature.have.type.long=tiene tipo largo. Usar int en su lugar.
INSP.compatibility.feature.line.comments.in.f-strings=permitir comentarios dentro de las partes de expresión de las f-strings
INSP.compatibility.feature.support.arbitrary.expressions.as.decorator=soporte de expresiones arbitrarias como decorador
INSP.compatibility.feature.support.assignment.expressions=expressions de asignación de soporte
INSP.compatibility.feature.support.backquotes=se soporta comillas invertidas, usar repr() en su lugar
INSP.compatibility.feature.support.continue.inside.finally.clause=soporte a 'continue' dentro de cláusula 'finally'
INSP.compatibility.feature.support.diamond.operator=apoyo <>, use != en su lugar
INSP.compatibility.feature.support.ellipsis.outside.slices=soportar '...' fuera de las secciones de secuencias
INSP.compatibility.feature.support.long.integer.literal.suffix=soporta un sufijo ''{0}''
INSP.compatibility.feature.support.match.statements=soporta sentencias match
INSP.compatibility.feature.support.matrix.multiplication.operators=Los operadores de multiplicación de matrices admiten
INSP.compatibility.feature.support.old.style.octal.literals=soporte esta sintaxis. Requiere prefijo '0o' para literales octales
INSP.compatibility.feature.support.parenthesized.context.expressions=Compatibilidad con expresiones de contexto entre paréntesis
INSP.compatibility.feature.support.positional.only.parameters=Soporta parámetros posicionales solamente
INSP.compatibility.feature.support.print.statement=soporte esta sintaxis. La instrucción print fue reemplazada por la función print()
INSP.compatibility.feature.support.raise.with.no.arguments.outside.except.block=soporta esta sintaxis. Raise sin argumentos solo puede usarse en un bloque except
INSP.compatibility.feature.support.starred.except.part=Soporte excepto la parte*
INSP.compatibility.feature.support.starred.expressions.as.assignment.targets=Admitir expresiones con asterisco como objetivos de asignación
INSP.compatibility.feature.support.starred.expressions.in.dicts=soporta expresiones estrelladas en diccionarios
INSP.compatibility.feature.support.starred.expressions.in.subscriptions=soporte para expresiones con asterisco en las suscripciones
INSP.compatibility.feature.support.starred.expressions.in.tuples.lists.and.sets=compatibilidad con expresiones con asterisco en tuplas, listas y conjuntos
INSP.compatibility.feature.support.starred.expressions.in.type.annotations=soporte para expresiones con asterisco en anotaciones de tipo
INSP.compatibility.feature.support.string.literal.prefix=compatible con prefijo ''{0}''
INSP.compatibility.feature.support.super.without.arguments=Soporte esta sintaxis. super() debe tener argumentos en Python 2
INSP.compatibility.feature.support.this.syntax=soporte para esta sintaxis
INSP.compatibility.feature.support.this.syntax.in.list.comprehensions=soporte esta sintaxis en comprensión de listas
INSP.compatibility.feature.support.type.alias.statements=admite declaraciones de alias de tipo
INSP.compatibility.feature.support.underscores.in.numeric.literals=compatibilidad soporte subrayados en literales numéricos
INSP.compatibility.feature.support.unpacking.without.parentheses.in.return.statements=admitir desempaquetado sin paréntesis en declaraciones de retorno
INSP.compatibility.feature.support.unpacking.without.parentheses.in.yield.statements=soporta desempaquetado sin paréntesis en las sentencias yield
INSP.compatibility.feature.support.variable.annotations=compatibilidad con anotaciones de variable
INSP.compatibility.feature.support.yield.from=soportar esta sintaxis. Delegar a un subgenerador está disponible desde Python 3.3; utilizar iteración explícita sobre subgenerador.
INSP.compatibility.inspection.unsupported.feature.prefix=Python {0,choice,1#versión|2#versiones} {1} {0,choice,1#no|2#no} {2}
INSP.compatibility.keyword.argument.repeated=Argumento de palabra clave repetido
INSP.compatibility.new.union.syntax.not.available.in.earlier.version=permite escribir tipos de unión como X | Y
INSP.compatibility.old.dict.methods.not.available.in.py3=Los métodos dict.iterkeys(), dict.iteritems() y dict.itervalues() no están disponibles en Python 3
INSP.compatibility.positional.argument.after.keyword.argument=Argumento posicional después del argumento de palabra clave
INSP.compatibility.positional.argument.after.kwargs=Argumento posicional tras la expresión **
INSP.compatibility.pre35.versions.do.not.allow.return.with.argument.inside.generator=Las versiones de Python anteriores a 3.3 no permiten 'return' con argumento dentro del generador.
INSP.compatibility.support.equality.signs.in.fstrings=soporte para signos de igualdad en f-strings
INSP.compatibility.this.syntax.available.only.since.py3=Esta sintaxis solo está disponible desde Python 3
INSP.dataclasses.argument.ignored.if.class.already.defines.method=''{0}'' se ignora si la clase ya define el método ''{1}''
INSP.dataclasses.attribute.default.set.using.method=Un valor predeterminado se configura usando ''{0}''
INSP.dataclasses.attribute.lacks.type.annotation=El atributo ''{0}'' carece de una anotación de tipo
INSP.dataclasses.attribute.useless.until.post.init.declared=El atributo ''{0}'' es inútil hasta que se declara ''postinit''
INSP.dataclasses.attrs.post.init.should.not.take.any.parameters.except.self='attrspostinit' no debe tomar ningún parámetro excepto 'self'
INSP.dataclasses.attrs.post.init.would.not.be.called.until.init.parameter.set.to.true='attrspostinit' no se llamaría hasta que el parámetro 'init' se establezca en True
INSP.dataclasses.cannot.specify.both.default.and.default.factory=No es posible especificar 'default' y 'defaultfactory'
INSP.dataclasses.cannot.specify.both.default.and.factory=No es posible especificar 'default' y 'factory'
INSP.dataclasses.eq.must.be.true.if.order.true='eq' debe ser verdadero si 'order' es verdadero
INSP.dataclasses.expected.type.got.type.instead=Se esperaba el tipo ''{0}'', pero se obtuvo ''{1}'' en su lugar
INSP.dataclasses.field.cannot.have.default.factory=Los campos no pueden tener una función de fábrica predeterminada
INSP.dataclasses.frozen.attribute.should.be.false.if.class.defines.setattr.or.delattr='frozen' debe ser falso si la clase define '__setattr__' o '__delattr__'
INSP.dataclasses.frozen.dataclasses.can.not.inherit.non.frozen.one=Las dataclasses congeladas no pueden heredar de una no congelada y viceversa
INSP.dataclasses.hash.ignored.if.class.already.defines.cmp.or.order.or.frozen.parameters='hash' se ignora si la clase ya define los parámetros 'cmp/order' y "frozen".
INSP.dataclasses.method.is.ignored.if.class.already.defines.parameter=''{0}'' se ignora si la clase ya define el parámetro ''{1}''
INSP.dataclasses.method.should.be.called.on.attrs.instances=''{0}'' method debe ser llamado en instancias de atributos
INSP.dataclasses.method.should.be.called.on.attrs.types=''{0}'' el método debe llamarse en tipos de atributos
INSP.dataclasses.method.should.be.called.on.dataclass.instances=''{0}'' el método debe llamarse en instancias de clase de datos
INSP.dataclasses.method.should.be.called.on.dataclass.instances.or.types=''{0}'' se debe llamar a method en instancias o tipos de dataclass
INSP.dataclasses.method.should.take.only.n.parameter=''{0}'' debe tomar sólo {1} {1,choice,1#parámetro|2#parámetros}
INSP.dataclasses.mutable.attribute.default.not.allowed.use.default.factory=El valor por defecto mutable ''{0}'' no está permitido. Use ''defaultfactory''
INSP.dataclasses.object.attribute.read.only=''{0}'' el atributo del objeto ''{1}'' es de solo lectura
INSP.dataclasses.object.could.have.no.attribute.because.it.declared.as.init.only=''{0}'' objeto no podría tener el predicado ''{1}'' porque está declarado como sólo inicializar
INSP.dataclasses.operator.not.supported.between.instances.of.class=''{0}'' no soporta entre instancias de ''{1}''
INSP.dataclasses.operator.not.supported.between.instances.of.classes=''{0}'' no compatible entre instancias de ''{1}'' y ''{2}''
INSP.dataclasses.order.argument.should.be.false.if.class.defines.one.of.order.methods=Si la clase define uno de los métodos order, 'order' debería ser False
INSP.dataclasses.post.init.should.take.all.init.only.variables.in.same.order.they.defined='postinit' debería tomar todas las variables de inicialización solo en el mismo orden en que están definidas
INSP.dataclasses.post.init.should.take.all.init.only.variables.including.inherited.in.same.order.they.defined='postinit' debe tomar todas las variables de solo inicialización (incl. heredadas) en el mismo orden en que están definidas
INSP.dataclasses.post.init.would.not.be.called.until.init.parameter.set.to.true='postinit' no se invocaría hasta que el parámetro 'init' no esté establecido en True
INSP.dataclasses.unsafe.hash.attribute.should.be.false.if.class.defines.hash=false si la clase define 'hash'
INSP.decorator.receives.unexpected.builtin=Este decorador no recibirá una función que pueda esperar; el decorador integrado devuelve un objeto especial
INSP.decorators.method.only.decorator.on.method.outside.class=Decorador {0} sobre un método fuera de la clase
INSP.default.arguments.default.argument.value.mutable=Valor predeterminado del argumento mutable
INSP.deleter.should.not.return=El método deleter no debe devolver un valor
INSP.deleter.signature.advice=La firma del eliminador debería ser (self)
INSP.deprecation.abc.decorator.deprecated.use.alternative=''{0}'' está obsoleto desde Python 3.3. En su lugar, utiliza ''{1}'' con ''{2}''
INSP.dict.creation.this.dictionary.creation.could.be.rewritten.as.dictionary.literal=Creación de diccionario: esta creación de diccionario se puede volver a escribir como un literal de diccionario
INSP.doc.param.should.be.str=El parámetro doc debe ser una cadena
INSP.docstring.types.change.type=Cambiar el tipo de {0} de {1} a {2}
INSP.docstring.types.dynamically.inferred.type.does.not.match.specified.type=El tipo inferido dinámicamente ''{0}'' no coincide con el tipo especificado ''{1}''
INSP.docstring.types.fix.docstring=Corrección docstring
INSP.dunder.slots.class.object.attribute.read.only=''{0}'' atributo de objeto ''{1}'' es de solo lectura
INSP.dunder.slots.name.in.slots.conflicts.with.class.variable=''{0}'' en slots entra en conflicto con una variable de clase
INSP.duplicate.keys.dictionary.contains.duplicate.keys=El diccionario contiene claves duplicadas ''{0}''
INSP.empty.docstring=Docstring vacía
INSP.enum.enum.class.is.final.and.cannot.be.subclassed=La clase enum ''{0}'' es final y no puede ser subclaseada
INSP.enum.type.annotations.are.not.allowed.for.enum.members=Las anotaciones de tipo no están permitidas para los miembros de enumeración
INSP.enum.type.is.not.assignable.to.declared.type=El tipo ''{0}'' no es asignable al tipo declarado ''{1}''
INSP.exception.inheritance.exception.does.not.inherit.from.base.exception.class=La excepción no hereda de la clase base 'Exception'
INSP.expected.dict.got.type=Se esperaba un diccionario, se recibió {0}
INSP.expected.iterable.got.type=Se esperaba un iterable, se obtuvo {0}
INSP.expression.can.be.simplified=La expresión se puede simplificar
INSP.expression.is.not.callable=La expresión no es invocable
INSP.final.already.declared.name.could.not.be.redefined.as.final=No se puede redefinir el nombre declarado como 'Final'
INSP.final.can.only.be.parameterized.with.one.type='Final' solo puede ser parametrizado con un tipo
INSP.final.either.instance.attribute.or.class.attribute.could.be.type.hinted.as.final=El atributo de instancia o el atributo de clase también podría tener el tipo de sugerencia 'Final'
INSP.final.final.attribute.could.not.be.overridden=''{0}'' es ''Final'' y no puede ser sobreescrito
INSP.final.final.attribute.should.be.declared.in.class.body.or.init='El atributo final debe ser declarado dentro del cuerpo de la clase o en 'init''
INSP.final.final.class.could.not.contain.abstract.methods='clase final' no puede contener métodos abstractos
INSP.final.final.could.not.be.mixed.with.abstract.decorators=Los modificadores 'Final' no se pueden combinar con modificadores abstractos
INSP.final.final.could.not.be.used.in.annotation.for.function.return.value=No se puede usar "Final" en la anotación para el valor de retorno de la función
INSP.final.final.could.not.be.used.in.annotations.for.function.parameters='Final' no se pudo utilizar en anotaciones para parámetros de función
INSP.final.final.could.not.be.used.inside.loop='Final' no puede utilizarse dentro de un bucle
INSP.final.final.could.only.be.used.as.outermost.type=Solo se puede utilizar 'Final' como el tipo más externo
INSP.final.final.name.should.be.initialized.with.value=El nombre 'Final' debe inicializarse con un valor
INSP.final.final.should.be.placed.on.first.overload='@final' deberá estar en la primera sobrecarga
INSP.final.final.should.be.placed.on.implementation='@final' se debe colocar en la implementación
INSP.final.final.target.could.not.be.reassigned=''{0}'' es ''Final'' y no puede ser reasignado
INSP.final.if.assigned.value.omitted.there.should.be.explicit.type.argument.to.final=Si se omite el valor asignado, 'Final' debe tener un argumento de tipo explícito
INSP.final.method.marked.as.final.should.not.be.overridden=''{0}'' está marcado como ''@final'' y no debería ser sobreescrito
INSP.final.no.need.to.mark.method.in.final.class.as.final=No es necesario marcar el método de la clase 'Final' como '@final'
INSP.final.non.method.function.could.not.be.marked.as.final=La función no metódica no se puede marcar como '@final'
INSP.final.super.classes.are.marked.as.final.and.should.not.be.subclassed={0} {1,choice,1#es|2#son} marcadas como ''@final'' y no se deben crear subclases
INSP.first.arg.assign.method.parameter.reassigned=Se reasignó al parámetro ''{0}'' del método
INSP.first.param.must.not.be.tuple=El primer parámetro de un método no estático no puede ser una tupla
INSP.format.requires.mapping=El formato requiere un mapeo
INSP.format.requires.no.mapping=El formato no necesita mapeo
INSP.from.future.import.from.future.imports.must.occur.at.beginning.file=las importaciones future deben ir al inicio del archivo
INSP.func.property.name.mismatch=Los nombres de función y decorador no coinciden; no se crea el accessor de propiedad
INSP.function.lacks.positional.argument=La función ''{0}'' carece de un argumento posicional
INSP.getter.return.smth=Un getter debe retornar o generar algo
INSP.getter.signature.advice=La firma de getter debería ser (self)
INSP.global.variable.undefined=Variable global ''{0}'' está indefinida a nivel de módulo
INSP.incompatible.options=Las opciones de formato en el bloque "{0}" no son compatibles
INSP.inconsistent.indentation.mix.tabs.spaces=Indentación inconsistente: mezcla de tabulaciones y espacios
INSP.inconsistent.indentation.previous.line.used.spaces.this.line.uses.tabs=Indentación inconsistente: la línea anterior usó espacios, esta línea usa pestañas
INSP.inconsistent.indentation.previous.line.used.tabs.this.line.uses.spaces=Sangría inconsistente: la línea anterior usó tabulaciones y esta usa espacios
INSP.inconsistent.returns.missing.return.stmt.on.some.paths=Falta la sentencia return en algunas rutas.
INSP.inconsistent.returns.return.without.value='return' sin valor no es coherente con las otras rutas
INSP.inconsistent.returns.stmt.expected=Se espera una instrucción de retorno explícita
INSP.inconsistent.returns.value.expected=Se esperaba un valor de retorno explícito
INSP.incorrect.arguments=Argumentos incorrectos
INSP.init.incompatible.to.new=La firma no es compatible con new
INSP.interpreter.configure.python.interpreter=Configurar intreprete Python
INSP.interpreter.interpreter.settings=Ajustes de intérprete
INSP.interpreter.invalid.python.interpreter.selected.for.module=El intérprete de Python seleccionado para el módulo no es válido
INSP.interpreter.invalid.python.interpreter.selected.for.project=Intérprete de Python no válido seleccionado para el proyecto
INSP.interpreter.no.python.interpreter.configured.for.module=No se ha configurado el intérprete de Python para el módulo
INSP.interpreter.no.python.interpreter.configured.for.project=No se ha configurado ningún interprete Python para el proyecto
INSP.interpreter.pipenv.interpreter.associated.with.another.module=El intérprete de Pipenv está asociado a otro módulo: ''{0}''
INSP.interpreter.pipenv.interpreter.associated.with.another.project=El intérprete de Pipenv está asociado con otro proyecto: ''{0}''
INSP.interpreter.pipenv.interpreter.not.associated.with.any.module=El intérprete de Pipenv no está asociado a ningún módulo
INSP.interpreter.pipenv.interpreter.not.associated.with.any.project=El intérprete de Pipenv no está asociado a ningún proyecto
INSP.interpreter.python.has.reached.its.end.life.and.is.no.longer.supported.in.python.plugin=Python {0} ha llegado al final de su vida útil y ya no es compatible con el plugin de Python
INSP.interpreter.python.has.reached.its.end.of.life.and.is.no.longer.supported.in.pycharm=Python {0} ha llegado al fin de su vida útil y ya no es compatible con PyCharm
INSP.interpreter.use.interpreter=Usar {0}
INSP.interpreter.use.suggested.interpreter=Usar interpretador sugerido
INSP.list.creation.this.list.creation.could.be.rewritten.as.list.literal=La inicialización de la lista de varios pasos puede reemplazarse con un literal de lista
INSP.mandatory.encoding.checkbox.enable.in.python.3=Habilitar en Python 3+
INSP.mandatory.encoding.label.encoding.comment.format=Formato de comentarios de la codificación:
INSP.mandatory.encoding.label.select.default.encoding=Seleccionar codificación por defecto:
INSP.mandatory.encoding.no.encoding.specified.for.file=No se ha especificado la codificación para el archivo
INSP.manual.to.auto.field.numbering=No es posible cambiar de especificación de campo manual a numeración de campo automática
INSP.message.single.quoted.docstring=Las docstrings deben usarse cadenas triples entrecomilladas dobles.
INSP.method.may.be.static=Método <code>#ref</code> puede ser 'estático'
INSP.method.parameters.metaclass.method.first.argument.name=Nombre del primer argumento del método de la metaclase
INSP.missing.parameter.in.docstring=Falta parámetro {0} en docstring
INSP.missing.super.constructor.message=No se llamó a init de la superclase
INSP.missing.type.hints.add.type.hints=Agregar sugerencias de tipo
INSP.missing.type.hints.add.type.hints.for=Agregar pistas de tipo para ''{0}''
INSP.missing.type.hints.checkbox.only.when.types.are.known=Solo cuando se conocen tipos (recopilados en tiempo de ejecución o inferidos)
INSP.missing.type.hints.type.hinting.missing.for.function.definition=Falta agregar tipo de dato para la definición de la función
INSP.must.have.first.parameter=El método debe tener un primer parámetro, usualmente llamado ''{0}''
INSP.named.tuple=Definición inválida de 'typing.NamedTuple'
INSP.new.incompatible.to.init=La firma no es compatible con init
INSP.new.style.generics.are.not.allowed.inside.type.param.bounds=Los tipos genéricos no están permitidos dentro de límites y restricciones de parámetros de tipo
INSP.new.style.generics.assignment.expressions.not.allowed=No se permiten expresiones de asignación dentro de declaraciones de clases, funciones y alias de tipos que tengan una lista de parámetros de tipo INSP.new.style.generics.assignment.expressions.not.allowed=No se permiten expresiones de asignación dentro de declaraciones de clases, funciones y alias de tipos que tengan una lista de parámetros de tipo
INSP.new.style.generics.classes.with.type.param.list.should.not.extend.generic=Las clases con una lista de parámetros tipo explícito no deben extender 'Genérico'
INSP.new.style.generics.extending.protocol.does.not.need.parameterization=La extensión de 'Protocolo' no requiere parametrización en clases con una lista de parámetros de tipo
INSP.new.style.generics.mixing.old.style.and.new.style.type.vars.not.allowed=No se permite mezclar variables de tipo antiguas y nuevas
INSP.new.style.generics.old.style.type.vars.not.allowed.in.new.style.type.aliases=Las variables de tipo antiguas no se permiten en las declaraciones de alias de tipo nuevo.
INSP.new.style.type.parameter.out.of.scope=La variable de tipo ''{0}'' está fuera de ámbito
INSP.no.docstring=Falta docstring
INSP.no.format.specifier.char=Falta el carácter especificador de formato
INSP.non.ascii.char.non.ascii.character.in.file.but.no.encoding.declared=Carácter no ASCII ''{0}'' en el archivo, pero no se declara la codificación
INSP.none.function.assignment=Función ''{0}'' no devuelve nada
INSP.oldstyle.class.getattribute=La clase de estilo antiguo contiene la definición de getattribute
INSP.oldstyle.class.slots=Clase de estilo antiguo contiene la definición slots
INSP.oldstyle.class.super=La clase antigua contiene una llamada al método super
INSP.overloads.at.least.two.overloads.must.be.present=Debe haber al menos dos {0,choice,0#funciones|1#métodos} con la decoración @overload
INSP.overloads.final.should.be.placed.on.the.implementation='@final' se debe colocar en la implementación
INSP.overloads.final.should.be.placed.only.on.the.first.overload='@final' solo debe colocarse en la primera sobrecarga
INSP.overloads.override.should.be.placed.on.the.implementation='@override' se debe colocar en la implementación
INSP.overloads.override.should.be.placed.only.on.the.first.overload='@override' solo debe colocarse en la primera sobrecarga.
INSP.overloads.series.overload.decorated.functions.should.always.be.followed.by.implementation=Una serie de funciones decoradas con @overload siempre debe ir seguida de una implementación que no esté decorada con @overload
INSP.overloads.series.overload.decorated.methods.should.always.be.followed.by.implementation=Una serie de métodos @overload-decorated debe ser siempre seguida por una implementación no @overload-ed
INSP.overloads.series.overloads.should.always.be.followed.by.implementation=Una serie de {0,choice,0#funciones|1#métodos} con @overload siempre debe ir seguida de una implementación sin @overload
INSP.overloads.this.function.overload.signature.not.compatible.with.implementation=La firma de esta función decorada por @overload no es compatible con su implementación
INSP.overloads.this.method.overload.signature.not.compatible.with.implementation=La firma de este método decorado como @overload no es compatible con la implementación
INSP.overloads.this.overload.signature.not.compatible.with.implementation=La firma de {0,choice,0#esta función decorada|1#este método decorado} con @overload no es compatible con la implementación
INSP.overloads.use.classmethod.inconsistently=Las sobrecargas usan @classmethod de forma inconsistente
INSP.overloads.use.staticmethod.inconsistently=Las sobrecargas usan @staticmethod de forma inconsistente
INSP.override.missing.super.method=Falta método superclase a sobrescribir
INSP.package.requirements.add.import=Añadir importación
INSP.package.requirements.administrator.privileges.required=Se requieren privilegios de administrador
INSP.package.requirements.administrator.privileges.required.button.configure=Configurar
INSP.package.requirements.administrator.privileges.required.button.install.anyway=Instalar de todos modos
INSP.package.requirements.administrator.privileges.required.description=La instalación de paquetes en ''{0}'' requiere privilegios de administrador.\n\nConfigure un entorno virtual por proyecto como intérprete de su proyecto\npara evitar la instalación de paquetes en un área protegida del sistema de archivos.
INSP.package.requirements.requirement.has.been.ignored=''{0}'' ha sido ignorado
INSP.package.requirements.requirements.file.empty=El archivo requirements está vacío
INSP.package.requirements.requirements.have.been.ignored=Los requisitos fueron ignorados
INSP.pandas.series.values.replace.with.tolist=Se recomienda el método Series.tolist()
INSP.parameter(s).unfilled=Parámetro(s) sin rellenar
INSP.parameter.unfilled=Parámetro ''{0}'' sin llenar
INSP.pep8.coding.style.violation=Violación del estilo de codificación PEP 8
INSP.pep8.ignore.base.class=Ignorar clase base
INSP.pep8.ignore.method.names.for.descendants.of.class=Ignorar los nombres de los métodos para los descendientes de la clase
INSP.pep8.naming.argument.name.should.be.lowercase=El nombre del argumento debe estar en minúsculas
INSP.pep8.naming.camelcase.variable.imported.as.constant=Variable CamelCase importada como constante
INSP.pep8.naming.camelcase.variable.imported.as.lowercase=Variable CamelCase importada como minúsculas
INSP.pep8.naming.class.names.should.use.capwords.convention=Los nombres de clase deben usar la convención CapWords
INSP.pep8.naming.column.name.excluded.base.classes=Clases bases excluidas:
INSP.pep8.naming.column.name.ignored.errors=Errores ignorados:
INSP.pep8.naming.constant.variable.imported.as.non.constant=Variable constante importada como no constante
INSP.pep8.naming.function.name.should.be.lowercase=Los nombres de funciones deberían estar en minúsculas
INSP.pep8.naming.lowercase.variable.imported.as.non.lowercase=Variable en minúsculas importada como no minúsculas
INSP.pep8.naming.variable.in.function.should.be.lowercase=Las variables en funciones deben ser minúsculas
INSP.possible.callees=Posibles destinatarios
INSP.probably.mistyped.self=¿No querías decir 'self'?
INSP.property.cannot.be.deleted=No se puede eliminar la propiedad ''{0}''
INSP.property.cannot.be.read=La propiedad ''{0}'' no se puede leer
INSP.property.cannot.be.set=No se puede establecer la propiedad ''{0}''
INSP.protected.member.access.to.protected.member.of.class=Acceso a un miembro protegido {0} de una clase
INSP.protected.member.access.to.protected.member.of.module=Acceso a un miembro protegido {0} de un módulo
INSP.protected.member.ignore.annotations=Ignorar anotaciones
INSP.protected.member.ignore.test.functions=Ignorar funciones de prueba
INSP.protected.member.name.not.declared.in.all=''{0}'' no está declarado en all
INSP.protocol.all.bases.protocol.must.be.protocols=Todas las bases de un protocolo deben ser protocolos
INSP.protocol.element.type.incompatible.with.protocol=El tipo de ''{0}'' no es compatible con ''{1}''
INSP.protocol.newtype.cannot.be.used.with.protocol.classes=NewType no puede utilizarse con clases de protocolo
INSP.protocol.only.runtime.checkable.protocols.can.be.used.with.instance.class.checks=Solo los protocolos @runtimecheckable pueden utilizarse con comprobaciones de instancia y clase
INSP.python.suppressor.suppress.for.class=Suprimir para una clase
INSP.python.suppressor.suppress.for.function=Suprimir para una función
INSP.python.suppressor.suppress.for.statement=suprimir para la sentencia
INSP.redeclared.name=Redeclarado ''{0}'' definido anteriormente sin ser usado
INSP.redundant.parens.ignore.argument.of.operator=Ignorar argumento del operador %
INSP.redundant.parens.ignore.empty.lists.of.base.classes=Ignorar listas vacías de clases base
INSP.redundant.parens.ignore.tuples=Ignorar tuplas
INSP.relative.import.relative.import.outside.package=Importación relativa fuera de un paquete
INSP.requirements.ignore.packages.label=Paquetes ignorados:
INSP.requirements.package.containing.module.not.listed.in.project.requirements=El paquete que contiene el módulo ''{0}'' no figura en los requisitos del proyecto
INSP.requirements.package.requirements.not.satisfied=El paquete {1,choice,1#requisito|2#requisitos} {0} {1,choice,1#no|2#no} está satisfecho
INSP.setter.should.not.return=El setter no debería devolver un valor
INSP.setter.signature.advice=La firma del setter debería ser (self, value)
INSP.shadowing.builtins.ignore.built.ins.label=Constructores ignorados:
INSP.shadowing.builtins.shadows.built.in.name=Sombreados de los nombres de buit-in ''{0}''
INSP.shadowing.names=Nombres ocultos de los ámbitos externos
INSP.shadows.name.from.outer.scope=Sombrea nombre ''{0}'' desde un ámbito externo
INSP.signature.mismatch=La firma del método ''{0}'' no coincide con la firma del método base de la clase ''{1}''
INSP.simplify.boolean.check.ignore.comparison.to.zero=Ignorar comparación con cero
INSP.simplify.chained.comparison=Simplificar comparación encadenada
INSP.statement.effect.statement.having.no.effect.can.be.replaced.with.function.call=La instrucción parece no tener ningún efecto y se puede reemplazar con una llamada de función para que surta efecto
INSP.statement.effect.statement.seems.to.have.no.effect=La sentencia parece no tener ningún efecto
INSP.str.format.can.not.use.star.in.formats.when.using.mapping=No se puede utilizar '*' en los formatos cuando se utiliza una asignación
INSP.str.format.key.has.no.argument=No existe un argumento correspondiente para la clave "{0}"
INSP.str.format.unexpected.argument.type=Tipo inesperado {0}
INSP.str.format.unsupported.format.character.b=Carácter de formato no admitido 'b'
INSP.strange.arg.want.callable=Argumento no válido; se espera un objeto invocable
INSP.stub.packages=Anunciador de paquetes de stubs
INSP.stub.packages.compatibility=Paquetes stub incompatibles
INSP.stub.packages.compatibility.ignore=Ignorar compatibilidad de ''{0}''
INSP.stub.packages.compatibility.ignored.packages.label=Paquetes de Stub ignorados:
INSP.stub.packages.compatibility.incompatible.packages.message=''{0}{1}{2}'' no es compatible con ''{3}{4}{5}''. Se requiere versión ''{6}'' [{7}]
INSP.symbol.is.not.callable=''{0}'' no es invocable
INSP.too.broad.exception.clause=Cláusula de excepción demasiado amplia
INSP.too.few.args.for.fmt.string=Muy pocos argumentos para la cadena de formato
INSP.too.few.keys=Claves de asignación insuficientes
INSP.too.many.args.for.fmt.string=Demasiados argumentos para la cadena de formato
INSP.trailing.semicolon=Punto y coma final en la sentencia
INSP.try.except.import.error=''except ImportError'' en el bloque try con ''{0}'' también debería estar definido en el bloque except
INSP.tuple.assignment.balance.need.more.values.to.unpack=Necesitas más valores que desempaquetar
INSP.tuple.assignment.balance.only.one.starred.expression.allowed.in.assignment=Solo se permite una expresión con asterisco en la asignación
INSP.tuple.assignment.balance.too.many.values.to.unpack=Demasiados valores a desempaquetar
INSP.tuples.never.assign.items=Las tuplas no soportan la asignación de elementos
INSP.type.checker.access.to.generic.instance.variables.via.class.is.ambiguous=El acceso a las variables de instancia genéricas a través de la clase es ambiguo
INSP.type.checker.expected.matched.type.got.type.instead=Tipo esperado ''{0}'' (que coincida con el tipo genérico ''{1}''), pero se obtuvo ''{2}''
INSP.type.checker.expected.to.return.type.got.no.return=Se esperaba que devolviera ''{0}'', pero no devolvió nada
INSP.type.checker.expected.type.from.dunder.set.got.type.instead=Se esperaba el tipo ''{0}'' (de ''__set''), pero se obtuvo ''{1}'' en su lugar
INSP.type.checker.expected.type.got.type.instead=Tipo esperado ''{0}'', pero se obtuvo ''{1}''
INSP.type.checker.expected.types.prefix=Tipos posibles:
INSP.type.checker.init.should.return.none=init debería devolver None
INSP.type.checker.only.concrete.class.can.be.used.where.matched.protocol.expected=Solo puede usarse una clase concreta donde se espera el protocolo ''{0}'' (tipo genérico coincidente ''{1}'')
INSP.type.checker.only.concrete.class.can.be.used.where.protocol.expected=Solo una clase concreta puede ser utilizada donde se espera el protocolo ''{0}''
INSP.type.checker.tuple.index.out.of.range=El índice de la tupla está fuera de rango
INSP.type.checker.type.does.not.have.expected.attribute=El tipo {0} no tiene el {1,choice,1#atributo|2#atributos} esperado {2}
INSP.type.checker.typed.dict.extra.key=Clave extra ''{0}'' para TypedDict ''{1}''
INSP.type.checker.typed.dict.missing.keys=TypedDict ''{0}'' tiene {1,choice,1#clave|2#claves} faltantes: {2}
INSP.type.checker.unexpected.argument.from.paramspec=Argumento inesperado (de ParamSpec ''{0}'')
INSP.type.checker.unexpected.types.prefix=Tipo(s) inesperado(s):
INSP.type.checker.unfilled.parameter.for.paramspec=Parámetro ''{0}'' vacío (desde ParamSpec ''{1}'')
INSP.type.checker.unfilled.vararg=Parameter ''{0}'' sin valor, espera ''{1}''
INSP.type.checker.yield.from.async.generator=No se puede usar 'yield from' en ''{0}''. En su lugar, use 'async for'
INSP.type.checker.yield.from.send.type.mismatch=Se esperaba el tipo de envío ''{0}'', pero se obtuvo ''{1}'' en su lugar
INSP.type.checker.yield.type.mismatch=Se esperaba el tipo yield ''{0}'', pero se obtuvo ''{1}'' en su lugar
INSP.type.hints.annotated.must.be.called.with.at.least.two.arguments='Annotated' debe ser llamado con al menos dos argumentos
INSP.type.hints.argument.to.paramspec.must.be.string.equal.to.variable.name='El argumento para ParamSpec() debe ser una string igual al nombre de la variable donde se guarda'
INSP.type.hints.argument.to.typevar.must.be.string.equal.to.variable.name=El argumento de 'TypeVar()' debe ser una cadena igual al nombre de la variable a la que se asigna
INSP.type.hints.argument.to.typevar.tuple.must.be.string.equal.to.variable.name=El argumento para 'TypeVarTuple()' debe ser una cadena igual al nombre de la variable a la que se asigna
INSP.type.hints.at.most.one.unpacked.tuple=La lista de argumentos de tipo puede tener como máximo un TypeVarTuple desempaquetado o una tupla no acotada.
INSP.type.hints.bivariant.type.variables.are.not.supported=Las variables de tipo b variantes no son compatibles
INSP.type.hints.builtin.cannot.be.parameterized.directly=El tipo integrado ''{0}'' no puede ser parametrizado directamente
INSP.type.hints.cannot.be.used.in.default.type.of.type.var=''{0}'' no se puede usar en el tipo predeterminado de TypeVar
INSP.type.hints.cannot.inherit.from.generic.multiple.times=No se permite heredar varias veces de 'Generic[...]'
INSP.type.hints.cannot.inherit.from.plain.generic=No se puede heredar de 'Generic' simple
INSP.type.hints.cannot.use.contravariant.in.return.type=La variable de tipo contravariante no puede usarse en el tipo de retorno de la función
INSP.type.hints.cannot.use.covariant.in.function.param=La variable de tipo covariante no se puede usar en el tipo de parámetro
INSP.type.hints.circular.reference=Referencia circular
INSP.type.hints.concatenate.can.only.be.used.inside.callable=En este contexto, 'Concatenate' solo se puede usar como el primer argumento de 'Callable'.
INSP.type.hints.default.type.do.not.match.bounds=El tipo predeterminado de TypeVar no es un subtipo del límite.
INSP.type.hints.default.type.do.not.match.constraints=El tipo predeterminado de TypeVar debe ser uno de los tipos de restricción
INSP.type.hints.default.type.must.be.type.expression=El tipo predeterminado debe ser una expresión de tipo
INSP.type.hints.default.type.of.param.spec.must.be.param.spec.or.list.of.types=El tipo predeterminado de ParamSpec debe ser un tipo ParamSpec o una lista de tipos
INSP.type.hints.default.type.of.type.var.tuple.must.be.unpacked=El tipo predeterminado de TypeVarTuple debe desempaquetarse
INSP.type.hints.default.type.refers.to.type.var.out.of.scope=El tipo predeterminado de este parámetro de tipo hace referencia a una o más variables de tipo que están fuera de ámbito
INSP.type.hints.default.type.var.cannot.follow.type.var.tuple=TypeVar con un valor predeterminado no puede seguir a TypeVarTuple
INSP.type.hints.expected.a.type=Se esperaba un tipo
INSP.type.hints.forward.reference.in.union=Las anotaciones de tipo de unión con referencias anticipadas deben estar completamente entre comillas.
INSP.type.hints.generic.or.protocol.should.list.all.type.variables=''Generic[...]'' o ''Protocol[...]'' debe enumerar todas las variables de tipo ({0})
INSP.type.hints.generic.type.alias.is.not.generic.or.already.parameterized=El alias de tipo no es genérico o ya está especializado
INSP.type.hints.generics.should.be.specified.through.square.brackets=Los genéricos deben especificarse mediante corchetes
INSP.type.hints.illegal.callable.format='Callable' debe utilizarse como 'Callable[[arg, ...], result]'
INSP.type.hints.illegal.first.parameter='Callable' el primer parámetro debe ser una expresión de parámetro
INSP.type.hints.illegal.literal.parameter='Literal' se puede parametrizar con enteros literales, cadenas byte y unicode, booleanos, valores Enum, None, otros tipos literales o alias de tipo para otros tipos literales
INSP.type.hints.invalid.type.argument=Argumento de tipo inválido
INSP.type.hints.invalid.type.expression=Expresión de tipo inválida
INSP.type.hints.invalid.type.self=Tipo no válido 'self'
INSP.type.hints.literal.must.have.at.least.one.parameter='Literal' debe tener al menos un parámetro
INSP.type.hints.metaclass.cannot.be.generic=Metaclase no puede ser genérica
INSP.type.hints.new.type.type.cannot.be.used.in.isinstance.tests=El tipo NewType no se puede usar con comprobaciones de instancia y clase
INSP.type.hints.non.default.type.vars.cannot.follow.defaults=Los TypeVars sin valor por defecto no pueden seguir a los que tienen valor por defecto
INSP.type.hints.non.self.attribute.could.not.be.type.hinted=El atributo no-self no se puede inscribir como tipo
INSP.type.hints.parameterized.generics.cannot.be.used.with.instance.class.checks=No se pueden utilizar genéricos parametrizados con comprobaciones de instancia y clase
INSP.type.hints.parameters.to.generic.must.all.be.type.variables=Los parámetros de 'Generic [...]' deben ser todos variables de tipo
INSP.type.hints.parameters.to.generic.must.all.be.unique=Todos los parámetros de 'Generic[...]' deben ser únicos
INSP.type.hints.parameters.to.generic.types.cannot.contain.more.than.one.unpacking=Los parámetros de un genérico no pueden contener más de un desempaquetado
INSP.type.hints.parameters.to.generic.types.must.be.types=Los parámetros para tipos genéricos deben ser tipos
INSP.type.hints.paramspec.expects.string.literal.as.first.argument='ParamSpec()' requiere un literal de cadena como primer argumento
INSP.type.hints.self.use.for.cls.parameter.with.self.annotation=No se puede utilizar 'Self' si el parámetro 'cls' no está anotado como 'Self'
INSP.type.hints.self.use.for.self.parameter.with.self.annotation=No se puede usar 'Self' si el parámetro 'self' no está anotado con 'Self'
INSP.type.hints.self.use.in.staticmethod=No se puede utilizar 'Self' en staticmethod
INSP.type.hints.self.use.outside.class=No se puede utilizar 'Auto' fuera de la clase
INSP.type.hints.single.typevar.constraint.not.allowed=No se admiten constricciones únicas
INSP.type.hints.some.type.variables.are.not.listed.in.generic=Algunas variables de tipo ({0}) no se listan en ''Generic[{1}]''
INSP.type.hints.some.type.variables.are.used.by.an.outer.scope=Algunas variables de tipo ({0}) son utilizadas por un ámbito externo
INSP.type.hints.type.alias.cannot.be.parameterized='TypeAlias' no puede parametrizarse
INSP.type.hints.type.alias.invalid.assigned.value=El valor asignado a un alias de tipo debe ser un tipo correcto
INSP.type.hints.type.alias.must.be.immediately.initialized=El alias de tipo debe inicializarse inmediatamente
INSP.type.hints.type.alias.must.be.top.level.declaration=El alias de tipo debe ser una declaración de nivel superior
INSP.type.hints.type.alias.must.be.used.as.standalone.type.hint='TypeAlias' debe usarse como un hint de tipo único
INSP.type.hints.type.arguments.class.is.already.parameterized=La clase ''{0}'' ya está parametrizada
INSP.type.hints.type.arguments.do.not.match.type.parameters=Los argumentos de tipo pasados no coinciden con los parámetros de tipo {0} de la clase ''{1}''
INSP.type.hints.type.arguments.do.not.match.type.parameters.of.alias=Los argumentos de tipo pasados no coinciden con los parámetros del alias de tipo ''{0}''
INSP.type.hints.type.arguments.do.not.match.type.parameters.of.class=Los argumentos de tipo pasados no coinciden con los parámetros de tipo {0} de la clase ''{1}''
INSP.type.hints.type.cannot.be.used.with.instance.class.checks=''{0}'' no puede ser usado con verificaciones de instancias y clases
INSP.type.hints.type.comment.cannot.be.matched.with.unpacked.variables=No se puede emparejar el comentario de tipo con variables desempaquetadas
INSP.type.hints.type.hint.is.not.valid=La sugerencia de tipo es inválida o hace referencia a una expresión que no es un tipo correcto.
INSP.type.hints.type.self.not.supertype.its.class=El tipo de self ''{0}'' no es un supertipo de su clase ''{1}''
INSP.type.hints.type.signature.has.too.few.arguments=La signatura de tipo tiene pocos argumentos
INSP.type.hints.type.signature.has.too.many.arguments=La firma del tipo tiene demasiados argumentos
INSP.type.hints.type.specified.both.in.type.comment.and.annotation=Tipos especificados en un comentario de tipo y anotación
INSP.type.hints.type.var.tuple.must.always.be.unpacked=La tupla TypeVar debe siempre desempaquetarse
INSP.type.hints.type.variables.cannot.be.used.with.instance.class.checks=Las variables de tipo no se pueden usar con la comprobación de instancias y clases
INSP.type.hints.type.variables.must.not.be.redefined=Las variables de tipo no pueden ser redefinidas
INSP.type.hints.typeIs.does.not.match=El tipo de retorno de TypeIs ''{0}'' no es consistente con el tipo del primer parámetro ''{1}''
INSP.type.hints.typeIs.has.zero.parameters=Las funciones TypeGuard o TypeIs definidas por el usuario deben tener al menos un parámetro
INSP.type.hints.typed.dict.is.not.allowed.as.a.bound.for.a.type.var=No se permite TypedDict como límite para un TypeVar
INSP.type.hints.typed.dict.type.cannot.be.used.in.isinstance.tests=El tipo TypedDict no se puede usar con comprobaciones de instancia y clase
INSP.type.hints.typevar.constraints.cannot.be.combined.with.bound=Las restricciones no se pueden combinar con bound=...
INSP.type.hints.typevar.constraints.cannot.be.parametrized.by.type.variables=Las restricciones no pueden ser parametrizadas por variables de tipo
INSP.type.hints.typevar.expects.string.literal.as.first.argument='TypeVar()' espera una cadena literal como primer argumento
INSP.type.hints.typevar.expression.must.be.always.directly.assigned.to.variable=La expresión 'TypeVar()' debe asignarse siempre directamente a una variable
INSP.type.hints.typevar.tuple.expects.string.literal.as.first.argument='TypeVarTuple()' El primer argumento de debe ser un literal de cadena
INSP.type.hints.typing.self.cannot.be.parameterized='Self' no puede parametrizarse
INSP.type.hints.unbound.type.variable=Variable de tipo no enlazada
INSP.typeddict.cannot.add.non.string.key.to.typeddict=No se puede agregar una clave no string a TypedDict "{0}"
INSP.typeddict.cannot.be.required.and.not.required.at.the.same.time=La clave no puede ser requerida y no requerida al mismo tiempo
INSP.typeddict.cannot.overwrite.typeddict.field=No se puede sobrescribir un campo typeddict
INSP.typeddict.cannot.overwrite.typeddict.field.while.merging=No es posible sobrescribir el campo ''{0}'' de TypedDict al fusionar
INSP.typeddict.expected.a.dictionary.literal=Se esperaba un literal de diccionario
INSP.typeddict.first.argument.has.to.match.variable.name=El primer argumento debe coincidir con el nombre de la variable
INSP.typeddict.invalid.statement.in.typeddict.definition.expected.field.name.field.type=Instrucción no válida en la definición de TypedDict; se esperaba 'nombrecampo: tipocampo'
INSP.typeddict.key.cannot.be.deleted=No se puede eliminar la llave ''{0}'' del TypedDict ''{1}''
INSP.typeddict.key.should.be.string=La llave debe ser una cadena
INSP.typeddict.qualifiers.cannot.be.used.outside.typeddict.definition=''{0}'' solo se puede usar en una definición de TypedDict
INSP.typeddict.read.only.cannot.be.nested=ReadOnly[] no se puede anidar
INSP.typeddict.required.and.not.required.cannot.be.nested=Required[] y NotRequired[] no se pueden anidar
INSP.typeddict.required.notrequired.cannot.be.used.outside.typeddict.definition=''{0}'' sólo se puede usar en una definición TypedDict
INSP.typeddict.required.notrequired.must.have.exactly.one.type.argument=''{0}'' debe tener exactamente un argumento de tipo
INSP.typeddict.right.hand.side.values.are.not.supported.in.typeddict=Los valores del lado derecho no se soportan en TypedDict
INSP.typeddict.specifying.metaclass.not.allowed.in.typeddict=No está permitido especificar una metaclase en TypedDict
INSP.typeddict.this.operation.might.break.typeddict.consistency=Esta operación podría quebrar la consistencia TypedDict
INSP.typeddict.total.value.must.be.true.or.false=El valor de 'total' debe ser Verdadero o Falso
INSP.typeddict.typeddict.cannot.have.key=TypedDict "{0}" no puede tener la clave ''{1}''
INSP.typeddict.typeddict.cannot.inherit.from.non.typeddict.base.class=TypedDict no puede heredar de una clase base no TypedDict
INSP.typeddict.typeddict.field.is.readonly=La clave de TypedDict "{0}" es ReadOnly
INSP.typeddict.typeddict.has.no.key=TypedDict ''{0}'' no tiene la clave ''{1}''
INSP.typeddict.typeddict.has.no.keys=El TypedDict "{0}" no tiene claves ({1})
INSP.typeddict.typeddict.key.must.be.string.literal.expected.one=La clave del TypedDict debe ser un literal de cadena; se esperaba uno de ({0})
INSP.typeddict.unexpected.argument.for.__init_subclass__.of.TypedDict=Argumento inesperado ''{0}'' para __init_subclass__ de TypedDict
INSP.typeddict.value.must.be.type=El valor debe ser un tipo
INSP.unbound.function.too.large=La función ''{0}'' es demasiado grande para analizar
INSP.unbound.local.variable=La variable local ''{0}'' podría ser referenciada antes de la asignación
INSP.unbound.name.undefined=El nombre ''{0}'' puede estar indefinido
INSP.unbound.nonlocal.variable=Variable no local ''{0}'' debe enlazarse en un ámbito de función externo
INSP.unexpected.arg=Argumento inesperado
INSP.unexpected.arg(s)=Argumentos inesperados
INSP.unexpected.parameter.in.docstring=Parámetro inesperado {0} en docstring
INSP.unnecessary.backslash.unnecessary.backslash.in.expression=Barra invertida innecesaria en la expresión
INSP.unreachable.code=El código es inaccesible
INSP.unresolved.refs.cannot.find.reference.in.type=No se encuentra la referencia ''{0}'' en ''{1}''
INSP.unresolved.refs.class.does.not.define.operator=La clase ''{0}'' no define ''{1}'', por lo que no se puede usar el operador ''{2}'' en sus instancias
INSP.unresolved.refs.class.object.has.no.attribute=''{0}'' objeto no tiene atributo ''{1}''
INSP.unresolved.refs.ignore.references.label=Referencias ignoradas:
INSP.unresolved.refs.import.resolves.to.its.containing.file=La importación se resuelve a su archivo contenedor
INSP.unresolved.refs.module.not.found=No se encontró el módulo ''{0}''
INSP.unresolved.refs.unresolved.attribute.for.class=Referencia de atributo no resuelta ''{0}'' para la clase ''{1}''
INSP.unresolved.refs.unresolved.reference=Referencia no resuelta ''{0}''
INSP.unsupported.format.character=El carácater de formato ''{0}'' no está soportado
INSP.unused.import.statement=Instrucción de importación no utilizada: <code>#ref</code>
INSP.unused.imports.try.except.import.error=''{0}'' en el bloque try con ''except ImportError'' también debe definirse en el bloque except
INSP.unused.imports.unused.import.statement=Sentencia de importación no utilizada <code>#ref</code>
INSP.unused.locals.ignore.lambda.parameters=Ignorar parámetros lambda
INSP.unused.locals.ignore.range.iteration.variables=Ignorar variables de iteración de rango
INSP.unused.locals.ignore.variables.starting.with=Ignorar variables que comiencen con '_'
INSP.unused.locals.ignore.variables.used.in.tuple.unpacking=Ignorar variables usadas en desempaquetado de tupla
INSP.unused.locals.local.class.isnot.used=La clase local ''{0}'' no se utiliza
INSP.unused.locals.local.function.isnot.used=Función local ''{0}'' no se usa
INSP.unused.locals.local.variable.isnot.used=Variable local ''{0}'' no es usada
INSP.unused.locals.parameter.isnot.used=El valor del parámetro ''{0}'' no es utilizado
INSP.unused.locals.replace.with.wildcard=Reemplazar por _
INSP.unused.locals.type.alias.isnot.used=El alias de tipo local ''{0}'' no se utiliza
INSP.unused.locals.type.parameter.isnot.used=El parámetro de tipo ''{0}'' no se utiliza
INSP.use.fixture.without.declaration.in.test.function=Fixture ''{0}'' no es requerido por las funciones de prueba ni por el marcador ''@pytest.mark.usefixtures''
INSP.usually.named=Se acostumbra a nombrar al primer parámetro ''{0}''
INSP.usually.named.self=El primer argumento de un método suele llamarse "self"
INTN.NAME.add.type.hint.for.variable=Añadir sugerencia de tipo para variable
INTN.NAME.add.type.hints.for.function=Añadir sugerencias de tipo para la función
INTN.NAME.convert.between.f.string.t.string=Convertir entre f-string y t-string
INTN.NAME.convert.collection.literal=Convertir colección a {0}
INTN.NAME.convert.import.qualify=Convertir 'from module import' a 'import module'
INTN.NAME.convert.import.unqualify=Convertir a 'from module import' una 'importación de módulo'
INTN.NAME.convert.type.comment.to.variable.annotation=Convertir comentario de tipo a anotación de variable
INTN.NAME.demorgan.law=Ley de De Morgan
INTN.NAME.flip.comparison=Intercambiar comparación
INTN.NAME.hide.type.annotations=Ocultar anotaciones de tipo
INTN.NAME.insert.docstring.stub=Insertar prototipo de docstring
INTN.NAME.join.if=Unir sentencias 'if'
INTN.NAME.negate.comparison=Comparación negada
INTN.NAME.specify.type.in.annotation=Especificar tipo para referenciar mediante anotación
INTN.NAME.specify.type.in.docstring=Especificar tipo para referencia en docstring
INTN.NAME.split.if=Dividir declaración 'if'
INTN.NAME.toggle.import.alias=Cambiar usando alias de importación
INTN.add.import.alias=Añadir alias
INTN.add.import.alias.dialog.message='Alias para ''{0}'':
INTN.add.import.alias.title=Alias de importación
INTN.add.import.alias.to.name=Agregar alias a ''{0}''
INTN.add.parameters.to.docstring=Agregar parámetros a docstring
INTN.add.qualifier=Agregar calificador ''{0}''
INTN.add.type.hint.for.variable=Añadir indicación de tipo para la variable ''{0}''
INTN.add.type.hint.for.variable.PEP484.incompatible.type=El tipo ''{0}'' no puede expresarse en línea en formato PEP 484
INTN.add.type.hints.for.function=Añadir indicaciones de tipo a la función "{0}"
INTN.category.python=Python
INTN.convert.absolute.to.relative=Convertir importación absoluta a relativa
INTN.convert.builtin.import=Conversión de módulo incorporado al formato compatible con la importación
INTN.convert.collection.literal=Convertir {0} a {1}
INTN.convert.dict.constructor.to.dict.literal=Convertir constructor dict a literal dict
INTN.convert.dict.literal.to.dict.constructor=Convertir literal dict a constructor de dict
INTN.convert.except.to=Convertir 'except exceptClass, Target' a 'except exceptClass as Target'
INTN.convert.f.string.to.t.string=Convertir f-string a t-string
INTN.convert.lambda.to.function=Convertir lambda en función
INTN.convert.method.to.property=Convertir método a propiedad
INTN.convert.relative.to.absolute=Convertir importación relativa a absoluta
INTN.convert.static.method.to.function=Convertir método estático a función
INTN.convert.t.string.to.f.string=Convertir t-string a f-string
INTN.convert.to.from.import=Convertir a ''from {0} import {1}''
INTN.convert.to.fstring.literal=Convertir a f-string literal
INTN.convert.to.plain.import=Convertir a ''import {0}''
INTN.convert.type.comment.to.variable.annotation=Convertir a anotación de variable
INTN.convert.variadic.param=Convertir parámetros variádicos a normales
INTN.flip.comparison=Voltear ''{0}''
INTN.flip.comparison.to.operator=Cambiar ''{0}'' a ''{1}''
INTN.format.operator.to.method=Convertir operador de formato a llamada al método 'str.format'
INTN.hide.type.annotations=Ocultar anotaciones de tipo
INTN.insert.assertion=Insertar aserción de tipo
INTN.insert.docstring.stub=Insertar un esbozo de cadena de documentación
INTN.invert.if.condition=Invertir condición 'if'
INTN.join.if=Unir dos sentencias `if`
INTN.multiple.usages.of.import.found=Encontradas múltiples utilizaciones de import
INTN.negate.comparison=Negar de ''{0}'' a ''{1}''
INTN.quoted.string=Convertir cadenas entrecomilladas simples y dobles
INTN.quoted.string.double.to.single=Convertir cadena entrecomillada doble a cadena entrecomillada simple
INTN.quoted.string.single.to.double=Convertir cadena entre comillas simples a cadena entre comillas dobles
INTN.remove.import.alias=Eliminar alias ''{0}''
INTN.remove.qualifier=Eliminar el calificador ''{0}''
INTN.remove.qualifier.from.all.usages=Eliminar calificadores de todos los usos
INTN.remove.qualifier.from.this.name=Eliminar el calificador original de este nombre
INTN.replace.backquote.expression=Reemplazar expresión de acento grave
INTN.replace.list.comprehensions=Convertir lista de comprensiones a formato compatible
INTN.replace.list.comprehensions.with.for=Convertir comprensiones de listas a bucle 'for'
INTN.replace.noteq.operator=Reemplazar operador de no igualdad
INTN.replace.octal.numeric.literal=Convertir el literal numérico octal a un formato compatible
INTN.replace.plus.with.format.operator=Reemplazar + con el operador de formateo de cadena
INTN.replace.plus.with.str.format=Reemplazar '+' con llamada al método str.format
INTN.replace.raise.statement=Convertir instrucción raise a forma compatible
INTN.replace.with.method=Reemplazar con llamada al método str.format
INTN.specify.return.type.in.annotation=Especificar el tipo de retorno usando notaciones
INTN.specify.return.type.in.docstring=Especificar tipo de retorno en docstring
INTN.specify.type.in.annotation=Especifique el tipo para la referencia usando anotación
INTN.specify.type.in.docstring=Especifica el tipo de referencia en docstring
INTN.split.if=Dividir en 2 sentencias 'if'
INTN.string.concatenation.to.format=Reemplaza la concatenación de cadenas con 'str.format'
INTN.transform.into.if.else.statement=Transformar expresiones condicionales en sentencias 'if/else'
INTN.triple.quoted.string=Convertir cadena entrecomillada triple a cadena entrecomillada simple
INTN.yield.from=Transformar las iteraciones explícitas con 'yield' en expresiones 'yield from'
QDOC.accessor.kind=Tipo de descriptor de acceso:
QDOC.assigned.to=Asignado a:
QDOC.attributes=Atributos:
QDOC.built.in.description=descripción integrada
QDOC.class=clase
QDOC.class.attribute=Atributo de clase {0} de {1}
QDOC.copied.from=Copiado desde:
QDOC.directory.name=Directorio "{0}"
QDOC.epydoc.python2.sdk.not.found=Es necesario un SDK de Python 2 configurado para visualizar cadenas de documentación <a href='http://epydoc.sourceforge.net/'>Epydoc</a>
QDOC.file.name=Archivo "{0}"
QDOC.inferred.type.name=Tipo inferido: {0}
QDOC.instance.attribute=Atributo de instancia {0} of {1}
QDOC.keyword.args=Argumentos de palabra clave:
QDOC.local.sdk.not.found=Se necesita un SDK local de Python configurado para mostrar docstrings.
QDOC.module.name=Módulo {0}
QDOC.module.path.unknown=(La ruta del módulo no se conoce)
QDOC.not.defined.in.parentheses=(no definido)
QDOC.package.name=Paquete {0}
QDOC.parameter.name=Parámetro "{0}"
QDOC.parameter.name.of.link=Parámetro {0} de {1}
QDOC.parameter.of.function.name=Parámetro "{0}" de función "{1}"
QDOC.parameter.of.method.name=Parámetro "{0}" del método "{1}"
QDOC.params=Parámetros:
QDOC.property.getter=getter de propiedad
QDOC.property.name.of.link=Propiedad {0} de {1}
QDOC.python.3.sdk.needed.to.render.docstrings=Se necesita un SDK de Python 3 local configurado para renderizar docstrings.
QDOC.raises=Lanza:
QDOC.returns=Devuelve:
QDOC.type.alias.statement.name.of.link=Sentencia de tipo alias {0} de {1}
QDOC.type.parameter.kind=tipo:
QDOC.type.parameter.name=Parámetro de tipo {0}
QDOC.type.parameter.name.of.link=Parámetro de tipo {0} para {1}
QDOC.variable.name=Variable "{0}"
QFIX.NAME.add.exception.base=Agregar clase base de excepción
QFIX.NAME.add.field.to.class=Agregar campo a clase
QFIX.NAME.add.method.to.class=Agregar un método a la clase
QFIX.NAME.add.specifier=Añadir un carácter de especificador de formato
QFIX.NAME.auto.import=Importar
QFIX.NAME.convert.builtin=Convertir importación de módulo incorporado
QFIX.NAME.create.function.in.module=Crear función en módulo
QFIX.NAME.docstring=Arreglar docstring
QFIX.NAME.ignore.errors.like.this=Ignorar errores como este
QFIX.NAME.ignore.requirements=Ignorar {0,choice,1#requisito|2#requisitos}
QFIX.NAME.ignore.shadowed.built.in.name=Ignorar nombre interno ocultado
QFIX.NAME.install.and.import.package=Instalar e importar paquete ''{0}''
QFIX.NAME.install.requirements=Instalar {0,choice,1#requerimiento|2#requerimientos}
QFIX.NAME.local.auto.import=Importación local
QFIX.NAME.make.function=Hacer función desde método
QFIX.NAME.make.function.return.type=Hacer que la función devuelva un tipo inferido
QFIX.NAME.make.list=Reemplazar tupla con lista
QFIX.NAME.make.return.stmts.explicit=Hacer explícitas las sentencias 'return None'
QFIX.NAME.make.static=Hacer método estático
QFIX.NAME.move.except.up=Mover bloque except hacia arriba
QFIX.NAME.remove.argument=Eliminar argumento
QFIX.NAME.remove.assignment=Eliminar asignación
QFIX.NAME.remove.assignment.target=Eliminar destino de asignación
QFIX.NAME.remove.call=Eliminar llamada
QFIX.NAME.remove.dict.key=Eliminar esta clave
QFIX.NAME.remove.exception.target=Quitar destino de excepción
QFIX.NAME.remove.parameter=Eliminar parámetro
QFIX.NAME.remove.statement=Eliminar enunciado
QFIX.NAME.remove.string.prefix=Eliminar prefijo
QFIX.NAME.remove.underscores.in.numeric=Eliminar guiones bajos en literales numéricos
QFIX.NAME.remove.with.target=Remover destino 'with'
QFIX.NAME.rename.argument=Renombrar argumento
QFIX.NAME.rename.parameter=Renombrar parámetro
QFIX.NAME.replace.with.true.or.false=Reemplazar con verdadero o falso
QFIX.NAME.simplify.boolean.expression=Simplifica la expresión booleana
QFIX.NAME.unpack.type.var.tuple=Desempaquetar TypeVarTuple
QFIX.NAME.unresolved.reference.add.param=Crea un parámetro para la referencia
QFIX.NAME.unresolved.reference.create.function=Crear la función '{0}'
QFIX.NAME.update.parameters=Actualizar parámetros
QFIX.action.failed=Acción fallida
QFIX.add.encoding=Agregar declaración de codificación
QFIX.add.explicit.return.none=Añadir 'return None' explícito
QFIX.add.field.to.class=Agregar campo ''{0}'' a clase {1}
QFIX.add.field.to.class.popup.content.added.init=Se añadió init a la clase <code>{0}</code><br/>para dar cabida al nuevo campo <code>{1}</code>
QFIX.add.fixture.to.test.function.parameters.list=Adicionar un fixture a la lista de parámetros de la función de prueba
QFIX.add.from.future.import.annotations=Agregar 'from future import annotations'
QFIX.add.global=Agregar declaración global
QFIX.add.imported.package.to.declared.packages=Agregar el paquete "{0}" a los requisitos...
QFIX.add.imported.packages.to.requirements=Añadir paquetes importados a requisitos...
QFIX.add.method.to.class=Añadir método {0}() a clase {1}
QFIX.add.parameter.self=Añadir parámetro ''{0}''
QFIX.add.property=Añadir propiedad para el campo
QFIX.add.qualifier=Agregar calificador
QFIX.add.super=Añadir una llamada a la superclase
QFIX.augment.assignment=Reemplazar asignación por asignación aumentada
QFIX.auto.import.import.name=Importar ''{0}''
QFIX.auto.import.import.this.name=Importar este nombre
QFIX.chained.comparison=Simplificar comparación encadenada
QFIX.change.base.class=Cambiar clase base
QFIX.classic.class.transform=Extender clase
QFIX.convert.indents=Convertir sangrías
QFIX.convert.indents.to.spaces=Convertir sangrías a espacios
QFIX.convert.indents.to.tabs=Convertir sangrías a tabulaciones
QFIX.convert.into.async.function=Convertir en función asíncrona
QFIX.convert.single.quoted.docstring=Convertir la cadena de documentación a formato de cadena con tres comillas dobles
QFIX.convert.to.new.style=Convertir a clase nueva
QFIX.coroutine.is.not.awaited=La corrutina no está siendo esperada
QFIX.create.class=Crear clase
QFIX.create.class.0=Crear clase ''{0}''
QFIX.create.class.in.module=Crear clase ''{0}'' en el módulo {1}
QFIX.create.function.in.module=Crear función {0}() en el módulo {1}
QFIX.create.property=Crear propiedad
QFIX.default.argument=Reemplazar argumento mutable por defecto
QFIX.dict.creation=Reemplazar creación de diccionario
QFIX.docstring.add.parameter=Añadir parámetro de docstring ''{0}''
QFIX.docstring.insert.stub=Insertar docstring
QFIX.docstring.remove.parameter=Eliminar parámetro de docstring ''{0}''
QFIX.failed.to.add.field=<br/>¡Error al agregar un campo!<br/><br/>
QFIX.failed.to.add.function=<br/>¡No se pudo agregar una función!<br/><br/>
QFIX.failed.to.add.method=<br/>¡Error al agregar un método!<br/><br/>
QFIX.ignore.shadowed.built.in.name=Ignorar nombre incorporado sombreado "{0}"
QFIX.install.and.import.package=Instalar e importar paquete
QFIX.introduce.variable=Introducir variable para la sentencia
QFIX.list.creation=Reemplazar por una lista literal
QFIX.local.auto.import.import.locally=importar localmente {0}
QFIX.make.function.return.type=Hacer que ''{0}'' devuelva ''{1}''
QFIX.make.public=Hacer publico
QFIX.move.attribute=Mover atributo al método init
QFIX.move.from.future.import=Mover 'from future import' a una ubicación correcta
QFIX.optimize.imports=Optimizar importaciones
QFIX.pandas.series.values.replace.with.tolist=Reemplazar list(Series.values) por Series.tolist()
QFIX.redundant.parentheses=Eliminar paréntesis redundantes
QFIX.remove.annotation=Quitar la anotación
QFIX.remove.argument.equal.default=Quitar argumentos iguales al predeterminado
QFIX.remove.decorator=Eliminar decorador
QFIX.remove.function.annotations=Eliminar anotaciones de función
QFIX.remove.generic.parameters=Eliminar parámetros genéricos
QFIX.remove.square.brackets=Quitar corchetes
QFIX.remove.string.prefix=Quitar prefijo {0}
QFIX.remove.trailing.semicolon=Quitar punto y coma final
QFIX.remove.trailing.suffix=Eliminar sufijo final
QFIX.remove.type.comment=Eliminar el comentario de tipo
QFIX.remove.unnecessary.backslash=Eliminar la barra invertida innecesaria en la expresión
QFIX.rename.parameter=Renombrar a ''{0}''
QFIX.rename.unresolved.reference=Renombrar referencia
QFIX.replace.equality=Sustituir igualdad
QFIX.replace.function.set.with.literal=Reemplazar llamada de función con literal del conjunto
QFIX.replace.star.by.unpack=Reemplazar por typingextensions.Unpack
QFIX.replace.with.old.union.style=Reemplazar con una unión de estilo antiguo
QFIX.replace.with.return.none=Reemplazar por 'return None'
QFIX.replace.with.square.brackets=Reemplazar con corchetes
QFIX.replace.with.target.name=Reemplazar con el nombre objetivo
QFIX.replace.with.true.or.false=Reemplazar con {0}
QFIX.replace.with.type.name=Reemplazar con el nombre del tipo
QFIX.replace.with.typing.alias=Reemplazar con alias de tipado
QFIX.simplify.boolean.expression=Reemplazar expresión booleana con ''{0}''
QFIX.statement.effect=Reemplazar con llamada de función
QFIX.surround.with.square.brackets=Rodear con corchetes
QFIX.unresolved.reference=Reemplazar ''{0}'' por ''{1}.{0}''
QFIX.unresolved.reference.add.param=Crear parámetro ''{0}''
QFIX.unresolved.reference.create.function=Crear función
QFIX.use.property=Usar propiedad para el campo
custom.type.mimic.name=Clase dinámica basada en {0}
debugger.cleaning.signature.cache=Limpiando la caché de tipos recolectados dinámicamente
element.presentation.location.string.in.class=(en {1} {0})
element.presentation.location.string.in.class.stub=({0} en {1} stub)
element.presentation.location.string.module=({0})
element.presentation.location.string.module.stub=Módulo({0})
filetype.python.docstring.description=Docstring de Python
filetype.python.function.type.annotation.description=Python PEP-484 anotación de tipo de función
filetype.python.type.hint.description=Python PEP-484 sugerencias de tipos
find.usages.class=Clase
find.usages.function=Usos de la función
find.usages.imported.module.alias=Alias del módulo importado
find.usages.keyword.argument=Argumento de palabra clave
find.usages.method=Método
find.usages.parameter=Parámetro
find.usages.unnamed=sin nombre
find.usages.variable=Variable
ignore.overridden.functions=Ignorar funciones sobreescritas
python.docstring.format=Formato de docstring:
python.docstring.select.type=Seleccionar tipo de Docstring
python.find.usages=Buscar usos
python.find.usages.base.method.question=El método {0} anula el método de la clase {1}.\n¿Quieres buscar las ubicaciones que usan este método base?
python.find.usages.untyped.probable.usage=Uso probable sin tipado
python.find.usages.usage.in.import.statement=Uso en la declaración de importación
python.find.usages.usage.in.isinstance=Uso en isinstance()
python.find.usages.usage.in.superclass.list=Uso en lista de superclase
python.find.usages.usage.in.type.hint=Uso en hinting tipo
refactoring.extract.method=Extraer método
refactoring.extract.method.error.bad.selection=No se puede ejecutar la refactorización Extraer método con la selección actual
refactoring.extract.method.error.class.level=No se puede ejecutar la refactorización en el nivel de clase
refactoring.extract.method.error.empty.fragment=No se puede refactorizar desde un fragmento de código vacío
refactoring.extract.method.error.interrupted.execution.flow=No se puede ejecutar el refactor cuando se interrumpe el flujo de ejecución
refactoring.extract.method.error.local.variable.modifications=No se puede realizar refactorización desde una expresión que contiene modificaciones de variables locales dentro del fragmento de código.
refactoring.extract.method.error.local.variable.modifications.and.returns=No se puede ejecutar la refactorización desde una expresión que contenga modificaciones de variables locales y devoluciones dentro del fragmento de código
refactoring.extract.method.error.name.clash=El nombre del método entra en conflicto con el nombre de un método existente
refactoring.extract.method.error.returns=No se puede extraer el método con una instrucción return dentro del fragmento de código
refactoring.extract.method.error.star.import=La refactorización no se puede realizar con una importación con un asterisco en un bloque de código
refactoring.extract.method.error.yield=No se puede ejecutar el refactorizado con el enunciado 'yield' en el bloque de código
refactoring.inline.all.border.title=Inlinear
refactoring.inline.all.keep.declaration=Incorporar todas las llamadas y conservar la declaración
refactoring.inline.all.remove.declaration=Inliner todas las llamadas y eliminar declaración
refactoring.inline.can.not.multiline.string.to.f.string=No se puede interpolar una cadena de varias líneas en una f-string
refactoring.inline.can.not.string.to.nested.f.string=No se puede integrar la cadena a la F-string anidada
refactoring.inline.can.not.string.with.backslashes.or.quotes.to.f.string=No se puede interpolar una cadena con barras invertidas "" y comillas "" en una cadena f-string
refactoring.inline.function=Incorporar función {0}
refactoring.inline.function.async=No se puede colocar en línea una función asíncrona
refactoring.inline.function.builtin=No se puede intercalar función integrada
refactoring.inline.function.command.name=Incorporando de manera inline {0}
refactoring.inline.function.constructor=No se puede inlinear llamada al constructor
refactoring.inline.function.decorator=No se puede inlinear la función con decorador
refactoring.inline.function.function.to.inline=Función para integrar
refactoring.inline.function.generator=No se puede interpolar el generador
refactoring.inline.function.global=No se puede hacer en línea una función que usa variables globales
refactoring.inline.function.interrupts.flow=La función que interrumpe el flujo de control no se puede enlazar
refactoring.inline.function.invocations.to.be.inlined=Llamadas para ser inlineadas en {0} archivos
refactoring.inline.function.is.decorator=No se puede insertar en línea la función {0} porque se utiliza como decorador. No se eliminará la definición de la función
refactoring.inline.function.is.overridden=No se puede poner en línea un método que se sobreescribe
refactoring.inline.function.is.reference=No se puede incorporar la función {0} porque se usa como referencia. No se eliminará la definición de la función
refactoring.inline.function.nested=No se puede integrar una función que utiliza otra declaración de función
refactoring.inline.function.nonlocal=No se puede hacer en línea una función que usa una variable no local
refactoring.inline.function.overrides.method=No se puede incrustar un método que anule otros métodos
refactoring.inline.function.self.referrent=No es posible llevar en línea una función recursiva
refactoring.inline.function.skeleton.only=No se puede incrustar una función de un módulo binario
refactoring.inline.function.special.method=No es posible inlinizar métodos especiales
refactoring.inline.function.star=No es posible poner en línea una función con * parámetros
refactoring.inline.function.title=Inlinear función
refactoring.inline.function.uses.unpacking=La función {0} no se puede incorporar porque usa desempaquetado de argumentos. No se quitará la definición de la función
refactoring.inline.label.function=Función {0}
refactoring.inline.label.method=Método {0}
refactoring.inline.local.multiassignment=Definido usando múltiples asignaciones
refactoring.inline.method=Inlinea el método {0}
refactoring.inline.this.only=Solo en línea esta llamada manteniendo la declaración
refactoring.introduce.constant.cannot.extract.selected.expression=No se puede extraer la expresión seleccionada a una constante
refactoring.introduce.constant.dialog.title=Extraer una constante
refactoring.introduce.constant.scope.error=Ya se ha declarado ese nombre en el scope
refactoring.introduce.name.error=El nombre no es válido
refactoring.introduce.selection.error=No se puede realizar un refactor con el elemento seleccionado
refactoring.introduce.variable.dialog.title=Extraer variable
refactoring.introduce.variable.scope.error=El nombre entra en conflicto con una variable o parámetro existente
refactoring.move.module.members.error.cannot.place.elements.into.nonpython.file=No se pueden colocar elementos en un archivo no Python
refactoring.name.label.text={0} tiene {1} ocurrencia{2, choice, 0#|s#}
refactoring.progress.title.updating.existing.usages=Actualizando usos existentes...
type.param.list.annotator.two.or.more.types.required=Se necesitan dos o más tipos
type.param.list.annotator.type.parameter.already.defined=El parámetro de tipo con nombre ''{0}'' ya está definido en esta lista de parámetros de tipo
type.param.list.annotator.type.var.tuple.and.param.spec.can.not.have.bounds=ParamSpec y TypeVarTuple no pueden tener restricciones ni límites
unresolved.docstring.param.reference=La función ''{0}'' no tiene el parámetro ''{1}''
unresolved.import.reference=No existe el módulo con nombre ''{0}''