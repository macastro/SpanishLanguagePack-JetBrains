PhpLanguageFeature.abstract.function.override=Sólo se pueden sobreescribir funciones abstractas desde PHP 7.2
PhpLanguageFeature.abstract.private.trait.methods=Uso de métodos de composición privada abstracta permitidos desde PHP 8.0
PhpLanguageFeature.anonymous.classes=Las clases anónimas solo están disponibles a partir de PHP 7.0
PhpLanguageFeature.anonymous.readonly.classes=Las clases 'readonly' anónimas solo están disponibles a partir de PHP 8.3
PhpLanguageFeature.arbitrary.static.variable.initializers=Las expresiones y otros inicializadores de variable estática arbitrarios solo son compatibles con PHP 8.3 en adelante
PhpLanguageFeature.argument.unpacking=El desempaquetado de argumentos solo está permitido a partir de PHP 5.6
PhpLanguageFeature.array.dereferencing.not.supported=El desreferenciado de la matriz en llamada solo es aceptado desde PHP 5.4
PhpLanguageFeature.arrow.function=Sólo la sintaxis de la función de flecha está permitida en PHP 7.4 +
PhpLanguageFeature.asymmetric.visibility=La visibilidad asimétrica solo se permite a partir de PHP 8.4
PhpLanguageFeature.attribute.override='#[Override]' solo se puede utilizar a partir de PHP 8.3
PhpLanguageFeature.attributes=Los atributos solo están permitidos a partir de PHP 8.0
PhpLanguageFeature.binary.literal.not.supported=Solo se permiten literales binarios a partir de PHP 5.4
PhpLanguageFeature.built.in.web.server=El servidor web incorporado sólo está disponible a partir de PHP 5.4
PhpLanguageFeature.call.time.pass.by.reference.not.supported=El paso por referencia en llamadas a funciones está obsoleto desde PHP 5.4
PhpLanguageFeature.catch.multiple=La captura de múltiples sentencias sólo es posible a partir de PHP 7.1
PhpLanguageFeature.class.constant.visibility=Solo se permiten las visibilidades de constantes de clase desde PHP 7.1
PhpLanguageFeature.class.member.access.on.instantiation.not.supported=El acceso a los miembros de la clase durante la instanciación sólo es compatible con PHP 5.4 en adelante
PhpLanguageFeature.class.name.const.not.supported=Las constantes de los nombres de clase solo están permitidas a partir de PHP 5.5
PhpLanguageFeature.class.name.literal.on.object=El uso de '::class' en objetos está permitido sólo desde PHP 8.0 y versiones posteriores
PhpLanguageFeature.coalesce.assign='??=' sólo se permite desde PHP 7.4
PhpLanguageFeature.coalesce.operator=El operador de fusión solo se permite desde PHP 7.0
PhpLanguageFeature.constant.scalar.expressions=Las constantes scalar solo son soportadas desde PHP 5.6 en adelante
PhpLanguageFeature.constants.in.traits=Las constantes en traits sólo están permitidas a partir de PHP 8.2
PhpLanguageFeature.dynamic.class.constant=El fetcheo de constantes de clase dinámicas solo está permitido a partir de PHP 8.3
PhpLanguageFeature.empty.any.expression.not.supported=Se permite cualquier expresión en 'empty' desde PHP 5.5
PhpLanguageFeature.enum.classes=Las enumeraciones están permitidas solo en versiones superiores de PHP 8.1
PhpLanguageFeature.exception.throw.from.toString=A partir de PHP 7.4 se puede lanzar una excepción desde ''__toString'', ''{0}.__toString'' puede lanzar una excepción
PhpLanguageFeature.explicit.octal.literal=Los literales octales explícitos solo están disponibles desde PHP 8.1
PhpLanguageFeature.exponentiation=Se soporta exponenciación sólo en PHP 5.6 o superior
PhpLanguageFeature.final.class.constants='final' constantes de clase solo están permitidas a partir de PHP 8.1
PhpLanguageFeature.finally.not.supported='finally' sólo se puede usar en PHP 5.5 o versiones posteriores
PhpLanguageFeature.first.class.callable.syntax=Sintaxis callable de primer orden solo disponible a partir de PHP 8.1
PhpLanguageFeature.flexible.heredocs=Sintaxis heredoc/nowdoc flexible
PhpLanguageFeature.foreach.list.not.supported=El uso de list en foreach solamente está soportado en PHP 5.5 o versiones posteriores
PhpLanguageFeature.generators.not.supported=Los generadores solo se permiten a partir de PHP 5.5
PhpLanguageFeature.grouped.use=La agrupación de declaraciones `use` solo está permitida desde PHP 7.0 en adelante
PhpLanguageFeature.immediate.dereferencing.not.supported=Desreferenciación inmediata solo compatible con PHP 5.5 en adelante
PhpLanguageFeature.intersection.and.union.in.same.type=Se permiten tipos de unión e intersección mixtas solo desde PHP 8.2
PhpLanguageFeature.intersection.types=Los tipos de intersección solo están permitidos desde PHP 8.1
PhpLanguageFeature.iterable.type.hint=El hint de tipo iterable solo se permite desde PHP 7.1
PhpLanguageFeature.keyword.names=Uso de palabras clave como nombres solo desde PHP 7.0
PhpLanguageFeature.list.assign=El uso de [] en el despaquetado de listas solo se permite a partir de PHP 7.1
PhpLanguageFeature.list.keys=El uso de claves en el desempaquetado de listas está permitido a partir de PHP 7.1
PhpLanguageFeature.literal.in.instanceof=Solo desde PHP 7.3 se pueden usar literales como primer operando
PhpLanguageFeature.literal.in.static.call.not.supported=Los literales en llamadas estáticas solo están soportados a partir de PHP 5.4
PhpLanguageFeature.match.expression=Las expresiones match solo se pueden usar a partir de PHP 8.0
PhpLanguageFeature.mixed.type.hint='mixed' solo se admite el tipo de sugerencia desde PHP 8.0
PhpLanguageFeature.named.arguments=Los argumentos nombrados solo están disponibles en PHP 8.0 o superior
PhpLanguageFeature.namespaced.name.as.single.token=Desde PHP 8.0 se permiten keywords como parte del namespace
PhpLanguageFeature.negative.numeric.indices=Los índices numéricos negativos solo se permiten a partir de PHP 7.1
PhpLanguageFeature.new.in.init=A partir de PHP 8.1 está permitido el uso de 'new' en inicializadores
PhpLanguageFeature.new.without.parentheses='new' sin paréntesis solo se permite a partir de PHP 8.4
PhpLanguageFeature.non.capturing.catches=Solamente se puede capturar una excepción sin capturar la variable en PHP 8.0 o superior
PhpLanguageFeature.nullables=el uso de valores nulos solo está permitido a partir de PHP 7.1
PhpLanguageFeature.nullsafe.dereferencing=El operador null safe solo está disponible en PHP 8.0 o superior
PhpLanguageFeature.numeric.literals.separators=Desde PHP 7.4 se pueden utilizar separadores de literales numéricos
PhpLanguageFeature.object.type.hint=El hint de tipo object sólo se puede utilizar en PHP 7.2 en adelante
PhpLanguageFeature.parent.in.closure.not.supported=El uso de parent en una closure solo es posible desde PHP 5.4
PhpLanguageFeature.property.hooks=Los hooks de propiedad solo se permiten a partir de PHP 8.4
PhpLanguageFeature.property.promotion=La sintaxis de promoción de propiedades del constructor solo está disponible desde PHP 8.0
PhpLanguageFeature.readonly.classes=Las clases 'readonly' sólo están permitidas desde PHP 8.2
PhpLanguageFeature.readonly.properties=La propiedad 'readonly' solo está permitida a partir de PHP 8.1
PhpLanguageFeature.references.in.list=[] y list() solo permite el uso de referencias desde PHP 7.3
PhpLanguageFeature.return.never=El tipo de valor de retorno 'never' solo se puede utilizar a partir de PHP 8.1
PhpLanguageFeature.return.types=La declaración de tipos de valor de retorno solo es posible desde PHP 7.0
PhpLanguageFeature.return.void=El tipo de retorno 'void' está permitido desde PHP 7.1
PhpLanguageFeature.scalar.type.hints=Los scalar type hints (sugerencias de tipado escalar) sólo están permitidos desde PHP 7.0
PhpLanguageFeature.self.in.closure.not.supported=self dentro de un cierre solo se admite desde la versión 5.4 de PHP
PhpLanguageFeature.short.array.syntax.not.supported=La sintaxis abreviada de arrays está soportada desde PHP 5.4
PhpLanguageFeature.spaceship.operator=El operador de spaceship solo se permite a partir de PHP 7.0
PhpLanguageFeature.spread.operator.in.array=El operador spread solo se puede utilizar en arreglos a partir de PHP 7.4
PhpLanguageFeature.standalone.null.false=Los tipos independientes `null` y `false` están disponibles desde PHP 8.2
PhpLanguageFeature.static.in.closure.not.supported=Desde PHP 5.4, static está permitido en cierres
PhpLanguageFeature.static.type.hint='static' La declaración del tipo de valor devuelto únicamente está permitida desde PHP 8.0
PhpLanguageFeature.this.in.closure.not.supported=El uso de $this dentro de una clausura está permitido solo desde PHP 5.4
PhpLanguageFeature.throw.expression=throw expression se puede utilizar únicamente desde PHP 8.0
PhpLanguageFeature.trailing.comma.in.closure.use.list=Las comas finales en las listas de uso de un cierre solo son soportadas a partir de PHP 8.0
PhpLanguageFeature.trailing.comma.in.function.calls=Las comas al final en llamadas de función están permitidas solo en versiones posteriores a PHP 7.3
PhpLanguageFeature.trailing.comma.in.group.uses=Solo se puede utilizar una coma final en la lista de uso de grupos desde PHP 7.2
PhpLanguageFeature.trailing.comma.in.parameter.list=Desde PHP 8.0 es posible utilizar una coma final (trailing comma) en la lista de parámetros
PhpLanguageFeature.traits.not.supported=Los rasgos solo son compatibles con PHP a partir de la versión 5.4
PhpLanguageFeature.true.type="true" is only allowed from PHP 8.2 onwards
PhpLanguageFeature.typed.class.constants=Las constantes de clase tipadas solo se permiten a partir de PHP 8.3
PhpLanguageFeature.typed.properties=Propiedades tipadas permitidas solo a partir de PHP 7.4
PhpLanguageFeature.uniform.variable.syntax=Sintaxis uniforme de variables está disponible desde PHP 7.0
PhpLanguageFeature.union.types=Tipos Unión solo se permiten a partir de PHP 8.0
PhpLanguageFeature.use.function.and.const=use function y use const solo está disponible a partir de PHP 5.6
PhpLanguageFeature.var.break.argument.not.supported=El operador 'break' con un argumento no constante ya no es compatible en PHP 5.4
PhpLanguageFeature.var.break.zero.argument.not.supported=El operador "break" de PHP 5.4 en adelante solo acepta números positivos
PhpLanguageFeature.var.continue.not.supported=El operador `continue` con operando no constante ya no es compatible con PHP 5.4
PhpLanguageFeature.var.continue.zero.not.supported=El operador 'continue' a partir de PHP 5.4 solo acepta números positivos
PhpLanguageFeature.variadic.functions=Las funciones variádicas se admiten desde PHP 5.6
PhpLanguageLevel.5.3.0.presentable.name=5.3
PhpLanguageLevel.5.3.0.short.description=Espacios de nombres, Closures
PhpLanguageLevel.5.4.0.presentable.name=5.4
PhpLanguageLevel.5.4.0.short.description=Rasgos, sintaxis corta para arreglos
PhpLanguageLevel.5.5.0.presentable.name=5.5
PhpLanguageLevel.5.5.0.short.description=finally, generadores
PhpLanguageLevel.5.6.0.presentable.name=5.6
PhpLanguageLevel.5.6.0.short.description=Funciones con número variable de parámetros, desempaquetado de argumentos
PhpLanguageLevel.7.0.0.presentable.name=7.0
PhpLanguageLevel.7.0.0.short.description=Tipos de retorno y de valores escalares
PhpLanguageLevel.7.1.0.presentable.name=7.1
PhpLanguageLevel.7.1.0.short.description=Visibilidad de constantes, valores null, múltiples excepciones
PhpLanguageLevel.7.2.0.presentable.name=7.2
PhpLanguageLevel.7.2.0.short.description=Sugerencias de tipo objeto, sustitución de funciones abstractas
PhpLanguageLevel.7.3.0.presentable.name=7.3
PhpLanguageLevel.7.3.0.short.description=Asignación de referencias en listas, heredoc flexible
PhpLanguageLevel.7.4.0.presentable.name=7.4
PhpLanguageLevel.7.4.0.short.description=Propiedades tipadas, cierres cortos, operador de fusión nula
PhpLanguageLevel.8.0.0.presentable.name=8.0
PhpLanguageLevel.8.0.0.short.description=Tipos unión, argumentos nombrados, atributos, expresión match
PhpLanguageLevel.8.1.0.presentable.name=8.1
PhpLanguageLevel.8.1.0.short.description=Enumeraciones, tipo de retorno "never", tipos intersección, propiedades "readonly"
PhpLanguageLevel.8.2.0.presentable.name=8.2
PhpLanguageLevel.8.2.0.short.description='readonly' clase, tipo 'true', 'null' y 'false' independientes
PhpLanguageLevel.8.3.0.presentable.name=8.3
PhpLanguageLevel.8.3.0.short.description=Constantes de clase tipadas
PhpLanguageLevel.8.4.0.presentable.name=8.4
PhpLanguageLevel.8.4.0.short.description='new' sin paréntesis, ganchos de propiedad, visibilidad asimétrica
actions.generate.php.doc.is.not.available=La generación de PHPDoc no está disponible durante la actualización del índice.
array.declaration.style=Estilo de declaración de array/lista
array.index=Indice de arreglo
checkbox.add.a.comma.after.last.argument.in.function.call=Añadir una coma después del último argumento en la llamada a la función
checkbox.add.a.comma.after.last.element.in.multiline.array=Añadir una coma después del último elemento en un array multilínea
checkbox.add.a.comma.after.last.match.arm=Agregar una coma después del último match arm
checkbox.add.a.comma.after.last.parameter=Añadir una coma después del último parámetro en la lista de parámetros
checkbox.add.a.comma.after.last.var.in.closure.use.list=Añadir una coma después de la última variable en la lista de uso del closure
checkbox.align.parameter.property.names=Alinear nombres de parámetros/propiedades
checkbox.align.tag.comments=Alinear comentarios de etiquetas
checkbox.blank.line.before.the.first.tag=Línea en blanco antes de la primera etiqueta
checkbox.blank.lines.around.parameters=Líneas en blanco alrededor de los parámetros
checkbox.force.short.declaration.style=Forzar estilo de declaración corto
checkbox.keep.blank.lines=Mantener líneas en blanco
checkbox.sort.phpdoc.tags=Ordenar etiquetas PHPDoc
checkbox.use.as.a.default.template=Usar como plantilla predeterminada
checkbox.use.fully.qualified.class.names=Usar nombres de clase completos
checkbox.wrap.long.lines=Ajustar líneas largas
class.name=Nombre de clase
class.reference=Referencia de clase
code.style.option.after=Después de '{':
code.style.option.after.class.body=Después del cuerpo de la clase:
code.style.option.after.colon.in.enum.backed.type=Después del dos puntos junto a la declaración de tipo en un enum respaldado
code.style.option.after.colon.in.named.argument=Después de los dos puntos en el argumento con nombre
code.style.option.after.colon.in.return.type=Después de los dos puntos en el tipo de retorno
code.style.option.after.function=Después de la función:
code.style.option.after.namespace=Después del espacio de nombres:
code.style.option.after.opening.tag=Después de la etiqueta de apertura:
code.style.option.after.unary.not=Después del Not (!) unario
code.style.option.after.use.statements=Después de las sentencias 'use':
code.style.option.align.consecutive.assignments=Alinear asignaciones consecutivas
code.style.option.align.constants=Alinear constantes
code.style.option.align.enum.cases=Alinear casos de enum
code.style.option.align.inline.comments=Alinear comentarios en línea
code.style.option.align.key.value.pairs=Alinear pares clave-valor
code.style.option.align.properties.in.columns=Alinear propiedades en columnas
code.style.option.and=<?= y ?>
code.style.option.anonymous.function.parentheses=Paréntesis de función anónima
code.style.option.around.class.constants=Alrededor de las constantes de clase:
code.style.option.around.enum.cases=Alrededor de los casos de enumeración:
code.style.option.around.property=Alrededor de la propiedad:
code.style.option.array.initializer.parentheses=Paréntesis del inicializador de array
code.style.option.arrow.function.parentheses=Paréntesis de la función flecha
code.style.option.assignment.in.declare.statement=Asignación en la sentencia declare
code.style.option.attributes=Atributos
code.style.option.before.class.body=Antes del cuerpo de la clase:
code.style.option.before.colon.in.enum.backed.type=Antes de los dos puntos junto a la declaración de tipo en un enum respaldado
code.style.option.before.colon.in.named.argument=Antes de los dos puntos en argumento con nombre
code.style.option.before.colon.in.return.type=Antes de los dos puntos en el tipo de retorno
code.style.option.before.namespace=Antes del espacio de nombres:
code.style.option.before.return.statement=Antes de la sentencia 'return':
code.style.option.before.unary.not=Antes del Not unario (!)
code.style.option.before.use.statements=Antes de las sentencias 'use':
code.style.option.between.and=Entre '?' y ':'
code.style.option.between.group.use.statements=Entre grupos de sentencias 'use':
code.style.option.brackets.around.variable.expression=Corchetes alrededor de la variable/expresión
code.style.option.class.field.constant.groups=Grupos de propiedades/constantes de clase
code.style.option.concatenation=Concatenación (.)
code.style.option.for.foreach.statements=Sentencias for()/foreach()
code.style.option.force.empty.classes.braces.in.one.line=Colocar las llaves de las clases vacías en una línea
code.style.option.force.empty.functions.braces.in.one.line=Colocar las llaves de funciones/métodos vacíos en una sola línea
code.style.option.function.call.parentheses=Paréntesis de llamada a función
code.style.option.function.constructor.call.arguments=Argumentos de llamada a función/constructor
code.style.option.function.declaration.parameters=Parámetros de la declaración de función
code.style.option.function.declaration.parentheses=Paréntesis de declaración de función
code.style.option.function.left.brace=Llave izquierda de función
code.style.option.function.return.type=Tipo de retorno de la función
code.style.option.group.use=Agrupar 'use'
code.style.option.here.now.doc=Heredoc y nowdoc
code.style.option.in.anonymous.class.declaration=En la declaración de clase anónima
code.style.option.in.closure.declaration=En la declaración de clausura
code.style.option.in.function.declaration=En la declaración de la función
code.style.option.in.namespace=En el espacio de nombres
code.style.option.keep.and.on.one.line=Mantener ')' y '{' en una línea
code.style.option.match.expression=expresión 'match'
code.style.option.match.expression.align.match.arm.bodies=Alinear cuerpos de brazos de 'match'
code.style.option.multiline.arrays.lambdas=Tratar arreglos multilínea/funciones anónimas como argumentos multilínea
code.style.option.multiplicative.operators=Operadores multiplicativos (*, /, %, **)
code.style.option.new.line.after=Nueva línea antes del primer elemento
code.style.option.new.line.after.php.tag=Nueva línea después de la etiqueta '<?php'
code.style.option.null.coalescing.operator=Operador de fusión de nulos (??)
code.style.option.object.access.operator=Operador de acceso a objeto (->)
code.style.option.parameter.attributes=Atributos de parámetros
code.style.option.php.opening.tag=Etiqueta de apertura de PHP
code.style.option.place.braces.for.constructor.always=Siempre
code.style.option.place.braces.for.constructor.as.is=Tal cual
code.style.option.place.braces.for.constructor.never=Nunca
code.style.option.place.first.call.on.new.line=Colocar la primera llamada en una línea nueva cuando sea multilínea
code.style.option.place.for.constructor=Colocar '()' para el constructor
code.style.option.place.lambda.on.new.line=Colocar '=>' en una nueva línea en clausuras multilínea
code.style.option.place.on.new.line=Colocar ';' en una nueva línea
code.style.option.place.on.new.line2=Nueva línea después del último elemento
code.style.option.relational.operators=Operadores relacionales (<, >, <=, >=, <=>)
code.style.option.return.type.on.new.line=Tipo de retorno en nueva línea
code.style.option.shift.operators=Operadores de desplazamiento (<<,>>)
code.style.option.short.closure=Clausura corta
code.style.option.space.around.pipe.in.union.types=Alrededor de | en tipo de unión
code.style.option.unary.additive.operators=Operadores aditivos unarios (+,-,++,--)
code.style.place.here.now.doc.on.the.same.line=Colocar en la misma línea que la declaración de la variable
color.settings.alias.primitive.type.hint=Identificador//Sugerencia de tipo primitivo
color.settings.alias.reference=Identificador//Referencia de alias
color.settings.attributes=Atributos
color.settings.bad_character=Carácter desconocido
color.settings.braces=Llaves y operadores//Llaves
color.settings.brackets=Paréntesis y operadores//Corchetes
color.settings.class=Clase y propiedades//Clase
color.settings.comma=Paréntesis y operadores//Coma
color.settings.comment=Comentario
color.settings.concatenation=strings//concat
color.settings.constant=Identificador//Constante
color.settings.doc.identifier=PHPDoc/ /Identificador
color.settings.doc.method.identifier=PHPDoc//Declaración de método
color.settings.doc.parameter=PHPDoc//Parámetro
color.settings.doc.property.identifier=PHPDoc//propiedad
color.settings.doc.template.type=PHPDoc//Tipo plantilla
color.settings.doc.var=PHPDoc//Variable
color.settings.doccomment=PHPDoc//texto
color.settings.docmarkup=PHPDoc//Marcado
color.settings.doctag=PHPDoc//etiqueta
color.settings.dql.builder.expr=Constructor DQL//Expresión
color.settings.dql.builder.placeholder=DQL Builder//Marcador de posición
color.settings.escape_sequence=Cadena de caracteres//Secuencia de escape
color.settings.exec_command=Comando shell
color.settings.function=Funciones y métodos//Declaración
color.settings.function.call=Funciones y métodos//Llamada a función
color.settings.goto.label=Identificador//Ir a etiqueta
color.settings.heredoc_content=Heredoc//Contenido heredoc
color.settings.heredoc_id=Heredoc//Heredoc ID
color.settings.identifier=Identificador//defecto
color.settings.instance.field=Clase y propiedad//Propiedad de instancia
color.settings.instance.method=Funciones y Métodos/Llamada a método de instancia
color.settings.instance.private.field=Clase y propiedad//Propiedad de instancia privada
color.settings.instance.private.method=Funciones y métodos//Llamada a método de instancia privado
color.settings.instance.protected.field=Clase y propiedades//propiedades de instancia protegidas
color.settings.instance.protected.method=Funciones y métodos//Invocación de método de instancia protegido
color.settings.interface=Clase y propiedades//Interfaz
color.settings.keyword=Palabra clave
color.settings.magic.member=Identificador // Acceso a miembro mágico
color.settings.name=PHP
color.settings.named.arguments=Argumentos con nombre
color.settings.number=Número
color.settings.operation=Paréntesis y operadores//Operadores
color.settings.parameter=Funciones y métodos//Parámetros
color.settings.parentheses=Paréntesis y operadores//paréntesis
color.settings.php.scripting=Código PHP//Fondo
color.settings.php.tags=Etiquetas PHP // código
color.settings.predefined.symbols=Identificador//Símbolos predefinidos
color.settings.semicolon=Corchetes y operadores // Punto y coma
color.settings.static.field=Clases y propiedades//Propiedad estática
color.settings.static.method=Funciones y métodos//Llamadas a métodos estáticos
color.settings.string=Cadena//Cadena
color.settings.this.var=Identificador // Variable '$this'
color.settings.var=Identificador//Variable
color.settings.var_var=Identificador//Variable mutable
default.value=Valor por defecto
enable=Habilitar
exception.class=Clase de excepción
expected.class.reference=Obligatorio: referencia de clase
expected.expression=esperada: expresión
expected.property=Propiedad
expression1=expresión
extends=extiende
extends.or.implements=Extiende o implementa
field.name=Nombre del campo
fields.default.visibility.panel=Visibilidad predeterminada de las propiedades
fields.default.visibility.private=privado
fields.default.visibility.protected=protegido
fields.default.visibility.public=público
filetype.php.description=PHP
getters.setters.getters.first=getters primero
getters.setters.naming.style=Estilo de nomenclatura:
getters.setters.order=Orden de getters/setters:
getters.setters.setters.first=setter primero
getters.setters.style=Estilo de Getters/Setters
identifier=Identificador
initializer=Inicializador
interface.name=Nombre de la interfaz
label.align.named.arguments=Alinear argumentos con nombre
label1=Etiqueta
line.separator=Separador de línea
modifier=Modificador
no.type=SIN_TIPO
object.property=propiedad de objeto
parser.expected=Se esperaba: {0}
parser.unexpected=No esperado: {0}
parsing.error.at.expected=@ es necesario
parsing.error.expression.not.assignable=La expresión no es asignable
parsing.error.method.label.expected=Etiqueta de método esperada
parsing.error.not.allowed=No se permite usar ''{0}''
parsing.error.statement.expected=Falta una instrucción
parsing.error.unexpected.token=Token inesperado: {0}
php.annotator.heredoc.indent.validation.mixed.space.and.tab.characters=Mezcla de caracteres de espacio y tabulación en la sangría del identificador de cierre
php.annotator.heredoc.indent.validation.wrong.content.indent=Sangría incorrecta: debe ser la misma que la sangría de la etiqueta de cierre
php.code.style.convert.keyword.to.lowercase=Convertir palabras clave a minúsculas
php.code.style.convert.lower.case=Minúsculas
php.code.style.convert.upper.case=Mayúsculas
php.code.style.sort.alphabetically=Alfabéticamente
php.code.style.sort.by.length=Por longitud
php.code.style.sort.use.stmt=Ordenar declaraciones 'use':
php.conversion.code.style.title=Conversión de código
php.generation.code.style.title=Generación de código
php.smart.indent.codestyle.indent.in.php=Indentar código en etiquetas PHP
phpdoc.code.style.convert.else.if.combine=elseif
phpdoc.code.style.convert.else.if.separate=else if
phpdoc.code.style.convert.else.if.to=Convertir else if/elseif a:
phpdoc.code.style.convert.null.to=Convertir la constante Null a:
phpdoc.code.style.convert.true.false.to=Convertir constantes True/False a:
phpdoc.code.style.force.null.position=Colocar 'null' en los tipos:
phpdoc.code.style.generated.doc.blocks=Etiquetas PHPDoc generadas
phpdoc.code.style.in.beginning.position=Al principio
phpdoc.code.style.in.end.position=Al final
phpdoc.code.style.param.spaces.between.name.and.description=Entre el nombre y la descripción:
phpdoc.code.style.param.spaces.between.tag.and.type=Entre etiqueta y tipo:
phpdoc.code.style.param.spaces.between.type.and.name=Entre el tipo y el nombre:
phpdoc.code.style.param.spaces.panel=Espacios de '@param' en PHPDoc
phpdoc.code.style.sort.doc.blocks=Orden de etiquetas PHPDoc
phpdoc.code.style.title=PHPDoc
property.or.function=propiedad o función
radio.button.always.add.comma=Siempre
radio.button.when.multiline.add.coma=Cuando sea multilínea
return.type=Tipo de retorno
show.settings=Mostrar configuración
static.value=valor estático
type=tipo
variable.naming.style.camel.case=camelCase
variable.naming.style.mixed=Mixto
variable.naming.style.panel=Estilo de nomenclatura de variables
variable.naming.style.snake.case=snake_case
variable1=variable