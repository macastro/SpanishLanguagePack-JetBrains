go.add.method.to.interface.generate=Presiona dos veces {0} para finalizar la edición y generar los métodos.
go.add.method.to.interface.implement=Puedes hacer lo contrario. Por ejemplo, agreguemos la declaración del método {0} a la declaración de interfaz y generemos las implementaciones necesarias para las estructuras.\nPresiona {1} y selecciona "{2}". Luego escribe {3}, presiona dos veces {4}, y escribe {5}.
go.add.method.to.interface.name=Agregar y eliminar implementaciones de métodos
go.add.method.to.interface.remove=Puedes declarar nuevos métodos y eliminar los innecesarios de tu declaración de interfaz.\nEl método {0} parece extraño para las estructuras {1} y {2}. Presiona {3} y selecciona "{4}" para eliminar su declaración y todas sus implementaciones.
go.apply.fix=Selecciona {0} y presiona {1}.
go.basic.and.smart.type.completion.difference.basic=Para invocar el autocompletado básico, también puedes presionar {0}.\nPresiona {0}, ve la lista de sugerencias, y selecciona "{1}".
go.basic.and.smart.type.completion.difference.smart=Necesitamos devolver un puntero, pero el autocompletado básico no sugirió punteros. En este caso, el autocompletado inteligente de tipos coincidentes puede ayudar. Filtra la lista de sugerencias y muestra solo los tipos aplicables al contexto actual.\nInvoca el autocompletado inteligente presionando {0}, selecciona "{1}" de la lista, y presiona {2} para reemplazar el valor actual.
go.basic.and.smart.type.completion.goto.next.error=La sugerencia seleccionada está resaltada como un error en el archivo, presiona {0} para conocer la razón.
go.basic.and.smart.type.completion.name=Autocompletado básico e inteligente de tipos
go.basic.and.smart.type.completion.type.and.choose=Por defecto, <ide/> completa tu código instantáneamente. Comienza a escribir {0} justo donde está el cursor, y verás la lista emergente con sugerencias coincidentes. Elige {0} de la lista presionando {1}.
go.basic.completion.invoke.completion=Observa que <ide/> inserta automáticamente una nueva importación. Ahora, activa el autocompletado básico presionando {0}, selecciona {1}, y presiona {2}.
go.basic.completion.lesson.name=Autocompletado básico
go.choose.name=Presiona {0} para completar la refactorización.
go.code.completion.module.name=Autocompletado de código
go.comment.navigation.lesson.name=Declaraciones en comentarios
go.comment.navigation.task=Nuestro paquete {0} no es tan grande y podemos navegar fácilmente en él. Pero algunos paquetes pueden ser enormes con cientos de líneas de código y comentarios.\nEn el IDE, puedes ir a las declaraciones desde los comentarios si estas declaraciones están en el mismo paquete. Los nombres de estos métodos, funciones y estructuras en los comentarios están coloreados un poco diferente. Como la función {1} en la sección de comentarios en la línea 32.\nPara navegar a la declaración de la función desde este comentario, coloca el cursor en el nombre de la función en el comentario y presiona {2}.
go.comments.comment.block=Puedes comentar un bloque de código. Por ejemplo, comentemos el bloque seleccionado, presiona {0}.
go.comments.comment.one.line=Comenta cualquier línea con {0}.
go.comments.lesson.name=Agregar y eliminar comentarios
go.comments.uncomment.block=Para descomentar el bloque de código. Presiona {0} nuevamente.
go.comments.uncomment.line=Descomenta la línea comentada con el mismo atajo, {0}
go.completion.for.functions.choose.item=Selecciona la función parpadeante {0} de la lista y presiona {1}. Cuando veas la lista de sugerencias, puedes comenzar a escribir para reducir el número de resultados.
go.completion.for.functions.press.twice=Ahora escribe un punto ({0}) y presiona {1} <strong>dos veces</strong>. En este caso, el IDE encuentra todas las funciones que aceptan una cadena como primer argumento. Ten en cuenta que el punto lo hace parecer un método aunque no lo es.
go.debug.function.calls.add.arguments.for.evaluation=Entre paréntesis, escribe {0}. El campo debe mostrar {1}.
go.debug.function.calls.click.evaluate=Haz clic en "{0}" o presiona {1}. Puedes cerrar el diálogo después.
go.debug.function.calls.enter.expression.to.evaluate=En el campo {0}, comienza a escribir {1}, selecciona {2} de la lista de sugerencias.
go.debug.function.calls.evaluate.expression=Invoca la acción {0} presionando {1}.
go.debug.function.calls.lesson.name=Depurar llamadas a funciones
go.debug.function.calls.mac.note=Ten en cuenta que tu sistema operativo podría pedirte una contraseña para iniciar el servidor de depuración.
go.debug.function.calls.run.to.cursor=El cursor ahora está al final de la línea 15. Presiona {0} para ver cómo funciona la acción {1}.
go.debug.function.calls.step.over=Intenta pasar por encima de la construcción {0} usando {1}.
go.debug.function.calls.toggle.breakpoint=En el modo de depuración, puedes pasar diferentes valores a una función y ver qué devuelve la función. Lee más sobre la función Evaluar expresión en <a href\="{0}">la documentación</a>.\n{1}Para comenzar a depurar, necesitas crear un breakpoint. Presiona {2} para alternar un breakpoint.
go.debug.function.calls.version.warning=<strong>Nota</strong>\: para esta función, necesitas instalar Go 1.11 o posterior.
go.debug.function.context.menu=Hay diferentes formas de depurar tu código. Una de ellas es con ayuda del menú contextual.\nHaz clic derecho en un área del editor y selecciona el elemento de menú resaltado que dice "{0}". Ten en cuenta que el texto exacto puede variar\: podría ser "{1}" en el contexto de la función {2}, o "{3}" en otros contextos.
go.debug.function.more.menu=Haz clic en el botón "{0}" en la ventana de herramientas "{1}".
go.debug.run.sample=Elige el elemento de menú "{0}" o prueba {1}.
go.debug.stop.debug=Presiona {0} para detener la depuración y finalizar la lección.
go.dump.goroutines.click.button.DlvFilterGoroutinesAction=En la pestaña {0} abierta, haz clic en el botón "{1}".
go.dump.goroutines.click.button.more=De la lista desplegable, selecciona "{0}".
go.dump.goroutines.dump.tab=La pestaña {0} muestra una lista de goroutines de tu aplicación. Nuestra aplicación tiene varias. Pero tu aplicación real podría tener más que eso. En <ide/>, puedes aplicar un filtro que busque una goroutine específica y estudiar los resultados filtrados.
go.dump.goroutines.filter.goroutines=En el campo de búsqueda {0}, escribe {1} para filtrar la lista. Este filtro deja solo pilas de ejecución con goroutines que tienen {1} en su nombre.
go.dump.goroutines.name=Volcar goroutines
go.dump.goroutines.toggle.breakpoint=En Go, las tareas concurrentes se llaman goroutines. Para crear una goroutine, usas la declaración {0} delante de una llamada a función o método.\nPuedes crear un volcado de todas las goroutines que usa tu programa, aplicar un filtro que busque una goroutine específica y estudiar los resultados filtrados.\nPara volcar goroutines, necesitas iniciar la depuración. Pero primero, necesitas crear un breakpoint. Presiona {1} para alternar un breakpoint.{2}
go.extract.inline.variables.extract.task=Presiona {0} para extraer una variable, elige una expresión de cadena, ingresa un nuevo nombre y presiona {1} para finalizar la refactorización.
go.extract.inline.variables.inline.task=Al contrario que la refactorización {0}, {1} ayuda a eliminar una variable redundante. Presiona {2} para inlinear la variable en su único uso.
go.extract.inline.variables.lesson.name=Extraer e inlinear variables
go.extract.methods.with.returns.complete.refactoring=Escribe {0} y presiona {1}.
go.extract.methods.with.returns.intro=Con la refactorización {0}, puedes tomar un fragmento de código, moverlo a un método separado y reemplazar el código antiguo con una llamada al nuevo método. Si el código sale en la declaración return, se extrae tal cual. Lee más sobre la refactorización {0} en el artículo <a href\="{1}">Extraer funciones y métodos</a>.
go.extract.methods.with.returns.invoke.refactoring=Ve que el cursor está antes de la cláusula {0} que puedes extraer. Presiona {1}.
go.extract.methods.with.returns.lesson.name=Extraer métodos
go.feature.trainer.specify.sdk.to.continue.learning.title=Especificar SDK de Go para continuar aprendiendo
go.feature.trainer.too.old.go.sdk.notification.text=Los tutoriales requieren SDK de Go <b>{1}</b> o posterior para la gestión de dependencias con módulos Go. Tu versión actual del SDK de Go es <b>{0}</b>.
go.feature.trainer.too.old.go.sdk.notification.title=Actualizar SDK de Go a <b>{0}</b> o posterior
go.fmt.lesson.name=Formatear código con go fmt
go.fmt.task=Si prefieres formatear tu código con "{0}", puedes presionar {1} para ejecutarlo.
go.formatting.clear.selection=Para limpiar la selección, presiona {0}.
go.formatting.lesson.name=Formatear código con el formateador incorporado
go.formatting.reformat.selection=<ide/> puede ayudarte con el formato del código. Presiona {0} para reformatear el bloque de código seleccionado.
go.formatting.whole.file=Para reformatear todo el archivo fuente, usa {0} cuando no hay líneas seleccionadas.
go.generics.change.casing=Antes de generar un archivo de prueba, arreglemos nuestro estilo de código. En la documentación oficial de Go, los nombres de los parámetros de tipo están escritos en mayúsculas, el parámetro {0} en nuestro código está en minúsculas.\nPara corregir el caso, podemos usar una corrección rápida. Para hacerlo, presiona {1} y selecciona "{2}".
go.generics.click.function=Haz clic en "{0}", luego en la ventana emergente "{1}", selecciona "{2}".
go.generics.fix.type=El siguiente problema en nuestro código es que el tipo se contiene a sí mismo, obtendrás un error {0}. Para evitar esto, debes incluir un puntero a un tipo, no el tipo en sí. El IDE tiene una corrección rápida para esta situación.\nPresiona {1} y selecciona "{2}".
go.generics.implement.methods.name=Genéricos\: implementar métodos faltantes
go.generics.inspections.change.interface.to.any=Antes de continuar, refactoricemos una cosa más. Usamos una interfaz vacía que puede ser reemplazada con {0}.\nPresiona {1} y selecciona "{2}".
go.generics.inspections.delete.type.parameters=La función {0} tiene corchetes para usar parámetros de tipo pero dentro de estos corchetes vemos una lista de parámetros vacía. Para corregir ese error, presiona {1} y selecciona "{2}".
go.generics.inspections.title=Inspecciones para parámetros de tipo
go.generics.inspections.union.interfaces.with.methods=Según <a href\="{0}">el equipo de Go</a>, no puedes usar interfaces con métodos en una unión. Por lo tanto, {1} no se puede usar como término entre los elementos de la unión.\nElimina el grupo seleccionado que comienza con {1} y termina con la barra vertical y el espacio después de ella.
go.generics.inspections.unused.type.parameter=Los parámetros de tipo están en gris porque no los usamos en ninguna parte de nuestro código. Vamos a corregirlo reemplazando el tipo {0} en la sección de parámetros con {1}.
go.generics.right.click.function=Nos deshicimos de todos los errores en el archivo y podemos intentar generar una prueba para la función {0}.\nHaz clic derecho en la función {0}.
go.generics.running.code.click.link=Ahora haz clic en el enlace resultante para abrir tu código en un navegador.\nPara ejecutar tu código con parámetros de tipo, simplemente haz clic en el botón "{0}".
go.generics.running.code.missing.go118.download.or.local=Puedes intentar encontrar Go {0} usando la lista desplegable si lo has instalado anteriormente. O, haz clic en el botón "{1}" y selecciona si quieres descargar la versión necesaria del SDK ({2}) o navegar a una copia local en tu disco duro ({3}).\nUsando cualquier opción mencionada, selecciona cualquier versión posterior a Go {0}, y haz clic en "{4}" en todos los diálogos para aplicar un nuevo SDK.
go.generics.running.code.missing.go118.downloading=<ide/> ahora descarga y desempaqueta el SDK de Go. Cuando este paso termine, el IDE indexará estos archivos para usarlos en la asistencia de código.
go.generics.running.code.missing.go118.indexing=Ahora <ide/> indexa los archivos del SDK. Por favor, espera hasta que sean procesados. Después estarás listo para usar este SDK de Go.
go.generics.running.code.missing.go118.quickfix=Actualmente, estás usando Go {0}. Para usar genéricos en esta lección, necesitas instalar o cambiar a Go 1.18 o posterior.\nPuedes hacerlo presionando {1} y seleccionando "{2}".
go.generics.running.code.name=Ejecutar tu código
go.generics.running.code.playground=Otra forma de ejecutar tu código es usar "{0}".\nPara probar esta función, presiona {1}. Si aparece el diálogo de confirmación, haz clic en "{2}" para hacer público el archivo. Se mostrará una ventana emergente con un enlace a la página en {0} en la esquina inferior derecha del editor.
go.generics.test.generation.module=Generar pruebas para parámetros de tipo
go.goto.next.error=Para navegar al siguiente error resaltado en el archivo, presiona {0}.
go.goto.next.warning=Para navegar a la siguiente advertencia resaltada en el archivo, presiona {0}.
go.navigation.module.description=Navega por tu base de código
go.navigation.module.name=Navegación
go.onboarding.apply.action=Selecciona la acción "{0}" y presiona {1}.
go.onboarding.apply.intention=Selecciona {0} y presiona {1}.
go.onboarding.balloon.about.debug.panel=La ventana de herramientas "{0}" proporciona una barra de herramientas con varias acciones de depuración. Puedes tomar la lección "{1}" más tarde para probarlas.
go.onboarding.balloon.click.here=Haz clic aquí para establecer un breakpoint
go.onboarding.balloon.open.file=Haz doble clic para abrir {0}
go.onboarding.balloon.open.learn.toolbar=Cambia a la ventana de herramientas "{0}" para continuar esta lección
go.onboarding.balloon.project.directory=Haz doble clic en el directorio del proyecto para expandirlo y ver los archivos
go.onboarding.balloon.project.view=Haz clic para abrir la vista <strong>Proyecto</strong>
go.onboarding.balloon.start.debugging=Haz clic en el icono para iniciar la depuración
go.onboarding.balloon.stop.debugging=Haz clic en el icono para detener la depuración
go.onboarding.case.changed=Se ha cambiado el caso.
go.onboarding.change.ui.settings=Para esta lección, <ide/> cambia algunas configuraciones de UI al estado predeterminado. Tus preferencias se restaurarán cuando completes o salgas de la lección.
go.onboarding.click.run.button=Haz clic en el botón de ejecución resaltado "{0}" para mostrar las opciones de ejecución.
go.onboarding.click.run.button.balloon=Haz clic para mostrar las opciones de ejecución
go.onboarding.close.debug.tool.window=Para cerrar la ventana de herramientas {0}, presiona {1}.
go.onboarding.context.menu=Hay diferentes formas de ejecutar tu código. Una de ellas es con ayuda del botón de ejecución "{0}" cerca de la función {1}.
go.onboarding.epilog=¡Felicitaciones\! Has completado el tour de iniciación. En este punto puedes\:\n- <callback id\="{0}">Cerrar</callback> el proyecto de aprendizaje{1}\n- <callback id\="{2}">Mostrar</callback> más lecciones
go.onboarding.feedback.system.found.sdks=SDKs encontrados\:
go.onboarding.feedback.system.no.sdks=ninguno
go.onboarding.feedback.system.used.sdk=SDK utilizado\:
go.onboarding.indexing.description=Cuando abres un proyecto por primera vez, <ide/> escanea el SDK de Go y el proyecto en sí para recopilar los detalles necesarios para la asistencia de código. Para continuar, espera hasta que se complete la indexación.
go.onboarding.invoke.completion.tip=<strong>Consejo</strong>\: puedes presionar {0} para mostrar elementos de autocompletado en cualquier parte del código.
go.onboarding.invoke.intention.for.code=Las intenciones también ahorran tiempo y facilitan la codificación. Usemos una intención para convertir rápidamente la función {0} en una función exportada. Presiona {1}.
go.onboarding.invoke.intention.for.code.balloon=Presiona {0} para mostrar todas las intenciones disponibles
go.onboarding.invoke.intention.for.warning.1=Acabas de corregir un bug pero puedes hacer que este código se vea aún mejor. <ide/> resalta y añade una bombilla amarilla a las líneas de código que pueden mejorarse.
go.onboarding.invoke.intention.for.warning.2=Presiona {0} para previsualizar las advertencias y aplicar una corrección rápida.
go.onboarding.invoke.intention.for.warning.balloon=Presiona {0} para mostrar todas las correcciones rápidas disponibles
go.onboarding.invoke.search.everywhere.1=Mientras trabajas en <ide/>, es posible que quieras buscar archivos en tu proyecto, símbolos, tipos o incluso acciones del IDE. En esta lección, busquemos la acción {0} para convertir la cadena {1} a minúsculas.
go.onboarding.invoke.search.everywhere.2=Presiona {0} dos veces para abrir el diálogo "{1}".
go.onboarding.lesson.name=Familiarízate con {0}
go.onboarding.module.description=Una breve descripción de las principales características en {0}
go.onboarding.module.name=Tour de iniciación
go.onboarding.project.view.description=La vista <strong>Proyecto</strong> es una de las principales ventanas de herramientas. Contiene el directorio del proyecto, los paquetes específicos del SDK y los archivos scratch. Haz clic en el botón rayado para previsualizar el contenido del proyecto demo. También puedes abrirlo presionando {0}.
go.onboarding.return.to.welcome=\ y volver a la pantalla de bienvenida
go.onboarding.run.sample=Elige "{0}" o prueba "{1}".
go.onboarding.run.widget.balloon=Con este widget, puedes ejecutar acciones comunes para la configuración seleccionada
go.onboarding.search.everywhere.description=Como puedes ver, el texto seleccionado, {0}, se ha copiado automáticamente en la cadena de entrada. Escribamos {1} en lugar de {0}.
go.onboarding.select.fix=Aplica el primer elemento\: {0}. Con esta corrección, los paréntesis innecesarios desaparecen.
go.onboarding.select.item=<ide/> muestra opciones de autocompletado automáticamente mientras escribes. Selecciona el elemento "{0}" usando las flechas del teclado y presiona {1}.
go.onboarding.start.debugging=Haz clic en el icono "{0}" para iniciar el proceso de debugging.
go.onboarding.start.typing=Ahora empieza a escribir {0} para mostrar las opciones de autocompletado.
go.onboarding.start.typing.balloon=Empieza a escribir {0} para mostrar las opciones de autocompletado
go.onboarding.stop.debugging=Vamos a detener la depuración. Haz clic en el icono "{0}".
go.onboarding.temporary.configuration.description=<ide/> acaba de crear una configuración de ejecución temporal. Puedes encontrarla en "{0}". Con este widget, puedes ejecutar acciones comunes para la configuración seleccionada, como ejecutar {1} y depurar {2}. Otras acciones como perfilar {3} y ejecutar con cobertura {4} se pueden mostrar haciendo clic en {5}.
go.onboarding.toggle.breakpoint.1=Puede que notes que en lugar del valor esperado {0}, el método {1} devuelve {2}. Detengámonos en la sentencia return para depurar el código problemático.
go.onboarding.toggle.breakpoint.2=Haz clic en el margen dentro del área resaltada para establecer un breakpoint.
go.onboarding.type.division=Una vez que has descubierto el problema en el código, vamos a arreglarlo. Divide la suma resultante por la longitud de los valores. El script de la lección ya inserta {0}.
go.playground.module.name=Ejecutar código en Go Playground
go.playground.note=<strong>Nota</strong>\: para esta lección, necesitas una conexión al servidor de Go playground.
go.playground.paste.url=En el campo "{0}", pega la URL presionando {1} y haz clic en "{2}".
go.playground.run.code.in.playground=Presiona el botón "{0}" en la barra de herramientas para ejecutar tu código usando el servidor de Go Playground.
go.playground.run.code.locally=Presiona el botón "{0}" en la barra de herramientas para ejecutar tu código en tu computadora.
go.playground.run.copy.link=Puedes importar código desde archivos y enlaces de Go Playground. Copia el enlace seleccionado presionando {0}.
go.playground.select.open.in.playground=Haz clic derecho en el código seleccionado y navega a "{0} | {1}".\n<ide/> importará este código a un archivo scratch.
go.playground.select.run.locally=Vamos a ejecutar este código localmente. Para hacerlo, selecciona la casilla "{0}" en la barra de herramientas.
go.playground.select.url=En el diálogo "{0}", selecciona el botón de radio "{1}".
go.postfix.completion.better.variable.names.in.templates.description=<ide/> puede ayudarte con nombres para variables que se generan con las plantillas postfix {0} y {1}. Por ejemplo, entre estas sugerencias puedes encontrar\: {2} o {3} para índices, o {4} para {5}.\nEscribe {6} y selecciona la plantilla postfix {7} de la lista de autocompletado.
go.postfix.completion.lesson.name=Autocompletado postfix
go.postfix.completion.task=Con las plantillas postfix, puedes transformar una expresión ya escrita en una diferente basándote en un postfix después del punto, el tipo de expresión y su contexto.\nNuestro slice de alfabeto está desordenado. Para ordenar el slice de strings correctamente, podemos aplicar la función {0} del paquete {1} al slice.\nYa hemos escrito la variable que contiene el slice. Sin ir y venir, apliquemos la plantilla postfix {1}. Escribe el punto ({2}) después de la variable {3} para ver la lista de sugerencias de autocompletado postfix. Selecciona {1} de la lista, o escríbelo en el editor, y luego presiona {4} para completar la declaración.
go.press.and.apply.fix=Presiona {0} y selecciona {1}.
go.refactoring.inline.dialog=En el diálogo que se abre, haz clic en "{0}".
go.refactoring.menu.extract.method=Ahora vamos a extraer un método que calcule la distancia entre dos puntos. Presiona {0} y selecciona "{1}" de la lista o presiona {2} para invocar esta acción directamente.
go.refactoring.menu.inline.refactoring=Para hacer inline un método, presiona {0} y selecciona "{1}".
go.refactoring.menu.introduce.parameter.eng=Supongamos que necesitas extraer {0} a una constante. {1} puede hacer exactamente eso. En el menú de refactorización, selecciona "{1}" de la lista y presiona {2}.
go.refactoring.menu.lesson.name=Menú de refactorización
go.refactoring.menu.select.math.sqrt=Selecciona la expresión parpadeante para extraer el método completo en tu código y presiona {0}.
go.refactoring.menu.show.refactoring.list=<ide/> proporciona una variedad de refactorizaciones. Muchas tienen sus propios atajos, pero siempre puedes presionar {0} para listar todas las refactorizaciones disponibles en el contexto actual.
go.refactoring.menu.start.refactoring=Selecciona "{0}" para reemplazar todas las ocurrencias de {1} en tu código.
go.refactorings.module.description=La refactorización te ayuda a mantener tu código sólido, DRY y fácil de mantener
go.refactorings.module.name=Refactorizaciones
go.rename.apply.intention=Ingresa un nuevo nombre para este campo. Por ejemplo, escribe {0}, y luego guarda el resultado presionando {1}.
go.rename.invoke.intentions=Puedes renombrar cualquier cosa colocando el cursor en un símbolo y usando la refactorización {0}. Coloca el cursor en el campo {1} en cualquier parte del código, y luego presiona {2}.
go.rename.lesson.name=Renombrar
go.running.code.context.menu=Hay diferentes formas de ejecutar tu código. Una de ellas es con la ayuda del menú contextual.\nIntenta invocar el menú contextual haciendo clic derecho en un área del editor donde está tu código.
go.running.code.run.sample=Haz clic en "{0}" para ejecutar tu código. La salida de tu aplicación se muestra en la ventana de herramientas "{1}".
go.search.everywhere.goto.type=¡Excelente\! Sin embargo, a veces necesitas encontrar solo tipos o buscar solo en algunos directorios específicos. Usa "{0}" para buscar tipos.
go.search.everywhere.quick.documentation=Presiona {0} para previsualizar la documentación del tipo seleccionado.
go.search.everywhere.type.popup.closed.warning.message=Presiona {0} para abrir la ventana de búsqueda nuevamente.
go.search.everywhere.type.type.name=Supongamos que necesitas encontrar un tipo llamado {0}. Escribe las letras iniciales de las palabras de búsqueda – {1}. No navegues al tipo encontrado todavía.
go.search.everywhere.use.all.places=Se encontró el tipo coincidente en el proyecto de demostración. Sin embargo, puedes encontrar otros tipos que no están incluidos en el proyecto. Cambiemos el filtro "{0}" a "{1}" para mostrar tipos coincidentes del SDK de Go.
go.smart.type.completion.lesson.name=Autocompletado inteligente de tipos
go.smart.type.completion.task=El Autocompletado Inteligente de Tipos filtra la lista de sugerencias para incluir solo aquellos tipos que son aplicables en el contexto actual. Presiona {0} para ver la lista de sugerencias coincidentes. Presiona {1} para elegir la primera.
go.statement.completion.complete.condition=Agrega una condición dentro de los paréntesis {0} y presiona {1} para saltar a la declaración {2}.
go.statement.completion.complete.finish.body=Escribe una línea de código\: {0} y luego presiona {1} para completar la declaración y aplicar el formato.
go.statement.completion.complete.for=Presiona {0} para completar la declaración {1}.
go.statement.completion.complete.if=Escribe {0} y presiona {1} para generar la declaración.
go.statement.completion.help.link=Completado de declaraciones
go.statement.completion.lesson.name=Completado de declaraciones
go.support.for.table.tests.call.context.menu=En <ide/>, puedes ejecutar todas las pruebas en la función o solo algunas de ellas.\nPor ejemplo, haz clic en el icono de ejecución en el margen cerca de la función {0} y selecciona "{1}". Ejecutarás todas las pruebas en esta función.
go.support.for.table.tests.name=Soporte para pruebas de tabla
go.support.for.table.tests.run.subtest=Puedes ejecutar subpruebas individuales usando el mismo enfoque. Haz clic en el icono del margen cerca de la subprueba {0} y selecciona "{1}".\nActualmente, este enfoque tiene varias limitaciones, puedes leer sobre ellas en <a href\="{2}">la documentación de GoLand</a>.
go.support.fuzz.testing.check.failing=¡Ups, la prueba de fuzzing ha fallado\! Para encontrar la razón, desplázate hacia abajo en la salida en la ventana de herramientas "{0}" y haz clic en el enlace que lleva al directorio {1}.
go.support.fuzz.testing.run=Las pruebas de fuzzing son una forma de automatizar tus pruebas mediante el envío continuo de varias entradas. Ejecutemos nuestra prueba de fuzzing para verificar nuestra función contra varios datos generados.\nPara ejecutar las pruebas de fuzzing, haz clic en el icono parpadeante en el margen y selecciona "{0}".
go.support.fuzz.testing.title=Pruebas de fuzzing
go.to.internal.directory=A partir de {0} 2021.2, puedes navegar a interfaces almacenadas en la carpeta {1}.\nPresiona {2} para ir a la implementación de la interfaz {3}.
go.to.internal.directory.hover.over.tab=Por cierto, para ver la ubicación del archivo, puedes colocar el puntero del mouse sobre la pestaña en el editor. Por ejemplo, coloca el puntero sobre la pestaña "{0}".
go.to.internal.directory.name=Navegación y formato de código
go.to.internal.directory.reformat.gofmt.on.save=El archivo {0} necesita reformateo de código. Presiona {1} para reformatear el archivo.\nAdemás, por defecto, <ide/> ejecuta la herramienta {2} después del formateador incorporado de <ide/>. Esta configuración se configura mediante la opción "{3}" en la pestaña "{4}" en {5}.
go.type.parameters.description=Características que pueden ayudarte a trabajar con genéricos
go.type.parameters.module.name=Genéricos (parámetros de tipo)
go.view.hierarchies.choose.any.implementation=Elige cualquier implementación y presiona {0} o haz clic en ella.
go.view.hierarchies.goto.implementation=Presiona {0} para buscar implementaciones de {1}.
go.view.hierarchies.hide.find.tool.window=Presiona {0} para ocultar la ventana de herramientas "{1}".
go.view.hierarchies.hide.method.hierarchy=Ocultemos "{0}" también, presiona {1} nuevamente.
go.view.hierarchies.invoke.implementations.again=La declaración del método base tiene su propio icono de margen {0}. Haz clic en él o presiona {1} nuevamente.
go.view.hierarchies.lesson.name=Ver jerarquías
go.view.hierarchies.navigate.to.base=Puedes navegar al método base desde el derivado. Presiona {0} o haz clic en el icono "{1}" en el margen del editor.
go.view.hierarchies.open.in.find.tool.window=Para jerarquías grandes, es posible que desees buscar implementaciones en la ventana de herramientas "{0}". Haz clic en "{1}".
go.view.hierarchies.open.method.hierarchy=Es posible que desees explorar toda la jerarquía para este método. Presiona {0}.
go.view.hierarchies.open.type.hierarchy=Para ver subtipos, presiona {0}.
go.what.s.new.module.description=Echa un vistazo a algunas mejoras principales de GoLand 2024.2
go.what.s.new.module.name=Aspectos destacados de GoLand 2024.2
go.working.with.json.add.key.to.tags=Para agregar etiquetas XML y ASN1, también puedes usar una acción de intención.\nPresiona {0} para volver a llamar a las acciones de intención, luego selecciona "{1}" y escribe {2}.
go.working.with.json.change.style=Puedes aplicar un estilo de código diferente para los nombres de campos en las etiquetas. Por ejemplo, cambiarlo a camelCase.\nPresiona {0}, haz clic en "{1}" y luego selecciona "{2}".
go.working.with.json.copy=<ide/> tiene varias herramientas que pueden ayudarte a manejar el código JSON de manera más efectiva.\nPresiona {0} para copiar el JSON seleccionado.
go.working.with.json.introduce.type=Vamos a extraer el struct embebido {0}.\nPresiona {1} y selecciona "{2}".
go.working.with.json.name=Trabajar con JSON
go.working.with.json.name.struct=Si lo necesitas, cambia el nombre del struct y presiona {0} para finalizar la edición. El IDE corregirá automáticamente el formato.
go.working.with.json.replace=Presiona {0} para reemplazar la sección de comentarios.\n<ide/> convertirá automáticamente la parte copiada del JSON a un tipo struct.
go.working.with.json.update.value.in.tags=Lo mismo aplica para la actualización por lotes de valores de etiquetas. Supongamos que queremos agregar {0} a cada etiqueta en el struct actual.\nPresiona {1}, selecciona "{2}" y escribe {3}.\nAlternativamente, puedes seleccionar {0} de la lista de sugerencias. <ide/> conoce los valores más populares para etiquetas JSON, XML y ASN1.
go.working.with.parameters.invoke.intentions.1=El cursor está en el primer parámetro del método {0}. Presiona {1} para invocar las acciones de intención.
go.working.with.parameters.invoke.intentions.2=Observa el método {0} en el editor. El cursor está en el primer parámetro. Presiona {1} para invocar las acciones de intención.
go.working.with.parameters.invoke.intentions.3=Si los parámetros son necesarios para que un método implemente una interfaz, no es seguro eliminarlos. Presiona {0} para ver una lista de opciones posibles.
go.working.with.parameters.lesson.name=Acciones contextuales
go.working.with.parameters.press.action.again=Ahora presiona {0} nuevamente.
go.working.with.parameters.remove.parameters=<ide/> solo resalta los nombres de parámetros no utilizados si sus tipos se usan para implementar una especificación de método. En este caso, puedes renombrar este parámetro a {0} o eliminar su nombre por completo.
go.working.with.parameters.signature.combined=Observa cómo se combinaron los tipos de la firma.
go.working.with.parameters.signature.expanded=Para devolver la firma a su estado inicial, selecciona "{0}".
go.working.with.parameters.single.type=Si tienes múltiples parámetros de un solo tipo en la firma de una función o método, puedes usar una especificación de tipo corta para estos parámetros ({0}) o tener una especificación de tipo separada para cada parámetro ({1}).
go.working.with.parameters.that.are.not.used=<ide/> puede detectar parámetros en la firma que no se usan en el cuerpo de un método o función. Como no se usan, puedes eliminarlos usando la corrección rápida "{0}".
toggle.case.part=mayúsculas/minúsculas