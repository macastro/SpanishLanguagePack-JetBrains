git.annotate.add.shortcut.tip=<strong>Consejo</strong>: puedes asignar un atajo a la acción {0}. Haz clic en este enlace {1} y elige {2}.
git.annotate.choose.annotate=Selecciona la opción {0} para ver el historial de este archivo.
git.annotate.choose.show.diff=Selecciona la opción {0} para mostrar lo que ha cambiado en este commit.
git.annotate.click.annotation=Haga clic en la anotación resaltada para previsualizar información sobre esta confirmación.
git.annotate.click.annotation.tooltip=Haga clic derecho a la anotación
git.annotate.click.gutter.balloon=Clic derecho sobre el canalón
git.annotate.close.all.windows=Ahora cierra {0,choice,0#todas las ventanas abiertas|1#todas las pestañas abiertas del editor } para volver al editor. Pulsa {1} dos veces.
git.annotate.close.annotations=Ahora puedes cerrar las anotaciones.
git.annotate.close.by.shortcut=Presiona {0}.
git.annotate.close.changes=En lo que vemos el mensaje de confirmación destacado, este valor extraño de {0} no es un error. Por lo tanto, después del largo viaje por el historial de este archivo, puede cerrar la ventana de la herramienta abierta. Presione {1}.
git.annotate.feature.explanation=La acción {0} provee fácil acceso al último commit que modificó una línea específica del archivo. Puedes ver que {1} es quién modificó esta línea por última vez. Clic derecho en la anotación resaltada para abrir el menú contextual.
git.annotate.found.needed.commit=¡Genial! Hemos encontrado el lugar donde el valor {0} ha cambiado. Así que vamos a anotarlo por última vez para investigar el motivo de ese cambio.
git.annotate.go.deeper=Puede observar que el valor de {0} apareció antes de este commit. ¡Vamos a profundizar en el historial!
git.annotate.help.link=Localizar autor de código (Anotar con Git Blame)
git.annotate.introduction=Mira la propiedad resaltada. El valor de la propiedad implica que un gato tiene cuatro orejas. El motivo de este cambio es intrigante. Podemos investigar el historial del archivo usando la función {0}.
git.annotate.invoke.manually=Haz clic derecho en el área resaltada y selecciona {0} del menú.
git.annotate.invoke.manually.2=Clic derecho sobre el área resaltada y selecciona la opción {0} del menú.
git.annotate.invoke.shortcut.1=Presiona {0} para mostrar el historial de este archivo.
git.annotate.invoke.shortcut.2=Mueve el caret al editor izquierdo y presiona {0} nuevamente.
git.annotate.invoke.shortcut.3=Mueve el cursor al editor de la derecha y presiona {0}.
git.annotate.lesson.name=Anotar con Git Blame
git.annotate.open.context.menu=Click con el botón derecho en el margen de notas de la izquierda para abrir el menú contextual.
git.annotate.show.diff=Haz clic derecho en la anotación resaltada para abrir el menú contextual y selecciona {0}
git.changelists.shelf.choose.new.changelist=Haz clic en "{0}" y selecciona el elemento de menú "{1}".
git.changelists.shelf.click.changelist.tooltip=Clic derecho en la lista de cambios {0}
git.changelists.shelf.click.line.marker.balloon=Haga clic en el marcador de línea
git.changelists.shelf.congratulations=¡Felicitaciones! Ahora ya sabes cómo utilizar listas de cambios y guardar cambios.
git.changelists.shelf.create.changelist=Nombre para la nueva lista de cambios {0}. Presiona {1} o haz clic en {2} para crear una nueva lista de cambios.
git.changelists.shelf.explanation=También puedes usar la función {0} para guardar estos cambios en un archivo de tu computadora. Los cambios guardados en {0} pueden aplicarse más tarde a cualquier rama. Es útil para evitar perder estos cambios.
git.changelists.shelf.help.link=Usa Git para trabajar en múltiples características simultáneamente
git.changelists.shelf.introduction=Supongamos que no quieres enviar determinados cambios. Por ejemplo, algunos comentarios no son para hacerlos públicos. Puedes mover un comentario a una nueva lista de cambios, de modo que no se envíe accidentalmente. Haz clic en el marcador de línea resaltado para abrir el menú contextual.
git.changelists.shelf.lesson.name=Changests y estanterías
git.changelists.shelf.open.commit.window=Ahora vamos a inspeccionar la lista de cambios creada.
git.changelists.shelf.open.context.menu=Vamos a poner en espera los cambios. Haz clic derecho sobre la lista de cambios resaltada para abrir su menú contextual.
git.changelists.shelf.open.shelf.dialog=Seleccionar {0} para abrir el diálogo {1}.
git.changelists.shelf.open.unshelve.dialog=Cuando tus cambios estén almacenados en {0}, puedes volver a aplicarlos. Selecciona la lista de cambios resaltada y pulsa {1} para abrir el diálogo <strong>Unshelve</strong>.
git.changelists.shelf.performed.explanation=Puedes observar que la lista de cambios se guardó exitosamente en {0} y el comentario ha desaparecido.
git.changelists.shelf.performed.got.it=Puedes notar que la lista de cambios se ha guardado exitosamente en {0}
git.changelists.shelf.remove.changelist=Esta lista de cambios ya no es necesaria: haz clic en {0} para descartarla.
git.changelists.shelf.shelve.changelist=Ahora puedes editar el mensaje o dejarlo intacto. Haz clic en {0} para almacenar los cambios en {1}.
git.changelists.shelf.unshelve.changelist=Ahora puede editar el nombre de la lista de cambios para incluir los cambios de restauración o dejarlo como está. Pulse {0} para aplicar los cambios.
git.click.balloon=Haz clic en {0}
git.click.to.change.settings=O bien, <callback id="{0}">haga clic</callback> para cambiar la configuración.
git.click.to.open=Haz clic para abrir el {0}
git.commit.amend.commit=Presione el botón {0} para editar la última confirmación.
git.commit.amend.commit.balloon=Haz clic para editar finalmente el último commit
git.commit.analyze.code.explanation=Utiliza {0} para recibir notificaciones sobre las advertencias y errores que se encuentren en los archivos a confirmar. En esta lección, puedes mantener esta opción intacta.
git.commit.choose.files=La ventana de herramientas {0} ayuda a personalizar las confirmaciones de diferentes maneras. Digamos que deseas que {1} forme parte de la confirmación. Haz clic en la casilla de verificación para incluirlo.
git.commit.choose.files.balloon=Selecciona el archivo resaltado para incluirlo en el commit
git.commit.close.commit.options=Una vez se hayan seleccionado las opciones necesarias, cerrar el popup de opciones de commit. Presionar {0}.
git.commit.committed.file.explanation=El panel derecho de la ventana de herramientas {0} muestra el archivo modificado por el último commit.
git.commit.committed.file.got.it=Aquí se muestra el archivo modificado por el último commit
git.commit.enable.reformat.code=Selecciona {0} para arreglar automáticamente el formato antes de aplicar el commit.
git.commit.help.link=Confirmar y enviar cambios al repositorio de Git
git.commit.lesson.name=Confirmar
git.commit.open.before.commit.options=Ahora, edite las opciones de confirmación. Presione {0} para abrir el popup de opciones de Git.
git.commit.open.commit.window=Supongamos que ha modificado algunos archivos en el proyecto y quiere confirmarlos en la rama actual.
git.commit.open.git.window=¡Genial! Pulsa {0} o haz clic en el botón de bandas {1} para abrir la ventana de herramientas {2} y descubre tus confirmaciones en el árbol.
git.commit.open.options.tooltip=Clica para abrir las opciones de {0}
git.commit.perform.commit=Ahora edita el mensaje de commit o déjalo como se propuso. Luego haz clic en el botón {0} para realizar commit.
git.commit.select.amend.checkbox=¿Y si se le olvidó agregar algunos cambios al último commit realizado? La mejor manera es usar la función {0} para editar el último commit. Presione {1} o seleccione la casilla de verificación {0} en la ventana de herramientas {2}.
git.commit.select.amend.checkbox.balloon=Selecciona {0} para comenzar a editar el último commit
git.commit.select.file=Selecciona el archivo resaltado para agregarlo al commit.
git.commit.select.file.balloon=Selecciona el archivo para agregarlo al commit
git.commit.select.top.commit=Selecciona el commit superior en el árbol para ver más detalles al respecto.
git.commit.select.top.commit.again=Vuelve a seleccionar el commit superior en la ventana de herramientas {0} para ver información sobre el commit modificado.
git.commit.select.top.commit.again.balloon=Selecciona de nuevo el primer commit para previsualizar los cambios
git.commit.select.top.commit.balloon=Selecciona el commit para ver más detalles
git.commit.two.committed.files.explanation=Puedes ver que el commit objetivo contiene dos archivos modificados.
git.feature.branch.checkout.and.rebase=Selecciona la rama {0} y elige {1}.
git.feature.branch.checkout.branch=Selecciona la rama {0} y selecciona {1} en el menú.
git.feature.branch.choose.force.push=No puedes simplemente enviar los cambios, ya que la rama remota {0} entra en conflicto con la rama local actualizada. Utiliza {1}. Pulsa la flecha resaltada cerca del botón {2} para abrir la lista y selecciona {1}.
git.feature.branch.confirm.force.push=Haz clic nuevamente en {0} para confirmar la acción
git.feature.branch.confirm.update=Haga clic en {0} para confirmar la actualización.
git.feature.branch.force.push.tip=<strong>Consejo</strong>: no uses {0} si no eres el único usuario de la rama. Puede causar la pérdida de commits de tus compañeros.
git.feature.branch.help.link=Administrar ramas Git
git.feature.branch.introduction.1=Supongamos que ha terminado el trabajo en su rama {0} y ha enviado los cambios al remoto para fusionarlos con la rama {1} más tarde. Presione {2} para abrir la ventana de herramientas {3} y previsualizar el historial del proyecto.
git.feature.branch.introduction.2=Pero mientras trabajabas en tu feature, es posible que algunos de tus colegas también enviaran sus cambios a la rama {0}.
git.feature.branch.introduction.check=Revisemos que los posibles cambios en {0} no entren en conflicto con tus cambios.
git.feature.branch.introduction.got.it=Estos son los nuevos commits en tu rama {0}
git.feature.branch.lesson.name=Flujo de trabajo de rama de características
git.feature.branch.new.commits.explanation=Puedes notar algunos cambios en la rama {0}.
git.feature.branch.new.commits.got.it=Hay un nuevo commit en la rama {0}
git.feature.branch.open.branches.popup.1=Primero, desmarca la sucursal {0}. Pulsa {1} o haz clic en el área resaltada para abrir {2}.
git.feature.branch.open.branches.popup.2=Por lo tanto, debes posicionar tus commits después del nuevo commit en la rama {0}. Puedes realizarlo utilizando la funcionalidad {1}. Pulsa {2} o haz click en el área resaltada para abrir de nuevo {3}.
git.feature.branch.open.push.dialog=Cuando se actualiza la rama {0} se debe actualizar también en el repositorio remoto. Presiona {1} para abrir el diálogo {2}.
git.feature.branch.open.update.dialog=Ahora actualiza la rama {0} para tener en cuenta los posibles cambios del repositorio remoto. Pulsa {1} para abrir el diálogo {2}.
git.interactive.rebase.apply.reword=Por defecto, los mensajes de todos los commits reducidos se incluyen en el mensaje resultante. Sin embargo, en esta lección, reemplázalo con algo como {0}. Edita el mensaje si lo deseas y presiona {1} para aplicar la nueva redacción.
git.interactive.rebase.choose.interactive.rebase=Seleccione {0} de la lista.
git.interactive.rebase.click.commit.tooltip=Click derecho en el commit resaltado
git.interactive.rebase.congratulations=Felicitaciones, ¡has limpiado el historial del proyecto!
git.interactive.rebase.help.link=Edita el historial del proyecto mediante una rebase interactiva
git.interactive.rebase.introduction=Mirando la secuencia resaltada de confirmación es difícil ver qué ha cambiado en general. Sería más fácil si pudieras reordenar o comprimir algunas confirmaciones.
git.interactive.rebase.invoke.fixup=Presiona {0} o da clic al botón resaltado y selecciona {1} de la lista para agregar los cambios desde este commit al commit superior.
git.interactive.rebase.invoke.squash=Presione {0} o haga clic en el botón {1} para unir los commits.
git.interactive.rebase.lesson.name=Rebase interactivo
git.interactive.rebase.move.commit=Y ahora mueve este commit hacia el área resaltada. Arrastra y suelta el commit o presiona {0} tres veces.
git.interactive.rebase.open.context.menu=Usa <strong>Rebase interactivo</strong> para resolver esta tarea. Haz clic derecho en el commit resaltado para abrir el menú contextual.
git.interactive.rebase.open.git.window=Supón que ya has realizado algunas correcciones en tu proyecto. Pulsa {0} para abrir el visor de herramientas de {1} y previsualizar el historial del proyecto.
git.interactive.rebase.select.one.commit=Parece que el commit resaltado corrige algo en el commit superior de la lista. Sería genial combinar estos dos commits en uno. Selecciona el commit resaltado.
git.interactive.rebase.select.three.commits=¡Genial! Parece que los tres commits resaltados son parecidos. Puedes combinarlos en uno y editar el mensaje resultante. Selecciona los commits resaltados pulsándolos mientras presionas {0}.
git.interactive.rebase.start.rebasing=Finalmente, pulsa {0}.
git.module.description=Aprende a usar la integración de Git en el IDE
git.module.name=Git
git.not.use.staging.area.warning=Debes desactivar el <strong>Area de preparación</strong> para completar esta lección. Presiona {0}, dirígete a {1} <strong>→</strong> {2}, y desmarca {3}.
git.open.tool.window=Oprime {0} o haz click en el botón de rayas {1} para abrir la ventana de herramientas {2}.
git.open.tool.window.balloon=Click para abrir la ventana de la herramienta {0}
git.project.history.apply.branch.filter=Todas las ramas de su repositorio se muestran en el panel izquierdo de la ventana de herramientas. {0,choice,0#Haga clic|1#Haga doble clic} en la rama <strong>HEAD</strong> para mostrar confirmaciones solo de la rama activa.
git.project.history.apply.message.filter=El campo de búsqueda resaltado puede ayudarle a encontrar confirmaciones por su mensaje o hash. Supongamos que desea encontrar una confirmación por una parte de su mensaje. Por ejemplo, escriba {0} en el campo resaltado y pulse {1}.
git.project.history.apply.user.filter=Puedes usar muchos filtros que te ayuden a descubrir commits. Por ejemplo, puedes previsualizar los commits de un autor específico. Haz clic en el filtro resaltado para abrir la lista de usuarios.
git.project.history.click.changed.file=También hay un árbol con todos los archivos modificados en este commit. Haga doble clic en el archivo resaltado para previsualizar sus cambios.
git.project.history.click.changed.file.popup=Haga doble clic en el archivo resaltado para obtener una vista previa de los cambios.
git.project.history.click.filter.tooltip=Haga clic para abrir la lista de usuarios
git.project.history.click.head.tooltip={0,choice,0#Haz clic|1#Haz doble clic} en <strong>HEAD</strong> para mostrar solo los commit de la rama activa
git.project.history.close.diff=Cierra la ventana de comparación después de revisas los cambios. Presiona {0}.
git.project.history.commit.details.explanation=El panel derecho de la ventana de herramientas muestra información sobre el commit seleccionado: algunos metadatos y las ramas que contienen este commit.
git.project.history.commit.details.got.it=Aquí se muestra los metadatos detallados del commit y las ramas que lo contienen
git.project.history.commits.tree.explanation=El árbol de commits se encuentra en el centro de la ventana de herramientas. Podemos ver que el último commit de nuestra rama activa está resaltada. Nótese que todos los commits debajo del resaltado también son de esta rama, y están coloreados de forma diferente. El resto de los commits se encuentran en otras ramas.
git.project.history.commits.tree.got.it=Este es el último commit de tu rama activa
git.project.history.invitation.to.commit.lesson=¡Genial! Vamos a descubrir cómo crear commits en la siguiente lección.
git.project.history.lesson.name=Historial del proyecto
git.project.history.open.git.window=Presiona {0} o haz click en el botón {1} para abrir la ventana de herramientas {2} y previsualizar en una línea de tiempo visual todos los commits ejecutados.
git.project.history.select.commit=Selecciona el commit resaltado para obtener información sobre él.
git.project.history.select.me=Selecciona {0} de la lista para mostrar sólo tus confirmaciones.
git.quick.start.choose.new.branch.item=Selecciona {0} de la lista.
git.quick.start.clone.dialog.got.it.1=Puede clonar el repositorio en el directorio especificado usando la URL del repositorio
git.quick.start.clone.dialog.got.it.2=También, puedes iniciar sesión directamente a populares servicios de alojamiento y luego explorar y clonar repositorios desde allí
git.quick.start.close.clone.dialog=Sin embargo, para este curso existe un repositorio sandbox ya preparado. El cuadro de diálogo puede cerrarse.
git.quick.start.commit.window.select.file=Aquí puedes seleccionar los archivos para el commit. Haz clic en la casilla de verificación para añadir el archivo a la confirmación.
git.quick.start.find.action=Puedes clonar un repositorio Git existente utilizando la acción {0}. Pulsa {1} dos veces para abrir el popup {2}.
git.quick.start.help.link=Configura un depósito Git
git.quick.start.introduction=En esta lección, aprenderás a clonar un proyecto existente y a realizar flujos de trabajo básicos de control de versiones utilizando las funciones de IDE de la integración de Git.
git.quick.start.lesson.name=Inicio rápido
git.quick.start.modify.file=En la nueva rama, se pueden modificar los archivos y el IDE detectará los cambios. Por ejemplo, se puede modificar el color de los ojos del gato en el archivo abierto. Reemplazar `{0}` por otro color.
git.quick.start.name.new.branch=Introduce cualquier nombre para la nueva rama, después presiona {0} o clic en {1}
git.quick.start.open.commit.window=Ahora puede confirmar el archivo cambiado.
git.quick.start.open.push.dialog=Después de realizar un commit puedes pujarlo al repositorio remoto. Presiona {0} para abrir el dialogo de {1}.
git.quick.start.open.vcs.widget=En primer lugar, pulsa {0} o haz clic en la zona resaltada para abrir el {1}.
git.quick.start.perform.commit=En el área resaltada escribe un mensaje de confirmación. Por ejemplo, puede ser {0}. Luego, haz clic en {1}
git.quick.start.perform.push=Ahora haz clic en {0}. Tu confirmación se enviará al repositorio creado en tu máquina para fines tutoriales.
git.quick.start.type.clone=Escribe {0} en el campo de búsqueda y elige la opción resaltada.
git.quick.start.workflow.explanation=¡Genial! Ahora, investiguemos cómo realizar algunos flujos de trabajo básicos de Git utilizando su integración con el IDE. Por ejemplo, pueden ser: <strong>extraer nueva rama → realizar cambios y confirmación → insertar</strong>.
git.use.non.modal.commit.ui.warning=Es necesario habilitar la interfaz de confirmación no modal para completar esta lección. Pulse {0}, vaya a {1} <strong>→</strong> {2} y seleccione {3}.
git.window.closed.warning=Pulsa {0} para abrir de nuevo la ventana de herramientas {1}.