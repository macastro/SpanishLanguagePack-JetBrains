git.annotate.add.shortcut.tip=<strong>Consejo</strong>\: puedes asignar un atajo a la acción {0}. Haz clic en este enlace {1} y elige {2}.
git.annotate.choose.annotate=Selecciona la opción {0} para mostrar el historial de este archivo.
git.annotate.choose.show.diff=Selecciona la opción {0} para mostrar qué se cambió en este commit.
git.annotate.click.annotation=Haz clic en la anotación resaltada para previsualizar información sobre este commit.
git.annotate.click.annotation.tooltip=Haz clic derecho en la anotación
git.annotate.click.gutter.balloon=Haz clic derecho en el margen
git.annotate.close.all.windows=Ahora cierra {0,choice,0\#todas las ventanas abiertas|1\#todas las pestañas de editor abiertas} para volver al editor. Presiona {1} dos veces.
git.annotate.close.annotations=Ahora puedes cerrar las anotaciones.
git.annotate.close.by.shortcut=Presiona {0}.
git.annotate.close.changes=Por lo que vemos en el mensaje de commit resaltado, este valor extraño de {0} no es un error. Entonces, después del largo viaje a través del historial de este archivo, puedes cerrar la ventana de herramientas abierta. Presiona {1}.
git.annotate.feature.explanation=La acción {0} proporciona fácil acceso al último commit que modificó cualquier línea específica del archivo. Puedes ver que {1} fue el último que modificó esta línea. Haz clic derecho en la anotación resaltada para abrir el menú contextual.
git.annotate.found.needed.commit=¡Excelente\! Hemos encontrado el lugar donde se cambió el valor {0}. Así que vamos a anotarlo por última vez para investigar la razón de ese cambio.
git.annotate.go.deeper=Puedes notar que el valor de {0} apareció antes de este commit. ¡Así que vamos más profundo en la historia\!
git.annotate.help.link=Localizar autor del código (Anotar con Git Blame)
git.annotate.introduction=Mira la propiedad resaltada. El valor de la propiedad implica que un gato tiene cuatro orejas. La razón de este cambio es intrigante. Podemos investigar el historial del archivo usando la función {0}.
git.annotate.invoke.manually=Haz clic derecho en el área resaltada y selecciona {0} del menú.
git.annotate.invoke.manually.2=Haz clic derecho en el área resaltada y selecciona la opción {0} del menú.
git.annotate.invoke.shortcut.1=Presiona {0} para mostrar el historial de este archivo.
git.annotate.invoke.shortcut.2=Mueve el cursor al editor izquierdo y presiona {0} nuevamente.
git.annotate.invoke.shortcut.3=Mueve el cursor al editor derecho y presiona {0}.
git.annotate.lesson.name=Anotar con Git Blame
git.annotate.open.context.menu=Haz clic derecho en el margen izquierdo resaltado para abrir el menú contextual.
git.annotate.show.diff=Haz clic derecho en la anotación resaltada para abrir el menú contextual y elige {0}.
git.changelists.shelf.choose.new.changelist=Haz clic en el icono resaltado y selecciona el elemento de menú {0}.
git.changelists.shelf.click.changelist.tooltip=Haz clic derecho en la changelist {0}
git.changelists.shelf.click.line.marker.balloon=Haz clic en el marcador de línea
git.changelists.shelf.congratulations=¡Felicitaciones\! Ahora sabes cómo gestionar changelists y shelve tus cambios.
git.changelists.shelf.create.changelist=Nombra la nueva changelist {0}. Presiona {1} o haz clic en {2} para crear una nueva changelist.
git.changelists.shelf.explanation=Además, puedes usar la función {0} para guardar estos cambios en un archivo en tu computadora. Los cambios almacenados en el {0} se pueden aplicar más tarde a cualquier rama. Esto te ayuda a evitar perder estos cambios.
git.changelists.shelf.help.link=Usar Git para trabajar en varias funciones simultáneamente
git.changelists.shelf.introduction=Supongamos que no quieres hacer commit de algunos cambios. Por ejemplo, algunos comentarios están destinados a ser solo locales. Puedes mover un comentario a una nueva changelist, para que no se haga commit accidentalmente. Haz clic en el marcador de línea resaltado para abrir el menú contextual.
git.changelists.shelf.lesson.name=Listas de cambios y elementos pendientes
git.changelists.shelf.open.commit.window=Ahora vamos a inspeccionar la changelist creada.
git.changelists.shelf.open.context.menu=Vamos a poner en espera los cambios. Haz clic derecho sobre la lista de cambios resaltada para abrir su menú contextual.
git.changelists.shelf.open.shelf.dialog=Selecciona {0} para abrir el diálogo {1}.
git.changelists.shelf.open.unshelve.dialog=Cuando tus cambios están almacenados en {0}, puedes aplicarlos nuevamente. Selecciona la changelist resaltada y presiona {1} para abrir el diálogo <strong>Unshelve</strong>.
git.changelists.shelf.performed.explanation=Puedes notar que la changelist se guardó exitosamente en {0} y el comentario ha desaparecido.
git.changelists.shelf.performed.got.it=Puedes notar que la changelist se guardó exitosamente en {0}
git.changelists.shelf.remove.changelist=Ya no necesitas esta changelist\: haz clic en {0} para descartarla.
git.changelists.shelf.shelve.changelist=Ahora puedes editar el mensaje o dejarlo intacto. Haz clic en {0} para almacenar los cambios en {1}.
git.changelists.shelf.unshelve.changelist=Ahora puedes editar el nombre de la changelist para poner los cambios unshelve o dejarlo como está. Haz clic en {0} para aplicar los cambios.
git.click.balloon=Haz clic en {0}
git.click.to.change.settings=Alternativamente, <callback id\="{0}">haz clic</callback> para cambiar la configuración.
git.click.to.open=Haz clic para abrir {0}
git.commit.amend.commit=Haz clic en el botón {0} para editar el último commit.
git.commit.amend.commit.balloon=Haz clic para finalmente editar el último commit
git.commit.analyze.code.explanation=Usa {0} para recibir notificaciones de advertencias y errores encontrados en los archivos a commitear. En esta lección, puedes mantener esta opción intacta.
git.commit.choose.files=La ventana de herramientas {0} ayuda a personalizar tus commits de diferentes maneras. Digamos que quieres que {1} sea parte del commit. Marca la casilla para incluirlo.
git.commit.choose.files.balloon=Selecciona el archivo resaltado para incluirlo en el commit
git.commit.close.commit.options=Cuando las opciones requeridas estén seleccionadas, cierra el popup de opciones de commit. Presiona {0}.
git.commit.committed.file.explanation=El panel derecho de la ventana de herramientas {0} muestra el archivo modificado por el último commit.
git.commit.committed.file.got.it=El archivo modificado por el último commit se muestra aquí
git.commit.enable.reformat.code=Selecciona {0} para corregir automáticamente el formato antes de aplicar el commit.
git.commit.help.link=Hacer commit y push de cambios al repositorio Git
git.commit.lesson.name=Confirmar
git.commit.open.before.commit.options=Ahora edita las opciones de commit. Presiona {0} para abrir el popup de Opciones de Git.
git.commit.open.commit.window=Supongamos que has modificado algunos archivos en el proyecto y quieres hacer commit de ellos a la rama actual.
git.commit.open.git.window=¡Excelente\! Presiona {0} o haz clic en el botón de franja {1} para abrir la ventana de herramientas {2} y descubrir tu commit en el árbol.
git.commit.open.options.tooltip=Haz clic para abrir las opciones de {0}
git.commit.perform.commit=Ahora edita el mensaje del commit o déjalo como está propuesto. Luego haz clic en el botón {0} para realizar el commit.
git.commit.select.amend.checkbox=¿Qué pasa si olvidaste agregar algunos cambios al último commit realizado? La mejor manera es usar la función {0} para editar el último commit. Presiona {1} o selecciona la casilla {0} en la ventana de herramientas {2}.
git.commit.select.amend.checkbox.balloon=Selecciona la casilla {0} para comenzar a editar el último commit
git.commit.select.file=Selecciona el archivo resaltado para agregarlo al commit.
git.commit.select.file.balloon=Selecciona el archivo para agregarlo al commit
git.commit.select.top.commit=Selecciona el commit superior en el árbol para ver más detalles sobre él.
git.commit.select.top.commit.again=Selecciona nuevamente el commit superior en la ventana de herramientas {0} para ver información sobre el commit modificado.
git.commit.select.top.commit.again.balloon=Selecciona nuevamente el commit superior para previsualizar los cambios
git.commit.select.top.commit.balloon=Selecciona el commit para ver más detalles sobre él.
git.commit.two.committed.files.explanation=Ahora puedes ver que el commit objetivo contiene dos archivos modificados.
git.feature.branch.checkout.and.rebase=Elige la rama {0} y selecciona {1}.
git.feature.branch.checkout.branch=Elige la rama {0} y selecciona {1} del menú.
git.feature.branch.choose.force.push=No puedes simplemente hacer push de los cambios, porque la rama remota {0} tiene conflictos con la rama local actualizada. Usa {1}. Presiona la flecha resaltada cerca del botón {2} para abrir la lista y selecciona {1}.
git.feature.branch.confirm.force.push=Haz clic en {0} nuevamente para confirmar la acción.
git.feature.branch.confirm.update=Haz clic en {0} para confirmar la actualización.
git.feature.branch.force.push.tip=<strong>Consejo</strong>\: no uses {0} si no eres el único usuario de la rama. Puede causar la pérdida de los commits de tus colegas.
git.feature.branch.help.link=Gestionar ramas Git
git.feature.branch.introduction.1=Supongamos que has terminado el trabajo en tu rama {0} y has hecho push de los cambios al remoto para fusionarla después con la rama {1}. Presiona {2} para abrir la ventana de herramientas {3} y previsualizar el historial del proyecto.
git.feature.branch.introduction.2=Pero mientras trabajabas en tu funcionalidad, algunos de tus colegas también pueden haber hecho push de sus cambios a la rama {0}.
git.feature.branch.introduction.check=Verifiquemos que los posibles cambios en {0} no entren en conflicto con tus cambios.
git.feature.branch.introduction.got.it=Estos son los nuevos commits de tu rama {0}.
git.feature.branch.lesson.name=Flujo de trabajo de rama de funcionalidad
git.feature.branch.new.commits.explanation=Puedes notar algunos cambios en la rama {0}.
git.feature.branch.new.commits.got.it=Hay un nuevo commit en la rama {0}
git.feature.branch.open.branches.popup.1=Primero, haz checkout de la rama {0}. Presiona {1} o haz clic en el área resaltada para abrir el {2}.
git.feature.branch.open.branches.popup.2=Entonces, debes colocar tus commits después del nuevo commit de la rama {0}. Puedes realizarlo usando la función {1}. Presiona {2} o haz clic en el área resaltada para abrir el {3} nuevamente.
git.feature.branch.open.push.dialog=Cuando la rama {0} esté actualizada, también debes actualizarla en el repositorio remoto. Presiona {1} para abrir el diálogo {2}.
git.feature.branch.open.update.dialog=Ahora actualiza la rama {0} para estar al tanto de los posibles cambios del repositorio remoto. Presiona {1} para abrir el diálogo {2}.
git.interactive.rebase.apply.reword=Por defecto, los mensajes de todos los commits combinados se incluyen en el mensaje resultante. Sin embargo, en esta lección, reemplázalo con algo como {0}. Edita el mensaje si lo deseas y presiona {1} para aplicar la reescritura.
git.interactive.rebase.choose.interactive.rebase=Selecciona {0} de la lista.
git.interactive.rebase.click.commit.tooltip=Haz clic derecho en el commit resaltado
git.interactive.rebase.congratulations=¡Felicitaciones\! ¡Has limpiado el historial del proyecto\!
git.interactive.rebase.help.link=Editar historial del proyecto realizando rebase interactivo
git.interactive.rebase.introduction=Mirando la secuencia resaltada de commits es difícil decir qué ha cambiado en general. Sería más fácil si pudieras reordenar o combinar algunos commits.
git.interactive.rebase.invoke.fixup=Presiona {0} o haz clic en el botón resaltado y selecciona {1} de la lista para agregar los cambios de este commit al commit superior.
git.interactive.rebase.invoke.squash=Presiona {0} o haz clic en el botón {1} para unir los commits.
git.interactive.rebase.lesson.name=Rebase interactivo
git.interactive.rebase.move.commit=Y ahora mueve este commit hacia arriba al área resaltada. Arrastra y suelta el commit o presiona {0} tres veces.
git.interactive.rebase.open.context.menu=Usa <strong>Rebase Interactivo</strong> para resolver esta tarea. Haz clic derecho en el commit resaltado para abrir el menú contextual.
git.interactive.rebase.open.git.window=Supongamos que has hecho algunas correcciones a tu proyecto. Presiona {0} para abrir la ventana de herramientas {1} y previsualizar el historial del proyecto.
git.interactive.rebase.select.one.commit=Parece que el commit resaltado corrige algo en el commit superior de la lista. Sería genial combinar estos dos commits en uno. Selecciona el commit resaltado.
git.interactive.rebase.select.three.commits=¡Excelente\! Parece que los tres commits resaltados son sobre lo mismo. Puedes combinarlos en uno y editar el mensaje resultante. Selecciona los commits resaltados haciendo clic en ellos mientras presionas {0}.
git.interactive.rebase.start.rebasing=Finalmente, haz clic en {0}.
git.module.description=Aprende a usar la integración de Git en el IDE
git.module.name=Git
git.not.use.staging.area.warning=Necesitas deshabilitar el <strong>área de staging</strong> para completar esta lección. Presiona {0}, ve a {1} <strong>→</strong> {2}, y deselecciona {3}.
git.open.tool.window=Presiona {0} o haz clic en el botón de barra {1} para abrir la ventana de herramientas {2}.
git.open.tool.window.balloon=Haz clic para abrir la ventana de herramientas {0}
git.project.history.apply.branch.filter=Todas las ramas de tu repositorio están listadas en el panel izquierdo de la ventana de herramientas. {0,choice,0\#Haz clic|1\#Haz doble clic} en la rama <strong>HEAD</strong> para mostrar solo los commits de la rama activa.
git.project.history.apply.message.filter=El campo de búsqueda resaltado puede ayudarte a encontrar commits por su mensaje o hash. Supongamos que quieres encontrar un commit por parte de su mensaje. Por ejemplo, escribe {0} en el campo resaltado y presiona {1}.
git.project.history.apply.user.filter=Puedes usar muchos filtros que te ayudan a descubrir commits. Por ejemplo, puedes previsualizar los commits de un autor específico. Haz clic en el filtro resaltado para abrir la lista de usuarios.
git.project.history.click.changed.file=También hay un árbol con todos los archivos modificados en este commit. Haz doble clic en el archivo resaltado para previsualizar sus cambios.
git.project.history.click.changed.file.popup=Haz doble clic en el archivo resaltado para previsualizar sus cambios
git.project.history.click.filter.tooltip=Haz clic para abrir la lista de usuarios
git.project.history.click.head.tooltip={0,choice,0\#Haz clic|1\#Haz doble clic} en <strong>HEAD</strong> para mostrar solo los commits de la rama activa
git.project.history.close.diff=Cierra la ventana de diff después de revisar los cambios. Presiona {0}.
git.project.history.commit.details.explanation=El panel derecho de la ventana de herramientas muestra información sobre el commit seleccionado\: algunos metadatos y las ramas que contienen este commit.
git.project.history.commit.details.got.it=Aquí se muestran los metadatos detallados del commit y las ramas que lo contienen
git.project.history.commits.tree.explanation=El árbol de commits está ubicado en el centro de la ventana de herramientas. Puedes ver que el último commit de tu rama activa está resaltado. Ten en cuenta que todos los commits debajo del resaltado también son de esta rama y están coloreados de manera diferente. El resto de los commits están en otras ramas.
git.project.history.commits.tree.got.it=Este es el último commit de tu rama activa
git.project.history.invitation.to.commit.lesson=¡Excelente\! Descubramos cómo crear commits en la siguiente lección.
git.project.history.lesson.name=Historial del proyecto
git.project.history.open.git.window=Presiona {0} o haz clic en el botón de barra {1} para abrir la ventana de herramientas {2} y previsualizar todos los commits realizados en una línea de tiempo visual.
git.project.history.select.commit=Selecciona el commit resaltado para obtener información sobre él.
git.project.history.select.me=Selecciona {0} de la lista para mostrar solo tus commits.
git.quick.start.choose.new.branch.item=Elige {0} de la lista.
git.quick.start.clone.dialog.got.it.1=Puedes clonar el repositorio en el directorio especificado usando la URL del repositorio
git.quick.start.clone.dialog.got.it.2=También puedes iniciar sesión directamente en servicios de alojamiento populares y luego navegar y clonar repositorios desde allí
git.quick.start.close.clone.dialog=Sin embargo, para esta lección, hay un repositorio sandbox ya preparado. Puedes cerrar este diálogo.
git.quick.start.commit.window.select.file=Aquí puedes elegir los archivos para hacer commit. Haz clic en la casilla para agregar el archivo al commit.
git.quick.start.find.action=Puedes clonar un repositorio Git existente usando la acción {0}. Presiona {1} dos veces para abrir la ventana emergente {2}.
git.quick.start.help.link=Configurar un repositorio Git
git.quick.start.introduction=En esta lección, aprenderás cómo clonar un proyecto existente y realizar flujos de trabajo básicos de control de versiones usando las funciones de integración de Git del IDE.
git.quick.start.lesson.name=Inicio rápido
git.quick.start.modify.file=En la nueva rama, puedes cambiar tus archivos, y el IDE detectará los cambios. Por ejemplo, modifiquemos el color de los ojos del gato en el archivo abierto. Reemplaza {0} con otro color.
git.quick.start.name.new.branch=Ingresa cualquier nombre para la nueva rama, luego presiona {0} o haz clic en {1}.
git.quick.start.open.commit.window=Ahora puedes hacer commit del archivo modificado.
git.quick.start.open.push.dialog=Después de realizar un commit puedes hacer push al repositorio remoto. Presiona {0} para abrir el diálogo {1}.
git.quick.start.open.vcs.widget=Primero, presiona {0} o haz clic en el área resaltada para abrir el {1}.
git.quick.start.perform.commit=Escribe un mensaje de commit en el área resaltada. Por ejemplo, puede ser {0}. Luego, haz clic en {1}.
git.quick.start.perform.push=Ahora haz clic en {0}. Tu commit será enviado al repositorio creado en tu máquina para fines del tutorial.
git.quick.start.type.clone=Escribe {0} en el campo de búsqueda y elige la opción resaltada.
git.quick.start.workflow.explanation=¡Excelente\! Ahora veamos cómo realizar algunos flujos de trabajo básicos de Git usando su integración con el IDE. Por ejemplo, puede ser\: <strong>Obtener nueva rama → hacer cambios y commit → push</strong>.
git.use.non.modal.commit.ui.warning=Necesitas habilitar la interfaz de commit no modal para completar esta lección. Presiona {0}, ve a {1} <strong>→</strong> {2}, y selecciona {3}.
git.window.closed.warning=Presiona {0} para abrir la ventana de herramientas {1} nuevamente.