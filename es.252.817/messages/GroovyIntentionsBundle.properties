add.annotation.value.intention.family.name=Añadir 'value='
add.annotation.value.intention.name=Agregar par='valor'
change.to.c.style.comment.intention.family.name=Reemplazar por comentario estilo C
change.to.c.style.comment.intention.name=Reemplazar con comentario estilo C
change.to.end.of.line.comment.intention.family.name=Reemplazar con comentario final de línea
change.to.end.of.line.comment.intention.name=Reemplazar por comentario de fin de línea
convert.closure.to.method.intention.family.name=Convertir propiedad a método
convert.closure.to.method.intention.name=Convertir a método
convert.concatenation.to.gstring.intention.family.name=Convertir concatenación a GString
convert.concatenation.to.gstring.intention.name=Convertir a GString
convert.from.geese.braces.intention.family.name=Formatear llaves en líneas separadas
convert.from.geese.braces.intention.name=Formatear llaves en líneas separadas
convert.g.string.to.string.intention.family.name=Convertir GString a cadena
convert.g.string.to.string.intention.name=Convertir a Cadena
convert.integer.to.binary.intention.family.name=Convertir a binario
convert.integer.to.binary.intention.name=Convertir a binario
convert.integer.to.decimal.intention.family.name=Convertir a decimal
convert.integer.to.decimal.intention.name=Convertir a decimal
convert.integer.to.hex.intention.family.name=Convertir a hexadecimal
convert.integer.to.hex.intention.name=Convertir a hexadecimal
convert.integer.to.octal.intention.family.name=Convertir a octal
convert.integer.to.octal.intention.name=Convertir a octal
convert.java.style.array.intention.family.name=Convertir creación de array estilo Java a sintaxis Groovy
convert.java.style.array.intention.name=Convertir creación de matriz estilo Java
convert.junit.assertion.to.assert.statement.intention.family.name=Convertir aserción de JUnit a sentencia de aserción
convert.junit.assertion.to.assert.statement.intention.name=Convertir aserción JUnit en instrucción de aserción
convert.map.to.class.intention.family.name=Convertir mapa nativo groovy en instancias de clase
convert.map.to.class.intention.name=Convertir a clase
convert.method.to.closure.intention.family.name=Convertir método a propiedad de tipo de clausura
convert.method.to.closure.intention.name=Convertir a propiedad de clausura
convert.multiline.string.to.single.line.intention.family.name=Convertir cadena multilínea a una sola línea
convert.multiline.string.to.single.line.intention.name=Convertir a literal de una sola línea
convert.parameter.to.map.entry.intention.family.name=Convertir parámetros de método o cierre a entradas de mapa
convert.parameter.to.map.entry.intention.name=Convertir parámetro a entrada de mapa
convert.simple.getter.to.property.intention.family.name=Convertir getter simple a propiedad
convert.simple.getter.to.property.intention.name=Convertir en propiedad
convert.string.to.g.string.intention.family.name=Convertir cadena a GString
convert.string.to.g.string.intention.name=Convertir a GString
convert.string.to.multiline.intention.family.name=Convertir literal a literal multilínea
convert.string.to.multiline.intention.name=Convertir a multilínea
convert.to.dollar.slash.regex.intention.family.name=Convertir literal de cadena a cadena dollar-slash
convert.to.dollar.slash.regex.intention.name=Convertir a cadena de dólar-barra
convert.to.geese.braces.intention.family.name=Formatear las llaves de cierre de cierre en una línea
convert.to.geese.braces.intention.name=Formatear llaves en una línea
convert.to.regex.intention.family.name=Convertir literal de cadena a expresión regular
convert.to.regex.intention.name=Convertir a expresión regular
create.parameter.for.field.intention.family.name=Agregar parámetro de constructor para campo
create.parameter.for.field.intention.name=Agregar parámetro constructor para el campo
demorgans.intention.name1=Reemplazar '' con '||'
demorgans.intention.name2=Reemplazar '||' con ''
demorgans.law.intention.family.name=Ley de De Morgan
each.to.for.intention.family.name=Reemplazar cada uno con for-en
each.to.for.intention.name=Reemplazar por for-in
expand.boolean.intention.family.name=Expandir booleano
expand.boolean.intention.name=Expandir uso booleano a if-else
flip.comparison.intention.family.name=Invertir operandos de comparación
flip.comparison.intention.name=Intercambiar ''{0}'' por ''{1}''
flip.conditional.intention.family.name=Girar condicional
flip.conditional.intention.name=Voltear '?:'
flip.conjunction.intention.family.name=Voltear operandos de conjunción
flip.if.intention.family.name=Voltear sentencias if
flip.if.intention.name=Voltear sentencias if
flip.smth.intention.name=Invertir ''{0}''
for.to.each.intention.family.name=Reemplazar for-in con each
for.to.each.intention.name=Reemplazar con ".each"
gr.alias.import.intention.family.name=Alias importa miembro importado estáticamente
gr.alias.import.intention.name=Importación de alias
gr.break.string.on.line.breaks.intention.family.name=Partir cadena en saltos de línea
gr.break.string.on.line.breaks.intention.name=Separar cadena en '\n'
gr.convert.string.to.char.intention.family.name=Convertir a char
gr.convert.string.to.char.intention.name=Convertir a char
gr.convert.type.cast.to.safe.cast.intention.family.name=Convertir expresión de conversión a expresión de conversión segura
gr.convert.type.cast.to.safe.cast.intention.name=Convertir a conversión segura
gr.copy.string.concatenation.content.intention.family.name=Copiar al portapapeles texto concatenado de cadenas
gr.copy.string.literal.content.intention.text=Copiar texto de literal de cadena al portapapeles
gr.create.missing.switch.branches.intention.family.name=Crear ramas 'switch' faltantes
gr.create.missing.switch.branches.intention.name=Crear ramas 'switch' faltantes
gr.introduce.local.variable.intention.family.name=Introducir variable local
gr.introduce.local.variable.intention.name=Introducir variable local
gr.make.member.private.intention.family.name=Hacer 'privada'
gr.make.member.private.intention.name=Hacer 'privada'
gr.make.member.protected.intention.family.name=Hacer "protegida"
gr.make.member.protected.intention.name=Convertir a 'protected'
gr.make.member.public.intention.family.name=Convertir en 'public'
gr.make.member.public.intention.name=Hacer 'público'
gr.redundant.else.intention.family.name=Eliminar palabra clave 'else' redundante
gr.redundant.else.intention.name=Quitar palabra clave 'else' redundante
gr.remove.annotation.intention.family.name=Eliminar anotación
gr.remove.annotation.intention.name=Remover
gr.remove.explicit.type.declaration.intention.family.name=Eliminar declaración de tipo explícita
gr.remove.explicit.type.declaration.intention.name=Eliminar el tipo explícito
gr.set.strong.type.intention.family.name=Declarar tipo explícito
gr.set.strong.type.intention.name=Declarar el tipo explícito
gr.sort.map.keys.intention.family.name=Ordena alfabéticamente las entradas del mapa
gr.sort.map.keys.intention.name=Ordenar alfabéticamente
gr.split.declaration.intention.family.name=Separar declaración de variable
import.on.demand.intention.family.name=Añadir import static bajo demanda
import.on.demand.intention.name=Añadir importar según demanda
import.static.intention.family.name=Agregar importación estático de un solo miembro
import.static.intention.name=Agregar importación estática
indexed.expression.conversion.intention.family.name=Convertir forma [] a método de índice
indexed.expression.conversion.intention.name=Convertir acceso [] a método
indexing.method.conversion.intention.family.name=Convertir el método de indexación al formato []
indexing.method.conversion.intention.name=Convertir a forma []
invert.if.intention.family.name=Invertir la condición 'si'
invert.if.intention.name=Invertir la condición 'if'
make.closure.call.explicit.intention.family.name=Hacer la llamada de cierre explícita
make.closure.call.explicit.intention.name=Hacer que la llamada al cierre sea explícita
make.closure.call.implicit.intention.family.name=Hacer que la llamada de cierre sea implícita
make.closure.call.implicit.intention.name=Convertir llamada de cierre en implícito
merge.else.if.intention.family.name=Combinar else if
merge.else.if.intention.name=Fusionar else-if
merge.if.and.intention.family.name=Fusionar if anidados en condición and-ed
merge.if.and.intention.name=Fusionar if
move.class.to.new.file.intention.family.name=Mover clase a un archivo separado
move.class.to.new.file.intention.name=Mover a archivo separado
negate.comparison.intention.family.name=Negar comparación
negate.comparison.intention.name=Negar ''{0}'' a ''{1}''
remove.parentheses.from.method.call.intention.family.name=Quitar paréntesis innecesarios de llamada de método
remove.parentheses.from.method.call.intention.name=Eliminar paréntesis innecesarios
remove.redundant.class.property.intention.family.name=Eliminar propiedad de clase redundante .class
remove.redundant.class.property.intention.name=Eliminar redundante .class
remove.unnecessary.braces.in.g.string.intention.family.name=Eliminar llaves innecesarias en GString
remove.unnecessary.braces.in.g.string.intention.name=Eliminar llaves innecesarias en GString
remove.unnecessary.escape.characters.intention.family.name=Eliminar caracteres de escape innecesarios
remove.unnecessary.escape.characters.intention.name=Quitar caracteres de escape innecesarios
remove.unnecessary.return.intention.family.name=Quitar la palabra clave 'return' innecesaria
remove.unnecessary.return.intention.name=Quitar palabra clave 'return'
rename.class.to.0=Renombra clase a ''{0}''
rename.class.to.file.name.intention.family.name=Renombrar la clase al nombre del archivo
rename.file.with.class.intention.family.name=Renombrar archivo al nombre de clase correspondiente
rename.file.with.class.intention.name=Renombrar el archivo a nombre de la clase
replace.abstract.class.instance.by.map.intention.family.name=Cambiar clase anónima a instanciación dinámica
replace.abstract.class.instance.by.map.intention.name=Cambiar a instanciación dinámica
replace.if.with.ternary.intention.family.name=Reemplazar si-sentencia con operador ternario
replace.if.with.ternary.intention.name=Reemplazar con ?:
replace.qualified.reference.with.import.intention.family.name=Reemplazar referencia calificada con intención de importación
replace.qualified.reference.with.import.intention.name=Reemplazar con importar
replace.ternary.with.if.else.intention.family.name=Reemplazar '?:' con if else
replace.ternary.with.if.else.intention.name=Reemplazar '?:' con if else
simplify.ternary.operator.intention.family.name=Simplificar la expresión condicional
simplify.ternary.operator.intention.name=Simplificar expresión condicional
split.else.if.intention.family.name=Dividir else if
split.else.if.intention.name=Dividir else-if
split.if.intention.family.name=Dividir en 2 sentencias 'if'
split.if.intention.name=Dividir en 2 sentencias 'if'
split.into.declaration.and.assignment=Dividir en declaración y asignación
split.into.separate.declaration=Dividir en declaración separada