add.annotation.value.intention.family.name=Agregar 'value\='
add.annotation.value.intention.name=Agregar 'value\='
change.to.c.style.comment.intention.family.name=Reemplazar con comentario estilo C
change.to.c.style.comment.intention.name=Reemplazar con comentario estilo C
change.to.end.of.line.comment.intention.family.name=Reemplazar con comentario de fin de línea
change.to.end.of.line.comment.intention.name=Reemplazar con comentario de fin de línea
convert.closure.to.method.intention.family.name=Convertir propiedad a método
convert.closure.to.method.intention.name=Convertir a método
convert.concatenation.to.gstring.intention.family.name=Convertir concatenación de strings a GString
convert.concatenation.to.gstring.intention.name=Convertir a GString
convert.from.geese.braces.intention.family.name=Formatear llaves en líneas separadas
convert.from.geese.braces.intention.name=Formatear llaves en líneas separadas
convert.g.string.to.string.intention.family.name=Convertir GString a String
convert.g.string.to.string.intention.name=Convertir a String
convert.integer.to.binary.intention.family.name=Convertir a Binario
convert.integer.to.binary.intention.name=Convertir a binario
convert.integer.to.decimal.intention.family.name=Convertir a Decimal
convert.integer.to.decimal.intention.name=Convertir a decimal
convert.integer.to.hex.intention.family.name=Convertir a Hexadecimal
convert.integer.to.hex.intention.name=Convertir a hexadecimal
convert.integer.to.octal.intention.family.name=Convertir a Octal
convert.integer.to.octal.intention.name=Convertir a octal
convert.java.style.array.intention.family.name=Convertir creación de array estilo Java a sintaxis Groovy
convert.java.style.array.intention.name=Convertir creación de array estilo Java
convert.junit.assertion.to.assert.statement.intention.family.name=Convertir aserción JUnit a sentencia assert
convert.junit.assertion.to.assert.statement.intention.name=Convertir aserción JUnit a sentencia assert
convert.map.to.class.intention.family.name=Convertir map nativo de Groovy a instancias de clase
convert.map.to.class.intention.name=Convertir a clase
convert.method.to.closure.intention.family.name=Convertir método a propiedad de tipo closure
convert.method.to.closure.intention.name=Convertir a propiedad closure
convert.multiline.string.to.single.line.intention.family.name=Convertir string multilínea a una línea
convert.multiline.string.to.single.line.intention.name=Convertir a literal de una línea
convert.parameter.to.map.entry.intention.family.name=Convertir parámetros de método o closure a entradas de map
convert.parameter.to.map.entry.intention.name=Convertir parámetro a entrada de map
convert.simple.getter.to.property.intention.family.name=Convertir getter simple a propiedad
convert.simple.getter.to.property.intention.name=Convertir a propiedad
convert.string.to.g.string.intention.family.name=Convertir String a GString
convert.string.to.g.string.intention.name=Convertir a GString
convert.string.to.multiline.intention.family.name=Convertir literal a literal multilínea
convert.string.to.multiline.intention.name=Convertir a multilínea
convert.to.dollar.slash.regex.intention.family.name=Convertir literal string a string dollar-slashy
convert.to.dollar.slash.regex.intention.name=Convertir a string dollar-slashy
convert.to.geese.braces.intention.family.name=Formatear llaves de cierre de closure en una línea
convert.to.geese.braces.intention.name=Formatear llaves en una línea
convert.to.regex.intention.family.name=Convertir literal string a expresión regular
convert.to.regex.intention.name=Convertir a expresión regular
create.parameter.for.field.intention.family.name=Agregar parámetro de constructor para campo
create.parameter.for.field.intention.name=Agregar parámetro de constructor para campo
demorgans.intention.name1=Reemplazar '\\&\\&' con '||'
demorgans.intention.name2=Reemplazar '||' con '\\&\\&'
demorgans.law.intention.family.name=Ley de DeMorgan
each.to.for.intention.family.name=Reemplazar each con for-in
each.to.for.intention.name=Reemplazar con for-in
expand.boolean.intention.family.name=Expandir booleano
expand.boolean.intention.name=Expandir uso booleano a if-else
flip.comparison.intention.family.name=Invertir operandos de comparación
flip.comparison.intention.name=Invertir ''{0}'' a ''{1}''
flip.conditional.intention.family.name=Invertir condicional
flip.conditional.intention.name=Invertir '?\:'
flip.conjunction.intention.family.name=Invertir operandos de conjunción
flip.if.intention.family.name=Invertir sentencias if
flip.if.intention.name=Invertir sentencias if
flip.smth.intention.name=Invertir ''{0}''
for.to.each.intention.family.name=Reemplazar for-in con each
for.to.each.intention.name=Reemplazar con ".each"
gr.alias.import.intention.family.name=Alias de importación de miembro importado estáticamente
gr.alias.import.intention.name=Alias de importación
gr.break.string.on.line.breaks.intention.family.name=Romper string en '\\n'
gr.break.string.on.line.breaks.intention.name=Romper string en '\\n'
gr.convert.string.to.char.intention.family.name=Convertir a char
gr.convert.string.to.char.intention.name=Convertir a char
gr.convert.type.cast.to.safe.cast.intention.family.name=Convertir expresión de cast a expresión de cast seguro
gr.convert.type.cast.to.safe.cast.intention.name=Convertir a cast seguro
gr.copy.string.concatenation.content.intention.family.name=Copiar texto de concatenación de strings al portapapeles
gr.copy.string.literal.content.intention.text=Copiar texto literal de string al portapapeles
gr.create.missing.switch.branches.intention.family.name=Crear ramas 'switch' faltantes
gr.create.missing.switch.branches.intention.name=Crear ramas 'switch' faltantes
gr.introduce.local.variable.intention.family.name=Introducir variable local
gr.introduce.local.variable.intention.name=Introducir variable local
gr.make.member.private.intention.family.name=Hacer 'private'
gr.make.member.private.intention.name=Hacer 'private'
gr.make.member.protected.intention.family.name=Hacer 'protected'
gr.make.member.protected.intention.name=Hacer 'protected'
gr.make.member.public.intention.family.name=Hacer 'public'
gr.make.member.public.intention.name=Hacer 'public'
gr.redundant.else.intention.family.name=Eliminar palabra clave 'else' redundante
gr.redundant.else.intention.name=Eliminar palabra clave 'else' redundante
gr.remove.annotation.intention.family.name=Eliminar anotación
gr.remove.annotation.intention.name=Eliminar
gr.remove.explicit.type.declaration.intention.family.name=Eliminar declaración de tipo explícito
gr.remove.explicit.type.declaration.intention.name=Eliminar tipo explícito
gr.set.strong.type.intention.family.name=Declarar tipo explícito
gr.set.strong.type.intention.name=Declarar tipo explícito
gr.sort.map.keys.intention.family.name=Ordenar entradas del map alfabéticamente
gr.sort.map.keys.intention.name=Ordenar alfabéticamente
gr.split.declaration.intention.family.name=Dividir declaración de variable
import.on.demand.intention.family.name=Agregar static import bajo demanda
import.on.demand.intention.name=Agregar importación bajo demanda
import.static.intention.family.name=Agregar static import de miembro único
import.static.intention.name=Agregar static import
indexed.expression.conversion.intention.family.name=Convertir forma [] a método de índice
indexed.expression.conversion.intention.name=Convertir acceso [] a forma de método
indexing.method.conversion.intention.family.name=Convertir método de indexación a forma []
indexing.method.conversion.intention.name=Convertir a forma []
invert.if.intention.family.name=Invertir condición 'if'
invert.if.intention.name=Invertir condición 'if'
make.closure.call.explicit.intention.family.name=Hacer explícita la llamada de closure
make.closure.call.explicit.intention.name=Hacer explícita la llamada de closure
make.closure.call.implicit.intention.family.name=Hacer implícita la llamada de closure
make.closure.call.implicit.intention.name=Hacer implícita la llamada de closure
merge.else.if.intention.family.name=Combinar else if
merge.else.if.intention.name=Combinar else-if
merge.if.and.intention.family.name=Combinar if's anidados en condición con and
merge.if.and.intention.name=Combinar if's
move.class.to.new.file.intention.family.name=Mover clase a archivo separado
move.class.to.new.file.intention.name=Mover a archivo separado
negate.comparison.intention.family.name=Negar comparación
negate.comparison.intention.name=Negar ''{0}'' a ''{1}''
remove.parentheses.from.method.call.intention.family.name=Eliminar paréntesis innecesarios de la llamada al método
remove.parentheses.from.method.call.intention.name=Eliminar paréntesis innecesarios
remove.redundant.class.property.intention.family.name=Eliminar .class redundante
remove.redundant.class.property.intention.name=Eliminar .class redundante
remove.unnecessary.braces.in.g.string.intention.family.name=Eliminar llaves innecesarias en GString
remove.unnecessary.braces.in.g.string.intention.name=Eliminar llaves innecesarias en GString
remove.unnecessary.escape.characters.intention.family.name=Eliminar caracteres de escape innecesarios
remove.unnecessary.escape.characters.intention.name=Eliminar caracteres de escape innecesarios
remove.unnecessary.return.intention.family.name=Eliminar palabra clave 'return' innecesaria
remove.unnecessary.return.intention.name=Eliminar palabra clave 'return'
rename.class.to.0=Renombrar clase a ''{0}''
rename.class.to.file.name.intention.family.name=Renombrar clase al nombre de archivo correspondiente
rename.file.with.class.intention.family.name=Renombrar archivo al nombre de clase correspondiente
rename.file.with.class.intention.name=Renombrar archivo al nombre de la clase
replace.abstract.class.instance.by.map.intention.family.name=Cambiar clase anónima a instanciación dinámica
replace.abstract.class.instance.by.map.intention.name=Cambiar a instanciación dinámica
replace.if.with.ternary.intention.family.name=Reemplazar sentencia if con operador ternario
replace.if.with.ternary.intention.name=Reemplazar con ?\:
replace.qualified.reference.with.import.intention.family.name=Reemplazar referencia calificada con import
replace.qualified.reference.with.import.intention.name=Reemplazar con import
replace.ternary.with.if.else.intention.family.name=Reemplazar '?\:' con if else
replace.ternary.with.if.else.intention.name=Reemplazar '?\:' con if else
simplify.ternary.operator.intention.family.name=Simplificar expresión condicional
simplify.ternary.operator.intention.name=Simplificar expresión condicional
split.else.if.intention.family.name=Dividir else if
split.else.if.intention.name=Dividir else-if
split.if.intention.family.name=Dividir en 2 sentencias 'if'
split.if.intention.name=Dividir en 2 sentencias 'if'
split.into.declaration.and.assignment=Dividir en declaración y asignación
split.into.separate.declaration=Dividir en declaración separada