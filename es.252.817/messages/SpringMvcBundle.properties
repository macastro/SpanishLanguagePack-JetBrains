DumpSpringMVCModelAction.gathering.spring.mvc.models=Recopilando Modelos Spring MVC…
DumpSpringMVCModelAction.scanning.spring.mvc.models=Escaneando modelos Spring MVC…
SpringMVCInitBinderInspection.method.annotated.with.initbinder.must.return.void=El método anotado con @InitBinder debe devolver void
SpringMvcRequestMappingRelatedItemLineMarkerProvider.related.views=Vistas relacionadas
SpringMvcRequestMappingRelatedItemLineMarkerProvider.request.mapping.task.caption=<html><body>Vistas para <b>{0}</b> ({1} encontradas hasta ahora)</body></html>
SpringMvcRequestMappingRelatedItemLineMarkerProvider.request.mapping.task.finished.caption=<html><body>Vistas para <b>{0}</b> ({1} encontradas)</body></html>
SpringMvcRequestMappingRelatedItemLineMarkerProvider.request.mapping.task.title=Buscando Mapeo de Petición {0}
SpringMvcRequestMappingRelatedItemLineMarkerProvider.request.mapping.title=Mapeo de Petición {0}
SpringMvcRequestMappingRelatedItemLineMarkerProvider.spring.view=Vista Spring
SpringMvcView.designer.properties.show.javadoc=Mostrar Documentación
SpringMvcView.request.method=Método de Petición
SpringMvcVtlGlobalVariableProvider.model.attribute=Atributo del modelo
ViewReference.cannot.resolve.mvc.view=No se puede resolver la vista MVC ''{0}''
ViewReference.no.view.resolvers.found=No se encontraron resolvedores de vista
action.DumpSpringMVCModel.text=Volcar Modelo Spring MVC
action.DumpSpringModulesSorter.text=Volcar Módulos URL Ordenados
action.export.openapi.draft=Generar borrador OpenAPI
cannot.resolve.controller.url=No se puede resolver la URL del controlador ''{0}''
cors.mapping.method.unresolved.message=Método inválido ''{0}''
documentation.provider.consumes=Consume
documentation.provider.headers=Headers
documentation.provider.methods=Métodos
documentation.provider.model.attributes=Atributos del modelo
documentation.provider.params=Parámetros
documentation.provider.path.variables=Variables de ruta
documentation.provider.produces=Produce
live.template.delete.mapping.description=Plantilla Spring MVC '@DeleteMapping'
live.template.get.mapping.description=Plantilla Spring MVC '@GetMapping'
live.template.patch.mapping.description=Plantilla Spring MVC '@PatchMapping'
live.template.post.mapping.description=Plantilla Spring MVC '@PostMapping'
live.template.put.mapping.description=Plantilla Spring MVC '@PutMapping'
live.template.request.mapping.description=Plantilla Spring MVC '@RequestMapping'
logical.spring.controller.endpoints=Endpoints
logical.spring.controller.mapping.views=Vistas
logical.spring.functional.endpoints=Endpoints
mvc.application.context.autodetected=Contexto de aplicación MVC
mvc.framework.name=Spring MVC
mvc.goto.related.item.group.name=Spring MVC
mvc.initializer.context.autodetected=Contexto servlet inicializador MVC {0}
mvc.inspection.group.name=Spring MVC
mvc.inspection.init.binder=Método @InitBinder no void
mvc.inspection.path.variable=Discrepancia en declaraciones y usos de @PathVariable
mvc.inspection.view.reference=Referencia de vista sin resolver
mvc.servlet.context.autodetected=Contexto servlet MVC {0}
mvc.tab.title=MVC
request.mapping.gutter.name=Mapeos de peticiones
request.mapping.gutter.open.in.http.name=Abrir en Cliente HTTP
request.mapping.gutter.views.name=Navegar a vistas relacionadas
resource.location.unresolved.message=No se puede resolver la ubicación ''{0}''
spring.controller.request.param.help.authenticatedPrincipal=Anotación que se utiliza para resolver Authentication.getPrincipal() a un argumento de método.
spring.controller.request.param.help.bindingResult=Para acceso a errores de validación y data binding para un objeto comando (es decir, un argumento @ModelAttribute) o errores de la validación de argumentos @RequestBody o @RequestPart. Debe declarar un argumento Errors o BindingResult inmediatamente después del argumento de método validado.
spring.controller.request.param.help.csrfToken=Proporciona la información sobre un token CSRF esperado.
spring.controller.request.param.help.errors=Para acceso a errores de validación y data binding para un objeto comando (es decir, un argumento @ModelAttribute) o errores de la validación de argumentos @RequestBody o @RequestPart. Debe declarar un argumento Errors o BindingResult inmediatamente después del argumento de método validado.
spring.controller.request.param.help.httpEntity=Para acceso a headers y cuerpo de petición. El cuerpo se convierte con un HttpMessageConverter.
spring.controller.request.param.help.httpMethod=El método HTTP de la petición.
spring.controller.request.param.help.httpSession=Fuerza la presencia de una sesión. Como consecuencia, tal argumento nunca es null. Tenga en cuenta que el acceso a sesión no es thread-safe.
spring.controller.request.param.help.inputStream=Para acceso al cuerpo de petición raw expuesto por la API Servlet.
spring.controller.request.param.help.locale=El locale actual de la petición, determinado por el LocaleResolver más específico disponible (en efecto, el LocaleResolver o LocaleContextResolver configurado).
spring.controller.request.param.help.map=Para acceso al modelo usado en controladores HTML y expuesto a plantillas como parte del renderizado de vista.
spring.controller.request.param.help.model=Para acceso al modelo usado en controladores HTML y expuesto a plantillas como parte del renderizado de vista.
spring.controller.request.param.help.modelMap=Para acceso al modelo usado en controladores HTML y expuesto a plantillas como parte del renderizado de vista.
spring.controller.request.param.help.nativeWebRequest=Acceso genérico a parámetros de petición y atributos de petición y sesión, sin uso directo de la API Servlet.
spring.controller.request.param.help.oAuth2AuthorizedClient=Las implementaciones de esta interfaz son responsables de la gestión general de Cliente(s) Autorizado(s).
spring.controller.request.param.help.outputStream=Para acceso al cuerpo de respuesta raw expuesto por la API Servlet.
spring.controller.request.param.help.pagination=Un objeto que contiene información de paginación.
spring.controller.request.param.help.principal=Usuario actualmente autenticado, posiblemente una clase de implementación Principal específica si se conoce. Tenga en cuenta que este argumento no se resuelve inmediatamente si está anotado para permitir que un resolutor personalizado lo resuelva antes de recurrir a la resolución predeterminada a través de HttpServletRequest\#getUserPrincipal. Por ejemplo, la Autenticación de Spring Security implementa Principal y se inyectaría como tal a través de HttpServletRequest\#getUserPrincipal, a menos que también esté anotado con @AuthenticationPrincipal en cuyo caso es resuelto por un resolutor personalizado de Spring Security a través de Authentication\#getPrincipal.
spring.controller.request.param.help.pushBuilder=API push builder de Servlet 4.0 para push programático de recursos HTTP/2. Tenga en cuenta que, según la especificación Servlet, la instancia PushBuilder inyectada puede ser null si el cliente no soporta esa característica HTTP/2.
spring.controller.request.param.help.reader=Para acceso al cuerpo de petición raw expuesto por la API Servlet.
spring.controller.request.param.help.redirectAttributes=Especifica atributos a usar en caso de redirección (es decir, para ser añadidos a la query string) y atributos flash a almacenar temporalmente hasta la petición después de la redirección.
spring.controller.request.param.help.servletRequest=Acceso genérico a petición servlet
spring.controller.request.param.help.servletResponse=Acceso genérico a respuesta servlet
spring.controller.request.param.help.sessionStatus=Para marcar el procesamiento de formulario como completo, lo que dispara la limpieza de atributos de sesión declarados a través de una anotación @SessionAttributes a nivel de clase.
spring.controller.request.param.help.sort=Opción de ordenamiento para consultas. Debe proporcionar al menos una lista de propiedades para ordenar que no debe incluir null o strings vacíos. La dirección por defecto es DEFAULT_DIRECTION.
spring.controller.request.param.help.uriComponentsBuilder=Para preparar una URL relativa al host, puerto, esquema, path de contexto y parte literal del mapeo servlet de la petición actual.
spring.controller.request.param.help.webRequest=Extiende la interfaz ServletRequest para proporcionar información de petición para servlets HTTP. El contenedor servlet crea un objeto HttpServletRequest y lo pasa como argumento a los métodos service del servlet (doGet, doPost, etc).
spring.controller.request.param.help.webResponse=Extiende la interfaz ServletResponse para proporcionar funcionalidad específica HTTP al enviar una respuesta. Por ejemplo, tiene métodos para acceder a headers HTTP y cookies. El contenedor servlet crea un objeto HttpServletResponse y lo pasa como argumento a los métodos service del servlet (doGet, doPost, etc).
spring.controller.request.param.help.writer=Para acceso al cuerpo de respuesta raw expuesto por la API Servlet.
spring.controller.request.param.help.zoneId=La zona horaria asociada con la petición actual, determinada por un LocaleContextResolver.
spring.mvc.controllers.not.found=No se encontraron controladores Spring MVC
spring.reactive.web.client.endpoints.view.title=Spring Reactive WebClient
spring.reactive.web.test.client.endpoints.view.title=Spring WebTestClient
spring.rest.client.endpoints.view.title=Spring RestClient
spring.rest.operations.endpoints.view.title=Spring RestOperations
spring.test.mock.mvc.endpoints.view.title=Spring MockMvc
spring.test.rest.template.endpoints.view.title=Spring TestRestTemplate