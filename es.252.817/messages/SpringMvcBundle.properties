DumpSpringMVCModelAction.gathering.spring.mvc.models=Recopilando modelos de Spring MVC...
DumpSpringMVCModelAction.scanning.spring.mvc.models=Escaneando modelos Spring MVC...
SpringMVCInitBinderInspection.method.annotated.with.initbinder.must.return.void=Método anotado con @InitBinder debe retornar vacío
SpringMvcRequestMappingRelatedItemLineMarkerProvider.related.views=Vistas relacionadas
SpringMvcRequestMappingRelatedItemLineMarkerProvider.request.mapping.task.caption=<html><body>Vistas para <b>{0}</b> ({1} encontrados hasta ahora)</body></html>
SpringMvcRequestMappingRelatedItemLineMarkerProvider.request.mapping.task.finished.caption=<html><body>Vistas para <b>{0}</b> ({1} encontradas)</body></html>
SpringMvcRequestMappingRelatedItemLineMarkerProvider.request.mapping.task.title=Buscando Request Mapping {0}
SpringMvcRequestMappingRelatedItemLineMarkerProvider.request.mapping.title=Solicitud de mapeo {0}
SpringMvcRequestMappingRelatedItemLineMarkerProvider.spring.view=Vista Spring
SpringMvcView.designer.properties.show.javadoc=Mostrar documentación
SpringMvcView.request.method=Método de solicitud
SpringMvcVtlGlobalVariableProvider.model.attribute=Atributo de modelo
ViewReference.cannot.resolve.mvc.view=No se puede resolver la vista MVC ''{0}''
ViewReference.no.view.resolvers.found=No se encontraron los resolvedores de vista
action.DumpSpringMVCModel.text=Vaciar modelo Spring MVC
action.DumpSpringModulesSorter.text=Volcar Módulos URL Ordenados
action.ExceptionHandlerTemplateGenerateAction.description=Generar controlador de excepciones
action.ExceptionHandlerTemplateGenerateAction.text=Manejador de excepciones
action.GenerateSpringEndpointAction.description=Generar método de mapeo de solicitud
action.GenerateSpringEndpointAction.text=Mapeo de Solicitud...
action.Spring.Create.Endpoint.dialog.title=Nuevo mapeo de peticiones
action.Spring.Create.Endpoint.text.empty=/Ruta
action.export.openapi.draft=Generar borrador de OpenAPI
cannot.resolve.controller.url=No se puede resolver la URL del controlador ''{0}''
cors.mapping.method.unresolved.message=Método "{0}" no resuelto
documentation.provider.consumes=Consume
documentation.provider.headers=Cabeceras
documentation.provider.methods=Métodos
documentation.provider.model.attributes=Atributos del modelo
documentation.provider.params=Parámetros
documentation.provider.path.variables=Variables de ruta
documentation.provider.produces=Produce
live.template.controller.description=Plantilla de Spring '@Controller'
live.template.delete.mapping.description=Plantilla de Spring MVC '@DeleteMapping'
live.template.exceptionHandler.description=Plantilla de Spring `@ExceptionHandler`
live.template.get.mapping.description=Plantilla de Spring MVC '@GetMapping'
live.template.patch.mapping.description=Plantilla de Spring MVC '@PatchMapping'
live.template.post.mapping.description=Plantilla de Spring MVC '@PostMapping'
live.template.put.mapping.description=Plantilla de Spring MVC '@PutMapping'
live.template.request.mapping.description=Plantilla de Spring MVC '@RequestMapping'
logical.spring.controller.endpoints=Puntos finales
logical.spring.controller.mapping.views=Vistas
logical.spring.functional.endpoints=Puntos finales
method.name.delete=Eliminar
method.name.get=Obtener
method.name.patch=Parche
method.name.post=Post
method.name.put=Put
method.name.request=Solicitud
mvc.application.context.autodetected=Contexto de aplicación MVC
mvc.controller=Controlador
mvc.framework.name=Spring MVC
mvc.goto.related.item.group.name=Spring MVC
mvc.initializer.context.autodetected=Contexto de servlet del inicializador MVC {0}
mvc.inspection.group.name=Spring MVC
mvc.inspection.init.binder=Método @InitBinder no vacío
mvc.inspection.path.variable=Desajuste en las declaraciones y usos de @PathVariable
mvc.inspection.view.reference=Referencia de vista no resuelto
mvc.servlet.context.autodetected=Contexto del servlet de MVC {0}
mvc.tab.title=MVC
progress.creating.endpoint=Creando mapeo de solicitudes
request.mapping.gutter.name=Mapeo de solicitudes
request.mapping.gutter.open.in.http.name=Abrir en cliente HTTP
request.mapping.gutter.views.name=Navegar a vistas relacionadas
resource.location.unresolved.message=No se puede resolver la ubicación ''{0}''
spring.component.template.controller=Controlador
spring.component.template.controllerAdvice=Controller Advice
spring.component.template.restController=Controlador REST
spring.controller.request.param.help.authenticatedPrincipal=Anotación que se utiliza para resolver Authentication.getPrincipal() como argumento del método.
spring.controller.request.param.help.bindingResult=Sirve para acceder a errores de validación y data binding de objetos de comando (es decir, argumentos de @ModelAttribute), o errores de validación de argumentos @RequestBody o @RequestPart. Se debe declarar un argumento Errors or BindingResult justo después del argumento del método validado.
spring.controller.request.param.help.csrfToken=Proporciona información de token CSRF requerida
spring.controller.request.param.help.errors=Sirve para acceder a los errores de validación y vinculación de datos de un objeto comando (es decir, argumento @ModelAttribute) o bien a los errores de validación de un argumento @RequestBody o @RequestPart. Hay que declarar el argumento Errors o BindingResult inmediatamente después del argumento del método validado.
spring.controller.request.param.help.httpEntity=Sirve para acceder a los encabezados y al cuerpo de la petición. El cuerpo se convierte mediante HttpMessageConverter.
spring.controller.request.param.help.httpMethod=Método HTTP de la petición.
spring.controller.request.param.help.httpSession=Fuerza la existencia de la sesión. Por lo tanto, dichos argumentos nunca serán nulos. Ten en cuenta que el acceso a la sesión no es seguro para subprocesos.
spring.controller.request.param.help.inputStream=Para acceder al cuerpo de la solicitud sin procesar que expone Servlet API
spring.controller.request.param.help.locale=Locale actual de la petición determinada por el LocaleResolver más específico disponible (en la práctica el LocaleResolver o LocaleContextResolver configurado).
spring.controller.request.param.help.map=Utilizado en los controladores HTML para acceder al modelo que se expone a la plantilla como parte del renderizado de la vista.
spring.controller.request.param.help.model=HTML Se utiliza en el controlador y se expone en la plantilla como parte del renderizado de la vista.
spring.controller.request.param.help.modelMap=Permite acceder al modelo utilizado en el controlador HTML, que se expone a la plantilla como parte de la representación de la vista.
spring.controller.request.param.help.nativeWebRequest=Acceso genérico a los parámetros de solicitud, los atributos de sesión y de solicitud sin utilizar directamente Servlet API.
spring.controller.request.param.help.oAuth2AuthorizedClient=La implementación de esta interfaz se encarga de la gestión general de clientes autorizados.
spring.controller.request.param.help.outputStream=Utilizado para acceder al cuerpo de respuesta sin procesar expuesto por Servlet API.
spring.controller.request.param.help.pagination=Objeto para retener información de paginación
spring.controller.request.param.help.principal=Usuario autenticado actual, que puede ser una implementación de clase específica para el principal si se conoce. Tenga en cuenta que si se anota este argumento, no se resolverá con anticipación para permitir que los solucionadores personalizados lo resuelvan antes de recurrir al método de resolución predeterminado mediante HttpServletRequest#getUserPrincipal. Por ejemplo, la autenticación de Spring Security implementa Principal y se inyecta mediante HttpServletRequest#getUserPrincipal, a menos que también esté anotada con @AuthenticationPrincipal (en cuyo caso, se resuelve mediante un solucionador Spring Security personalizado mediante Authentication#getPrincipal).
spring.controller.request.param.help.pushBuilder=API de Servlet 4.0 PushBuilder para el envío de recursos HTTP/2 mediante programación. Hay que tener en cuenta que, según las especificaciones de Servlet, la instancia de PushBuilder inyectada puede ser null si el cliente no admite funciones HTTP/2.
spring.controller.request.param.help.reader=acceso al cuerpo de la solicitud sin procesar expuesto por la API de Servlet
spring.controller.request.param.help.redirectAttributes=Indica los atributos que se utilizarán en caso de redireccionamiento (es decir, los que se añadirán a la cadena de consulta) y los atributos flash que se almacenarán temporalmente hasta la solicitud posterior al redireccionamiento.
spring.controller.request.param.help.servletRequest=Acceso genérico a la solicitud servlet
spring.controller.request.param.help.servletResponse=Acceso genérico a la respuesta de servlet
spring.controller.request.param.help.sessionStatus=Se utiliza para marcar el procesamiento del formulario como completado, lo que activa la limpieza de los atributos de sesión declarados mediante la anotación @SessionAttributes en el nivel de clase.
spring.controller.request.param.help.sort=Opción de ordenamiento de la consulta. Debe proporcionar una lista de al menos una propiedad por la que ordenar, que no puede incluir null ni cadenas vacías. La dirección de ordenación predeterminada es DEFAULT_DIRECTION.
spring.controller.request.param.help.uriComponentsBuilder=Para preparar una URL relativa desde el host, puerto, esquema, ruta de contexto y parte literal de mapeado de servlet de la solicitud actual.
spring.controller.request.param.help.webRequest=Extiende la interfaz ServletRequest para proporcionar información de solicitud de servlet HTTP. El contenedor de servlet crea un objeto HttpServletRequest y lo pasa como argumento a los métodos de servicio de servlet (doGet, doPost, etc.).
spring.controller.request.param.help.webResponse=Extiende la interfaz ServletResponse para proporcionar funcionalidades específicas de HTTP al enviar respuestas. Por ejemplo, cuenta con métodos para acceder a cabeceras y cookies HTTP. El contenedor de servlets crea un objeto HttpServletResponse y lo pasa como argumento al método de servicio del servlet (p. ej. doGet, doPost).
spring.controller.request.param.help.writer=Para acceder al cuerpo sin procesar de la respuesta expuesta por la API de Servlet.
spring.controller.request.param.help.zoneId=Zona horaria asociada a la petición actual, determinada por LocaleContextResolver.
spring.mvc.controllers.not.found=No se han encontrado controladores Spring MVC
spring.reactive.web.client.endpoints.view.title=Spring Reactive WebClient
spring.reactive.web.test.client.endpoints.view.title=Spring WebTestClient
spring.rest.client.endpoints.view.title=Spring RestClient
spring.rest.operations.endpoints.view.title=Spring RestOperations
spring.test.mock.mvc.endpoints.view.title=Spring MockMvc
spring.test.rest.template.endpoints.view.title=Spring TestRestTemplate