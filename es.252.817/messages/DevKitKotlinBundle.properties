inspection.checked.exceptions=Excepciones no comprobadas en Kotlin
inspection.checked.exceptions.message=Excepción no comprobada: {0}
inspection.dispatchers.edt.display.name=Considere usar 'Dispatchers.UI'
inspection.dispatchers.edt.text='Dispatchers.EDT' mantiene el bloqueo de intención de escritura por defecto. Esto puede causar congelación de la interfaz de usuario
inspection.dispatchers.edt.to.dispatchers.ui.fix.text=Reemplazar 'Dispatchers.EDT' por 'Dispatchers.UI'
inspection.extension.class.should.not.be.open.text=La clase de extensión no debería estar abierta
inspection.light.service.must.not.be.open.message=El servicio ligero no se debe abrir
inspection.public.extension.function.in.test.display.name=función de extensión pública en Driver/Finder/IdeaFrameUI en intelij.driver.tests
inspection.use.platform.process.await.exit.display.name=Utilizar 'com.intellij.util.io.ProcessKt.awaitExit()'
inspections.an.explicit.method.should.be.used.to.retrieve.an.application.service.message=Proporcione el método 'getInstance()' explícito para acceder al servicio de la aplicación en lugar de una propiedad
inspections.application.service.as.static.immutable.property.with.backing.field.message=El servicio de la aplicación no debe ser asignado a una propiedad estática inmutable con un campo de respaldo
inspections.companion.object.in.extension=Objeto complementario en extensiones
inspections.companion.object.in.extension.message=Los objetos complementarios en las implementaciones de extensiones de IDE solo pueden contener un registrador y constantes
inspections.create.object.and.move.prohibited.declarations.fix.text=Crear objeto y mover declaraciones prohibidas
inspections.empty.companion.object.in.extension.message=Las extensiones no deberían contener un objeto complementario
inspections.forbidden.method.in.suspend.context=Uso prohibido de método en contexto suspend
inspections.forbidden.method.in.suspend.context.check.canceled.fix.text=Reemplazar 'ProgressManager.checkCanceled' por 'checkCancelled' compatible  con corrutina
inspections.forbidden.method.in.suspend.context.check.canceled.text=No llamar a 'ProgressManager.checkCanceled' en el contexto de suspensión. Usar la función 'checkCancelled' de nivel superior
inspections.forbidden.method.in.suspend.context.default.modality.state.text='defaultModalityState()' no funciona en contexto suspendido. Si realmente es necesario, utilizar 'contextModality()'
inspections.forbidden.method.in.suspend.context.invoke.and.wait.fix.text=Reemplazar la llamada 'invokeAndWait' por 'withContext(Dispatchers.EDT) {}'
inspections.forbidden.method.in.suspend.context.invoke.and.wait.text='invokeAndWait' puede bloquear la corrutina actual. Use 'Dispatchers.EDT' en su lugar
inspections.forbidden.method.in.suspend.context.invoke.later.fix.launch.text=Reemplazar 'invokeLater' por 'launch(Dispatchers.EDT)'
inspections.forbidden.method.in.suspend.context.invoke.later.fix.with.context.text=(Puede cambiar la semántica) Reemplace la llamada 'invokeLater' por 'withContext(Dispatchers.EDT) {}'
inspections.forbidden.method.in.suspend.context.invoke.later.text='invokeLater' no es idiomático en el contexto de suspender. Utilice 'Dispatchers.EDT' en su lugar
inspections.forbidden.method.in.suspend.context.navigate.to.suspend.context=Navegar al contexto suspend
inspections.forbidden.method.in.suspend.context.text=Método ''{0}'' anotado con @RequiresBlockingContext. No está diseñado para ser llamado en funciones suspend
inspections.move.prohibited.declarations.to.top.level.fix.text=Mover las declaraciones prohibidas al nivel superior
inspections.plugin.extension.registers.kotlin.object=La clase de extensión es un objeto Kotlin
inspections.plugin.kotlin.object.registered.as.extension=Objeto Kotlin registrado como extensión
inspections.remove.empty.companion.object.fix.text=Eliminar objeto Companion vacío
intention.checked.exceptions.add.annotation=Añadir anotación para relanzar excepciones comprobadas
intention.checked.exceptions.surround.with.try.catch=Rodear con try/catch