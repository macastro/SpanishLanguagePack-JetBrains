change.signature.dialog.title=Cambiar firma
clion.assembly.compile.arguments=En la parte superior de la pestaña de ensamblaje, puedes encontrar el campo de argumentos del compilador. Agrega la marca {0} y haz clic en {1} para actualizar la vista de ensamblaje
clion.assembly.help.link=Vista del ensamblado
clion.assembly.invoke=Cuando llame {0}, <ide/> compila el código al ensamblado mediante la configuración del compilador de la configuración seleccionada.
clion.assembly.invoke.context.menu=<ide/> puedes explorar el código ensamblador subyacente sin iniciar una sesión de depuración. Haz clic con el botón derecho dentro del archivo actual y selecciona {0} en el menú contextual.
clion.assembly.lesson.name=Vista de ensamblaje del archivo
clion.assembly.note=La opción de 'Usar sintaxis Intel' se desactiva para la arquitectura ARM y la cadena de herramientas de MSVC.
clion.assembly.options=Puedes utilizar la opción "Opciones" para cambiar la sintaxis del ensamblador x86 (Intel) o mostrar la salida sin procesar con nombres de símbolos aunque no contenga una sintaxis específica o ambas opciones.
clion.assembly.preview=En la vista previa puede ver qué código fuente genera qué ensamblaje
clion.basic.editing.module.description=Acciones para ayudarte a editar tu código
clion.basic.editing.module.name=Edición de código
clion.change.signature.click.refactor=Presiona el botón {0} para realizar el refactor.
clion.change.signature.conclusion=Tenga en cuenta que <ide/> ha ajustado todos los sitios de llamada en consecuencia, ahora pasando el literal de cadena {0} como segundo parámetro a {1}.
clion.change.signature.extract.parameter=Ahora pulsa {0} para usar la refactorización del parámetro.
clion.change.signature.help.link=Refactorización de cambio de firma
clion.change.signature.lesson.intro=La refactorización Change Signature combina varias modificaciones diferentes que se pueden aplicar a una firma de función. Puede utilizar esta refactorización para cambiar el nombre de la función y el tipo de retorno, y para agregar, eliminar y reordenar parámetros.
clion.change.signature.lesson.name=Modificar firma
clion.change.signature.move.parameter.down=Haga clic en el botón Abajo o presione {2} para mover el parámetro {0} debajo del parámetro {1}.
clion.change.signature.next.button=Siguiente
clion.change.signature.open.dialog=En este ejemplo, la función {0} espera el destino como su primer parámetro y la fuente como el segundo, lo cual podría resultar poco intuitivo para algunos usuarios. Vamos a invertirlos.
clion.change.signature.open.dialog.press=Pulsa {0} para abrir el cuadro de diálogo Cambiar firma.
clion.change.signature.refactor.button=Refactorizar
clion.change.signature.select.parameter.1=Si bien el cambio de firma le permite realizar muchos cambios diferentes en un diálogo, algunas refactorizaciones específicas que modifican la firma de una función tienen sus propias acciones dedicadas.
clion.change.signature.select.parameter.2=El refactorizado de <strong>parámetro</strong> le permite convertir una variable local o una expresión en un parámetro de función. En este ejemplo, la función {0} imprime los elementos de un rango separados por comas. Vamos a convertir la cadena separadora en un nuevo parámetro.
clion.change.signature.select.parameter.3=Presione {0} para seleccionar la cadena separadora.
clion.change.signature.type.new.parameter.name=<ide/> ahora convirtió el literal de cadena en un nuevo parámetro de función. Solo necesitamos darle un nombre significativo. Ingresa {0}.
clion.change.signature.type.new.parameter.refactor=Presiona {0} para realizar el refactor.
clion.code.assistance.module.description=Aprende a utilizar el historial local y la vista de ensamblado, cómo obtener información sobre parámetros y cómo previsualizar ventanas emergentes rápidas.
clion.code.assistance.module.name=Asistencia de codificación
clion.collapse.all.collapse=Si quieres contraer todas las regiones del archivo, pulsa {0}.
clion.collapse.all.expand=Del mismo modo, presiona {0} para expandir todas las regiones disponibles.
clion.collapse.help.link=Desplegar o contraer elementos del código
clion.collapse.hit.expand=Para expandir una región de código, presiona {0}.
clion.collapse.lesson.name=Contraer
clion.collapse.region.collapse=Puedes contraer cualquier fragmento de código seleccionado y crear una región de contracción personalizada para que sea "contraíble". Intenta seleccionar las tres variables miembro en las líneas 6-8 y contrae la selección con {0}.
clion.collapse.try.collapse=A veces necesitas minimizar una parte del código para mejorar la legibilidad. Intenta minimizar un fragmento de código con {0}.
clion.comments.comment.block=Puedes comentar un bloque de código. Por ejemplo, comentemos el bloque seleccionado pulsando {0}.
clion.comments.comment.one.line=Comenten cualquier línea con {0}.
clion.comments.help.link=Edición avanzada
clion.comments.lesson.name=Agregar y quitar comentarios
clion.comments.uncomment.line=Descomenta una línea comentada con el mismo acceso directo, {0}
clion.completion.complete.statement=Pulsa {0} para completar esta sentencia.
clion.completion.module.description=Deja que el IDE complete tu código. Prueba los tipos de completado básico, inteligente y otros.
clion.completion.module.name=Autocompletado de código
clion.debug.lesson.name=Flujo de trabajo de depuración
clion.debug.workflow.evaluate.expression=Puede marcar expresiones `final` para su evaluación. Copie `{0}` y péguela en el campo resaltado en la ventana de depuración.
clion.debug.workflow.exception.description=Cuando el programa arroje una excepción, se podrá ver en la "Ventana de ejecución"
clion.debug.workflow.fix.error=¡Hay un error en la sustitución de la cadena! Vamos a rápidamente. ¡Elimina el primer argumento, {0} en {1}.
clion.debug.workflow.lesson.name=Flujo de trabajo de depuración
clion.debug.workflow.rerun.debug=Pulsa {0} o haz clic en {1} en la barra de herramientas para finalizar la depuración.
clion.debug.workflow.step.into=Entremos en la llamada actual para ver la causa de la excepción. Presione {0} o haga clic en {1} en la ventana de depurar.
clion.essential.module.description=Descubre las funcionalidades más esenciales de {0}
clion.essential.module.name=Esencial
clion.extract.and.inline.lesson.name=Extraer e Inlinear
clion.extract.constant=Pulsa {0} para extraer el valor literal para pi usado aquí para calcular el área de un círculo en una constante.
clion.extract.constant.help.link=Extraer constante
clion.extract.constant.intro=<ide/> te ofrece muchas refactorizaciones útiles in situ para tu código C++. Por ejemplo, la refactorización <strong>Extraer constante</strong> te ayuda a eliminar constantes con códigos fijos y hace que tu código sea más fácil de leer y mantener.
clion.extract.constant.replace.occurrences=Como el mismo literal numérico aparece varias veces, <ide/> le ofrece la opción de reemplazar todas las ocurrencias o solo esta. Seleccione {0}.
clion.extract.constant.replace.occurrences.item=Reemplazar todas las 2 ocurrencias
clion.extract.extend.selection=Selecciona la expresión {0} pulsando {1} tres veces.
clion.extract.function=Ahora, presione {0} para extraer el código seleccionado en una función.
clion.extract.function.button.name=Extraer
clion.extract.function.click.extract=Ahora, haz clic sobre <strong>Extraer</strong> para ejecutar la refactorización.
clion.extract.function.click.inline=Haz clic en el botón <strong>Inline</strong> para confirmar.
clion.extract.function.conclusion=También puedes utilizar la refactorización Inline para poner en línea constantes y macros del preprocesador.
clion.extract.function.dialog=El diálogo "Extraer función" permite especificar el lugar de la declaración, el tipo de retorno y el nombre de la nueva función.
clion.extract.function.inline.button.name=Enlínea
clion.extract.function.intro=El código ahora se ve mucho mejor, pero todavía podemos aplicar más refactorizaciones. <ide/> te permite extraer expresiones o fragmentos de código en una función separada con <strong>Extraer función</strong>. Para la expresión de la siguiente línea, vamos a extraerla en una función separada en lugar de una variable local.
clion.extract.function.new.function.name=Establece el nombre a {0}.
clion.extract.inline=Haz clic en "{0}" y presiona {1}.
clion.extract.inline.done=<ide/> acaba de volver a alinear {0}, deshaciendo la refactorización de la función de extracción que hicimos antes.
clion.extract.inline.intro=<ide/> ahora ha refactorizado el cálculo de la circunferencia a una nueva función. Sin embargo, a veces quieres hacer lo opuesto: deshacerte de una función e incrustar su cuerpo en el sitio de la llamada. Para conseguir esto, <ide/> tiene la refactorización <strong>Inline</strong>, que es lo opuesto a la refactorización de Extract Function.
clion.extract.lesson.name=Extraer variable
clion.extract.new.constant.name=Escribe {0} como nombre de la nueva constante y presiona {1}.
clion.extract.new.constant.type=Especifica un nuevo tipo de variable o déjalo como se sugiere. Presiona {0} para continuar con la refactorización.
clion.extract.new.variable.name=Introduce {0} como nombre de la nueva variable local y presiona {1}.
clion.extract.variable=Pulsa {0} para extraer la expresión en una variable.
clion.extract.variable.declare.const=Declarar const
clion.extract.variable.expression=Y seleccionar {0}
clion.extract.variable.expression.option=Ahora, tiene opciones adicionales para declarar su nueva variable local. Seleccione "Declarar const".
clion.extract.variable.help.link=Extraer/Introducir variable
clion.extract.variable.intro=Ahora el código codificado es cosa del pasado, pero la expresión aún es muy larga. Vamos a extraer el área del círculo y convertirla en una variable local con la refactorización **Extraer variable**.
clion.inline.help.link=En línea
clion.intn.name.replace.if=Reemplazar 'if else' con '?:'
clion.multiple.selections.deselect.symbol=Pulsa {0} para anular la selección de la última ocurrencia.
clion.multiple.selections.escape=Pulsa {0} para resetear las selecciones múltiples y volver al modo de cursor único.
clion.multiple.selections.help.multiple.carets=Múltiples cursores y rangos de selección
clion.multiple.selections.lesson.name=Selección múltiple
clion.multiple.selections.replace=Escribe {0} para reemplazar todas las apariciones de {1} con {0}.
clion.multiple.selections.select.all=Presiona {0} para seleccionar todas las coincidencias en el archivo.
clion.multiple.selections.select.next.symbol=Presiona {0} de nuevo para seleccionar la siguiente ocurrencia de este símbolo.
clion.multiple.selections.select.symbol=Pulsa {0} para seleccionar el símbolo en el cursor.
clion.navigation.module.description=Salta al origen, navega a través de las declaraciones, implementaciones y estructura del archivo.
clion.navigation.module.name=Navegación
clion.onboarding.apply.action=Selecciona la acción {0} y presiona {1}.
clion.onboarding.apply.intention=Selecciona la acción para que el parámetro sea una referencia constante y presiona {0}.
clion.onboarding.balloon.about.debug.panel=La ventana de herramientas {0} brinda una barra de herramientas con varias acciones de depuración. Más adelante puedes tomar la lección {1} para probarlas.
clion.onboarding.balloon.click.here=Haga clic aquí para establecer un punto de interrupción
clion.onboarding.balloon.open.file=Haga doble clic para abrir {0}
clion.onboarding.balloon.open.learn.toolbar=Cambia a la ventana de herramientas "{0}" para continuar con esta lección
clion.onboarding.balloon.project.directory=Haga doble clic en el directorio del proyecto para expandirlo y ver los archivos del proyecto
clion.onboarding.balloon.project.view=Clic para abrir la vista de <strong>Proyecto</strong>
clion.onboarding.balloon.start.debugging=Haga clic en el ícono para comenzar a depurar o presione {0}.
clion.onboarding.balloon.stop.debugging=Haz clic en el ícono para detener la depuración
clion.onboarding.case.changed=El caso ha cambiado.
clion.onboarding.change.ui.settings=En esta lección, <ide/> cambia algunos ajustes predeterminados de la interfaz. Sus preferencias serán restauradas cuando complete o salga de la lección.
clion.onboarding.epilogue=¡Felicidades! Has completado el recorrido de bienvenida. En este punto, puedes:
clion.onboarding.feedback.system.found.toolchain=Cadenas de Herramientas Encontradas:
clion.onboarding.feedback.system.no.toolchain=ninguna
clion.onboarding.feedback.system.used.toolchain=Cadena de herramientas utilizada:
clion.onboarding.indexing.description=Cuando abres un proyecto por primera vez, <ide/> escanea las bibliotecas de plantillas estándar y el proyecto en sí para recopilar los detalles necesarios para la asistencia en la codificación. Para continuar, espera a que se complete la indexación.
clion.onboarding.invoke.completion=Ahora escribamos un {0} para mostrar todas las opciones de completado disponibles.
clion.onboarding.invoke.completion.tip=<strong>Sugerencia</strong>: puedes presionar {0} para mostrar elementos de finalización en cualquier parte del código.
clion.onboarding.invoke.intention.for.code=Las intenciones pueden ahorrarte tiempo, hacer que la programación sea más fácil y que tu código sea más seguro y eficiente. Aquí {0} se pasa por valor en {1}, lo que significa que se copiará cada vez que se llame {1}. Esto es ineficiente. Usemos una intención para deshacernos de la copia innecesaria. Presiona {2}.
clion.onboarding.invoke.intention.for.warning.1=Acabas de corregir un error, pero puedes hacer que este código luzca todavía mejor. <ide/> resalta y añade una bombilla amarilla en las líneas de código que pueden mejorarse.
clion.onboarding.invoke.intention.for.warning.2=Presiona {0} para previsualizar las advertencias y aplicar una solución rápida.
clion.onboarding.invoke.search.everywhere.1=Mientras trabaja en <ide/>, es posible que desee buscar archivos en su proyecto, símbolos, clases o incluso acciones de IDE. En esta lección, busquemos la acción {0} para convertir la cadena {1} en minúsculas.
clion.onboarding.invoke.search.everywhere.2=Pulsa dos veces {0} para abrir el diálogo {1}.
clion.onboarding.lesson.name=Familiarízate con {0}
clion.onboarding.module.description=Breve descripción de las principales funciones en {0}
clion.onboarding.module.name=Tour de integración
clion.onboarding.no.toolchain=Para compilar y ejecutar el código, primero debes <callback id="{0}">configurar</callback> un compilador de C/C++
clion.onboarding.project.view.description=La vista de <strong>Proyecto</strong> es una de las ventanas de herramientas principales. Contiene el directorio del proyecto, bibliotecas externas y archivos de borrador. Presiona el botón rayado para previsualizar el contenido del proyecto de demostración. También puedes abrirlo presionando {0}.
clion.onboarding.return.to.welcome=y regresar a la pantalla de Bienvenida
clion.onboarding.run.options=Ya abriste el proyecto de demostración. ¡Ahora, ejecútalo! En el área resaltada de la barra de herramientas puedes ver las acciones de ejecución populares de la configuración seleccionada. Por ejemplo, puedes generar tu código {0}, ejecutarlo {1}, depurarlo {2}, ejecutar con cobertura {3}, perfilarlo {4} y ejecutarlo con memcheck {5}.
clion.onboarding.run.sample=Por ahora, ejecutemos el archivo actual, haz clic en {0} o presiona {1}.
clion.onboarding.run.sample.balloon=Ejecutemos el archivo actual, haz clic en {0} o presiona {1}.
clion.onboarding.search.everywhere.description=Como se puede ver, el texto seleccionado, {0}, se ha copiado automáticamente a la cadena de entrada. Vamos a escribir {1} en lugar de {0}.
clion.onboarding.select.fix=Aplica el primer elemento: {0}. Con esta corrección, tu código se ve ordenado.
clion.onboarding.select.item=<ide/> muestra opciones de completado automático mientras escribes. Selecciona el elemento {0} usando las flechas del teclado y presiona {1}.
clion.onboarding.start.debugging=Haz clic en el ícono {0} para iniciar el proceso de depuración.
clion.onboarding.start.typing=Y a continuación empieza a escribir {0} para reducir la lista de finalización o selecciona este elemento y pulsa {1}.
clion.onboarding.stop.debugging=Vamos a detener la depuración. Haz clic en el icono {0}.
clion.onboarding.toggle.breakpoint.1=Puedes ver que en lugar del valor esperado {0}, la función {1} devuelve {2}. Vamos a parar en la declaración de retorno para depurar el código problemático.
clion.onboarding.toggle.breakpoint.2=Haz clic en el canalón dentro del área resaltada para establecer un punto de corte.
clion.onboarding.toggle.case.part=Mayúsculas y minúsculas
clion.onboarding.toolchain.description=<ide/> ya ha configurado una cadena de herramientas C/C++ predeterminada para este curso. Puede modificarla o crear otra para sus proyectos. Para ello, vaya a Preferencias -> Compilación, ejecución, implementación -> Cadenas de herramientas.
clion.onboarding.toolchain.tip=<strong>Sugerencia:</strong> Puedes configurar las toolchains de C/C++ en las <ide/> preferencias en Build, Execution, Deployment -> Toolchains.
clion.onboarding.type.division=Cuando descubramos el problema del código, vamos a arreglarlo. Divide la suma resultante por la longitud de los valores. La secuencia de comandos de la lección inserta {0} ya.
clion.postfix.completion.complete=Selecciona {0} en la lista y pulsa {1} para completar la sentencia.
clion.postfix.completion.type=En C++, la finalización de sufijos puede ser especialmente útil para los casos de encapsulamiento con una conversión de estilo C++, `makeshared`/`makeunique`, varios bucles y los modismos `begin`/`end`. Escribe {0} después del nombre de clase para ver las opciones de finalización de sufijo
clion.qfix.name.remove.parameter=Retirar declaración del parámetro 'redundant'
clion.quick.fix.use.range.based.loop=Utilizar un bucle for basado en un rango en su lugar
clion.rad.change.signature.move.parameter.down=Mueve el parámetro {0} hacia abajo junto al parámetro {1} haciendo clic en el botón Mover hacia abajo.
clion.rad.intn.name.replace.if=Convertir declaración 'if' a expresión '?:'
clion.rad.qfix.name.remove.parameter=Quitar parámetro no utilizado
clion.refactorings.module.description=Mejora tu código con refactorizaciones de renombrar, extraer y de otros tipos.
clion.refactorings.module.name=Refactorizaciones
clion.rename.again=Has podido observar que la refactorización de cambio de nombre ha cambiado automáticamente la ocurrencia de {0} dentro de este comentario. La refactorización de cambio de nombre tiene algunas opciones adicionales, una de las cuales nos permite hacer esto. Inténtelo cambiando de nuevo el nombre de {0} a {1}. Haga clic en cualquier ocurrencia del nombre de tipo {0} en el código y pulse {2}.
clion.rename.applied=<ide/> ha cambiado el nombre de la plantilla de clase en la declaración/definición así como en todos los usos. Esto funcionará en todo el proyecto.
clion.rename.conclusion=<ide/> ha vuelto a cambiar el nombre de la plantilla de clase, pero a diferencia de antes, esto no afecta al comentario.
clion.rename.description=El refactorizar Rename te permite renombrar símbolos, archivos y directorios globalmente con todas las referencias a ellos en el código corregidas automáticamente.
clion.rename.dialog.next.button=Siguiente
clion.rename.dialog.title=Cambiar nombre
clion.rename.disable.update.option=Inhabilitar "Renombrar también en comentarios y cadenas"
clion.rename.enable.update.option=Habilitar "{0}"
clion.rename.found.usages=<ide/> muestra todas las ocurrencias de texto encontradas en comentarios y literales de cadena.
clion.rename.found.usages.options=Puedes usar los controles de la barra de herramientas aquí para navegar/agrupar/filtrar las coincidencias encontradas
clion.rename.help.link=Enlaces de refactorización de cambio de nombre
clion.rename.lesson.name=Renombrar
clion.rename.option.text=Buscar en comentarios y literales de cadenas
clion.rename.press.rename=Presiona {0} para renombrar la plantilla de clase {1}.
clion.rename.show.option.popup=Haga clic en los iconos junto al elemento que está siendo renombrado o pulse {0} para acceder a las opciones adicionales.
clion.rename.type.new.name=Teclea un nuevo nombre para esta plantilla de clase (por ejemplo, {0}) y presiona {1}.
clion.rename.undo=Como con cualquier refactoring, el renombrado de un tipo se puede revertir fácilmente con Deshacer. Pulsa {0}.
clion.run.configuration.add.new.program.arguments=Introduce {0} en Argumentos de programa y haz clic en "Ejecutar"
clion.run.configuration.dialog.run.button=Ejecutar
clion.run.configuration.dialog.title=Ejecutar/Depurar configuración
clion.run.configuration.gutters=Hay varias formas de ejecutar el código. Podemos hacer clic en "{0}" y seleccionar la entrada "{1}" para ejecutarlo desde el canalón. También, podemos presionar {2}.
clion.run.configuration.lesson.name=Configuración de ejecución
clion.run.configuration.program.arguments=Argumentos del programa
clion.run.configuration.run.current=Para ejecutar este programa de demostración hacemos clic en "{0}" de la barra de herramientas.
clion.run.configuration.run.current.balloon=Ejecutemos este ejemplo
clion.run.configuration.settings.description=Este es el lugar para administrar todas las configuraciones de ejecución. Puedes configurar el parámetro del programa, el directorio de trabajo, las variables de entorno, etc.
clion.run.debug.module.description=Ejecuta tu código con el debugger visual del IDE y corrige los errores.
clion.run.debug.module.name=Ejecutar y depurar
clion.selection.select.string=Presiona {0} de nuevo para seleccionar la cadena completa.
clion.smart.completion.finish.completion=Selecciona {0} y presiona {1}.
clion.smart.completion.help.link=Completado coincidente con el tipo
clion.smart.completion.introduction=El autocompletado de tipo inteligente filtra la lista de sugerencias para incluir solo los tipos aplicables en el contexto actual.
clion.smart.completion.use.smart.completion=En este caso, solo tiene sentido pasar un valor de la enumeración {0} a la función {1}. Pulsa {2} para ver la lista de sugerencias coincidentes. Observa que solo se muestran los diferentes valores de la enumeración {0}
clion.statement.completion.complete.condition=Añade una condición dentro de los paréntesis {0} y presiona {1} para saltar a la instrucción {2}.
clion.statement.completion.complete.finish.body=Teclea una línea de código: {0} y luego presiona {1} para completar la afirmación y aplicar formato.
clion.statement.completion.complete.for=Pulsa {0} para completar la sentencia {1}.
clion.statement.completion.complete.if=Escriba {0} y presione {1} para completar la expresión.
clion.statement.completion.help.link=Completado de sentencia
clion.statement.completion.lesson.intro1=Puedes crear construcciones de código sintácticamente correctas utilizando la compleción de declaraciones. Inserta los elementos de sintaxis necesarios (paréntesis, llaves y punto y coma) y te sitúa en una posición en la que puedes comenzar a escribir la siguiente declaración.
clion.statement.completion.lesson.intro2=La Finalización de Declaración funciona para completar declaraciones (como clases, espacios de nombres y enumeraciones) y declaraciones (<code>if/else</code>, <code>while</code>, <code>do</code>, <code>for</code>, <code>switch/case</code>, <code>try/catch</code>).
clion.statement.completion.lesson.name=Compleción de sentencias
clion.tab.completion.lesson.intro=Completar con el tabulador (en lugar de Intro) no inserta únicamente la sugerencia seleccionada sino que remplaza por completo la palabra en la que está el cursor. Esto puede resultar beneficioso para arreglar rápidamente el código ya que no es necesario seleccionar y eliminar la palabra de forma manual.
clion.tab.completion.lesson.name=Completado de tab
clion.tab.completion.select.item=Selecciona el elemento {0} con las flechas del teclado o empieza a escribirlo.
clion.tab.completion.start.completion=Supongamos que deseas reemplazar {0} con el miembro de la clase {1} aquí. Presiona {2} para ver las sugerencias de completado.
clion.tab.completion.use.tab.completion=Si pulsas {0}, insertarás {1} antes de {2}. En su lugar, pulsa {3} para reemplazar {2} por {1}.
toolbar.settings.button=Configuración del IDE y del proyecto
unwrap.try=Prueba la eliminación en 'if...'