change.signature.dialog.title=Cambiar Firma
clion.assembly.compile.arguments=En la parte superior de la pestaña de ensamblador, puedes encontrar el campo de argumentos del compilador. Agrega la bandera {0} y haz clic en {1} para actualizar la vista de ensamblador
clion.assembly.help.link=Vista de ensamblador
clion.assembly.invoke=Cuando invocas {0}, <ide/> usa la configuración del compilador de la configuración seleccionada para compilar el código a ensamblador.
clion.assembly.invoke.context.menu=En <ide/>, puedes explorar el código ensamblador subyacente sin iniciar una sesión de depuración. Haz clic derecho dentro del archivo actual y selecciona {0} del menú contextual.
clion.assembly.lesson.name=Vista de ensamblador para archivos
clion.assembly.note=La opción Usar Sintaxis Intel está deshabilitada para arquitecturas ARM y cadenas de herramientas MSVC.
clion.assembly.options=Usa el menú Opciones para cambiar a la sintaxis de ensamblador x86 (Intel) y/o ver la salida sin procesar con nombres de símbolos pero sin sintaxis específica
clion.assembly.preview=En la vista previa, puedes ver qué código fuente produce qué ensamblador
clion.basic.editing.module.description=Acciones que te ayudan a editar tu código
clion.basic.editing.module.name=Edición de código
clion.change.signature.click.refactor=Haz clic en el botón {0} para realizar la refactorización.
clion.change.signature.conclusion=Ten en cuenta que <ide/> ha ajustado todos los puntos de llamada en consecuencia, ahora pasando el literal de cadena {0} como segundo parámetro a {1}.
clion.change.signature.extract.parameter=Ahora presiona {0} para usar la refactorización Parámetro.
clion.change.signature.help.link=Refactorización Cambiar Firma
clion.change.signature.lesson.intro=La refactorización Cambiar Firma combina varias modificaciones diferentes que se pueden aplicar a la firma de una función. Puedes usar esta refactorización para cambiar el nombre de la función y el tipo de retorno, y para agregar, eliminar y reordenar parámetros.\nAl cambiar la firma de una función, CLion busca todos los usos de la función y actualiza todas las llamadas, implementaciones y reemplazos de sobrescritura de la función que se pueden modificar de manera segura para reflejar el cambio.
clion.change.signature.lesson.name=Cambiar firma
clion.change.signature.move.parameter.down=Mueve el parámetro {0} debajo del parámetro {1} haciendo clic en el botón Abajo o presionando {2}.
clion.change.signature.next.button=Siguiente
clion.change.signature.open.dialog=En este ejemplo, la función {0} espera el destino como su primer parámetro y la fuente como su segundo, lo que algunos usuarios podrían encontrar poco intuitivo. Vamos a invertirlos.
clion.change.signature.open.dialog.press=Presiona {0} para abrir el diálogo Cambiar Firma.
clion.change.signature.refactor.button=Refactorizar
clion.change.signature.select.parameter.1=Si bien Cambiar Firma te permite realizar muchos cambios diferentes en un diálogo, algunas refactorizaciones específicas que modifican la firma de la función también tienen sus propias acciones dedicadas.
clion.change.signature.select.parameter.2=La refactorización <strong>Parámetro</strong> te permite convertir una variable local o una expresión en un parámetro de función. En este ejemplo, la función {0} imprime los elementos de un rango separados por comas. Vamos a convertir la cadena separadora en un nuevo parámetro.
clion.change.signature.select.parameter.3=Selecciona la cadena separadora presionando {0}.
clion.change.signature.type.new.parameter.name=<ide/> ahora ha convertido el literal de cadena en un nuevo parámetro de función. Solo necesitamos darle un nombre significativo. Ingresa {0}.
clion.change.signature.type.new.parameter.refactor=Presiona {0} para realizar la refactorización.
clion.code.assistance.module.description=Aprende cómo usar el historial local y la vista de ensamblador, obtener información de parámetros y previsualizar ventanas emergentes rápidas.
clion.code.assistance.module.name=Asistencia de código
clion.collapse.all.collapse=Si quieres Contraer todas las regiones en el archivo, presiona {0}.
clion.collapse.all.expand=De manera similar, presiona {0} para expandir todas las regiones disponibles.
clion.collapse.help.link=Expandir o Contraer elementos de código
clion.collapse.hit.expand=Para expandir una región de código, presiona {0}.
clion.collapse.lesson.name=Contraer
clion.collapse.region.collapse=Puedes Contraer cualquier fragmento de código seleccionado y crear una región de plegado personalizada para hacerlo "plegable". Intenta seleccionar las tres variables miembro en las líneas 6-8 y plegar la Selección con {0}.
clion.collapse.try.collapse=A veces necesitas Contraer un fragmento de código para mejorar la legibilidad. Intenta Contraer un fragmento de código con {0}.
clion.comments.comment.block=Puedes comentar un bloque de código. Por ejemplo, comentemos el bloque seleccionado, presiona {0}.
clion.comments.comment.one.line=Comenta cualquier línea con {0}.
clion.comments.help.link=Edición avanzada
clion.comments.lesson.name=Agregar y eliminar comentarios
clion.comments.uncomment.line=Descomenta la línea comentada con el mismo atajo, {0}
clion.completion.complete.statement=Presiona {0} para completar esta declaración.
clion.completion.module.description=Deja que el IDE complete tu código. Prueba el autocompletado básico, inteligente y otros tipos.
clion.completion.module.name=Autocompletado de código
clion.debug.lesson.name=Flujo de trabajo de depuración
clion.debug.workflow.evaluate.expression=Para verificar la expresión final, puedes evaluarla. Vamos a copiar {0} y pegarlo en el campo resaltado en la ventana de Depuración.
clion.debug.workflow.exception.description=El programa lanza una excepción y puedes verla en la ventana de Ejecución.
clion.debug.workflow.fix.error=¡Oh, hay un error en la sustitución de cadena\! Vamos a arreglarlo ahora. Elimina el primer argumento {0} de {1}.
clion.debug.workflow.lesson.name=Flujo de trabajo de depuración
clion.debug.workflow.rerun.debug=Terminemos la depuración presionando {0} o haciendo clic en {1} en la barra de herramientas.
clion.debug.workflow.step.into=Para averiguar qué causó la excepción, vamos a entrar en la llamada actual. Presiona {0} o haz clic en {1} en la ventana de Depuración.
clion.essential.module.description=Descubre las capacidades más esenciales de {0}
clion.essential.module.name=Esencial
clion.extract.and.inline.lesson.name=Extraer e Inline
clion.extract.constant=Presiona {0} para extraer el valor literal de pi usado aquí para calcular el área de un círculo en una constante.
clion.extract.constant.help.link=Extraer constante
clion.extract.constant.intro=<ide/> ofrece muchas refactorizaciones útiles in situ para tu código C++. Por ejemplo, la refactorización <strong>Extraer Constante</strong> te ayuda a eliminar constantes hard-coded, haciendo tu código más fácil de leer y mantener.
clion.extract.constant.replace.occurrences=Ya que el mismo literal numérico aparece múltiples veces, <ide/> te da la opción de reemplazar todas las ocurrencias o solo esta. Selecciona {0}.
clion.extract.constant.replace.occurrences.item=Reemplazar las 2 ocurrencias
clion.extract.extend.selection=Selecciona la expresión {0}, presionando {1} tres veces.
clion.extract.function=Ahora, presiona {0} para extraer el código seleccionado en una función.
clion.extract.function.button.name=Extraer
clion.extract.function.click.extract=Ahora, haz clic en <strong>Extraer</strong> para realizar la refactorización.
clion.extract.function.click.inline=Haz clic en el botón <strong>Inline</strong> para confirmar.
clion.extract.function.conclusion=También puedes usar la refactorización Inline para hacer inline constantes y macros del preprocesador.
clion.extract.function.dialog=El diálogo Extraer Función te permite especificar el lugar de declaración, tipo de retorno y nombre de la nueva función.
clion.extract.function.inline.button.name=Inline
clion.extract.function.intro=El código está ahora mucho mejor, pero hay más refactorizaciones que podemos aplicar. <ide/> te permite extraer cualquier expresión o fragmento de código en una función separada con <strong>Extraer Función</strong>. Para la expresión en la siguiente línea, vamos a extraerla en una función separada en lugar de una variable local.
clion.extract.function.new.function.name=Establece el nombre como {0}.
clion.extract.inline=Haz clic en {0} y presiona {1}.
clion.extract.inline.done=<ide/> ha hecho inline {0} nuevamente, deshaciendo la refactorización de extraer función que hicimos antes.
clion.extract.inline.intro=<ide/> ha refactorizado ahora el cálculo de la circunferencia en una nueva función. Sin embargo, a veces quieres hacer lo contrario\: eliminar una función e inline su cuerpo en el punto de llamada. Para lograr esto, <ide/> tiene la refactorización <strong>Inline</strong>, que es lo opuesto a la refactorización Extraer Función.
clion.extract.lesson.name=Extraer variable
clion.extract.new.constant.name=Ingresa {0} como nombre de la nueva constante y presiona {1}.
clion.extract.new.constant.type=Especifica un nuevo tipo de variable o déjalo como se sugiere. Presiona {0} para continuar la refactorización.
clion.extract.new.variable.name=Ingresa {0} como nombre de la nueva variable local y presiona {1}.
clion.extract.variable=Presiona {0} para extraer la expresión en una variable.
clion.extract.variable.declare.const=Declarar const
clion.extract.variable.expression=Y selecciona {0}
clion.extract.variable.expression.option=Ahora tienes algunas opciones adicionales para declarar tu nueva variable local. Selecciona "Declarar const".
clion.extract.variable.help.link=Extraer/Introducir variable
clion.extract.variable.intro=Ahora el valor hard-coded ha desaparecido, pero la expresión sigue siendo bastante larga. Vamos a extraer el área del círculo en una variable local con la refactorización <strong>Extraer Variable</strong>.
clion.inline.help.link=Inline
clion.intn.name.replace.if=Reemplazar 'if else' con '?\:'
clion.multiple.selections.deselect.symbol=Presiona {0} para deseleccionar la última ocurrencia.
clion.multiple.selections.escape=Presiona {0} para resetear las selecciones múltiples y volver al modo de cursor único.
clion.multiple.selections.help.multiple.carets=Múltiples cursores y rangos de selección
clion.multiple.selections.lesson.name=Selecciones múltiples
clion.multiple.selections.replace=Escribe {0} para reemplazar todas las ocurrencias de {1} con {0}.
clion.multiple.selections.select.all=Presiona {0} para seleccionar todas las ocurrencias en el archivo.
clion.multiple.selections.select.next.symbol=Presiona {0} nuevamente para seleccionar la siguiente ocurrencia de este símbolo.
clion.multiple.selections.select.symbol=Presiona {0} para seleccionar el símbolo en el cursor.
clion.navigation.module.description=Salta al código fuente, navega a declaraciones, implementaciones y estructura de archivo.
clion.navigation.module.name=Navegación
clion.onboarding.apply.action=Selecciona la acción {0} y presiona {1}.
clion.onboarding.apply.intention=Selecciona la acción para hacer que el parámetro sea una referencia constante y presiona {0}.
clion.onboarding.balloon.about.debug.panel=La ventana de herramientas {0} proporciona una barra de herramientas con varias acciones de depuración. Puedes tomar la lección {1} más tarde para probarlas.
clion.onboarding.balloon.click.here=Haz clic aquí para establecer un breakpoint
clion.onboarding.balloon.open.file=Doble clic para abrir {0}
clion.onboarding.balloon.open.learn.toolbar=Cambiar a la ventana de herramientas {0} para continuar esta lección
clion.onboarding.balloon.project.directory=Haz doble clic en el directorio del proyecto para expandirlo y ver los archivos
clion.onboarding.balloon.project.view=Haz clic para abrir la vista de <strong>Proyecto</strong>
clion.onboarding.balloon.start.debugging=Haz clic en el icono para iniciar el debugging o presiona {0}.
clion.onboarding.balloon.stop.debugging=Haz clic en el icono para detener el debugging
clion.onboarding.case.changed=El case ha cambiado.
clion.onboarding.change.ui.settings=Para esta lección, <ide/> cambiará algunas configuraciones de la interfaz al estado predeterminado. Tus preferencias se restaurarán cuando completes o salgas de la lección.
clion.onboarding.epilogue=¡Felicitaciones\! Has completado el tour de iniciación. En este punto puedes\:\n  - <callback id\="{0}">Cerrar</callback> el proyecto de aprendizaje{1}\n  - <callback id\="{2}">Mostrar</callback> más lecciones
clion.onboarding.feedback.system.found.toolchain=Toolchains encontradas\:
clion.onboarding.feedback.system.no.toolchain=ninguna
clion.onboarding.feedback.system.used.toolchain=Toolchain utilizada\:
clion.onboarding.indexing.description=Cuando abres un proyecto por primera vez, <ide/> escanea las Standard Template Libraries y el proyecto en sí para recopilar los detalles necesarios para la asistencia de código. Para continuar, espera hasta que se complete la indexación.
clion.onboarding.invoke.completion=Ahora escribamos {0} para mostrar todas las opciones de autocompletado disponibles.
clion.onboarding.invoke.completion.tip=<strong>Consejo</strong>\: puedes presionar {0} para mostrar elementos de autocompletado en cualquier lugar del código.
clion.onboarding.invoke.intention.for.code=Las intenciones pueden ahorrarte tiempo, facilitar la codificación y hacer que tu código sea más seguro y eficiente. Aquí, {0} se pasa por valor a {1}, lo que significa que se copiará cada vez que se llame a {1}. Esto es ineficiente. Usemos una intención para eliminar la copia innecesaria. Presiona {2}.
clion.onboarding.invoke.intention.for.warning.1=Acabas de corregir un bug, pero puedes hacer que este código se vea aún mejor. <ide/> resalta y agrega un foco amarillo a las líneas de código que pueden mejorarse.
clion.onboarding.invoke.intention.for.warning.2=Presiona {0} para previsualizar las advertencias y aplicar un quick-fix.
clion.onboarding.invoke.search.everywhere.1=Mientras trabajas en <ide/>, es posible que quieras buscar archivos en tu proyecto, símbolos, clases o incluso acciones del IDE. En esta lección, busquemos la acción {0} para convertir la cadena {1} a minúsculas.
clion.onboarding.invoke.search.everywhere.2=Presiona {0} dos veces para abrir el diálogo {1}.
clion.onboarding.lesson.name=Familiarízate con {0}
clion.onboarding.module.description=Una breve descripción de las principales características en {0}
clion.onboarding.module.name=Tour de iniciación
clion.onboarding.no.toolchain=Para compilar y ejecutar el código, primero necesitas <callback id\="{0}">configurar</callback> un compilador C/C++.
clion.onboarding.project.view.description=La vista de <strong>Proyecto</strong> es una de las principales ventanas de herramientas. Contiene el directorio del proyecto, bibliotecas externas y archivos temporales. Haz clic en el botón rayado para previsualizar el contenido del proyecto demo. También puedes abrirlo presionando {0}.
clion.onboarding.return.to.welcome=\ y volver a la pantalla de bienvenida
clion.onboarding.run.options=Has abierto el proyecto demo. ¡Ahora vamos a ejecutarlo\! En el área resaltada de la barra de herramientas, puedes ver acciones populares de ejecución para la configuración seleccionada. Por ejemplo, puedes hacer build de tu código {0}, ejecutarlo {1}, debuggearlo {2}, ejecutar con coverage {3}, hacer profiling {4}, y ejecutar con memcheck {5}.
clion.onboarding.run.sample=Por ahora, ejecutemos el archivo actual, haz clic en {0} o presiona {1}.
clion.onboarding.run.sample.balloon=Ejecutemos el archivo actual, haz clic en {0} o presiona {1}.
clion.onboarding.search.everywhere.description=Como puedes ver, el texto seleccionado, {0}, se ha copiado automáticamente en la cadena de entrada. Escribamos {1} en lugar de {0}.
clion.onboarding.select.fix=Aplica el primer elemento\: {0}. Con esta corrección, tu código se ve ordenado.
clion.onboarding.select.item=<ide/> muestra opciones de autocompletado automáticamente mientras escribes. Selecciona el elemento {0} usando las flechas del teclado y presiona {1}.
clion.onboarding.start.debugging=Haz clic en el icono {0} para iniciar el proceso de debugging.
clion.onboarding.start.typing=Y luego comienza a escribir {0} para reducir la lista de autocompletado o selecciona este elemento y presiona {1}.
clion.onboarding.stop.debugging=Detengamos el debugging. Haz clic en el icono {0}.
clion.onboarding.toggle.breakpoint.1=Puede que notes que en lugar del valor esperado {0}, la función {1} devuelve {2}. Detengámonos en la sentencia return para debuggear el código problemático.
clion.onboarding.toggle.breakpoint.2=Haz clic en el margen dentro del área resaltada para establecer un breakpoint.
clion.onboarding.toggle.case.part=case
clion.onboarding.toolchain.description=<ide/> ya ha configurado una toolchain C/C++ predeterminada para este curso. Puedes modificarla o crear otra para tus proyectos. Para hacerlo, ve a Preferencias -> Build, Execution, Deployment -> Toolchains.
clion.onboarding.toolchain.tip=<strong>Consejo\:</strong> Puedes configurar tus toolchains de C/C++ en las preferencias de <ide/> bajo Build, Execution, Deployment -> Toolchains.
clion.onboarding.type.division=Una vez que has descubierto el problema en el código, vamos a arreglarlo. Divide la suma resultante por la longitud de los valores. El script de la lección ya inserta {0}.
clion.postfix.completion.complete=Selecciona {0} de la lista y presiona {1} para completar la sentencia.
clion.postfix.completion.type=Para C++, el autocompletado postfix puede ser especialmente útil para los casos de envolver con un cast estilo C++, `make_shared`/`make_unique`, varios bucles y los idiomas `begin`/`end`. Escribe {0} después del nombre de la clase para ver las opciones de Autocompletado Postfix.
clion.qfix.name.remove.parameter=Eliminar declaración del parámetro 'redundant'
clion.quick.fix.use.range.based.loop="Usar bucle for basado en rangos"
clion.rad.change.signature.move.parameter.down=Mueve el parámetro {0} debajo del parámetro {1} haciendo clic en el botón Mover abajo.
clion.rad.intn.name.replace.if=Convertir sentencia 'if' a expresión '?\:'
clion.rad.qfix.name.remove.parameter=Eliminar parámetro no utilizado
clion.refactorings.module.description=Mantén tu código ordenado con rename, extract y otros tipos de refactorizaciones.
clion.refactorings.module.name=Refactorizaciones
clion.rename.again=La refactorización Rename tiene algunas opciones adicionales. Intenta renombrar {0} a {1} nuevamente. Haz clic en cualquier ocurrencia del nombre de tipo {0} en el código y presiona {2}.
clion.rename.applied=<ide/> ha cambiado ahora el nombre de la plantilla de clase en la declaración/definición así como en todos los usos. Esto funcionará en todo el proyecto. Ten en cuenta que la refactorización rename {0} renombra automáticamente la ocurrencia de {1} dentro de este comentario.
clion.rename.conclusion=<ide/> ha cambiado nuevamente el nombre de la plantilla de clase, pero a diferencia de antes, esto no afecta al comentario.
clion.rename.description=La refactorización Rename te permite renombrar símbolos, archivos y directorios globalmente con todas las referencias a ellos en el código corregidas automáticamente.
clion.rename.dialog.next.button=Siguiente
clion.rename.dialog.title=Rename
clion.rename.disable.update.option=Deshabilitar "También renombrar en comentarios y cadenas"
clion.rename.enable.update.option=Habilitar "{0}"
clion.rename.found.usages=<ide/> muestra todas las ocurrencias textuales que se encuentran en comentarios y literales de cadena.
clion.rename.found.usages.options=Puedes usar los controles de la barra de herramientas para navegar / agrupar / filtrar las ocurrencias encontradas aquí.
clion.rename.help.link=Refactorizaciones Rename
clion.rename.lesson.name=Rename
clion.rename.option.text=Buscar en comentarios y literales de cadena
clion.rename.press.rename=Presiona {0} para renombrar la plantilla de clase {1}.
clion.rename.show.option.popup=Haz clic en los iconos junto al elemento que se está renombrando o presiona {0} para acceder a las opciones adicionales.
clion.rename.type.new.name=Escribe un nuevo nombre para esta plantilla de clase (por ejemplo, {0}) y presiona {1}.
clion.rename.undo=Como cualquier refactorización, renombrar un tipo puede deshacerse fácilmente con Deshacer. Presiona {0}.
clion.run.configuration.add.new.program.arguments=Escribe {0} en Argumentos del Programa y haz clic en Ejecutar
clion.run.configuration.dialog.run.button=Ejecutar
clion.run.configuration.dialog.title=Configuraciones de Ejecución/Debugging
clion.run.configuration.gutters=Hay más de una forma de ejecutar tu código. Puedes ejecutarlo desde el margen haciendo clic en {0} y seleccionando el elemento {1}. Alternativamente, puedes presionar {2}.
clion.run.configuration.lesson.name=Configuración de ejecución
clion.run.configuration.program.arguments=Argumentos del programa
clion.run.configuration.run.current=Ejecutemos este programa demo haciendo clic en {0} en la barra de herramientas.
clion.run.configuration.run.current.balloon=Ejecutemos este ejemplo
clion.run.configuration.settings.description=Este es un lugar para gestionar todas las configuraciones de ejecución. Aquí puedes establecer parámetros del programa, directorio de trabajo, variables de entorno, etc.
clion.run.debug.module.description=Ejecuta tu código y corrige errores con el debugger visual del IDE.
clion.run.debug.module.name=Ejecutar y debuggear
clion.selection.select.string=Presiona {0} nuevamente para seleccionar toda la cadena.
clion.smart.completion.finish.completion=Selecciona {0} y presiona {1}.
clion.smart.completion.help.link=Autocompletado por coincidencia de tipo
clion.smart.completion.introduction=Smart Type Completion filtra la lista de sugerencias para incluir solo los tipos aplicables dentro del contexto actual.
clion.smart.completion.use.smart.completion=En este caso, solo tiene sentido pasar un valor del enum {0} a la función {1}. Presiona {2} para ver la lista de sugerencias coincidentes. Ten en cuenta que solo se muestran los diferentes valores del enum {0}.
clion.statement.completion.complete.condition=Agrega una condición dentro de los paréntesis {0} y presiona {1} para saltar dentro de la sentencia {2}.
clion.statement.completion.complete.finish.body=Escribe una línea de código\: {0} y luego presiona {1} para completar la sentencia y aplicar el formato.
clion.statement.completion.complete.for=Presiona {0} para completar la sentencia {1}.
clion.statement.completion.complete.if=Escribe {0} y presiona {1} para generar la sentencia.
clion.statement.completion.help.link=Autocompletado de sentencias
clion.statement.completion.lesson.intro1=Puedes crear construcciones de código sintácticamente correctas usando el autocompletado de sentencias. Inserta los elementos de sintaxis necesarios (paréntesis, llaves y punto y coma) y te coloca en una posición donde puedes comenzar a escribir la siguiente sentencia.
clion.statement.completion.lesson.intro2=Complete Statement funciona para completar declaraciones (como clases, namespaces y enums) y sentencias (<code>if/else</code>, <code>while</code>, <code>do</code>, <code>for</code>, <code>switch/case</code>, <code>try/catch</code>).
clion.statement.completion.lesson.name=Autocompletado de sentencias
clion.tab.completion.lesson.intro=El autocompletado con Tab (en lugar de Return) no solo inserta la sugerencia seleccionada, sino que reemplaza completamente la palabra en el cursor. Esto puede ser beneficioso para corregir rápidamente tu código ya que no tienes que seleccionar y eliminar manualmente la palabra.
clion.tab.completion.lesson.name=Autocompletado con Tab
clion.tab.completion.select.item=Selecciona el elemento {0} usando las flechas del teclado o simplemente comienza a escribirlo.
clion.tab.completion.start.completion=Digamos que quieres reemplazar {0} con el miembro de clase {1} aquí. Presiona {2} para ver las sugerencias de autocompletado.
clion.tab.completion.use.tab.completion=Si presionas {0}, insertarás {1} antes de {2}. En su lugar, presiona {3} para reemplazar {2} con {1}.
toolbar.settings.button=Configuración de IDE y Proyecto
unwrap.try=Desenvolver 'if...'