basic.completion.activate.explicitly=Para activar el autocompletado básico explícitamente, presiona {0}.
basic.completion.finish.explicit.completion=Selecciona {0} y presiona {1}.
basic.completion.help.code.completion=Autocompletado básico
basic.completion.just.press.to.complete=Ahora simplemente presiona {0} para completar esta declaración.
basic.completion.lesson.name=Autocompletado básico
basic.completion.start.typing=Por defecto, <ide/> propone el autocompletado para tu código instantáneamente. Comienza a escribir {0} justo donde está el cursor y verás la lista de sugerencias coincidentes.
code.assistance.module.description=Aprende cómo formatear tu código, obtener información de parámetros y previsualizar ventanas emergentes rápidas.
code.assistance.module.name=Asistencia de código
code.completion.module.description=Deja que el IDE complete tu código. Prueba el autocompletado básico, inteligente y otros tipos.
code.completion.module.name=Autocompletado de código
code.format.help.link=Configurando el estilo de código
code.format.lesson.name=Formato de código
code.format.optimize.imports=Aquí puedes configurar las opciones de reformateo. Por ejemplo, activa {0} y haz clic en "{1}".
code.format.reformat.file=Para reformatear todo el archivo cuando no hay líneas seleccionadas, usa {0}.
code.format.reformat.selection=<ide/> puede ayudarte a corregir el formato del código con una sola acción. Presiona {0} para reformatear el fragmento de código seleccionado.
code.format.show.reformat.file.dialog=Usa {0} para mostrar la configuración de reformateo.
collapse.all.collapse=Si quieres contraer todas las regiones en el archivo, presiona {0}.
collapse.all.expand=De manera similar, presiona {0} para expandir todas las regiones disponibles.
collapse.help.link=Expandir o contraer elementos de código
collapse.hit.expand=Para expandir una región de código, presiona {0}.
collapse.lesson.name=Contraer
collapse.try.collapse=A veces necesitas contraer un fragmento de código para mejorar la legibilidad. Intenta contraer un fragmento de código con {0}.
comment.block.comment=Para comentar con comentario de bloque {0}, selecciona un bloque de código y presiona {1}.
comment.block.lesson.name=Comentar líneas y bloques de código
comment.block.uncomment=Para descomentar un comentario de bloque, coloca el cursor en cualquier parte del bloque comentado y presiona {0}.
comment.line.comment.any.line=Comenta cualquier línea con {0}.
comment.line.comment.several.lines=Selecciona varias líneas y luego coméntalas con {0}.
comment.line.lesson.name=Comentar línea
comment.line.uncomment.several.lines=Para descomentar múltiples líneas, selecciona todas las líneas comentadas y presiona {0}.
comment.line.uncomment.that.line=Descomenta la línea comentada con el mismo atajo\: coloca el cursor en cualquier parte de esa línea y presiona {0}.
completion.with.tab.begin.completion=Presiona {0} para ver las sugerencias de autocompletado. Si no ves {1} en la lista de sugerencias, comienza a escribir {1} hasta que veas esta entrada.
completion.with.tab.finish.with.tab=Selecciona "{0}" y presiona {1}. Esta acción no solo inserta la sugerencia seleccionada sino que reemplaza completamente la palabra en el cursor.
completion.with.tab.lesson.name=Autocompletado con tab
context.actions.apply.intention=Vamos a aplicar la acción "{0}".
context.actions.fix.warning=Vamos a aplicar la primera corrección rápida\: {0}.
context.actions.help.intention.actions=Acciones de intención
context.actions.invoke.general.intentions=Puedes invocar "{0}" en casi cualquier contexto. Veamos qué podemos hacer en otra posición del cursor. Presiona {1} nuevamente.
context.actions.invoke.intentions.for.warning=<ide/> tiene cientos de acciones dependientes del contexto que te ayudan a transformar, mejorar y corregir tu código. Presiona {1} para invocar {0}.
context.actions.lesson.name=Acciones contextuales
context.actions.refactorings.promotion=Ten en cuenta que muchas refactorizaciones útiles no están disponibles a través de {0}. Ve al módulo {1} para aprender cómo invocarlas y usarlas.
debug.workflow.check.result=Presiona {0} para evaluar la declaración de retorno seleccionada.
debug.workflow.choose.method.to.step.in=Ten en cuenta que hay varias llamadas anidadas, y el Paso Inteligente resalta todas ellas. Presiona {1} para elegir la llamada {0} y luego presiona {2} para entrar en ella.
debug.workflow.consider.to.add.a.shortcut=(considera asignar un atajo más tarde)
debug.workflow.evaluate.expression=Para verificar si una función lanza una excepción, puedes evaluar una expresión que llame a esta función. Vamos a copiar la expresión seleccionada y pegarla en el campo resaltado en la ventana de Depuración.
debug.workflow.evaluate.it=Presiona {0} para evaluar la expresión.
debug.workflow.exception.description=El programa lanza una excepción y puedes ver su traza de pila en la ventana de Ejecución. Ten en cuenta que puedes hacer clic en los nombres de archivo y números de línea en la traza de pila para navegar al editor.
debug.workflow.fix.error=¡Oh, hay un error en el índice del array\! Vamos a corregirlo ahora mismo. Presiona {0} para cerrar la ventana emergente, y luego cambia 0 por 1.
debug.workflow.frames.disabled.warning=Para continuar esta lección, <callback id\="{0}">habilita</callback> la vista {1} en la ventana de herramientas de depuración.
debug.workflow.help.link=Depurar código
debug.workflow.incorrect.breakpoints=Los puntos de interrupción están configurados incorrectamente para esta lección.
debug.workflow.lesson.name=Flujo de trabajo de depuración
debug.workflow.mute.breakpoints=Ups, nuestro punto de interrupción se activó de nuevo, pero no tenemos que detenernos aquí esta vez. Vamos a silenciar los puntos de interrupción haciendo clic en "{0}" en la ventana de Depuración.
debug.workflow.need.restart.lesson=La sesión de depuración se ha detenido. Reinicia la lección.
debug.workflow.quick.evaluate=Veamos qué vamos a pasar a {0}. Presiona {1} para invocar la Evaluación Rápida de Expresión para el argumento seleccionado.
debug.workflow.resume=La llamada funciona sin excepciones ahora. Presiona {0} o haz clic en "{1}" en la ventana de Depuración para reanudar la ejecución del programa.
debug.workflow.run.current=Vamos a ejecutar este programa de ejemplo que calcula la cantidad promedio de diferentes frutas desde la entrada.
debug.workflow.run.to.cursor.alternative=Alternativamente, pasa el mouse sobre el área izquierda y haz clic en la acción incrustada {0}.
debug.workflow.run.to.cursor.intro=Finalmente, vamos a verificar el resultado de {0} (para tu conveniencia hemos movido el cursor a su declaración {1}).
debug.workflow.run.to.cursor.note=Ten en cuenta que {0} funciona incluso si los puntos de interrupción están silenciados.
debug.workflow.run.to.cursor.press=Presiona {0} para ejecutar el programa hasta la línea donde está el cursor.
debug.workflow.start.debug=Para iniciar la depuración con la configuración de ejecución seleccionada actualmente, haz clic en "{0}" en la barra de herramientas o presiona {1}.
debug.workflow.step.into=Para descubrir qué causó la excepción, vamos a entrar en la llamada seleccionada. Presiona {0} o haz clic en "{1}" en la ventana de Depuración.
debug.workflow.step.over=Veamos si llamar a {0} lanzará una excepción después de nuestra corrección. Para pasar por encima de la llamada, presiona {1} o haz clic en "{2}" en la ventana de Depuración.
debug.workflow.stop.debug=¡El resultado es correcto\! Vamos a terminar la depuración presionando {0} o haciendo clic en "{1}" en la barra de herramientas.
debug.workflow.toggle.breakpoint=Vamos a establecer un punto de interrupción para comenzar a investigar el problema. Para hacerlo, haz clic en el margen en la línea deseada o coloca el cursor en esa línea y presiona {0}.
debug.workflow.use.watches=En efecto, esta expresión resulta en una excepción. Vamos a agregar esta expresión a {0} para que se evalúe automáticamente en el futuro. Presiona {1} o haz clic en "{2}".
debug.workflow.use.watches.shortcut=Alternativamente, puedes usar la acción "{0}" para agregar el texto seleccionado a {1} {2}.
declaration.and.usages.find.usages=Presiona {0} para ver una vista más detallada de los usos. Puedes invocar {0} tanto en una declaración como en un uso.
declaration.and.usages.help.link=Ir a la declaración y su tipo
declaration.and.usages.hide.view=Cuando hayas terminado de explorar los usos, presiona {0} para ocultar la vista.
declaration.and.usages.jump.to.declaration=Presiona {0} para saltar a la declaración de un método.
declaration.and.usages.lesson.name=Declaración y usos
declaration.and.usages.open.find.view=Presiona {0} para abrir la vista {1} nuevamente.
declaration.and.usages.pin.motivation=Desde la vista {0} puedes navegar tanto a los usos como a las declaraciones. La siguiente búsqueda sobrescribirá estos resultados en la vista {0}. Para evitarlo, fija los resultados.
declaration.and.usages.right.click.tab=Para fijar la pestaña, haz clic derecho en el título de la pestaña resaltada.
declaration.and.usages.select.pin.item=Selecciona {0}.
declaration.and.usages.show.usages=Ahora el cursor está en la declaración del método. Usa el mismo atajo {0} para ver todos sus usos, luego selecciona uno de ellos.
duplicate.and.delete.lines.delete.line=Para eliminar la línea actual, presiona {0}.
duplicate.and.delete.lines.duplicate.line=Duplica la línea en el cursor con {0}.
duplicate.and.delete.lines.duplicate.several.lines=Ahora presiona {0} para duplicar las líneas seleccionadas.
duplicate.and.delete.lines.lesson.name=Duplicar y eliminar líneas
duplicate.and.delete.lines.select.several.lines=Puedes aplicar la misma acción a múltiples líneas. Por ejemplo, presiona {0} dos veces para seleccionar la línea actual y la anterior.
duplicate.and.delete.lines.unexpected.selection.restore=Selección inesperada
editor.basics.module.description=Agrega, elimina, selecciona, mueve y duplica tu código con atajos inteligentes.
editor.basics.module.name=Fundamentos del editor
editor.coding.assistance.fix.error=Vamos a corregir este error. Presiona {0} y selecciona {1}.
editor.coding.assistance.fix.warning=La ventana emergente muestra una sugerencia de refactorización para corregir este warning.
editor.coding.assistance.goto.next.error=Presiona {0} para ir al siguiente error resaltado en el archivo.
editor.coding.assistance.goto.next.warning=Vamos al siguiente warning. Presiona {0}.
editor.coding.assistance.help.link=Trabajar con código fuente
editor.coding.assistance.highlight.usages=Otra herramienta útil es el resaltado de usos. Presiona {0} para resaltar todos los usos del símbolo en el cursor dentro del archivo.
editor.coding.assistance.lesson.name=Asistencia de codificación del editor
editor.coding.assistance.show.warning.description=Presiona {0} para expandir la descripción del warning.
essential.module.description=Descubre las capacidades más esenciales de {0}
essential.module.name=Esenciales
extract.method.confirm.several.replaces=El ordenamiento Cocktail tiene dos lugares de intercambio. El primer fragmento acaba de ser extraído. Haz clic en {0} para extraer ambos.
extract.method.help.link=Extraer método
extract.method.invoke.action=Presiona {0} para extraer el bloque de código seleccionado a un método.
extract.method.lesson.name=Extraer método
extract.method.second.fragment=Ahora puedes confirmar o rechazar el reemplazo del segundo fragmento.
extract.method.start.refactoring=Haz clic en {0} para iniciar la refactorización.
extract.variable.choose.name=Elige un nombre para la nueva variable o déjala como está. Presiona {0} para completar la refactorización.
extract.variable.help.link=Extraer/Introducir variable
extract.variable.lesson.name=Extraer variable
extract.variable.replace.all=Este bloque de código contiene 3 ocurrencias de la expresión seleccionada. Elige el segundo elemento de la lista para reemplazarlas todas.
extract.variable.start.refactoring=Presiona {0} para extraer una variable local de la expresión {1}.
file.structure.help.link=Ver estructura del archivo fuente
file.structure.lesson.name=Estructura del archivo
file.structure.navigate=Solo queda un elemento. Ahora presiona {0} para saltar al elemento seleccionado.
file.structure.open.popup=Un archivo fuente grande puede ser difícil de leer y navegar. A veces solo necesitas previsualizarlo. Presiona {0} para abrir la estructura del archivo.
file.structure.request.prefixes=Supongamos que quieres encontrar un método con las palabras {0} y {1} en su nombre. Escribe {2} (prefijos de las palabras requeridas) para filtrar la estructura del archivo.
file.structure.toolwindow=<ide/> también puede mostrar la estructura del archivo como una ventana de herramientas. Ábrela con {0}.
find.help.link=Buscar un objetivo dentro de un archivo
find.in.files.confirm.replace=Finalmente, haz clic en {0} en el diálogo para confirmar.
find.in.files.go.to.file=Además, puedes abrir el archivo seleccionado en el editor principal. Presiona {0} o haz doble clic en el elemento resaltado para ir al archivo correspondiente.
find.in.files.help.link=Buscar y reemplazar texto en archivos del proyecto
find.in.files.lesson.name=Buscar y reemplazar en archivos
find.in.files.popup.closed.warning.message=Presiona {0} para abrir la ventana {1} nuevamente.
find.in.files.press.replace.all=Haz clic en {0} para iniciar el reemplazo.
find.in.files.select.directory=Puedes definir el alcance de la búsqueda y reemplazo. Haz clic en el botón {0} o presiona {1} para limitar el reemplazo solo al directorio actual.
find.in.files.select.row=Puedes ver el contexto de la cadena encontrada en el editor integrado. Haz clic en la fila resaltada o navega hasta ella usando los botones {0} y {1}.
find.in.files.show.find.popup=Supongamos que quieres encontrar todas las ocurrencias de alguna cadena en el proyecto. Presiona {0} para abrir la ventana {1}.
find.in.files.show.replace.popup=Supongamos que quieres reemplazar todas las ocurrencias encontradas con otra cadena. Puede ser muy tedioso realizar el reemplazo secuencialmente en cada archivo. <ide/> te ayudará con esta tarea. Presiona {0} para abrir la ventana {1}.
find.in.files.type.to.find=Escribe {0} para buscar todas las ocurrencias textuales en el proyecto de Aprendizaje.
find.in.files.type.to.replace=Vamos a reemplazar todas las ocurrencias de {0} con {1}. Escribe {1} en el campo resaltado.
find.in.files.whole.words=Se suponía que debías encontrar la cadena {0} pero también obtuviste algunas entradas {1}. Reduzcamos la búsqueda a una palabra completa. Haz clic en {2} o presiona {3}.
find.occurrences.close.search.tool=Con el panel de búsqueda cerrado, aún puedes usar estos atajos para navegar entre las ocurrencias encontradas recientemente. Cerremos el panel de búsqueda presionando {0}.
find.occurrences.find.next=<ide/> automáticamente copia el texto seleccionado en el campo de búsqueda. Busquemos la siguiente ocurrencia. Presiona {0} o {1}.
find.occurrences.find.next.in.editor=Localiza la siguiente ocurrencia con {0}.
find.occurrences.find.previous=Para saltar a la ocurrencia anterior, presiona {0}.
find.occurrences.find.previous.in.editor=Y {0} para ir hacia atrás.
find.occurrences.invoke.find=En esta lección, seleccionaste {0}. Presiona {1} para iniciar una búsqueda de texto completo en el archivo actual.
find.occurrences.lesson.name=Siguiente/anterior ocurrencia
find.occurrences.note.about.cyclic=<strong>Nota\:</strong> La búsqueda es cíclica. Cuando presionas {0} dos veces en la última ocurrencia, se seleccionará la primera ocurrencia. {1} también es cíclico.
find.occurrences.search.closed.warning=Presiona {0} para abrir el campo de búsqueda nuevamente.
goto.action.first.lines.toggle=Cambiar los números de línea a {0, choice, 0\#desactivados|1\#activados}.
goto.action.invoke.about.action=Por ejemplo, si quieres saber acerca de <ide/>, escribe {0} y presiona {1}.
goto.action.invoke.again=También puedes usar {0} o doble {1} para cambiar la configuración del IDE y del proyecto. Presiona uno de estos atajos nuevamente.
goto.action.lesson.name=Buscar acciones
goto.action.mac.workaround=Si se abre la búsqueda de <strong>Terminal</strong> en lugar de {0}, consulta <a href\="{1}">este artículo</a>.
goto.action.popup.closed.warning.message=Presiona {0} o presiona {1} dos veces para abrir la ventana de búsqueda nuevamente.
goto.action.propose.to.go.next.new.ui=¡Excelente\! Solo presiona {0} o haz clic en el botón de abajo para comenzar la siguiente lección.
goto.action.second.lines.toggle=Ahora cambia los números de línea de vuelta a {0, choice, 0\#activados|1\#desactivados}.
goto.action.show.line.numbers.request=Escribe {0} para ver el selector de {1}.
goto.action.to.return.to.the.editor=Presiona {0} para volver al editor.
goto.action.use.find.action.1=Uno de los atajos más útiles es {0}. Te permite buscar todas las acciones disponibles del IDE sin necesidad de conocer sus nombres exactos o atajos. Pruébalo ahora con {1}.
goto.action.use.find.action.2=Alternativamente, puedes presionar {1} dos veces para invocar {0}, que te ayuda a encontrar entidades de código del proyecto <strong>y</strong> elementos del IDE. La elección es tuya.
help.code.comment=Comentar y descomentar código
help.code.completion=Completado de código
help.code.duplicate=Duplicar línea o selección
help.find.actions=Buscar acciones y configuraciones
help.lines.of.code=Líneas de código
help.search.everywhere=Buscar en todas partes
local.history.close.window=Cierra el diálogo para volver al código modificado. Presiona {0}.
local.history.congratulations=¡Excelente\! ¡Has restaurado tu fragmento de código\!
local.history.dialog.message=El IDE simula el proceso de edición de un archivo. Por favor espera hasta que se complete.
local.history.editor.hint=La modificación de archivo está deshabilitada para el paso actual.
local.history.file.modification.progress=Modificando archivo
local.history.help.link=Historial Local
local.history.imagine.restore=Imagina que necesitas restaurar código que fue eliminado anteriormente. {0} no funcionará porque ha habido múltiples cambios desde entonces y no quieres perder esos cambios.
local.history.invoke.context.menu=Usa {0} para restaurar el código eliminado con solo unos pocos clics. Haz clic derecho en cualquier lugar del editor para abrir el menú contextual.
local.history.lesson.name=Restaurar código eliminado
local.history.remove.code=En esta lección, aprenderás cómo restaurar código usando {0}. Presiona {1} para eliminar el fragmento de código seleccionado.
local.history.restore.code=El panel derecho muestra las diferencias entre las revisiones seleccionada y actual del archivo. En este caso, la revisión seleccionada contiene el código que fue eliminado anteriormente. Para restaurar el fragmento de código, haz clic en el botón chevron {0}.
local.history.restore.code.balloon=Haz clic para restaurar el fragmento de código
local.history.select.revision=El panel izquierdo del diálogo {0} muestra una lista de revisiones guardadas del archivo actual. El estado del proyecto se guarda automáticamente en {1} cada vez que editas código, ejecutas pruebas o realizas otras acciones. Seleccionemos la revisión que está resaltada.
local.history.show.history=Elige {0} → {1}.
move.lesson.name=Mover fragmentos de código
move.pull.down=Reorganizar líneas generalmente involucra dos acciones\: cortar y pegar. Con <ide/>, puedes hacerlo con una sola acción. Presiona {0} para mover la línea actual hacia abajo.
move.pull.up=De manera similar, para mover una línea hacia arriba, presiona {0}.
move.whole.method.down=Ahora muévelo hacia abajo con {0}.
move.whole.method.up=Intenta mover todo el método hacia arriba con {0}. Ten en cuenta que el cursor debe estar en el encabezado del método.
multiple.selections.deselect.symbol=Presiona {0} para deseleccionar la última ocurrencia.
multiple.selections.escape=Presiona {0} para resetear las selecciones múltiples y volver al modo de cursor único.
multiple.selections.help.multiple.carets=Múltiples cursores y rangos de selección
multiple.selections.lesson.name=Selecciones múltiples
multiple.selections.replace=Escribe {0} para reemplazar todas las ocurrencias de {1} con {0}.
multiple.selections.select.all=Presiona {0} para seleccionar todas las ocurrencias en el archivo.
multiple.selections.select.next.symbol=Presiona {0} nuevamente para seleccionar la siguiente ocurrencia de este símbolo.
multiple.selections.select.symbol=Presiona {0} para seleccionar el símbolo en el cursor.
navigation.module.description=Saltar al código fuente, navegar a declaraciones, implementaciones y estructura de archivo.
navigation.module.name=Navegación
new.selection.add.quotes=Presiona {0} por tercera vez para incluir las comillas en la selección.
new.selection.select.call=Presiona {0} {1,choice,1\#una|2\#dos|3\#tres|4\#cuatro} veces más para seleccionar toda la llamada.
new.selection.select.if=Hemos movido el cursor al inicio de la sentencia {0}. Presiona {1} dos veces para seleccionarla. Una palabra clave puede ser un buen punto de partida para elegir la sentencia correspondiente con solo algunas pulsaciones.
new.selection.select.string=Presiona {0} nuevamente para seleccionar toda la cadena.
new.selection.select.word=Presiona {0} para seleccionar la palabra bajo el cursor.
new.selection.unselect=Supongamos que en realidad queremos seleccionar sus argumentos en lugar de toda la llamada. Presiona {0} para reducir la selección de vuelta a los argumentos.
onboarding.finish.exit=Cerrar proyecto de demostración
onboarding.finish.modules=Mostrar más lecciones
onboarding.finish.text=Acabas de completar el tour de iniciación de <ide/>.\nAhora puedes cerrar el proyecto de aprendizaje{0}.\nTambién puedes continuar tu estudio y probar otras lecciones.
onboarding.finish.title=Felicitaciones
onboarding.return.to.welcome.remark=\ y volver a la pantalla de bienvenida
parameter.info.add.parameters=Usa un ancho de {0} y una altura de {1}.
parameter.info.help.link=Información de parámetros
parameter.info.lesson.name=Información de parámetros
parameter.info.use.action=La ventana emergente {0} muestra los nombres de los parámetros en llamadas a métodos y funciones. <ide/> muestra automáticamente una ventana emergente con todas las firmas de métodos disponibles en un segundo después de que escribes un paréntesis de apertura en el editor, o seleccionas un método de la lista de sugerencias. Presiona {1} para ver la firma del método.
postfix.completion.help.link=Completado de código postfijo
postfix.completion.intro=El Completado Postfijo te ayuda a reducir los saltos del cursor hacia atrás mientras escribes código. Te permite transformar una expresión ya escrita en otra basada en el postfijo que agregues, el tipo de expresión y su contexto.
postfix.completion.lesson.name=Completado postfijo
proceed.to.the.next.step=<callback id\="{0}">Haz clic para continuar</callback>
quick.popups.close=Presiona {0} para cerrar la ventana emergente.
quick.popups.help.link=Ventanas emergentes rápidas
quick.popups.lesson.name=Ventanas emergentes rápidas
quick.popups.press.show.documentation.again=Presiona {0} de nuevo para abrir esta documentación en la ventana de Documentación.
quick.popups.press.show.documentation.focus=Haz clic sobre la vista de Documentación o presiona {0} una vez más para mover el foco allí.
quick.popups.show.documentation=Puedes obtener información rápida de cualquier símbolo directamente desde el editor mediante la función {0}. Presiona {1} para ver la documentación del símbolo en el cursor.
quick.popups.show.implementation=Presiona {0} para ver la definición del símbolo en el cursor.
readme.bug.tracker.remark=Si hay otro problema, intenta reiniciar la lección o reporta el error en [nuestro bug tracker]({0}).
readme.conclusion.header=Vuelve a tu proyecto
readme.exit.options=Para volver a la pantalla de bienvenida, simplemente cierra la ventana del proyecto. Alternativamente, puedes seleccionar `{0} | {1}` desde el menú principal. También puedes usar el menú `{0}` para abrir o crear nuevos proyectos. Por defecto, la ventana de herramientas `{2}` está oculta. Puedes abrirla seleccionando `{3} | {4}` desde el menú principal.
readme.experienced.users.remark=Aunque una lección te resulte familiar, dale una oportunidad\: ¡podrías descubrir ejemplos útiles y atajos desconocidos de las funciones que usas activamente\!
readme.feedback.request=¡Agradeceremos que nos dejes tu opinión sobre este curso de aprendizaje\!
readme.ift.description=Este curso interactivo te guiará a través de numerosos flujos de trabajo y casos de uso del IDE. Incluye muchos atajos de acción útiles. No necesitas memorizar todos ellos. En su lugar, pruébalos y adopta los que te resulten más útiles. Como durante tu trabajo diario podrías encontrar nuevos problemas, revisa este curso y dale una segunda oportunidad a otras funciones. Mantente atento a nuevas lecciones que te ayudarán a ser más productivo con {0}.
readme.indexing.description=Probablemente estés leyendo este `README.md` durante la inicialización del proyecto de aprendizaje. Normalmente, la `indexación` es la operación que más tiempo consume durante la inicialización del proyecto. El IDE necesitará recopilar información sobre tu entorno, proyecto{0,choice,1\#, bibliotecas|2\#} y construir la representación interna. Esto es necesario para la navegación y búsqueda rápida.
readme.navigation.hint=El módulo `{0}` en este curso te mostrará cómo usarlo.
readme.shortcuts.header=Gestionar atajos
readme.shortcuts.problem.description=Algunos atajos en este curso pueden entrar en conflicto con los atajos del sistema u otras aplicaciones. En este caso, puedes hacer clic en el atajo problemático en el texto de la lección. La ventana emergente mostrará el nombre de la acción y atajos alternativos. Podrás aplicar la acción o asignar un nuevo atajo.
readme.start.header=Comenzar
readme.toolwindow.description=La ventana de herramientas `{0}` contiene varios módulos con sus correspondientes conjuntos de lecciones que puedes tomar en cualquier orden. Cuando termines de estudiar una lección, se marcará como completada. Puedes usar una lección completada como referencia o reiniciarla si deseas refrescar tus conocimientos.
readme.usage.header=Cómo usar el curso
readme.welcome.header=Conoce el Entrenador Interactivo de Funciones
recent.files.close.popup=Ahora el historial de nuestros archivos recientes está más limpio. Haz clic en cualquier lugar fuera de la ventana emergente para cerrarla o usa {0}.
recent.files.delete=Esta lista contiene muchos archivos fuente que ya no queremos abrir. Eliminemos {0} archivos de nuestro historial de archivos recientes usando {1}.
recent.files.dialog.message=Queremos simular un flujo de trabajo básico\: navegación rápida entre archivos. Por favor, espera hasta que se complete.
recent.files.dialog.title=Simulación de Flujo de Trabajo
recent.files.first.transition=¿Te preguntas cómo está implementado el método {0}? Vamos a su declaración usando {1}.
recent.files.lesson.name=Archivos y ubicaciones recientes
recent.files.locations.help.link=Buscar archivos recientes
recent.files.locations.search.jump=Ahora selecciona el fragmento resaltado y presiona {0} para abrir el archivo que lo contiene.
recent.files.locations.search.typing=Aquí puedes buscar por fragmentos de código que recuerdes. Escribe {0}
recent.files.progress.title=Abriendo archivos
recent.files.search.jump=Solo queda un archivo. Ahora presiona {0} para saltar al archivo seleccionado.
recent.files.search.typing=Puedes buscar el archivo por su nombre. Escribe {0} (prefijos de las palabras requeridas).
recent.files.show.recent.files=Nos hemos adentrado en los archivos de la biblioteca. ¿Cómo podemos volver a nuestro archivo? <ide/> tiene una función que puede ayudarnos a mostrar los archivos abiertos recientemente. Presiona {0}.
recent.files.show.recent.locations=Con otra acción útil, puedes descubrir tu código en los archivos visitados recientemente. Presiona {0}
recent.files.use.recent.files.again=Hemos vuelto a nuestro archivo. Pero veamos los archivos recientes de nuevo usando {0}.
refactoring.menu.finish.refactoring=Para completar la refactorización, elige un nombre para el nuevo parámetro o deja el predeterminado y presiona {0}.
refactoring.menu.help.link=Invocar refactorización
refactoring.menu.introduce.parameter=Supongamos que necesitas mover la expresión seleccionada al punto de llamada y pasarla como parámetro del método contenedor. Selecciona "{0}" de la lista y presiona {1}.
refactoring.menu.introduce.parameter.eng=Supongamos que necesitas mover la expresión seleccionada al punto de llamada y pasarla como parámetro del método contenedor. {0} puede hacer exactamente eso. Ahora simplemente escribe <strong>pa</strong> (introduce <strong>pa</strong>rameter) o <strong>ip</strong> (<strong>i</strong>ntroduce <strong>p</strong>arameter) para reducir la lista propuesta.
refactoring.menu.lesson.name=Menú de refactorización
refactoring.menu.show.refactoring.list=<ide/> proporciona una variedad de refactorizaciones. Muchas tienen sus propios atajos, pero siempre puedes presionar {0} para listar todas las refactorizaciones disponibles en el contexto actual.
refactoring.menu.start.refactoring=Presiona {0} para iniciar la refactorización {1}. <strong>Nota</strong> que puedes aprender los atajos de refactorización desde el menú de refactorización.
refactorings.change.settings.warning.message=Para completar esta lección, cambia las opciones de refactorización en la configuración del editor. Presiona {0}, ve a {1} <strong>→</strong> {2}, y selecciona {3} bajo {4}. Alternativamente <callback id\="{5}">haz clic</callback> para cambiar la configuración.
refactorings.module.description=Mantén tu código ordenado con rename, extract y otros tipos de refactorizaciones.
refactorings.module.name=Refactorizaciones
rename.help.link=Refactorizaciones de renombrado
rename.lesson.name=Renombrar
restore.settings.informer=En esta lección, has cambiado algunas configuraciones del IDE. <callback id\="{0}">Haz clic</callback> si deseas restaurar las opciones modificadas.
run.configuration.close.settings=Ahora cierra el diálogo para terminar esta lección.
run.configuration.edit.configuration=Para editar configuraciones de ejecución o añadir nuevas, haz clic en el menú desplegable mientras mantienes presionado {0} o abre el menú desplegable y haz clic en {1}.
run.configuration.help.link=Configuraciones de ejecución/depuración
run.configuration.hover.generated.configuration=Para esta lección hemos añadido otra configuración con parámetros. Pasa el ratón sobre esta configuración para ver sus botones de Ejecutar o Depurar.
run.configuration.lesson.name=Configuración de ejecución
run.configuration.no.run.configuration=Como puedes ver, ejecutar {0} no crea ninguna configuración de ejecución.
run.configuration.open.additional.menu.balloon=Mostrar más acciones
run.configuration.open.run.configurations.popup=Ahora veamos la ventana emergente de configuraciones de ejecución. Haz clic en el menú desplegable.
run.configuration.run.current=Ejecutemos este programa de demostración haciendo clic en {0} en la barra de herramientas.
run.configuration.run.current.balloon=Ejecutemos este ejemplo
run.configuration.run.generated.configuration=Vamos a ejecutarla.
run.configuration.select.save.configuration=Selecciona {0}.
run.configuration.settings.description=Este es el lugar para gestionar todas las configuraciones de ejecución. Aquí puedes establecer parámetros del programa, argumentos JVM, variables de entorno, etc.
run.configuration.temporary.to.permanent=Ahora <ide/> ha creado una configuración de ejecución temporal. Las configuraciones temporales se eliminan automáticamente cuando su número excede el límite predeterminado de cinco. Convirtamos la configuración temporal en permanente. Haz clic en {0} junto a los botones Ejecutar y Depurar.
run.configuration.tip.about.save.configuration.into.file=Consejo\: Para hacer que una configuración de ejecución sea accesible para tus colegas, guárdala como un archivo separado y comparte este archivo a través de un sistema de control de versiones.
run.debug.module.description=Ejecuta tu código y corrige errores con el depurador visual del IDE.
run.debug.module.name=Ejecutar y depurar
search.everywhere.class.popup.closed.warning.message=Presiona {0} para abrir la ventana de búsqueda nuevamente.
search.everywhere.close.documentation.popup=Presiona {0} para cerrar la ventana emergente.
search.everywhere.finish=<strong>¡Listo\!</strong> De manera similar, puedes presionar {0} para buscar un método o variable global y {1} para buscar un archivo.
search.everywhere.goto.class=¡Excelente\! Sin embargo, a veces necesitas buscar solo clases o buscar solo en algunos directorios específicos. Usa {0} para buscar clases.
search.everywhere.invoke.search.everywhere=Presiona {1} dos veces para abrir {0}.
search.everywhere.lesson.name=Buscar en todas partes
search.everywhere.navigate.to.class=Selecciona {0} con las flechas del teclado y presiona {1} para saltar a la definición encontrada.
search.everywhere.navigation.promotion=Encontrarás otras acciones de navegación y casos de uso de flujo de trabajo en el módulo {0}.
search.everywhere.quick.documentation=Presiona {0} para previsualizar la documentación de la clase seleccionada.
search.everywhere.type.class.name=Supongamos que necesitas alguna clase de biblioteca responsable de la lectura en búfer desde un flujo de entrada. Escribe {0} (letras iniciales de las palabras de búsqueda), pero no navegues todavía.
search.everywhere.type.prefixes=Supongamos que estás buscando una definición de código con las palabras {0} y {1} en el nombre. Escribe {2} (letras iniciales de estas palabras) en el campo de búsqueda.
search.everywhere.use.all.places=Ahora puedes ver que hay una clase coincidente en el proyecto de demostración. Sin embargo, necesitamos encontrar una clase en las bibliotecas. Cambiemos el filtro {0} a {1} para mostrar las clases coincidentes de las bibliotecas disponibles.
selection.extend.selection=Presiona {0} para extender la selección al siguiente bloque de código.
selection.extend.until.whole.file=Intenta aumentar tu selección con {0} hasta que todo el archivo esté seleccionado.
selection.help.select.code.constructs=Seleccionar construcciones de código
selection.lesson.name=Expandir y reducir la selección de código
selection.select.word=Coloca el cursor antes de cualquier palabra. Presiona {0} para mover el cursor a la siguiente palabra y seleccionar todo lo que hay entre medias.
selection.shrink.selection={0} reduce la selección. Pruébalo.
smart.completion.lesson.name=Autocompletado por tipo
surround.and.unwrap.choose.surround.item=Elige el elemento {0}.
surround.and.unwrap.choose.unwrap.item=Elige el elemento {0}.
surround.and.unwrap.help.surround.code.fragments=Envolver fragmentos de código
surround.and.unwrap.help.unwrapping.and.removing.statements=Desenvolver y eliminar declaraciones
surround.and.unwrap.invoke.surround=Presiona {0} para envolver el fragmento de código seleccionado con código de plantilla.
surround.and.unwrap.invoke.unwrap=Volvamos al estado anterior con la acción de desenvolver usando {0}.
surround.and.unwrap.lesson.name=Envolver y desenvolver
surround.with.lesson.name=Envolver con