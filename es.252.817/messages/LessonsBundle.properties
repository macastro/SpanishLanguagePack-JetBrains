basic.completion.activate.explicitly=Para activar el autocompletado básico explícitamente, presiona {0}
basic.completion.finish.explicit.completion=Selecciona {0} y presiona {1}.
basic.completion.help.code.completion=Finalización básica
basic.completion.just.press.to.complete=Ahora, solo necesita presionar {0} para completar esta instrucción
basic.completion.lesson.name=Autocompletar básico
basic.completion.start.typing=De forma predeterminada, <ide/> propone la terminación de tu código al instante. Comienza a escribir {0} justo donde está el cursor y verás el listado de terminaciones con las sugerencias correspondientes.
code.assistance.module.description=Aprende a formatear código, obtener información de parámetros y previsualizar pop-ups rápidos.
code.assistance.module.name=Ayuda de código
code.completion.module.description=Deja que el IDE complete tu código. Prueba con la finalización básica, inteligente y otros tipos.
code.completion.module.name=Completado de código
code.format.help.link=Configurar estilo de código
code.format.lesson.name=Formato de código
code.format.optimize.imports=Puedes configurar las opciones de reformateado aquí. Por ejemplo, habilitar {0} y hacer clic en "{1}".
code.format.reformat.file=Para reformatear todo el archivo cuando no hay líneas seleccionadas, use {0}.
code.format.reformat.selection=<ide/> te puede ayudar con solo una acción a corregir el formateo del código. Presiona {0} para volver a dar formato al fragmento de código seleccionado.
code.format.show.reformat.file.dialog=Usar {0} para mostrar la configuración de reforma
collapse.all.collapse=Si quieres contraer todas las regiones en el archivo, presiona {0}.
collapse.all.expand=De la misma forma, pulsa {0} para expandir todas las regiones disponibles.
collapse.help.link=Desplegar u ocultar elementos de código
collapse.hit.expand=Para expandir una región de código, presiona {0}
collapse.lesson.name=Contraer
collapse.try.collapse=A veces es necesario contraer un fragmento de código para mejorar la legibilidad. Intenta colapsar un fragmento de código con {0}.
comment.block.comment=Para comentar con un comentario de bloque {0}, seleccione un bloque de código y presione {1}.
comment.block.lesson.name=Comentar líneas y bloques de código
comment.block.uncomment=Para descomentar un bloque de comentarios, coloca el cursor en cualquier parte del bloque y presiona {0}.
comment.line.comment.any.line=Comentar cualquier línea con {0}.
comment.line.comment.several.lines=Selecciona varias líneas y luego coméntalas con {0}.
comment.line.lesson.name=Comentar línea
comment.line.uncomment.several.lines=Para descomentar varias líneas, seleccionar todas las líneas comentadas y presionar {0}.
comment.line.uncomment.that.line=Descomentar la línea comentada con el mismo atajo: posiciona el cursor en cualquier lugar de esa línea y presiona {0}.
completion.with.tab.begin.completion=Presiona {0} para ver sugerencias de autocompletado. Si no ves {1} en la lista de sugerencias, empieza a escribir {1} hasta que veas esta entrada.
completion.with.tab.finish.with.tab=Selecciona {0} y presiona {1}. Esta acción no simplemente inserta la sugerencia seleccionada, sino que reemplaza completamente la palabra en el cursor.
completion.with.tab.lesson.name=Autocompletado con la tecla TAB
context.actions.apply.intention=Apliquemos la acción {0}.
context.actions.fix.warning=Apliquemos la primera corrección rápida: {0}.
context.actions.help.intention.actions=Acciones de intención
context.actions.invoke.general.intentions=Puedes invocar {0} en casi cualquier contexto. Veamos qué podemos hacer en otra posición del cursor. Presiona {1} de nuevo.
context.actions.invoke.intentions.for.warning=<ide/> cuenta con cientos de acciones dependientes del contexto que te ayudan a transformar, mejorar y corregir tu código. Presiona {1} para invocar {0}.
context.actions.lesson.name=Acciones contextuales
context.actions.refactorings.promotion=Ten en cuenta que muchas refactorizaciones útiles no están disponibles a través de {0}. Ve al módulo {1} para aprender cómo invocarlas y usarlas.
debug.workflow.check.result=Pulsa {0} para evaluar la sentencia de retorno seleccionada.
debug.workflow.choose.method.to.step.in=Tenga en cuenta que hay varias llamadas anidadas y el paso a paso inteligente las destaca todas. Presione {1} para elegir la llamada {0} y luego presione {2} para entrar en ella.
debug.workflow.consider.to.add.a.shortcut=(considere asignarle un atajo más adelante)
debug.workflow.debugger.watches=Inspecciones del depurador
debug.workflow.evaluate.expression=Para verificar si una función arroja una excepción, puede evaluar una expresión que llame a esta función. Copiemos la expresión seleccionada y peguémosla en el campo resaltado en la ventana Depurar.
debug.workflow.evaluate.it=Pulsa {0} para evaluar la expresión.
debug.workflow.exception.description=El programa genera una excepción, y puedes ver su traza de pila en la ventana Ejecutar. Ten en cuenta que puedes hacer clic en nombres de archivo y números de línea en la traza de pila para navegar al editor.
debug.workflow.fix.error=Uy, ¡hay un error en el índice del array! Vamos a arreglarlo ahora. Presiona {0} para cerrar la ventana emergente y luego cambia 0 por 1.
debug.workflow.frames.disabled.warning=Para continuar con esta lección, <callback id="{0}">habilita</callback> la vista {1} en la ventana de herramientas Depuración.
debug.workflow.help.link=Depuración de código
debug.workflow.incorrect.breakpoints=Los puntos de interrupción están establecidos incorrectamente para esta lección
debug.workflow.lesson.name=Depurar flujo de trabajo
debug.workflow.mute.breakpoints=Uy, nuestro punto de interrupción ha sido alcanzado de nuevo, pero no tenemos que frenar aquí esta vez. Vamos a silenciar los puntos de interrupción haciendo clic en {0} en la ventana de depuración.
debug.workflow.need.restart.lesson=La sesión de depuración se ha detenido. Reinicia la lección.
debug.workflow.quick.evaluate=Veamos qué vamos a pasar a {0}. Pulse {1} para invocar la expresión de evaluación rápida para el argumento seleccionado.
debug.workflow.resume=La llamada funciona ahora sin excepciones. Pulse {0} o haga clic en {1} en la ventana "Depuración" para continuar con la ejecución del programa.
debug.workflow.run.current=Ejecutemos este programa de ejemplo que calcula la cantidad media de diferentes frutas a partir de la entrada.
debug.workflow.run.to.cursor.alternative=Como alternativa, desplaza el ratón sobre el área izquierda y haz clic en la acción de incrustación {0}.
debug.workflow.run.to.cursor.intro=Por último, vamos a comprobar el resultado de {0} (para tu comodidad, hemos movido el cursor a su sentencia {1}).
debug.workflow.run.to.cursor.note=Ten en cuenta que {0} funciona incluso si los puntos de interrupción están silenciados.
debug.workflow.run.to.cursor.press=Pulsa {0} para ejecutar el programa hasta la línea donde se encuentra el cursor.
debug.workflow.start.debug=Para iniciar la depuración con la configuración de ejecución seleccionada actualmente, haz clic en "{0}" en la barra de herramientas o presiona "{1}".
debug.workflow.step.into=Para averiguar qué causó la excepción, vamos a profundizar en la llamada seleccionada. Presiona {0} o haz clic en {1} en la ventana Depurar.
debug.workflow.step.over=Vamos a comprobar si al llamar a {0} se producirá una excepción después de nuestra corrección. Para depurar sobre la llamada, pulse {1} o haga clic en {2} en la ventana Depurar.
debug.workflow.stop.debug=El resultado es correcto. ¡Terminemos la depuración presionando {0} o haciendo clic en {1} en la barra de herramientas.
debug.workflow.toggle.breakpoint=Vamos a establecer un punto de interrupción para comenzar a investigar el problema. Para ello, haz clic en la cuneta en la línea deseada o establece el cursor en dicha línea y pulsa {0}.
debug.workflow.use.watches=De hecho, esta expresión devuelve una excepción. Añadamos esta expresión a {0} para que se evalúe automáticamente en el futuro. Pulsa {1} o haz clic en {2}
debug.workflow.use.watches.shortcut=Alternativamente, use la acción {0} para agregar el texto seleccionado a {1} {2}.
declaration.and.usages.find.usages=Pulsa {0} para ver una vista más detallada de los usos. Puedes invocar {0} en una declaración o en un uso.
declaration.and.usages.help.link=Ir a la declaración y a su tipo
declaration.and.usages.hide.view=Cuando hayas terminado de buscar, presiona {0} para ocultar la vista.
declaration.and.usages.jump.to.declaration=Pulse {0} para saltar a la declaración de un método.
declaration.and.usages.lesson.name=Declaraciones y usos
declaration.and.usages.open.find.view=Presiona {0} para volver a abrir la vista {1}.
declaration.and.usages.pin.motivation=Desde la vista {0} puedes navegar tanto por los usos como por las declaraciones. La siguiente búsqueda sobrescribirá estos resultados en la vista {0}. Para evitarlo, fija los resultados.
declaration.and.usages.right.click.tab=Para fijar la pestaña, haga clic con el botón derecho en el título de la pestaña resaltada.
declaration.and.usages.select.pin.item=Seleccionar {0}.
declaration.and.usages.show.usages=Ahora el cursor está en la declaración del método. Usa el mismo acceso directo {0} para ver todos sus usos, luego selecciona uno de ellos.
duplicate.and.delete.lines.delete.line=Para eliminar la línea actual, pulse {0}.
duplicate.and.delete.lines.duplicate.line=Duplicar línea en el caret con {0}.
duplicate.and.delete.lines.duplicate.several.lines=Y ahora pulsar {0} para duplicar líneas seleccionadas.
duplicate.and.delete.lines.lesson.name=Duplicar y borrar líneas
duplicate.and.delete.lines.select.several.lines=Puedes aplicar la misma acción a varias líneas. Por ejemplo, presiona dos veces `{}` para seleccionar la línea actual y la anterior.
duplicate.and.delete.lines.unexpected.selection.restore=Selección inesperada
editor.basics.module.description=Agrega, elimina, selecciona, mueve y duplica tu código con atajos rápidos.
editor.basics.module.name=Fundamentos del editor
editor.coding.assistance.fix.error=¡Arreglemos este error! Presione {0} y seleccione {1}.
editor.coding.assistance.fix.warning=El popup muestra una sugerencia de acción de refactorización para corregir esta advertencia.
editor.coding.assistance.goto.next.error=Presiona {0} para ir al siguiente error resaltado en el archivo.
editor.coding.assistance.goto.next.warning=Vamos al siguiente error. Presiona {0}.
editor.coding.assistance.help.link=Trabajar con el código fuente
editor.coding.assistance.highlight.usages=Otra herramienta útil es el resaltado de usos. Presiona {0} para resaltar todos los usos del símbolo en el cursor dentro del archivo.
editor.coding.assistance.lesson.name=Asistencia de codificación del editor
editor.coding.assistance.show.warning.description=Pulsa {0} para expandir la descripción de la advertencia.
essential.module.description=Descubre las funcionalidades más indispensables de {0}
essential.module.name=Esencial
extract.method.confirm.several.replaces=El ordenamiento Cocktail tiene dos swaps de lugar. El primer fragmento acaba de ser extraído. Haz clic en {0} para extraer ambos.
extract.method.help.link=Extraer metodo
extract.method.invoke.action=Pulsa {0} para extraer el bloque de código seleccionado en un método.
extract.method.lesson.name=Extraer método
extract.method.second.fragment=Ahora puede confirmar o rechazar la sustitución del segundo fragmento.
extract.method.start.refactoring=Haz clic en {0} para iniciar la refactorización.
extract.variable.choose.name=Elige un nombre para la nueva variable o déjalo como está. Pulsa {0} para completar el refactor.
extract.variable.help.link=Extraer/introducir variable
extract.variable.lesson.name=Extracción de variables
extract.variable.replace.all=Este bloque de código contiene 3 apariciones de la expresión seleccionada. Elija el segundo elemento en la lista para reemplazar todas ellas.
extract.variable.start.refactoring=Pulsa {0} para extraer una variable local de la expresión {1}.
file.structure.help.link=Ver estructura del archivo de origen
file.structure.lesson.name=Estructura del fichero
file.structure.navigate=Solo queda un elemento. Ahora, presiona {0} para navegar al elemento seleccionado.
file.structure.open.popup=Un archivo grande puede ser difícil de leer y navegar. A veces sólo necesitas previsualizarlo. Pulsa {0} para abrir la estructura de archivos.
file.structure.request.prefixes=Suponga que desea encontrar un método con {0} y {1} palabras en su nombre. Escriba {2} (prefijos de las palabras requeridas) para filtrar la estructura del archivo.
file.structure.toolwindow=<ide/> también puede mostrarle la estructura de archivos como una ventana de herramientas. Ábrala con {0}.
find.help.link=Buscar un objetivo dentro de un archivo
find.in.files.confirm.replace=Finalmente, haz clic en {0} en el cuadro de diálogo para confirmar.
find.in.files.go.to.file=Además, puede abrir el archivo seleccionado en el editor principal. Presione {0} o haga doble clic en el elemento resaltado para ir al archivo correspondiente.
find.in.files.help.link=Buscar y reemplazar texto en archivos del proyecto
find.in.files.lesson.name=Buscar y reemplazar en archivos
find.in.files.popup.closed.warning.message=Presiona {0} para abrir la ventana de {1} nuevamente.
find.in.files.press.replace.all=Pulse {0} para iniciar la sustitución.
find.in.files.select.directory=Puedes definir el ámbito de la búsqueda y el reemplazo. Haz clic en el botón {0} o pulsa {1} para reducir el reemplazo solo al directorio actual.
find.in.files.select.row=Puedes ver el contexto de la cadena encontrada en el editor incrustado. Haz clic en la fila resaltada o navega a ella usando los botones {0} y {1}.
find.in.files.show.find.popup=Supongamos que quiere encontrar todas las ocurrencias de alguna cadena en el proyecto. Pulse {0} para abrir la ventana {1}.
find.in.files.show.replace.popup=Supongamos que quiere reemplazar todas las coincidencias encontradas por otra cadena. Puede ser muy aburrido realizar el reemplazo en cada archivo secuencialmente. <ide/> lo ayudará con esta tarea. Pulse {0} para abrir la ventana {1}.
find.in.files.type.to.find=Escribe {0} para buscar todas las coincidencias textuales en el proyecto de aprendizaje.
find.in.files.type.to.replace=Vamos a reemplazar todas las ocurrencias de {0} con {1}. Escriba {1} en el campo resaltado.
find.in.files.whole.words=Se suponía que debías encontrar la cadena {0}, pero también encontraste algunas entradas {1}. Vamos a limitar la búsqueda a una palabra completa. Haz clic en {2} o pulsa {3}.
find.occurrences.close.search.tool=Con el panel de búsqueda cerrado, todavía puede usar estos métodos abreviados para navegar entre las apariciones encontradas recientemente. Cerremos el panel de búsqueda presionando {0}.
find.occurrences.find.next=<ide/> copia el texto seleccionado automáticamente en el campo de búsqueda. Busquemos la siguiente ocurrencia: Presiona {0} o {1}.
find.occurrences.find.next.in.editor=Localizar la siguiente ocurrencia con {0}.
find.occurrences.find.previous=Para ir a la ocurrencia anterior, presiona {0}.
find.occurrences.find.previous.in.editor=Y {0} para retroceder.
find.occurrences.invoke.find=En esta lección, seleccionaste "{0}". Presiona {1} para comenzar una búsqueda de texto completo en el archivo actual.
find.occurrences.lesson.name=Siguiente/ocurrencia previa
find.occurrences.note.about.cyclic=<strong>Nota:</strong> La búsqueda es circular. Al pulsar {0} dos veces en la última ocurrencia, se seleccionará la primera ocurrencia. {1} también es circular.
find.occurrences.search.closed.warning=Presiona {0} para abrir el campo de búsqueda nuevamente.
goto.action.first.lines.toggle=Cambiar números de línea a {0, choice, 0#apagado|1#encendido}.
goto.action.invoke.about.action=Por ejemplo, si quieres aprender sobre <ide/> escribe {0} y pulsa {1}
goto.action.invoke.again=Puede usar {0} o doble {1} para modificar la configuración de IDE y proyectos. Oprima de nuevo uno de estos atajos de teclado.
goto.action.lesson.name=Búsqueda de acciones
goto.action.mac.workaround=Si se abre la búsqueda en <strong>Terminal</strong> en lugar de {0}, consulte <a href="{1}">este artículo</a>.
goto.action.popup.closed.warning.message=Pulsa {0} o pulsa dos veces {1} para volver a abrir la ventana de búsqueda.
goto.action.propose.to.go.next.new.ui=¡Genial! Simplemente presiona {0} o da clic en el botón a continuación para iniciar la siguiente lección.
goto.action.second.lines.toggle=Ahora vuelve a cambiar los números de línea a {0, choice, 0#encendido|1#apagado}.
goto.action.show.line.numbers.request=Escribe {0} para visualizar el selector {1}.
goto.action.to.return.to.the.editor=Pulsa {0} para regresar al editor.
goto.action.use.find.action.1=Uno de los accesos directos más útiles es {0}. Te permite buscar entre todas las acciones IDE disponibles sin necesidad de conocer sus nombres exactos o accesos directos. Pruébalo ahora con {1}.
goto.action.use.find.action.2=Alternativamente, puedes presionar {1} dos veces para invocar {0}, que te ayuda a encontrar entidades de código de proyecto <strong>y</strong> elementos IDE. La elección es tuya.
help.code.comment=Comentar y descomentar código
help.code.completion=Completado de código
help.code.duplicate=Duplicar línea o selección
help.find.actions=Buscar acciones y opciones
help.lines.of.code=Líneas de código
help.search.everywhere=Buscar en todo
local.history.close.window=Cierra el diálogo para volver al código modificado. Presiona {0}
local.history.congratulations=¡Bien! ¡Has restaurado tu fragmento de código!
local.history.dialog.message=El IDE simulará el proceso de edición de un archivo. Espere hasta que finalice.
local.history.editor.hint=La modificación de archivos está deshabilitada para el paso actual.
local.history.file.modification.progress=Modificando archivo
local.history.help.link=Historial local
local.history.imagine.restore=Imagina que necesitas restaurar un código que fue eliminado anteriormente. {0} no funciona porque se han realizado varios cambios desde entonces y no quieres perder esos cambios.
local.history.invoke.context.menu=Utiliza {0} para restaurar el código eliminado con tan solo unos pocos clics. Haz clic derecho en cualquier lugar del editor para abrir el menú contextual.
local.history.lesson.name=Recuperar código eliminado
local.history.remove.code=En esta lección aprenderá a restablecer código mediante {0}. Pulse {1} para suprimir el trozo de código seleccionado.
local.history.restore.code=El panel derecho muestra las diferencias entre las revisiones seleccionadas y actuales del archivo. En este caso, la revisión seleccionada contiene el código que se eliminó anteriormente. Para restaurar el fragmento de código, haga clic en el botón de ángulo {0}.
local.history.restore.code.balloon=Clic para restaurar el fragmento de código
local.history.select.revision=El panel izquierdo del cuadro de diálogo {0} muestra una lista de revisiones guardadas del archivo actual. El estado del proyecto se guarda automáticamente en {1} cada vez que editas código, ejecutas pruebas o realizas otras acciones. Seleccionemos la revisión que está resaltada.
local.history.show.history=Selecciona {0} → {1}.
move.lesson.name=Mover fragmentos de código
move.pull.down=Reordenar líneas generalmente implica dos acciones: cortar y pegar. Con <ide/>, puedes hacerlo con solo una acción. Presiona {0} para bajar la línea actual.
move.pull.up=De forma similar, para subir una línea, presiona {0}.
move.whole.method.down=Ahora muévelo abajo con {0}.
move.whole.method.up=Intenta mover el método completo hacia arriba con {0}. Recuerda que el cursor debe estar en el encabezado del método.
multiple.selections.deselect.symbol=Pressione {0} para deseleccionar la última ocurrencia.
multiple.selections.escape=Pulsa {0} para restablecer las selecciones múltiples y regresar al modo de un único cursor.
multiple.selections.help.multiple.carets=Múltiples cursores y rangos de selección
multiple.selections.lesson.name=Selecciones múltiples
multiple.selections.replace=Introduce {0} para reemplazar todas las instancias de {1} por {0}.
multiple.selections.select.all=Presiona {0} para seleccionar todas las ocurrencias en el fichero.
multiple.selections.select.next.symbol=Presiona {0} de nuevo para seleccionar la siguiente ocurrencia de este símbolo.
multiple.selections.select.symbol=Presionar {0} para seleccionar el símbolo en el cursor.
navigation.module.description=Salta a la fuente, navega a las declaraciones, implementaciones y estructura de archivos.
navigation.module.name=Navegación
new.selection.add.quotes=Pulsar {0} por tercera vez para incluir comillas en la selección.
new.selection.select.call=Pulsa {0} {1,choice,1#otra|2#dos|3#tres|4#cuatro} vez para seleccionar la llamada completa.
new.selection.select.if=Hemos movido el cursor al inicio del {0} declaración. Teclea {1} dos veces para seleccionarla. Una palabra clave podría ser un buen punto de partida para elegir la correspondiente declaración con solo unas pocas pulsaciones.
new.selection.select.string=Pulsa {0} otra vez para seleccionar la cadena completa.
new.selection.select.word=Presione {0} para seleccionar la palabra que está debajo del cursor.
new.selection.unselect=Si queremos seleccionar los argumentos en vez de la llamada entera. Pulsa {0} para reducir la selección a los argumentos.
onboarding.finish.exit=Cerrar Proyecto Demo
onboarding.finish.modules=Mostrar más lecciones
onboarding.finish.text=Acabas de completar la visita guiada a <ide/>.\nAhora puedes cerrar el proyecto de aprendizaje{0}.\nTambién puedes continuar tu aprendizaje y probar otras lecciones.
onboarding.finish.title=¡Enhorabuena!
onboarding.return.to.welcome.remark=y volver a la pantalla de bienvenida
parameter.info.add.parameters=Parámetros añadidos: ancho = {0} y alto = {1}.
parameter.info.help.link=Información del parámetro
parameter.info.lesson.name=Información del parámetro
parameter.info.use.action=Presiona {0} para ver la firma del método.
postfix.completion.help.link=Completado de código postal
postfix.completion.intro=El Completado de postfix ayuda a reducir los saltos de caret hacia atrás al escribir código. Te permite transformar una expresión ya escrita en otra en base al postfix que añades, el tipo de expresión y su contexto.
postfix.completion.lesson.name=Completado de sufijo
proceed.to.the.next.step=<callback id="{0}">Haz clic para continuar</callback>
quick.popups.close=Presiona {0} para cerrar el cuadro emergente.
quick.popups.help.link=Ayuda de ventanas emergentes rápidas
quick.popups.lesson.name=Ventanas emergentes rápidas
quick.popups.press.show.documentation.again=Presiona {0} de nuevo para abrir esta documentación en la ventana de la herramienta Documentación.
quick.popups.press.show.documentation.focus=Haz clic en Documentación o presiona {0} nuevamente para mover el foco.
quick.popups.show.documentation=Pulsa {0} para visualizar la documentación del símbolo en el cursor.
quick.popups.show.implementation=Pulsa {0} para ver la definición del símbolo en el cursor.
readme.bug.tracker.remark=Si hay otro problema, intenta reiniciar la lección o reporta el error en [nuestro rastreador de errores]({0}).
readme.conclusion.header=Regresa a tu proyecto
readme.exit.options=Para volver a la pantalla de bienvenida solo hay que cerrar la ventana del proyecto. También se puede elegir `{0} | {1}` desde el menú principal. Además, se puede utilizar el menú `{0}` para abrir o crear nuevos proyectos. Por defecto, la ventana de herramientas `{2}` está oculta. Se puede abrir seleccionando `{3} | {4}` desde el menú principal.
readme.experienced.users.remark=Aunque una lección te parezca familiar, inténtalo: ¡puede que descubras ejemplos útiles y atajos desconocidos de las funciones que utilizas a menudo!
readme.feedback.request=¡Te agradeceremos que nos dejes comentarios sobre este curso de aprendizaje!
readme.ift.description=Este curso interactivo te guiará a través de muchos flujos de trabajo y casos de uso de IDE. Viene con muchos atajos de acción útiles. No necesitas memorizarlos todos. En cambio, pruébalos y lleva a tu servicio los más útiles. Dado que durante su trabajo diario, es posible que encuentre nuevos problemas, vuelva a visitar este curso y pruebe otras funciones. Manténgase atento a nuevas lecciones que lo ayuden a ser más productivo con {0}
readme.indexing.description=Es probable que estes leyendo este `README.md` durante la inicialización del proyecto de aprendizaje. Por lo general, `indexing` es la operación que más tiempo consume durante la inicialización del proyecto. El IDE necesitará recopilar información sobre tu entorno, proyectos {0, choice, 1#, bibliotecas | 2#}, y construir una representación interna. Esta es necesaria para la búsqueda y la navegación rápida.
readme.navigation.hint=El módulo `{0}` de esta formación mostrará su uso.
readme.shortcuts.header=Gestionar atajos
readme.shortcuts.problem.description=Algunos atajos de este curso pueden entrar en conflicto con atajos del sistema u otras aplicaciones. En este caso, puedes hacer clic en el atajo problemático en el texto de la lección. El cuadro emergente abierto te mostrará el nombre de la acción y atajos alternativos. Podrás aplicar la acción o asignarle un atajo nuevo.
readme.start.header=Introducción
readme.toolwindow.description=La ventana de herramientas `{0}` contiene varios módulos con los conjuntos de lecciones correspondientes que puedes tomar en cualquier orden. Cuando finalices el estudio de una lección, se marcará como completada. Puedes usar una lección completada a modo de referencia o reiniciarla si quieres refrescar tus conocimientos.
readme.usage.header=Cómo utilizar el curso
readme.welcome.header=Conozca al entrenador interactivo de funciones
recent.files.close.popup=Ahora el historial de los archivos recientes está más limpio. Haz clic en algún lugar fuera de la ventana emergente para cerrarla o usa {0}.
recent.files.delete=Esta lista contiene muchos archivos fuente que ya no queremos abrir. Eliminemos {0} archivos de nuestro historial de archivos recientes usando {1}.
recent.files.dialog.message=Queremos simular un flujo de trabajo básico: navegación rápida entre archivos. Por favor, espera hasta que se complete.
recent.files.dialog.title=Simulación de flujo de trabajo
recent.files.first.transition=¿Te preguntas cómo se ha implementado el método {0}? Vamos a su declaración usando {1}.
recent.files.lesson.name=Archivos y Ubicaciones Recientes
recent.files.locations.help.link=Buscar archivos recientes
recent.files.locations.search.jump=Ahora, seleccione el fragmento resaltado y presione {0} para abrir el archivo que lo contiene.
recent.files.locations.search.typing=Acá podés buscar por fragmentos de código que recuerdes. Tipea {0}
recent.files.progress.title=Abriendo archivos
recent.files.search.jump=Queda un solo fichero. Pulsa {0} para saltar al fichero seleccionado.
recent.files.search.typing=Puedes buscar el archivo por su nombre. Tipea {0} (prefijos de las palabras requeridas).
recent.files.show.recent.files=Nos adentramos en los archivos de la biblioteca. ¿Cómo regresar a nuestro archivo? <ide/> tiene una función que puede ayudarnos a mostrar los archivos abiertos recientemente. Presiona {0}.
recent.files.show.recent.locations=Con otra acción de utilidad, puedes descubrir tu código en archivos visitados recientemente. Pulsa {0}
recent.files.use.recent.files.again=Estamos de vuelta en nuestro archivo. Pero volvamos a ver los archivos recientes utilizando {0}.
refactoring.menu.finish.refactoring=Para completar el refactor, elige un nombre para el nuevo parámetro o deja el predeterminado y presiona {0}.
refactoring.menu.help.link=Invocar refactorización
refactoring.menu.introduce.parameter=Si necesita mover la expresión seleccionada al sitio de llamada y pasarlo como un parámetro del método contenedor. Seleccione {0} de la lista y presione {1}.
refactoring.menu.introduce.parameter.eng=Suponga que necesita mover la expresión seleccionada al sitio de llamada y pasarla como un parámetro del método contenedor. {0} puede hacer exactamente eso. Ahora simplemente escriba <strong>pa</strong> (introduce <strong>pa</strong>rameter) o <strong>ip</strong> (<strong>i</strong>ntroduce <strong>p</strong>arameter) para reducir la lista propuesta.
refactoring.menu.lesson.name=Menú de refactorización
refactoring.menu.show.refactoring.list=<ide/> proporciona una variedad de refactorizaciones. Muchas de ellas tienen sus propios atajos, pero usted siempre puede pressionar {0} para listar todas las refactorizaciones disponibles en el contexto actual.
refactoring.menu.start.refactoring=Presiona {0} para iniciar el refactoring de {1}. <strong>Nota</strong>: puedes conocer los atajos para refactorings en el menú de refactorings.
refactorings.change.settings.warning.message=Para completar esta lección, cambia las opciones de refactorización en los ajustes del editor. Pulsa {0}, ve a {1} <strong>→</strong> {2} y selecciona {3} bajo {4}. Alternativamente <callback id="{5}">haz clic</callback> para cambiar el ajuste.
refactorings.module.description=Refactoriza y organiza tu código con renombrado, extracción y otros tipos de refactorización.
refactorings.module.name=Refactorizaciones
rename.help.link=Renombrar refactorizaciones
rename.lesson.name=Renombrar
restore.settings.informer=En esta lección has cambiado algunas opciones de configuración del IDE. Si quieres restaurar las opciones modificadas <callback id="{0}">haz clic</callback>.
run.configuration.close.settings=Ahora cierra el diálogo para acabar esta lección.
run.configuration.edit.configuration=Para editar configuraciones de ejecución o añadir nuevas, presiona {0} mientras haces clic en el menú desplegable o abre el menú deployable y haz clic en {1}.
run.configuration.help.link=Configuraciones de ejecución/depuración
run.configuration.hover.generated.configuration=Para esta lección agregamos otra configuración con parámetros. Pase el ratón por encima de esta configuración para ver los botones Ejecutar o Depurar.
run.configuration.lesson.name=Configuración de ejecución
run.configuration.no.run.configuration=Como puede ver, {0} no crea ejecuciones de configuración.
run.configuration.open.additional.menu.balloon=Mostrar más acciones
run.configuration.open.run.configurations.popup=Ahora veamos el menú desplegar de las configuraciones de ejecución. Haz clic en el desplegable.
run.configuration.run.current=Vamos a ejecutar este programa demo haciendo clic en {0} en la barra de herramientas.
run.configuration.run.current.balloon=Vamos a ejecutar este ejemplo
run.configuration.run.generated.configuration=Vamos a correrlo.
run.configuration.select.save.configuration=Seleccionar {0}.
run.configuration.settings.description=Este es el lugar para administrar todas las configuraciones de ejecución. Aquí puede establecer parámetros de programa, argumentos JVM, variables de entorno, etc.
run.configuration.temporary.to.permanent=Ahora, <ide/> ha creado una configuración de ejecución temporal. Las configuraciones temporales se eliminan automáticamente cuando su número excede el límite predeterminado de cinco. Convirtamos la configuración temporal en una permanente. Haz clic en {0} junto a los botones de Ejecución y depuración.
run.configuration.tip.about.save.configuration.into.file=Consejo: para que tus colegas puedan acceder a la configuración de ejecución, guárdala como un archivo separado y compártelo mediante un sistema de control de versiones.
run.debug.module.description=Ejecuta tu código y corrige errores con el depurador visual del IDE.
run.debug.module.name=Ejecutar y depurar
search.everywhere.class.popup.closed.warning.message=Pulsa {0} para abrir de nuevo la ventana de búsqueda.
search.everywhere.close.documentation.popup=Presiona {0} para cerrar el popup.
search.everywhere.finish=<strong>Hecho</strong>! De igual manera, puedes presionar {0} para buscar un método o variable global y {1} para buscar un archivo.
search.everywhere.goto.class=¡Genial! Pero, algunas veces necesitas encontrar solo clases o buscar sólo en directorios específicos. Usa {0} para buscar clases.
search.everywhere.invoke.search.everywhere=Presiona {1} dos veces para abrir {0}.
search.everywhere.lesson.name=Búsqueda en todo el código
search.everywhere.navigate.to.class=Selecciona {0} con las flechas del teclado y presiona {1} para saltar a la definición encontrada.
search.everywhere.navigation.promotion=Encontrarás otras acciones de navegación y casos de uso de workflow en el módulo {0}.
search.everywhere.quick.documentation=Pulsa {0} para obtener una vista previa de la documentación de la clase seleccionada.
search.everywhere.type.class.name=Supongamos que necesita alguna clase de biblioteca responsable de la lectura en buffer a partir de un flujo de entrada. Escriba {0} (letras iniciales de las palabras de búsqueda), pero no navegue todavía.
search.everywhere.type.prefixes=Supón que buscas una definición de código con las palabras {0} y {1} en el nombre. Escribe {2} (letras iniciales de esas palabras) en el campo de búsqueda.
search.everywhere.use.all.places=Ahora puedes ver que hay una clase coincidente en el proyecto demo. Sin embargo, necesitamos encontrar una clase en las bibliotecas. Vamos a cambiar el filtro {0} a {1} para mostrar las clases coincidentes de las bibliotecas disponibles.
selection.extend.selection=Pulsa {0} para extender la selección al siguiente bloque de código.
selection.extend.until.whole.file=Intenta extender tu selección con {0} hasta que se seleccione todo el archivo.
selection.help.select.code.constructs=Seleccionar construcciones de código
selection.lesson.name=Expandir y contraer la selección del código
selection.select.word=Colocar el cursor antes de alguna palabra. Presionar {0} para mover el cursor a la siguiente palabra y seleccionar todo lo que hay entre ellas.
selection.shrink.selection={0} reduce la selección. Pruébalo.
smart.completion.lesson.name=Autocompletado con correspondencias de tipos
surround.and.unwrap.choose.surround.item=Elije el elemento {0}.
surround.and.unwrap.choose.unwrap.item=Selecciona el elemento {0}
surround.and.unwrap.help.surround.code.fragments=Envolver fragmentos de código
surround.and.unwrap.help.unwrapping.and.removing.statements=Desenvolver y quitar declaraciones
surround.and.unwrap.invoke.surround=Presiona {0} para rodear el fragmento de código seleccionado con algún código de plantilla.
surround.and.unwrap.invoke.unwrap=Volvamos al estado anterior con la acción de desencapsular de {0}.
surround.and.unwrap.lesson.name=Envolver y desenvolver
surround.with.lesson.name=Rodear con