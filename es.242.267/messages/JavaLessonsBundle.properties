java.basic.completion.activate=Si presiona {0} para activar la finalización básica, verá el menú de consulta nuevamente.
java.basic.completion.choose.first=Puede seleccionar el primer elemento en el menú de consulta presionando {0}.
java.basic.completion.choose.item=Desde el menú de consulta, seleccione {0} y presione {1}.
java.basic.completion.complete=Haga clic en {0} para completar esta declaración.
java.basic.completion.deeper.level=static A veces es necesario consultar la lista de sugerencias para encontrar una constante o un método. Toca dos veces {0} para mostrarlo en la lista de búsqueda.
java.basic.completion.module.promotion=Puede encontrar más detalles sobre la refactorización en el módulo {0}.
java.debug.workflow.confirm.hot.swap=Confirmar el reemplazo del <strong> intercambio en caliente</strong>.
java.debug.workflow.drop.frame=El método ha sido parcheado, pero el {0} obsoleto todavía se está ejecutando y la excepción se ha vuelto a lanzar. Eliminemos el marco y volvamos al estado anterior a la llamada {1}. {2} Haga clic en el panel de depuración o presione {3}.
java.debug.workflow.hotswap.disabled.warning=The <strong>Hot Swap</strong> feature is disabled in the IDE settings. "{4}">click to activate</callback>.
java.debug.workflow.invalid.drop=It seems that you performed an action that was not planned by the lesson. Please, restart the lesson.
java.debug.workflow.no.confirmation=<strong>Hot Swap</strong> is done automatically in the background. You may see a corresponding message in the lower-left corner.
java.debug.workflow.rebuild=Los programas grandes pueden tardar mucho en ejecutarse de nuevo. Si encuentra un error en el método puro, simplemente reconstruya el proyecto para aplicar la función de JVM <strong> hot-swap</strong>. Construyamos el proyecto {0} o {1}.
java.editor.coding.assistance.press.to.fix=Press {0} to replace the argument with an empty array.
java.extract.method.edit.method.name=Edit the name of the new method or leave the one that IDE proposed. Then press {0}.
java.inheritance.hierarchy.choose.any.implementation=Elija una implementación y presione o haga clic en {0}.
java.inheritance.hierarchy.goto.implementation=Haga clic en {0} para buscar {1} implementaciones.
java.inheritance.hierarchy.help.link=Source code hierarchy
java.inheritance.hierarchy.hide.find.tool.window=Presione {0} para ocultar la ventana de herramientas {1}.
java.inheritance.hierarchy.hide.method.hierarchy={0} También vamos a escondernos. Presione {1} nuevamente.
java.inheritance.hierarchy.invoke.implementations.again=La declaración del método principal tiene su propio icono de margen {0}. Haga clic o presione {1} nuevamente.
java.inheritance.hierarchy.last.note=<strong> Nota\:</strong> Las acciones {0} y {1} también se aplican a las clases. Las acciones {2} {3} rara vez se utilizan, pero siempre se pueden encontrar como {4} usando el filtro {5}.
java.inheritance.hierarchy.lesson.name=Jerarquía de herencia
java.inheritance.hierarchy.navigate.to.base=Puede pasar de un método derivado a un súper método. Presione {0} o presione el icono {1} en el margen del editor.
java.inheritance.hierarchy.open.class.hierarchy=Presione {0} para obtener una vista previa de la descripción general de la jerarquía de clases.
java.inheritance.hierarchy.open.in.find.tool.window=Para jerarquías grandes, se recomienda buscar implementaciones en la ventana de herramientas {0}. Haga clic en {1}.
java.inheritance.hierarchy.open.method.hierarchy=Es una buena idea revisar toda la jerarquía de este método. Presione {0}.
java.missed.sdk.click.setup=<ide/> cannot find JDK on your computer. The IDE needs JDK to run Java programs and provide code assistance to you. Click to see available options
java.missed.sdk.configure=Configure JDK by using one of the suggested options. You can download it or specify a path to the existing JDK home directory on your computer.
java.missed.sdk.read.more.tip=<strong>Tip</strong>: you can read more about JDK in <a href=''{0}''>the documentation</a>.
java.missed.sdk.show.options=사용 가능한 옵션을 보려면 클릭하세요.
java.missed.sdk.wait.installation=Please wait while the IDE installs JDK
java.onboarding.apply.action=Select the {0} action and press {1}.
java.onboarding.apply.intention=Select {0} and press {1}.
java.onboarding.balloon.about.debug.panel=The {0} tool window provides a toolbar with various debugging actions. Click the icon to stop debugging
java.onboarding.balloon.click.here=Click here to set a breakpoint
java.onboarding.balloon.open.file=Double-click to open {0}
java.onboarding.balloon.open.learn.toolbar=Switch to the {0} tool window to continue this lesson
java.onboarding.balloon.project.view=Click to open the <strong>Project view</strong>
java.onboarding.balloon.source.directory=Expand the {0} directory to view the project source files
java.onboarding.balloon.start.debugging=Click the icon to start debugging
java.onboarding.balloon.stop.debugging=아이콘을 클릭하여 디버그를 시작하세요
java.onboarding.case.changed=The case has changed.
java.onboarding.change.ui.settings=For this lesson, IDEA changes some UI settings to the default state. The <strong>Project view</strong> is one of the main tool windows. It contains the project directory, SDK-specific external libraries, and scratch files. Click the striped button to preview the demo project content. You can also open it by pressing {0}.
java.onboarding.choose.values.item=Now you can start typing {0} to reduce the completion list or select this item and press {1}.
java.onboarding.epilog=Congratulations! You have completed the onboarding tour. At this point you can:"{0}">Close</callback> the learning project{1}Congratulations
java.onboarding.feedback.system.current.jdk=Current JDK:
java.onboarding.feedback.system.found.jdks=Found JDKs:
java.onboarding.feedback.system.jdk.at.start=JDK at start:
java.onboarding.feedback.system.lang.level=Language level:
java.onboarding.indexing.description=When you open a project for the first time, <ide/> scans the JDK and the project itself Please wait while the IDE indexes JDK files
java.onboarding.invoke.completion=이제 마침표 {0}를 입력하여 사용할 수 있는 모든 코드 완성의 옵션을 표시합니다.
java.onboarding.invoke.completion.balloon=Type a period {0} to show all available completion options
java.onboarding.invoke.completion.tip=<strong>Tip</strong>: <ide/> shows completion options automatically as you type. You have just fixed a bug, but you can make this code look even better. Press {0} to preview the warnings and apply a quick-fix.
java.onboarding.invoke.intention.for.code=Intentions also save your time and make coding easier. Let''s use an intention to reformat string concatenation. Press {0} to show available intentions
java.onboarding.invoke.intention.for.code.balloon={0}을(를) 누르면 사용할 수 있는 인텐션이 표시됩니다
java.onboarding.invoke.intention.for.warning.1=방금 버그를 수정했지만 이 코드를 더욱 깔끔하게 만들 수 있습니다. IDEA는 향상될 여지가 있는 코드 줄을 강조 표시하고 노란색 전구를 추가합니다.
java.onboarding.invoke.intention.for.warning.2={0}을(를) 눌러 경고를 미리 보고 빠른 수정을 적용하세요.
java.onboarding.invoke.intention.for.warning.balloon=Press {0} to show available quick-fixes
java.onboarding.invoke.search.everywhere.1=While working in <ide/>, you might want to search for files in your project, symbols, classes, or even IDE actions. In this lesson, let''s search for the {0} action to make the {1} string low-case.
java.onboarding.invoke.search.everywhere.2=Press {0} two times to open the {1} dialog.
java.onboarding.lesson.name=Get Acquainted with IDEA
java.onboarding.module.description=A brief overview of the main features in {0}.
java.onboarding.module.name=Onboarding tour
java.onboarding.project.view.description=<strong>프로젝트 뷰</strong>는 주요 도구 창 중 하나입니다. 이 뷰는 프로젝트 디렉터리, SDK 전용 외부 라이브러리, 스크래치 파일을 포함합니다. 줄무늬 버튼을 클릭해 열면 데모 프로젝트를 미리보기 할 수 있습니다. {0}을(를) 눌러 열 수도 있습니다.
java.onboarding.run.options.community=''커버리지로 실행''({0})과 같은 기타 액션은 {1}을(를) 클릭하여 표시할 수 있습니다.
java.onboarding.run.options.ultimate=Other actions like profile {0}, and run with coverage {1} can be showed by clicking on {2}.
java.onboarding.run.sample=For now, let''s run the current file, click {0} or press {1}.
java.onboarding.run.sample.balloon=Let''s run the current file, click {0} or press {1}
java.onboarding.search.everywhere.description=As you can see, the selected text, {0}, has been automatically copied into the input string. Let''s type {1} instead of {0}.
java.onboarding.select.fix=Apply the first item: {0}. In this case, the <strong>for-each</strong> loop will make code easier to understand.
java.onboarding.start.debugging=Click the {0} icon to start the debugging process.
java.onboarding.stop.debugging=Let''s stop debugging. Click the {0} icon.
java.onboarding.temporary.configuration.description=You have opened the demo sample. Now, let''s run it! In the highlighted {0}, Other actions like run with coverage {0} can be showed by clicking on {1}.
java.onboarding.toggle.breakpoint.1=You may notice that instead of the expected value of {0}, the {1} method returns {2}. Click the gutter within the highlighted area to set a breakpoint.
java.onboarding.toggle.breakpoint.2=강조 표시된 영역에서 여백을 클릭하여 중단점을 설정하세요.
java.onboarding.type.division=Once you have discovered the problem in the code, let''s fix it. Divide the resulting sum by the length of the values. Now let''s type a period {0} to show all available completion options.
java.onboarding.wait.indexing=IDE에서 JDK 파일을 인덱싱하는 동안 잠시 기다려 주세요.
java.postfix.completion.complete=Select {0} from the list or type the same value in the editor. Press {1} to complete the statement.
java.postfix.completion.type=Type {0} after the parenthesis to see the list of postfix completion suggestions.
java.refactoring.menu.confirm.constant=Este diálogo le permite elegir el nombre, la clase principal y la visibilidad de la nueva constante. Mantenga el valor predeterminado y presione {0} o haga clic en {1}.
java.refactoring.menu.inline.variable=Ahora reemplacemos un uso de la variable {0} con una expresión que defina esa variable. Presione {1} y seleccione {2} de la lista, o presione {3} para llamar a esta acción directamente.
java.refactoring.menu.inline.variable.eng=Now let''s replace single usage of the {0} variable with an expression that defines it. Ahora insertemos la variable {0} para reducir su uso a uno. Puede filtrar el menú de refactorización presionando {1} y <strong> iv</strong> (<strong> i</strong> nline <strong> variable). Seleccione este elemento o presione {2}.
java.refactoring.menu.introduce.constant=Finalmente, extraigamos la extensión del nombre del archivo. De manera similar, presione {0} y seleccione {1} o presione {2}
java.refactoring.menu.introduce.constant.eng=Finally, let''s extract an extension from the file name. Finalmente, extraigamos la extensión del nombre del archivo. De manera similar, presione {0} y filtre por <strong> ic</strong> (<strong> i</strong> ntroduzca <strong> c</strong> onstant) o presione {1}.
java.rename.confirm.accessors.rename=<ide /> detectará ese getter/setter y sugerirá cambiarle el nombre en consecuencia. Ahora presione {0} o haga clic en {1}.
java.rename.press.rename=Cambie el nombre del campo {1} presionando {0}.
java.rename.type.new.name=Ingrese un nuevo nombre para este campo (por ejemplo: {0}) y presione {1}.
java.run.configuration.lets.run=Puede ejecutar código arbitrario marcado con {0}. Ejecutemos un ejemplo simple usando {1}. Como alternativa, puede hacer clic en {0} para seleccionar {2}.
java.smart.type.completion.apply=La finalización de tipo inteligente filtra la lista de sugerencias para incluir solo aquellos tipos que son aplicables dentro del contexto actual. Presione {0} para ver una lista de sugerencias coincidentes. Presione {1} para seleccionar el primer elemento.
java.smart.type.completion.return=La finalización de tipo inteligente también puede sugerir código para declaraciones de retorno. Presione {0} para ver el menú de consulta de la declaración de devolución. Presione {1} para seleccionar el primer elemento.
java.statement.completion.complete.condition=Agrega la condición entre paréntesis {0} y luego presiona {1} para pasar a la sintaxis {2}.
java.statement.completion.complete.finish.body=Ingrese {0} en una línea y presione {1} para completar la declaración y aplicar el formato.
java.statement.completion.complete.for=Presione {0} para completar la declaración {1}.
java.statement.completion.complete.if=Ingrese {0} y presione {1} para generar la declaración.
java.statement.completion.help.link=Statement completion
java.statement.completion.lesson.name=Declaración completa
toggle.case.part=case
