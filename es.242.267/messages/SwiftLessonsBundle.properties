swift.code.generations.module.description=Créelo donde lo use, anúlelo/impleméntelo y aplique soluciones rápidas.
swift.code.generations.module.name=Codigo de GENERACION
swift.codegeneration.cfu.create.class=Esta vez podemos usar el mismo método para crear la declaración de clase. Presione {0}, luego seleccione <strong>Crear tipo ''IDE''</strong> y presione {1}. Se pueden generar automáticamente para anidar en la clase actual o en un archivo nuevo.
swift.codegeneration.cfu.create.empty.init=Finalmente, agreguemos un inicializador vacío usando el mismo comportamiento.
swift.codegeneration.cfu.create.init=excelente\! Repitamos la misma operación para crear un inicializador para la clase {0}. Presione {1}, seleccione <strong>Crear inicializador</strong> y luego presione {2}.
swift.codegeneration.cfu.create.local=En <ide/>, puede presionar {0} en una entidad no resuelta para generar varias construcciones de código a partir de los usos de esa entidad. Presione {1}, seleccione <strong>Crear variable local ''etiqueta''</strong> y luego presione {2}.
swift.codegeneration.cfu.help.link=Crear métodos y propiedades en el punto de uso.
swift.codegeneration.cfu.name=Creado en el lugar
swift.codegeneration.cfu.nice=excelente\! Observe cómo se crean los parámetros junto con sus nombres.
swift.codegeneration.cfu.repeat=Ahora repita la misma operación para crear la función {0}.
swift.codegeneration.generate.description=Finalmente, use la acción {1} → <strong>Descripción</strong> para crear {0}.
swift.codegeneration.generate.hash={2} → Utilice <strong>igual y hash</strong> para generar {0} y {1}.
swift.codegeneration.generate.help.link=Codigo de GENERACION
swift.codegeneration.generate.init=Presione {0} y seleccione <strong>Inicializador</strong> en la ventana emergente <strong>Crear</strong>. Seleccione las propiedades que desea incluir en la firma del inicializador y luego presione {1}.
swift.codegeneration.generate.intro=Puede utilizar la acción <strong>crear</strong> para crear {0}, {1}, {2}, {3} propiedades e inicializadores.
swift.codegeneration.generate.name=\ producir
swift.codegeneration.overrideimplement.help.link.1=Anulación de métodos en clases principales
swift.codegeneration.overrideimplement.help.link.2=Implementación de métodos de una interfaz o clase abstracta.
swift.codegeneration.overrideimplement.implement=Presione {0} → {1} y agregue resguardos a todos los métodos requeridos en {2}.
swift.codegeneration.overrideimplement.intro=Puede utilizar la acción <strong>Anular/Implementar</strong> ({0}/{1}) para anular un método en una clase principal o implementar un protocolo.
swift.codegeneration.overrideimplement.name=Anulación/implementación
swift.codegeneration.overrideimplement.override=Anulemos varios métodos al mismo tiempo. Presione {0} e ingrese {1}. La lista de métodos y propiedades reemplazables debe filtrarse a solo dos métodos: Redefina el método presionando {2} → {3}.
swift.codegeneration.quickfix.error.handling=Puede utilizar la intención de manejo de errores para agregar {0} cuando sea necesario. Presione {1}→{2} y seleccione una de las soluciones rápidas.
swift.codegeneration.quickfix.explicit.type=Si necesita agregar o eliminar tipos explícitos para algunas variables, presione {0} y seleccione <strong>Agregar o quitar tipos explícitos</strong>. Intente utilizar la variable {1}.
swift.codegeneration.quickfix.fixit=Presione {0} y luego seleccione <strong>Aplicar edición</strong> para reemplazar la variable no utilizada con {1}.
swift.codegeneration.quickfix.go.next.error=Presione {0} para pasar al siguiente error.
swift.codegeneration.quickfix.go.next.warning=Presione {0} para ir a la siguiente advertencia.
swift.codegeneration.quickfix.help.link.1=intención acción
swift.codegeneration.quickfix.help.link.2=Obtenga resultados y solucione problemas
swift.codegeneration.quickfix.intro=<ide/> muestra {0} en código Swift exactamente como aparece en Xcode.
swift.codegeneration.quickfix.name=Soluciones rápidas e intenciones
swift.codegeneration.quickfix.redundant=También puede eliminar propiedades {0} innecesarias. Presione <atajo>⇧⌥⏎</atajo>.
swift.codegeneration.quickfix.sourcekit.fixit=Como puede ver, hay algunos problemas con este fragmento de código. Hagamos algunos cambios. Seleccione <strong>Swift → SourceKit Inspection</strong> y haga clic en el botón <strong>Aplicar edición</strong> a la derecha. Esto resolverá todos los problemas dentro de este grupo.
swift.codegeneration.quickfix.sourcekit.inspection=AppCode integra SourceKit como una verificación independiente. Esto significa que puede ejecutarlo en todo el archivo para solucionar todos los problemas a la vez, si es posible realizar varias soluciones. Presione {0}.
swift.codegeneration.quickfix.typo.in.string=Sin embargo, tenga en cuenta que todas las ubicaciones de uso de la variable cambian de nombre automáticamente. Ahora modifique la cadena {1} usando {0}.
swift.codegeneration.quickfix.typo.in.var=Ahora presione {0} para regresar a la ventana del editor, coloque el cursor en el nombre de la variable mal escrita y luego presione {1}. Seleccione <strong>Error tipográfico\: Cambiar nombre a...</strong>, seleccione la opción correcta y luego presione {2}.
swift.editor.comment=Comentario
swift.editor.comment.block=Haga doble clic en {0} para seleccionar {1} y luego use {2} para agregar un comentario de bloqueo.
swift.editor.comment.help.link=Código de documentación
swift.editor.comment.intro=Comente cualquier línea con {0}.
swift.editor.comment.several.lines=Seleccione varias líneas con {0} y anótelas con {1}.
swift.editor.comment.uncomment=Descomente la línea comentada con la misma tecla de método abreviado {0}.
swift.editor.completion.basic=De forma predeterminada, <ide/> completa el código inmediatamente. Ingrese {0} directamente en el cursor y presione {1} para seleccionar la función {2}.
swift.editor.completion.basic.shortcut=Puede habilitar explícitamente la finalización de código básico presionando {0}.
swift.editor.completion.go.next=excelente\! Haga clic en el botón a continuación para comenzar su próxima lección o use {0}.
swift.editor.completion.help.link=Finalización de código
swift.editor.completion.name=Finalización de código
swift.editor.completion.show=Presione {0} para mostrar las opciones de finalización de código.
swift.editor.completion.smart=La finalización de tipo inteligente filtra la lista de sugerencias para incluir solo los tipos aplicables dentro del contexto actual. Haga clic en {0} para ver una lista de sugerencias coincidentes. Presione {1} para seleccionar el primer elemento.
swift.editor.completion.tab=Seleccione el elemento {0} y presione {1} (en lugar de {2}). Esto sobrescribe la palabra en la posición del cursor en lugar de simplemente insertar la palabra.
swift.editor.completion.tab.method=Ahora puedes sobrescribir fácilmente {2} con {3} llamando a {0} y {1}.
swift.editor.delete.action=Elimine la línea actual con {0}.
swift.editor.delete.help.link=línea de código
swift.editor.delete.name=borrar
swift.editor.delete.undo=Para restaurar líneas eliminadas, presione {0}.
swift.editor.duplicate.line=Duplica cualquier línea con {0}.
swift.editor.duplicate.name=una copia
swift.editor.duplicate.several.lines=La misma acción se puede aplicar a varias líneas. Simplemente seleccione dos o más líneas y duplíquelas como {0}.
swift.editor.folding.block=Finalmente, contraiga la declaración de flujo de control usando {0}.
swift.editor.folding.collapse=A veces es necesario contraer partes de su código para mejorar la legibilidad. Intente doblar el código en {0}.
swift.editor.folding.collapse.all=Si desea contraer todas las áreas del archivo, presione {0}.
swift.editor.folding.collapse.statement.any=<ide/> tiene una manera de Contraer cualquier secuencia de sentencias o declaraciones. Dobla el área seleccionada con {0}.
swift.editor.folding.expand=Presione {0} para expandir el área de código.
swift.editor.folding.expand.all=Asimismo, presione {0} para expandir todas las áreas disponibles.
swift.editor.folding.expand.statement=Ahora presione {0} para continuar en la dirección opuesta.
swift.editor.folding.help.link=Plegado de código
swift.editor.folding.name=doblar
swift.editor.format.help.link=Reformatea y reorganiza tu código
swift.editor.format.name=Formatea tu código
swift.editor.format.reformat=<ide/> le permite modificar el formato del código con una sola acción. Vuelva a formatear el código seleccionado a {0}.
swift.editor.format.reformat.whole.file=Para reformatear todo el archivo fuente si no hay líneas seleccionadas, presione {0} y luego {2}.
swift.editor.module.description=Aprenda a seleccionar, eliminar, duplicar y mover líneas, agregar comentarios a las líneas y dar formato al código.
swift.editor.module.name=Editor
swift.editor.move.help.link=Ir a sintaxis
swift.editor.move.line.down=La reorganización de líneas generalmente se logra con dos acciones: cortar y pegar. En <ide/>, puede presionar {0} para mover la línea actual hacia abajo, de modo que pueda ejecutarla con una sola acción. Mueva la línea actual al final de la función {1}.
swift.editor.move.line.up=Del mismo modo, utilice {0} para mover una alineación. Mueva la declaración {1} para que preceda a la configuración.
swift.editor.move.name=movimiento
swift.editor.popups.close.param.info=Haga clic en {0} para cerrar la ventana emergente.
swift.editor.popups.doc=Haga clic en {0} para ver la documentación del símbolo en la ubicación del cursor.
swift.editor.popups.help.link=ventana emergente rápida
swift.editor.popups.impl=Presione {0} para ver la definición del símbolo en la posición del cursor.
swift.editor.popups.name=ventana emergente rápida
swift.editor.popups.param.info=Presione {0} para verificar la firma del inicializador.
swift.editor.selection.all=Ahora seleccione inmediatamente todo el método con {0}.
swift.editor.selection.expand=Haga clic en {0} para expandir su selección al siguiente bloque de código.
swift.editor.selection.expand.more=Intente aumentar la selección en {0} hasta seleccionar todo el archivo.
swift.editor.selection.help.link=Seleccionar la sintaxis del código
swift.editor.selection.name=rango de selección
swift.editor.selection.shrink={0} reduce la selección actual. Intenta presionarlo.
swift.editor.selection.word=Coloque el signo de intercalación antes de la palabra. Presione {0} para mover el cursor a la siguiente palabra y seleccionar todo lo que se encuentre en el medio.
swift.editor.selections.column=Use {0} para alternar la selección de columnas, luego use su teclado para colocar un signo de intercalación en cada línea de {1} a {2} ({3}).
swift.editor.selections.help.link=Múltiples quilates y rango de selección.
swift.editor.selections.name=Múltiples rangos de selección
swift.editor.selections.next=Presione {0} para seleccionar el símbolo en la posición del cursor.
swift.editor.selections.next.again=Presione {0} nuevamente para seleccionar la siguiente aparición encontrada de este símbolo.
swift.editor.selections.reformat=Presiona {0} para reformatear tu código como {1} ¡y listo!
swift.editor.selections.replace=Escriba {0} para reemplazar todas las apariciones encontradas de {1} con {2} y luego presione {3}.
swift.editor.selections.select.all=Haga clic en {0} para seleccionar todos los elementos encontrados en este archivo.
swift.editor.selections.select.sample=Ahora escriba {0} y seleccione todos los nombres de casos con {1}.
swift.editor.selections.select.sample.toggle=Presione {0} para cambiar de caso y luego presione {1} nuevamente para salir del modo de selección de columna.
swift.editor.selections.unselect=Presione {0} para anular la selección del último elemento encontrado.
swift.navigation.code.class=Vayamos a la clase {0}. Presione {1}, ingrese {2} y luego presione {3}.
swift.navigation.code.declaration=Otra acción importante en la familia de acciones <strong>Ir a...</strong> es <strong>Ir a la Declaración</strong>. Coloque el cursor sobre {0} y presione {1} para ir a la declaración.
swift.navigation.code.file=excelente\! Abramos el archivo {0}. Presione {1}, ingrese {2} y luego presione {3}.
swift.navigation.code.fuzzy=Cada cuadro de diálogo <strong>Ir a...</strong> le permite usar coincidencias aproximadas, por lo que puede ingresar el nombre parcial del archivo de clase o símbolo que está buscando.
swift.navigation.code.go.back=Regrese a {0} a través de {1}.
swift.navigation.code.help.link=Navegación de código
swift.navigation.code.implementation=Si hay varias implementaciones de un método o clase, puede saltar a la primera implementación con {0}. Vea todas las definiciones de {2} usando {1}.
swift.navigation.code.intro=Cuando trabaja en un proyecto, a menudo necesita abrir y editar archivos o símbolos de clase específicos. La forma más rápida de hacerlo es utilizar las tres funciones de navegación principales: <strong>Ir a Clase/Archivo/Símbolo</strong>.
swift.navigation.code.name=Navegación de código
swift.navigation.code.non.project.files=Si necesita incluir archivos, símbolos o clases distintas a la biblioteca estándar y otros proyectos, presione la tecla de acceso directo dos veces.
swift.navigation.code.recent=Finalmente, hay dos acciones de navegación de uso frecuente que son muy útiles para cambiar rápidamente entre archivos recientes y ventanas de herramientas. La primera es la ventana emergente <strong>Archivos recientes</strong>. Abra esta ventana emergente a través de {0} y use las teclas de flecha de su teclado para seleccionar el elemento requerido.
swift.navigation.code.super=<strong>Ir a la definición principal</strong> le permite saltar a la declaración de la clase principal. Presione {0} para ir a la clase {1}.
swift.navigation.code.super.again=Ahora presione {0} nuevamente para ir a la declaración del protocolo {1}.
swift.navigation.code.switcher=El segundo es un <strong>conmutador</strong>, que parece idéntico a un archivo reciente pero desaparece tan pronto como el usuario lo selecciona. Mantenga presionada la tecla <shortcut>⌃</shortcut> y presione {0} nuevamente para cambiar a seleccionar un archivo o ventana de herramientas. Después de seleccionar el elemento deseado, suelte la tecla <shortcut>⌃</shortcut>.
swift.navigation.code.symbol=Saltemos inmediatamente a la declaración {0} en la clase {1}. Presione {2}, ingrese {3} y luego presione {4}.
swift.navigation.module.description=Cubre ventanas, vistas, navegación de código y navegación al código fuente, declaración/implementación, estructura de archivos, etc.
swift.navigation.module.name=Navegar
swift.navigation.precise.comment.combo=Ahora presione {0} - {1} - {2} para agregar comentarios a cada línea.
swift.navigation.precise.first.error=Vuelva al primer error con {0}.
swift.navigation.precise.first.warning=excelente\! Ahora presione {0} nuevamente. Esto mostrará la ubicación de la primera advertencia dentro del archivo.
swift.navigation.precise.fix.warning=Presione {0} y luego use {1} para corregir la primera advertencia.
swift.navigation.precise.help.link=Ir a Errores y Advertencias
swift.navigation.precise.intro=Varias teclas de acceso directo para navegar dentro de sus archivos de código pueden ayudarlo a desarrollarse de manera más eficiente. Echemos un vistazo rápido a estos atajos.
swift.navigation.precise.jump.last.changes=Digamos que tiene un archivo largo y no recuerda dónde ni qué cambió. En este caso, puede presionar {0} para ir a los cambios más recientes en el archivo.
swift.navigation.precise.jump.line=Finalmente, si necesita saltar a una línea o columna específica del código, presione {0}.
swift.navigation.precise.name=navegación de precisión
swift.navigation.precise.next.error=Hay varias advertencias y errores en este archivo. Presione {0} para ir al primer error.
swift.navigation.precise.next.error.again=Ahora use el mismo atajo para pasar al siguiente error.
swift.navigation.precise.next.method=Para pasar rápidamente al siguiente método en el archivo actual, presione {0}.
swift.navigation.precise.prev.method=Utilice {0} para ir al método anterior.
swift.navigation.search.action=Por último, utilice <strong>Buscar acción</strong>({0}) para buscar y ejecutar rápidamente acciones IDE. Por ejemplo, escriba ''complementos'' e ingrese<strong>Preferencias | Abra el complemento</strong>.
swift.navigation.search.everything=¿Qué sucede si desea buscar texto en símbolos, nombres de archivos o incluso configuraciones IDE y elementos de menú? <shortcut>Presione ⇧ dos veces</shortcut> para abrir el cuadro de diálogo <strong>Buscar en cualquier lugar</strong>.
swift.navigation.search.find.usages.method=Ahora encontremos todos los usos del método {0}. Presione {1} → {2} nuevamente.
swift.navigation.search.find.usages.proto=El mismo flujo de trabajo se aplica a otras construcciones de código. Haga clic en {0} → {1} para encontrar todos los usos del protocolo {2} en su proyecto.
swift.navigation.search.find.usages.var=No es muy útil, ¿verdad? En el código real, normalmente buscará la variable {0} sin incluir el nombre de la clase, el nombre del método u otras construcciones de código. Presione {1} y luego intente con {2}.
swift.navigation.search.find.usages.var.result=AppCode ahora solo muestra dónde se usa realmente la variable {0}.
swift.navigation.search.help.link.1=Buscar y reemplazar en archivos
swift.navigation.search.help.link.2=Buscar y reemplazar en archivos
swift.navigation.search.intro=La funcionalidad de búsqueda de AppCode es diferente. Proporciona funciones especiales para búsqueda de texto y otras funciones de búsqueda de código. Esto se debe a que el código no es sólo texto, sino que tiene una estructura específica formada por la sintaxis del código.
swift.navigation.search.name=buscar
swift.navigation.search.rule=Una regla simple es identificar el símbolo que necesita encontrar en lugar del fragmento de texto que necesita encontrar. <strong>Buscar uso</strong> funciona en todas las construcciones de código dentro del contexto de su proyecto, lo que le permite encontrar todos los usos dentro de toda su base de código.
swift.navigation.search.text.search=Por supuesto, hay ocasiones en las que no sabes exactamente lo que estás buscando y necesitas buscar en algún texto para encontrar tantas coincidencias como sea posible. En este caso, utilice {0} para buscar el archivo actual o {1} para buscar en todo el proyecto.
swift.navigation.search.var=Este archivo de muestra contiene muchas frases de código que contienen la palabra {0}. El cursor está en la posición de la variable denominada {1}. Presione {2} para buscar todo el texto que contenga la palabra {3}.
swift.navigation.todo.activate=¿Alguna vez te has preguntado cuántos TODO hay en tu código? <ide/> tiene una ventana de herramientas <strong>TODO</strong> dedicada. Haga clic en {0} para activar esta ventana de herramientas.
swift.navigation.todo.all.bookmarks=Vea todos los marcadores usando la tecla de método abreviado {0}.
swift.navigation.todo.bookmark=Ahora presione {0}. Este acceso directo configura un marcador dentro de su código. Los marcadores se almacenan en el directorio de su proyecto y son útiles si desea señalar a sus colegas ubicaciones de código específicas.
swift.navigation.todo.change.bookmark=Puede cambiar el nombre del marcador. Después de seleccionar un favorito, presione {0}, ingrese un nuevo nombre y luego presione {1}.
swift.navigation.todo.custom=Puede definir sus propios filtros <strong>TODO</strong> personalizados. {0} → <strong>Editar filtro</strong> para abrir el cuadro de diálogo Filtro TODO y luego intente agregar sus propios filtros usando expresiones regulares.
swift.navigation.todo.go.back=Presione {0} para regresar al editor.
swift.navigation.todo.help.link.1=TODO comentarios
swift.navigation.todo.help.link.2=Favoritos
swift.navigation.todo.name=TODO y marcadores
swift.navigation.windows.breakpoints=El cuadro de diálogo <strong>Puntos de interrupción</strong> proporciona la misma funcionalidad que el explorador de <strong>Puntos de interrupción</strong> de Xcode. Este cuadro de diálogo enumera todos los puntos de interrupción del proyecto. Activar usando {0}.
swift.navigation.windows.build=Cree el proyecto llamando a {0}.
swift.navigation.windows.build.messages=La ventana de la herramienta <strong>Crear mensajes</strong> le permite ver el resultado del compilador y filtrar los mensajes de compilación por tipo (consulte el botón <strong>Filtrar mensajes</strong>({0}) a la izquierda).
swift.navigation.windows.debug=La ventana de la herramienta <strong>Depuración</strong> ({0}) es similar al explorador de <strong>Depuración</strong> de Xcode. Esta ventana de herramientas muestra todos los relojes, las variables locales a la derecha y una lista de subprocesos a la izquierda.
swift.navigation.windows.dismiss.structure.popup=Usa {0} para cerrar la ventana emergente o presiona ⏎ para moverla a cualquier parte del código.
swift.navigation.windows.files=La vista <strong>Archivo</strong> es un modo complementario a la vista <strong>Proyecto</strong> de <ide/>. Esta vista muestra todos los archivos en el directorio donde se encuentra {0} o {1}. Esta vista le permite abrir y ver fácilmente archivos que no están incluidos en su proyecto.
swift.navigation.windows.files.activate=Presione {0} para activar la vista <strong>Archivo</strong>.
swift.navigation.windows.find=El cuadro de diálogo <strong>Buscar en archivos</strong>({0}) proporciona la misma funcionalidad que el explorador <strong>Buscar</strong> de Xcode. Ahora intente buscar en todo el texto usando este cuadro de diálogo.
swift.navigation.windows.go.to.file=En la ventana del emulador, vuelva al IDE y use {1} para navegar a {0}.
swift.navigation.windows.help.link=Descripción general de la interfaz de usuario
swift.navigation.windows.init.git=Inicialice el repositorio de Git a través de {0}→<strong>Crear repositorio de Git</strong>. Ahora active la ventana de la herramienta <strong>SCV</strong> con el acceso directo {1}.
swift.navigation.windows.intro=<ide/> tiene muchas vistas de navegación. Saber cómo llamar en determinadas situaciones puede ayudarle a utilizar el IDE de forma más eficiente.
swift.navigation.windows.jump.to.source=Utilice las teclas ↑ y ↓ para seleccionar frases de código arbitrarias y presione {0} para moverse a cualquier posición en el código.
swift.navigation.windows.name=Ventana principal y vista
swift.navigation.windows.project=La vista <strong>Proyecto</strong> es similar al Explorador de proyectos de Xcode. Esto muestra todos los proyectos en un espacio de trabajo específico y todos los archivos y grupos dentro de un proyecto. Haga clic en {0} para abrir la vista <strong>Proyecto</strong>.
swift.navigation.windows.project.settings=Haga clic en el icono {0} en el menú Opciones de vista del proyecto y luego seleccione<strong>Apariencia del árbol | Seleccione Orden de Xcode</strong> para establecer el orden de los archivos como en Xcode (si ha seleccionado el comportamiento de Xcode al configurar <ide/>, esta opción se habilitará automáticamente).
swift.navigation.windows.project.settings.more=Otras características incluyen <strong>Abrir archivos con un clic</strong> y <strong>Seleccionar siempre archivos abiertos</strong>. <strong>Abrir archivos con un clic</strong> permite que el código del archivo se abra automáticamente cuando se selecciona el archivo, y <strong>Seleccionar siempre archivos abiertos</strong> permite que el área del editor tenga el foco. La vista del proyecto</strong> se centra automáticamente en el nombre del archivo.
swift.navigation.windows.project2=De forma predeterminada, la vista <strong>Proyecto</strong> de <ide/> muestra archivos y carpetas en el orden en que están almacenados en el sistema de archivos.
swift.navigation.windows.return.to.editor=Presione {0} para regresar a la ventana del editor.
swift.navigation.windows.run=Ahora ejecutemos el proyecto en el simulador y verifiquemos la ventana de la herramienta <strong>Ejecutar</strong>. Presione {0}.
swift.navigation.windows.run.window=Esta ventana de herramientas muestra la consola, donde puede ver el resultado de su aplicación (o el <strong>ejecutor de pruebas</strong> si está ejecutando una configuración de ejecución de <strong>prueba</strong>). Siempre se puede activar a través de ({0}).
swift.navigation.windows.stop=Haga clic en {0} para detener la aplicación.
swift.navigation.windows.stop.debug=Haga clic en {0} para detener la aplicación.
swift.navigation.windows.structure=La vista <strong>Estructura</strong> y la ventana emergente <strong>Estructura</strong> muestran la estructura de un archivo específico, junto con cualquier comentario {0}, {1}, {2} o {3} dentro del código. Funciona de manera similar al explorador <strong>Symbol</strong> de Xcode.
swift.navigation.windows.structure.activate=Presione {0} para activar la vista <strong>Estructura</strong>.
swift.navigation.windows.structure.popup=Ahora presione {0} para activar la ventana emergente <strong>Estructura</strong>.
swift.navigation.windows.toggle.break=Coloque un punto de interrupción en la línea 11 usando {0} y luego presione {1}.
swift.navigation.windows.vcs.window=La ventana de la herramienta <strong>VCS</strong> proporciona todo lo que necesita para trabajar con su sistema de control de versiones, incluida la vista <strong>Cambios</strong>, el <strong>registro de VCS</strong> y más.
swift.rdt.debug.eval=Seleccione {0} con {1} y utilice <strong>Evaluar expresión</strong>({2} → {3}).
swift.rdt.debug.eval.again=Puede evaluarlo sin tener que cambiar a la consola LLDB ingresando el símbolo de punto, seleccionando la propiedad y presionando {0}.
swift.rdt.debug.help.link.1=código de depuración
swift.rdt.debug.help.link.2=Depurar en AppCode
swift.rdt.debug.intro=Ahora aprendamos cómo depurar su código.
swift.rdt.debug.name=depurar
swift.rdt.debug.prepare=Presione {1} para ir a {0}.
swift.rdt.debug.run.cursor=Ahora coloque el cursor en la línea 21 y ejecute <strong>Ejecutar hasta el cursor</strong> con {0}.
swift.rdt.debug.step.into=Presione {0} para entrar y luego presione {1} para pasar.
swift.rdt.debug.step.over.next.line=Pase a la siguiente línea.
swift.rdt.debug.stop=Presione {0} para detener la depuración de la aplicación.
swift.rdt.debug.toggle.break=Coloque un punto de interrupción en la línea 11 usando {0} y luego presione {1}.
swift.rdt.run.actions=<ide/> tiene acciones separadas para ejecutar el proyecto y acciones para depurarlo (ya que la depuración suele ser más lenta). Haga clic en {0} para ejecutar la aplicación.
swift.rdt.run.another=excelente\! Para ejecutar rápidamente su aplicación seleccionando una configuración de inicio o simulador diferente para la configuración de inicio actual, presione {0}, luego seleccione la configuración de inicio o simulador de destino y luego presione {1}.
swift.rdt.run.final=Detenga la aplicación con {0}.
swift.rdt.run.help.link=Ejecutar aplicación
swift.rdt.run.name=ejecución
swift.rdt.run.stop=Detenga la aplicación con {0}.
swift.rdt.test.additional=Al hacer clic en íconos específicos dentro de la ventana de la herramienta <strong>Test Runner</strong>, puede ordenar las pruebas por tiempo empleado ({0}) o alfabéticamente ({1}). Presione {2} para volver a ejecutar todas las pruebas y luego ordénelas por tiempo transcurrido.
swift.rdt.test.debug.single=Depuremos la prueba. Coloque un punto de interrupción de línea usando {0}, luego depure la prueba con {1}.
swift.rdt.test.delete.failed=Eliminar {0} con {1}.
swift.rdt.test.failing=Hagamos una prueba de fracaso. Vuelva a ejecutar todas las pruebas con el acceso directo {0}.
swift.rdt.test.filter.failed=Haga clic en el icono {0} para filtrar solo las pruebas fallidas.
swift.rdt.test.go.back=Presione {1} para volver a {0}.
swift.rdt.test.help.link.1=Crear pruebas
swift.rdt.test.help.link.2=Pruebas unitarias en AppCode
swift.rdt.test.history=El historial de pruebas integrado guarda automáticamente los resultados de varias ejecuciones de pruebas recientes y también se puede cargar en la ventana de la herramienta del ejecutor de pruebas. Intente cargar una ejecución de prueba anterior haciendo clic en el icono {0} y seleccionando uno de los elementos enumerados.
swift.rdt.test.intro=<ide/> admite muchos marcos de prueba, incluidos XCTest, Quick, Kiwi, Catch, Boost.Test y Google Test. Echemos un vistazo a todas las funciones comunes que puede utilizar al probar su aplicación.
swift.rdt.test.intro.tests=<ide/> identifica automáticamente los rangos de prueba según la posición del cursor. Si el símbolo de intercalación está en algún lugar dentro de un archivo de prueba, se pueden ejecutar todas las pruebas dentro del archivo. Lo mismo se aplica a las pruebas individuales. Para ejecutar una sola prueba, coloque el símbolo de intercalación dentro del método de prueba.
swift.rdt.test.more=Eso es todo\! <ide/> proporciona una mejor representación de los resultados de las pruebas para algunos marcos, como <strong>Quick</strong>. Para obtener una descripción general rápida de todos los marcos de prueba admitidos por <ide/>, mire <a href\="https\://www.youtube.com/watch?v\=DXvx6xNG_jc">este vídeo</a>.
swift.rdt.test.name=prueba
swift.rdt.test.prepare=Utilice {1} para ir a {0}.
swift.rdt.test.rerun.failed=Ahora haga clic en {0} para volver a ejecutar solo las pruebas fallidas.
swift.rdt.test.resume=Presione {0} para continuar ejecutando.
swift.rdt.test.show=Ahora mostremos las pruebas en la vista de árbol. Haga clic en el icono {0}.
swift.rdt.test.single=Ejecute una única prueba utilizando el mismo acceso directo {0}.
swift.rdt.test.stop.debug=Presione {0} para detener la depuración.
swift.rdt.test.suite=Presione {0} para ejecutar todas las pruebas en la herramienta de prueba.
swift.refactoring.change.signature.exec=Presione {0} para cambiar el nombre {1} a {2}.
swift.refactoring.change.signature.exec.again=Presione {0} nuevamente. Haga clic en la fila con el parámetro {1} y cámbielo a {2} o agregue un nombre de parámetro interno.
swift.refactoring.change.signature.final=Finalmente, llame a <strong>Cambiar firma</strong> nuevamente y cambie el orden de los parámetros usando los botones {0}/{1} o los accesos directos <shortcut>⌥ ↑</shortcut>/<shortcut>⌥↓</shortcut>. . Por favor cámbialo.
swift.refactoring.change.signature.help.link=Cambio de firma
swift.refactoring.change.signature.intro=<strong>Cambiar firma</strong> es una refactorización que le permite cambiar los nombres de métodos y funciones, editar y cambiar los nombres y el orden de los parámetros internos y externos, y cambiar la visibilidad de los métodos y funciones, todo a la vez.
swift.refactoring.change.signature.name=Cambio de firma
swift.refactoring.extract.closure.exec=Presione {0} y luego seleccione <strong>Extraer cierre...</strong>.
swift.refactoring.extract.closure.help.link=Extracción de cierre
swift.refactoring.extract.closure.intro=<strong>Extraer cierre</strong> le permite encapsular una selección de código en un nuevo cierre, junto con parámetros personalizables y tipos de devolución. Esto funciona de manera similar a la refactorización por extracción de métodos.
swift.refactoring.extract.closure.name=Extracción de cierre
swift.refactoring.extract.function.change.params=Puede cambiar la firma al extraer un método de <ide/>. En la sección <strong>Parámetros</strong>, haga clic en uno de los parámetros y utilice los iconos {0}/{1} para cambiar el orden de los parámetros. Haga clic en la fila del parámetro para cambiar su nombre.
swift.refactoring.extract.function.exec.again=Ahora, presione {0} para cambiar la firma de la función extraída.
swift.refactoring.extract.function.help.link=Extracción de funciones
swift.refactoring.extract.function.intro=<strong>Función de extracción</strong> es una función de refactorización que le permite encapsular el código seleccionado en una nueva función con parámetros y tipos de retorno personalizables. Extraiga algunas líneas de código en una nueva función {0}. Presione {1} -> {2}.
swift.refactoring.extract.function.name=Extracción de funciones
swift.refactoring.extract.function.undo=Presione {0} para deshacer el cambio.
swift.refactoring.extract.variable.description=Al <strong>Extraer variable</strong>, no es necesario seleccionar el fragmento de código exacto que desea extraer. Simplemente coloque el símbolo de intercalación en la declaración y luego seleccione la expresión que necesita.
swift.refactoring.extract.variable.exec=Presione {0} para extraer la constante {1} a la variable o campo {2}.
swift.refactoring.extract.variable.exec.again=Ahora presione {0} y seleccione {1} de la lista para extraerlo como variable {2}.
swift.refactoring.extract.variable.help.link=Extracción de variables
swift.refactoring.extract.variable.name=Extracción de variables
swift.refactoring.rename.any=Puede cambiar el nombre de cualquier elemento colocando el símbolo de intercalación en un símbolo y usando la refactorización <strong>Rename</strong>.
swift.refactoring.rename.check=Presione {0}. Como puede ver, la refactorización <strong>Rename</strong> funciona globalmente, por lo que también se cambiará el nombre de cualquier elemento encontrado en los archivos .xib y .storyboard.
swift.refactoring.rename.class=Repita la misma operación para cambiar el nombre del tipo {0} al nuevo valor.
swift.refactoring.rename.go.to.file=Presione {1} para ir a {0}.
swift.refactoring.rename.help.link=Refactorizar cambiar el nombre
swift.refactoring.rename.name=rebautizar
swift.refactoring.rename.var=Comencemos con algo simple, como cambiar el nombre del campo {0} a {1}. Presione {2}, ingrese un nombre nuevo y luego presione {3}.
swift.refactorings.module.description=Cubre el cambio de nombre, la extracción de variables/métodos y otras refactorizaciones.
swift.refactorings.module.name=Refactorización
swift.run.debug.test.module.description=Aprenda a ejecutar, depurar y probar sus aplicaciones.
swift.run.debug.test.module.name=Ejecutar, depurar, probar
