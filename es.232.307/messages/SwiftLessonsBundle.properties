swift.code.generations.module.description=Créelo donde lo use, anúlelo/impleméntelo y aplique soluciones rápidas.
swift.code.generations.module.name=Codigo de GENERACION
swift.codegeneration.cfu.create.class=Esta vez podemos usar el mismo método para crear la declaración de clase. Presione {0} y seleccione <strong>Crear tipo ''IDE''</strong>. Se pueden generar automáticamente para anidar en la clase actual o en un archivo nuevo.
swift.codegeneration.cfu.create.empty.init=Finalmente, agreguemos un inicializador de bean usando el mismo comportamiento.
swift.codegeneration.cfu.create.init=Excelente\! Repitamos la misma operación para crear un inicializador para la clase {0}. Presione {1}, seleccione <strong>Crear inicializador</strong> y luego presione {2}.
swift.codegeneration.cfu.create.local=En <ide/>, puede presionar {0} en una entidad no resuelta para generar varias construcciones de código en su ubicación. Presione {1}, seleccione <strong>Crear variable local ''etiqueta''</strong> y luego presione {2}.
swift.codegeneration.cfu.help.link=Crear métodos y propiedades en el punto de uso.
swift.codegeneration.cfu.name=Creado en el lugar
swift.codegeneration.cfu.nice=Excelente\! Observe cómo se crean los parámetros junto con sus nombres.
swift.codegeneration.cfu.repeat=Ahora repita la misma operación para crear la función {0}.
swift.codegeneration.generate.description=Finalmente, use la acción {1} → <strong>Descripción</strong> para crear {0}.
swift.codegeneration.generate.hash={2} → Utilice <strong>igual y hash</strong> para crear {0} y {1}.
swift.codegeneration.generate.help.link=Codigo de GENERACION
swift.codegeneration.generate.init=Presione {0} y seleccione <strong>Inicializador</strong> en la ventana emergente <strong>Crear</strong>. Seleccione las propiedades que desea incluir en la firma del inicializador y luego presione {1}.
swift.codegeneration.generate.intro=Puede utilizar la acción <strong>crear</strong> para crear {0}, {1}, {2}, {3} propiedades e inicializadores.
swift.codegeneration.generate.name=\ producir
swift.codegeneration.overrideimplement.help.link.1=Anulando un método en una clase principal
swift.codegeneration.overrideimplement.help.link.2=Implementación de métodos de una interfaz o clase abstracta.
swift.codegeneration.overrideimplement.implement={0} → {1} y agregue resguardos a todos los métodos requeridos en {2}.
swift.codegeneration.overrideimplement.intro=Puede utilizar la acción <strong>Anular/Implementar</strong> ({0}/{1}) para anular un método en una clase principal o implementar un protocolo.
swift.codegeneration.overrideimplement.name=Anulación/implementación
swift.codegeneration.overrideimplement.override=Anulemos varios métodos al mismo tiempo. Presione {0} e ingrese {1}. La lista de métodos y propiedades reemplazables debe filtrarse a solo dos métodos: Redefina el método presionando {2} → {3}.
swift.codegeneration.quickfix.error.handling=Puede utilizar intentos de manejo de errores para agregar {0} cuando sea necesario. Presione {1}→{2} y seleccione una de las soluciones rápidas.
swift.codegeneration.quickfix.explicit.type=Si necesita agregar o eliminar tipos explícitos para algunas variables, haga clic en {0} y seleccione <strong>Agregar o quitar tipos explícitos</strong>. Intente utilizar la variable {1}.
swift.codegeneration.quickfix.fixit=Presione {0} y luego seleccione <strong>Aplicar edición</strong> para reemplazar la variable no utilizada con {1}.
swift.codegeneration.quickfix.go.next.error=Presione {0} para pasar al siguiente error.
swift.codegeneration.quickfix.go.next.warning=Presione {0} para ir a la siguiente advertencia.
swift.codegeneration.quickfix.help.link.1=Acción de intención
swift.codegeneration.quickfix.help.link.2=Obtenga resultados y solucione problemas
swift.codegeneration.quickfix.intro=<ide/> muestra el mismo {0} en código Swift que en Xcode.
swift.codegeneration.quickfix.name=Soluciones rápidas e intenciones
swift.codegeneration.quickfix.redundant=También puede eliminar propiedades {0} innecesarias. Presione <atajo>⇧⌥⏎</atajo>.
swift.codegeneration.quickfix.sourcekit.fixit=Como puede ver, hay algunos problemas con este fragmento de código. Hagamos algunos cambios. Seleccione <strong>Swift → SourceKit Inspection</strong> y haga clic en el botón <strong>Aplicar modificaciones</strong> a la derecha. Esto resolverá todos los problemas dentro de este grupo.
swift.codegeneration.quickfix.sourcekit.inspection=AppCode integra SourceKit como una verificación independiente. Esto significa que puede ejecutarlo en todo el archivo para solucionar todos los problemas a la vez, si es posible realizar varias soluciones. Presione {0}.
swift.codegeneration.quickfix.typo.in.string=Sólo se han realizado las modificaciones necesarias y todas las variables utilizadas han sido renombradas automáticamente. Ahora repite la misma acción dos veces para modificar la cadena {0}.
swift.codegeneration.quickfix.typo.in.var=Ahora presione {0} para regresar a la ventana del editor, coloque el cursor en el nombre de la variable mal escrita y luego presione {1}. Seleccione <strong>Error tipográfico\: Cambiar nombre a...</strong>, seleccione la opción correcta y luego presione {2}.
swift.editor.comment=Comentario
swift.editor.comment.block=Haga doble clic en {0} para seleccionar {1} y luego coméntelo con un comentario de bloque usando {2}.
swift.editor.comment.help.link=Código de documentación
swift.editor.comment.intro=Comente cualquier línea con {0}.
swift.editor.comment.several.lines=Seleccione varias líneas con {0} y coméntelas con {1}.
swift.editor.comment.uncomment=Descomente las líneas comentadas con el mismo acceso directo {0}.
swift.editor.completion.basic=De forma predeterminada, <ide/> completa el código inmediatamente. Ingrese {0} donde se encuentra el cursor y presione {1} para seleccionar la función {2}.
swift.editor.completion.basic.shortcut=Presione {0} para activar la finalización predeterminada. El menú Consulta se mostrará nuevamente.
swift.editor.completion.go.next=Excelente\! Haga clic en el botón a continuación para comenzar la siguiente lección o use {0}.
swift.editor.completion.help.link=Finalización de código
swift.editor.completion.name=Finalización de código
swift.editor.completion.show=Presione {0} nuevamente para mostrar las opciones de finalización de código.
swift.editor.completion.smart=La finalización de tipo inteligente filtra la lista de sugerencias para incluir solo aquellos tipos que son aplicables dentro del contexto actual. Haga clic en {0} para ver una lista de sugerencias coincidentes. Presione {1} para seleccionar el primer elemento.
swift.editor.completion.tab=Seleccione el elemento {0} y presione {1} (en lugar de {2}). Esto no simplemente inserta una palabra, sino que reemplaza la palabra ubicada en el cursor.
swift.editor.completion.tab.method=Ahora puedes sobrescribir fácilmente {2} con {3} llamando a {0} y {1}.
swift.editor.delete.action=Elimine la línea actual con {0}.
swift.editor.delete.help.link=Línea de código
swift.editor.delete.name=Borrar
swift.editor.delete.undo=Para restaurar líneas eliminadas, presione {0}.
swift.editor.duplicate.line=Duplica cualquier línea con {0}.
swift.editor.duplicate.name=Una copia
swift.editor.duplicate.several.lines=La misma acción se puede aplicar a varias líneas. Simplemente seleccione dos o más líneas y duplíquelas como {0}.
swift.editor.folding.block=Finalmente, use {0} para contraer la declaración de flujo de control.
swift.editor.folding.collapse=A veces es necesario contraer partes de su código para mejorar la legibilidad. Intente doblar su código en {0}.
swift.editor.folding.collapse.all=Si desea contraer todas las áreas del archivo, presione {0}.
swift.editor.folding.collapse.statement.any=<ide/> tiene una manera de Contraer cualquier secuencia de sentencias o declaraciones. Dobla el área seleccionada con {0}.
swift.editor.folding.expand=Presione {0} para expandir el área de código.
swift.editor.folding.expand.all=Asimismo, presione {0} para expandir todas las áreas disponibles.
swift.editor.folding.expand.statement=Presione {0} para pasar a otro método.
swift.editor.folding.help.link=Plegado de código
swift.editor.folding.name=Doblar
swift.editor.format.help.link=Reformatea y reorganiza tu código
swift.editor.format.name=Formatea tu código
swift.editor.format.reformat=<ide/> le permite modificar el formato del código con una sola acción. Vuelva a formatear el código seleccionado a {0}.
swift.editor.format.reformat.whole.file=Para reformatear todo el archivo fuente si no hay líneas seleccionadas, presione {0} y luego {2}.
swift.editor.module.description=Aprenda a seleccionar, eliminar, duplicar, mover líneas, agregar comentarios a líneas y mover y contraer bloques de código.
swift.editor.module.name=Editor
swift.editor.move.help.link=Ir a sintaxis
swift.editor.move.line.down=Reorganizar líneas suele implicar dos acciones: cortar y pegar. En <ide/>, puede presionar {0} para mover la línea actual hacia abajo, de modo que pueda ejecutarla con una sola acción. Mueva la línea actual al final de la función {1}.
swift.editor.move.line.up=Del mismo modo, utilice {0} para mover una alineación. Mueva la declaración {1} para que preceda a la configuración.
swift.editor.move.name=Movimiento
swift.editor.popups.close.param.info=Haga clic en {0} para cerrar la ventana emergente.
swift.editor.popups.doc=Haga clic en {0} para ver la documentación del símbolo ubicado en el cursor.
swift.editor.popups.help.link=Ventana emergente rápida
swift.editor.popups.impl=Presione {0} para ver la definición del símbolo ubicado en el cursor.
swift.editor.popups.name=Ventana emergente rápida
swift.editor.popups.param.info=Presione {0} para verificar la firma del inicializador.
swift.editor.selection.all=Ahora seleccione inmediatamente todo el método con {0}.
swift.editor.selection.expand=Haga clic en {0} para ampliar la selección al siguiente bloque de código.
swift.editor.selection.expand.more=Intente aumentar la selección en {0} hasta seleccionar todo el archivo.
swift.editor.selection.help.link=Seleccionar la sintaxis del código
swift.editor.selection.name=Rango de selección
swift.editor.selection.shrink={0} reduce la selección actual. Intenta presionarlo.
swift.editor.selection.word=Coloque el signo de intercalación antes de la palabra. Presione {0} para mover el cursor a la siguiente palabra y seleccionar todo lo que se encuentre en el medio.
swift.editor.selections.column=Use {0} para alternar el rango de selección de columnas, luego use su teclado para seleccionar todas las líneas de {1} a {2}.
swift.editor.selections.help.link=Múltiples quilates y rango de selección.
swift.editor.selections.name=Múltiples rangos de selección
swift.editor.selections.next=Presione {0} para seleccionar el símbolo ubicado en el cursor.
swift.editor.selections.next.again=Presione {0} para seleccionar el siguiente uso de este símbolo.
swift.editor.selections.reformat=Presiona {0} para reformatear tu código como {1} ¡y listo!
swift.editor.selections.replace=Escriba {0} para reemplazar todas las apariciones de {1} por {2} y luego presione {3}.
swift.editor.selections.select.all=Haga clic en {0} para seleccionar todos los usos de este archivo.
swift.editor.selections.select.sample=Ahora escriba {0} y seleccione todos los nombres de casos con {1}.
swift.editor.selections.select.sample.toggle=Presione {0} para cambiar de caso y luego presione {1} nuevamente para salir del modo de selección de columna.
swift.editor.selections.unselect=Presione {0} para anular la selección de la última ubicación utilizada.
swift.navigation.code.class=Vayamos a la clase {0}. Presione {1}, ingrese {2} y luego presione {3}.
swift.navigation.code.declaration=<strong>Ir a...</strong> Otra acción importante de la familia de acciones es <strong>Ir a declaración</strong>. Coloque el cursor sobre {0} y presione {1} para ir a la declaración.
swift.navigation.code.file=Excelente\! Abramos el archivo {0}: presione {1}, ingrese {2} y luego presione {3}.
swift.navigation.code.fuzzy=Cada cuadro de diálogo <strong>Ir a...</strong> permite el uso de coincidencias aproximadas, lo que le permite ingresar solo el nombre parcial del archivo de clase o símbolo que está buscando.
swift.navigation.code.go.back=Regrese a {0} a través de {1}.
swift.navigation.code.help.link=Navegación de código
swift.navigation.code.implementation=Si hay varias implementaciones de un método o clase, puede pasar a la primera implementación con {0}. Utilice {1} para ver todas las definiciones de {2}.
swift.navigation.code.intro=Cuando trabaja en un proyecto, a menudo necesita abrir y editar archivos o símbolos de clase específicos. La forma más rápida de hacerlo es utilizar las tres funciones de navegación principales: <strong>Ir a Clase/Archivo/Símbolo</strong>.
swift.navigation.code.name=Navegación de código
swift.navigation.code.non.project.files=Si necesita incluir archivos, símbolos o clases distintas a la biblioteca estándar y otros proyectos, presione la tecla de acceso directo dos veces.
swift.navigation.code.recent=Finalmente, hay dos acciones de navegación de uso frecuente que son muy útiles para cambiar rápidamente entre archivos recientes y ventanas de herramientas. La primera es la ventana emergente <strong>Archivos recientes</strong>. Abra esta ventana emergente a través de {0} y use las teclas de flecha de su teclado para seleccionar el elemento requerido.
swift.navigation.code.super=<strong>Ir a la definición principal</strong> le permite saltar a la declaración de la clase principal. Presione {0} para ir a la clase {1}.
swift.navigation.code.super.again=Ahora presione {0} nuevamente para ir a la declaración del protocolo {1}.
swift.navigation.code.switcher=El segundo es <strong>Transición</strong>, que tiene el mismo aspecto pero desaparece tan pronto como seleccionas algo. Mantenga presionada la tecla <shortcut>⌃</shortcut> y presione {0}, luego presione nuevamente para cambiar a seleccionar un archivo o ventana de herramientas. Después de seleccionar el elemento deseado, suelte la tecla <shortcut>⌃</shortcut>.
swift.navigation.code.symbol=Saltemos inmediatamente a la declaración {0} en la clase {1}. Presione {2}, ingrese {3} y luego presione {4}.
swift.navigation.module.description=Navegue por ventanas, vistas, código y navegue hasta el código fuente, declaración/implementación, estructura de archivos, etc.
swift.navigation.module.name=Navegar
swift.navigation.precise.comment.combo=Ahora comente cada línea presionando {0} - {1} - {2}.
swift.navigation.precise.first.error=Vuelva al primer error con {0}.
swift.navigation.precise.first.warning=Excelente\! Ahora presione {0} nuevamente. Le indica la ubicación de la primera advertencia en el archivo.
swift.navigation.precise.fix.warning=Presione {0} y luego use {1} para corregir la primera advertencia.
swift.navigation.precise.help.link=Ir a Errores y Advertencias
swift.navigation.precise.intro=Varias teclas de método abreviado para navegar dentro de archivos de código pueden ayudarlo a desarrollarse de manera más eficiente. Echemos un vistazo rápido a estos atajos.
swift.navigation.precise.jump.last.changes=Digamos que tiene un archivo largo y no recuerda dónde cambió qué. Presione {0} para ir a los cambios más recientes en el archivo.
swift.navigation.precise.jump.line=Finalmente, si necesita saltar a una línea o columna específica en su código, presione {0}.
swift.navigation.precise.name=Navegación de precisión
swift.navigation.precise.next.error=Hay varias advertencias y errores en este archivo. Presione {0} para ir al primer error.
swift.navigation.precise.next.error.again=Ahora use las mismas teclas de método abreviado para pasar al siguiente error.
swift.navigation.precise.next.method=Para pasar rápidamente al siguiente método en el archivo actual, presione {0}.
swift.navigation.precise.prev.method=Utilice {0} para ir al método anterior.
swift.navigation.search.action=Por último, utilice <strong>Buscar acción</strong>({0}) para buscar y ejecutar rápidamente acciones IDE. Por ejemplo, escriba ''complementos'' e ingrese<strong>Preferencias | Abra el complemento</strong>.
swift.navigation.search.everything=¿Qué sucede si desea buscar texto en símbolos, nombres de archivos o incluso configuraciones IDE y elementos de menú? Presione <shortcut>Doble⇧</shortcut> para abrir el cuadro de diálogo <strong>Buscar en cualquier lugar</strong>.
swift.navigation.search.find.usages.method=Ahora encontremos todos los usos del método {0}. Presione {1} → {2} nuevamente.
swift.navigation.search.find.usages.proto=El mismo flujo de trabajo se aplica a otras construcciones de código. Haga clic en {0} → {1} para encontrar todos los usos del protocolo {2} en su proyecto.
swift.navigation.search.find.usages.var=¿No es esto muy útil? En código real, es posible que necesites buscar la variable {0} sin incluir el nombre de la clase, el nombre del método u otras construcciones de código. Pruebe {1} y luego {2}.
swift.navigation.search.find.usages.var.result=AppCode ahora solo muestra dónde se usa realmente la variable {0}.
swift.navigation.search.help.link.1=Buscar y reemplazar en archivos
swift.navigation.search.help.link.2=Buscar y reemplazar en archivos
swift.navigation.search.intro=La búsqueda dentro de AppCode es diferente. Proporciona funciones especiales para búsqueda de texto y otras funciones de búsqueda de código. Esto se debe a que el código no es sólo texto, sino que tiene una estructura específica formada por la sintaxis del código.
swift.navigation.search.name=Buscar
swift.navigation.search.rule=Una regla simple es identificar el símbolo que necesita encontrar en lugar del fragmento de texto que necesita encontrar. <strong>Buscar uso</strong> funciona en todas las construcciones de código dentro del contexto del proyecto, lo que le permite encontrar todos los usos dentro de toda su base de código.
swift.navigation.search.text.search=Por supuesto, hay ocasiones en las que no sabes exactamente lo que estás buscando y necesitas buscar en algún texto para encontrar tantas coincidencias como sea posible. En este caso, utilice {0} para buscar el archivo actual o {1} para buscar en todo el proyecto.
swift.navigation.search.var=Este archivo de muestra contiene muchas frases de código que contienen la palabra {0}. El signo de intercalación está encima de la variable denominada {1}. Presione {2} para buscar todas las apariciones en texto de la palabra {3}.
swift.navigation.todo.activate=¿Alguna vez te has preguntado cuántos TODO hay en tu código? <ide/> tiene una ventana de herramientas <strong>TODO</strong> dedicada. Haga clic en {0} para activar esta ventana de herramientas.
swift.navigation.todo.all.bookmarks=Vea todos los marcadores usando la tecla de método abreviado {0}.
swift.navigation.todo.bookmark=Ahora presione {0}. Esta configuración de acceso directo alterna los marcadores dentro de su código. Los marcadores se almacenan en el directorio de su proyecto y son útiles si desea señalar a sus colegas en su código una ubicación específica.
swift.navigation.todo.change.bookmark=Puede cambiar el nombre del marcador. Presione {0} e ingrese un nuevo nombre.
swift.navigation.todo.custom=Puede definir sus propios filtros <strong>TODO</strong> personalizados. {0} → <strong>Modificar filtro</strong> para abrir el cuadro de diálogo Filtro TODO y luego intente agregar su propio filtro usando expresiones regulares.
swift.navigation.todo.go.back=Presione {0} para regresar al editor.
swift.navigation.todo.help.link.1=TODO comentarios
swift.navigation.todo.help.link.2=Favoritos
swift.navigation.todo.name=TODO \\& Marcador
swift.navigation.windows.breakpoints=El cuadro de diálogo <strong>Puntos de interrupción</strong> proporciona la misma funcionalidad que el explorador de <strong>Puntos de interrupción</strong> de Xcode. Este cuadro de diálogo enumera todos los puntos de interrupción del proyecto. Actívalo usando {0}.
swift.navigation.windows.build=Cree el proyecto llamando a {0}.
swift.navigation.windows.build.messages=La ventana de la herramienta <strong>Crear mensajes</strong> le permite ver el resultado del compilador y filtrar los mensajes de compilación por tipo (consulte el botón <strong>Filtrar mensajes ({0}) a la izquierda).
swift.navigation.windows.debug=La ventana de la herramienta <strong>Depuración</strong> ({0}) es similar al explorador de <strong>Depuración</strong> de Xcode. Esta ventana de herramientas muestra todos los relojes, las variables locales a la derecha y una lista de subprocesos a la izquierda.
swift.navigation.windows.dismiss.structure.popup=Puedes usar {0} para cerrar la ventana emergente o presionar ⏎ para saltar a cualquier posición en el código.
swift.navigation.windows.files=La vista <strong>Archivo</strong> es un modo de ayuda adicional de la vista <ide/><strong>Proyecto</strong>. Esta vista muestra todos los archivos en el directorio donde se encuentra {0} o {1}. Esta vista le permite abrir y ver fácilmente archivos que no están incluidos en su proyecto.
swift.navigation.windows.files.activate=Presione {0} para activar la vista <strong>Archivo</strong>.
swift.navigation.windows.find=El cuadro de diálogo <strong>Buscar en archivos</strong>({0}) proporciona la misma funcionalidad que el explorador <strong>Buscar</strong> de Xcode. Ahora intente buscar en todo el texto usando este cuadro de diálogo.
swift.navigation.windows.go.to.file=Vuelva al IDE en la ventana del emulador usando {1} y navegue hasta {0}.
swift.navigation.windows.help.link=Descripción general de la interfaz de usuario
swift.navigation.windows.init.git=Inicialice el repositorio de Git a través de {0}→<strong>Crear repositorio de Git</strong>. Ahora active la ventana de la herramienta <strong>SCV</strong> con el acceso directo {1}.
swift.navigation.windows.intro=<ide/> tiene muchas vistas de navegación. Saber cómo llamar en determinadas situaciones puede ayudarle a utilizar el IDE de forma más eficiente.
swift.navigation.windows.jump.to.source=Utilice las teclas ↑ y ↓ para seleccionar frases de código aquí y presione {0} para moverse a cualquier posición en el código.
swift.navigation.windows.name=Ventana importante \\& Ver
swift.navigation.windows.project=La vista <strong>Proyecto</strong> es similar al Explorador de proyectos de Xcode. Esto muestra todos los proyectos en un espacio de trabajo específico y todos los archivos y grupos dentro de un proyecto. Haga clic en ({0}) para abrir la vista <strong>Proyecto</strong>.
swift.navigation.windows.project.settings=Haga clic en el icono {0} en el menú Opciones de vista del proyecto y luego seleccione <strong>Orden de Xcode</strong> para configurar el orden de los archivos para que sea el mismo que Xcode (si selecciona Comportamiento de está activado).
swift.navigation.windows.project.settings.more=Otras características incluyen <strong>Abrir archivos con un solo clic</strong> y <strong>Seleccionar siempre archivos abiertos</strong>. <strong>Abrir archivo con un solo clic</strong> abre automáticamente el código del archivo cuando lo seleccionas y <strong>Seleccionar siempre archivos abiertos</strong> abre el <strong>proyecto</strong> cuando el área del editor tiene el foco. . > Pone automáticamente el foco en el nombre del archivo dentro de la vista.
swift.navigation.windows.project2=De forma predeterminada, la vista <strong>Proyecto</strong> de <ide/> muestra archivos y carpetas en el orden en que están almacenados en el sistema de archivos.
swift.navigation.windows.return.to.editor=Presione {0} para regresar a la ventana del editor.
swift.navigation.windows.run=Ahora ejecutemos el proyecto en el simulador y verifiquemos la ventana de la herramienta <strong>Ejecutar</strong>. Presione {0}.
swift.navigation.windows.run.window=Esta ventana de herramientas muestra la consola, donde puede ver el resultado de su aplicación (o el <strong>ejecutor de pruebas</strong> si está ejecutando una configuración de ejecución de <strong>prueba</strong>). Siempre se puede activar a través de ({0}).
swift.navigation.windows.stop=Haga clic en {0} para detener la aplicación.
swift.navigation.windows.stop.debug=Haga clic en {0} para detener la aplicación.
swift.navigation.windows.structure=La vista <strong>Estructura</strong> y la ventana emergente <strong>Estructura</strong> muestran la estructura de un archivo específico y todos los comentarios {0}, {1} y {2} o {3} del código. . Funciona de manera similar al explorador <strong>Symbol</strong> de Xcode.
swift.navigation.windows.structure.activate=Presione {0} para activar la vista <strong>Estructura</strong>.
swift.navigation.windows.structure.popup=Ahora presione {0} para activar la ventana emergente <strong>Estructura</strong>.
swift.navigation.windows.toggle.break=Coloque un punto de interrupción en la línea 11 usando {0} y luego presione {1}.
swift.navigation.windows.vcs.window=La ventana de herramientas <strong>VCS</strong> proporciona todo lo que necesita para utilizar el sistema de control de versiones, incluida la vista <strong>Cambiar</strong>, el <strong>registro VCS</strong> y más.
swift.rdt.debug.eval=Seleccione {0} con {1} y utilice <strong>evaluar expresión</strong>({2} → {3}).
swift.rdt.debug.eval.again=Ingrese el símbolo de punto, seleccione la propiedad y presione {0} para evaluarla sin cambiar a la consola LLDB.
swift.rdt.debug.help.link.1=Código de depuración
swift.rdt.debug.help.link.2=Depurar en AppCode
swift.rdt.debug.intro=Ahora aprendamos cómo depurar nuestro código.
swift.rdt.debug.name=Depurar
swift.rdt.debug.prepare=Presione {1} para ir a {0}.
swift.rdt.debug.run.cursor=Ahora coloque el cursor en la línea 21 y ejecute <strong>Ejecutar hasta el cursor</strong> con {0}.
swift.rdt.debug.step.into=Presione {0} para entrar y luego presione {1} para pasar.
swift.rdt.debug.step.over.next.line=Pase a la siguiente línea.
swift.rdt.debug.stop=Haga clic en {0} para detener la depuración de la aplicación.
swift.rdt.debug.toggle.break=Coloque un punto de interrupción en la línea 11 usando {0} y luego presione {1}.
swift.rdt.run.actions=<ide/> tiene una acción para ejecutar el proyecto y otra para depurarlo (ya que la depuración suele ser más lenta). Haga clic en {0} para ejecutar la aplicación.
swift.rdt.run.another=Excelente\! Para iniciar rápidamente su aplicación seleccionando una configuración de inicio o simulador diferente para la configuración de inicio actual, presione {0}, luego seleccione la configuración de inicio o simulador de destino y luego presione {1}.
swift.rdt.run.final=Detenga la aplicación con {0}.
swift.rdt.run.help.link=Ejecutar aplicación
swift.rdt.run.name=Ejecutar
swift.rdt.run.stop=Detenga la aplicación con {0}.
swift.rdt.test.additional=Puede ordenar las pruebas por duración ({0}) o alfabéticamente ({1}) haciendo clic en iconos específicos en el panel de herramientas <strong>Test Runner</strong>. Presione {2} y luego vuelva a ejecutar todas las pruebas, ordenadas por longitud.
swift.rdt.test.debug.single=Depuremos la prueba. Coloque un punto de interrupción de línea usando {0} y luego depure su prueba con {1}.
swift.rdt.test.delete.failed=Eliminar {0} con {1}.
swift.rdt.test.failing=Hagamos una prueba de fracaso. Vuelva a ejecutar todas las pruebas con el acceso directo {0}.
swift.rdt.test.filter.failed=Haga clic en el icono {0} para filtrar solo las pruebas fallidas.
swift.rdt.test.go.back=Presione {0} para volver a {0}.
swift.rdt.test.help.link.1=Crear pruebas
swift.rdt.test.help.link.2=Pruebas unitarias en AppCode
swift.rdt.test.history=El historial de pruebas integrado guarda automáticamente los resultados de varias ejecuciones de pruebas recientes, que también se pueden cargar en la ventana de la herramienta del ejecutor de pruebas. Intente cargar una ejecución de prueba anterior haciendo clic en el icono {0} y seleccionando uno de los elementos enumerados.
swift.rdt.test.intro=<ide/> admite muchos marcos de prueba, incluidos XCTest, Quick, Kiwi, Catch, Boost.Test y Google Test. Echemos un vistazo a todas las funciones comunes que puede utilizar al probar su aplicación.
swift.rdt.test.intro.tests=<ide/> identifica automáticamente los alcances de prueba según la posición del cursor. Si el cursor se coloca en algún lugar dentro de un archivo de prueba, se pueden ejecutar todas las pruebas dentro del archivo. Lo mismo se aplica a las pruebas individuales. Para ejecutar una sola prueba, coloque el símbolo de intercalación dentro del método de prueba.
swift.rdt.test.more=Eso es todo\! <ide/> proporciona una mejor representación de los resultados de las pruebas para algunos marcos como <strong>Quick</strong>. Para obtener una descripción general de todos los marcos de prueba admitidos por <ide/>, mire <a href\="https\://www.youtube.com/watch?v\=DXvx6xNG_jc">este vídeo</a>.
swift.rdt.test.name=Prueba
swift.rdt.test.prepare=Presione {0} para ir a {0}.
swift.rdt.test.rerun.failed=Ahora haga clic en {0} para volver a ejecutar solo las pruebas fallidas.
swift.rdt.test.resume=Haga clic en {0} para continuar con la ejecución.
swift.rdt.test.show=Ahora mostremos las pruebas en la vista de árbol. Haga clic en el icono {0}.
swift.rdt.test.single=Ejecute una única prueba utilizando el mismo acceso directo {0}.
swift.rdt.test.stop.debug=Presione {0} para detener la depuración.
swift.rdt.test.suite=Presione {0} para ejecutar todas las pruebas en la herramienta de prueba.
swift.refactoring.change.signature.exec=Presione {0} para cambiar el nombre {1} a {2}.
swift.refactoring.change.signature.exec.again=Presione {0} nuevamente. Haga clic en la fila con el parámetro {1} y cámbielo a {2} o agregue un nombre de parámetro interno.
swift.refactoring.change.signature.final=Finalmente, llame a <strong>Cambiar firma</strong> nuevamente y cambie el orden de los parámetros usando los botones {0}/{1} o los accesos directos <shortcut>⌥ ↑</shortcut>/<shortcut>⌥↓</shortcut>. . Por favor cámbialo.
swift.refactoring.change.signature.help.link=Cambio de firma
swift.refactoring.change.signature.intro=Los <strong>cambios de firma</strong> son refactorizaciones que le permiten cambiar los nombres de métodos y funciones, modificar el orden y los nombres de los parámetros internos y externos, y cambiar la visibilidad de los métodos y funciones, todo a la vez.
swift.refactoring.change.signature.name=Cambio de firma
swift.refactoring.extract.closure.exec=Presione {0} y luego seleccione <strong>Cerrar...</strong>.
swift.refactoring.extract.closure.help.link=Extracción de cierre
swift.refactoring.extract.closure.intro=La extracción de cierre le permite encapsular una selección de código en un nuevo cierre, junto con parámetros personalizables y tipos de retorno. Esto funciona de manera similar a la refactorización de métodos de extracción.
swift.refactoring.extract.closure.name=Extracción de cierre
swift.refactoring.extract.function.change.params=Puede cambiar la firma al extraer un método de <ide/>. En la sección <strong>Parámetros</strong>, haga clic en uno de los parámetros y utilice los iconos {0}/{1} para cambiar el orden de los parámetros. Haga clic en la fila del parámetro para cambiar su nombre.
swift.refactoring.extract.function.exec.again=Ahora presione {0} para cambiar la firma de la función extraída.
swift.refactoring.extract.function.help.link=Extracción de funciones
swift.refactoring.extract.function.intro=La extracción de funciones es una función de refactorización que le permite encapsular el código seleccionado en una nueva función con parámetros y tipos de retorno personalizables. Extraiga algunas líneas de código en una nueva función {0}. Presiona 1}.
swift.refactoring.extract.function.name=Extracción de funciones
swift.refactoring.extract.function.undo=Presione {0} para deshacer el cambio.
swift.refactoring.extract.variable.description=Al extraer variables, no es necesario seleccionar el fragmento de código exacto que desea extraer. Simplemente coloque el símbolo de intercalación en la declaración y luego seleccione la expresión que necesita.
swift.refactoring.extract.variable.exec=Presione {0} para extraer la constante {1} a una variable o campo {2}.
swift.refactoring.extract.variable.exec.again=Ahora presione {0} y seleccione una variable de la lista para extraer {1} en la variable {2}.
swift.refactoring.extract.variable.help.link=Extracción de variables
swift.refactoring.extract.variable.name=Extracción de variables
swift.refactoring.rename.any=Puede poner el símbolo de intercalación en un símbolo y usar la refactorización de cambio de nombre para cambiar el nombre de cualquier cosa.
swift.refactoring.rename.check=Presione {0}. Como puede ver, la refactorización y el cambio de nombre funcionan globalmente, incluso si la ubicación de uso está dentro de los archivos .xib y .storyboard.
swift.refactoring.rename.class=Repita las mismas acciones para cambiar el nombre del tipo {0} al nuevo valor.
swift.refactoring.rename.go.to.file=Presione {1} para ir a {0}.
swift.refactoring.rename.help.link=Refactorizar cambiar el nombre
swift.refactoring.rename.name=Rebautizar
swift.refactoring.rename.var=Comencemos con una acción simple como cambiar el nombre del campo {0} a {1}. Presione {2}, ingrese un nombre nuevo y luego presione {3}.
swift.refactorings.module.description=Cambio de nombre, extracción de variables/métodos, otras refactorizaciones.
swift.refactorings.module.name=Refactorización
swift.run.debug.test.module.description=Aprenda a ejecutar, depurar y probar sus aplicaciones.
swift.run.debug.test.module.name=Ejecutar, depurar, probar
