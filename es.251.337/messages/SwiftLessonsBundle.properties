swift.code.generations.module.description=Crear desde el uso, sobreescribir/implementar y aplicar correcciones rápidas.
swift.code.generations.module.name=Generación de código
swift.codegeneration.cfu.create.class=Podemos usar el mismo enfoque para crear una declaración de clase. Presiona {0}, selecciona <strong>Crear tipo 'IDE'</strong> y presiona {1}. Ten en cuenta que puedes crearlo automáticamente anidado en la clase actual o en un nuevo archivo.
swift.codegeneration.cfu.create.empty.init=Finalmente, agrega un inicializador vacío usando la misma acción.
swift.codegeneration.cfu.create.init=¡Bien\! Repitamos la misma operación para generar un inicializador para la clase {0}. Presiona {1}, selecciona <strong>Crear inicializador</strong> y presiona {2}.
swift.codegeneration.cfu.create.local=En <ide/>, presiona {0} sobre entidades no resueltas para crear varias estructuras de código basadas en su uso. Presiona {1}, selecciona <strong>Crear variable local 'label'</strong> y presiona {2}.
swift.codegeneration.cfu.help.link=Generar métodos y propiedades desde su uso
swift.codegeneration.cfu.name=Crear desde uso
swift.codegeneration.cfu.nice=¡Excelente\! Observa cómo se generan los parámetros y sus nombres.
swift.codegeneration.cfu.repeat=Repite la misma operación para crear la función {0}.
swift.codegeneration.generate.description=Finalmente, genera {0} usando la acción {1} → <strong>description</strong>.
swift.codegeneration.generate.hash=Genera {0} y {1} usando {2} → <strong>equals y hash</strong>.
swift.codegeneration.generate.help.link=Generar código
swift.codegeneration.generate.init=Presiona {0} y selecciona <strong>Inicializador</strong> en el popup <strong>Generar</strong>. Selecciona las propiedades a incluir en la firma del inicializador y presiona {1}.
swift.codegeneration.generate.intro=Puedes usar la acción <strong>Generar</strong> para generar {0}, {1}, {2}, {3} propiedades e inicializadores.
swift.codegeneration.generate.name=Generar
swift.codegeneration.overrideimplement.help.link.1=Sobreescribir métodos de la superclase
swift.codegeneration.overrideimplement.help.link.2=Implementar métodos de interfaces o clases abstractas
swift.codegeneration.overrideimplement.implement=Presiona {0} → {1} y agrega stubs para todos los métodos requeridos en {2}.
swift.codegeneration.overrideimplement.intro=Puedes usar la acción <strong>Sobreescribir/Implementar</strong> ({0}/{1}) para sobreescribir cualquier método de la clase padre o implementar cualquier protocolo.
swift.codegeneration.overrideimplement.name=Sobreescribir/Implementar
swift.codegeneration.overrideimplement.override=Ahora intentemos sobreescribir varios métodos a la vez. Presiona {0} y comienza a escribir {1}. La lista de métodos y propiedades que puedes sobreescribir debería filtrarse a solo dos métodos. Presiona {2} → {3} para sobreescribirlos.
swift.codegeneration.quickfix.error.handling=Las intenciones de manejo de errores te permiten agregar {0} donde sea necesario. Presiona {1} → {2} y selecciona una corrección rápida.
swift.codegeneration.quickfix.explicit.type=Para agregar o quitar tipos explícitos para algunas variables, simplemente presiona {0} y selecciona <strong>Agregar/Quitar tipo explícito</strong>. Inténtalo ahora con la variable {1}.
swift.codegeneration.quickfix.fixit=Presiona {0} y selecciona <strong>Aplicar Fix-it</strong> para reemplazar la variable no utilizada con {1}.
swift.codegeneration.quickfix.go.next.error=Presiona {0} para ir al siguiente error.
swift.codegeneration.quickfix.go.next.warning=Presiona {0} para ir a la siguiente advertencia.
swift.codegeneration.quickfix.help.link.1=Acciones de intención
swift.codegeneration.quickfix.help.link.2=Obtener resultados y corregir problemas
swift.codegeneration.quickfix.intro=<ide/> muestra los mismos {0} para tu código Swift que Xcode.
swift.codegeneration.quickfix.name=Correcciones rápidas e intenciones
swift.codegeneration.quickfix.redundant=También puedes eliminar el atributo redundante {0}. Presiona <shortcut>⇧⌥⏎</shortcut>.
swift.codegeneration.quickfix.sourcekit.fixit=Como puedes ver, hay varios problemas en este código. Arreglemos algunos de ellos. Selecciona <strong>Swift→Inspección SourceKit</strong> y haz clic en el botón <strong>Aplicar Fix-it</strong> a la derecha. Esto resolverá todos los problemas en el grupo.
swift.codegeneration.quickfix.sourcekit.inspection=AppCode también integra SourceKit como una inspección separada. Esto significa que puedes ejecutarlo en todo el archivo y corregir todos los problemas cuando hay múltiples correcciones disponibles. Presiona {0}.
swift.codegeneration.quickfix.typo.in.string=Observa que todos los usos de variables se renombran automáticamente. Ahora, intenta corregir la cadena {1} con "{0}".
swift.codegeneration.quickfix.typo.in.var=Ahora, presiona {0} para volver a la ventana del editor, coloca el cursor en el nombre mal escrito de la variable y presiona {1}. Selecciona <strong>Error ortográfico\: renombrar a...</strong>, elige la opción correcta y presiona {2}.
swift.editor.comment=Comentar
swift.editor.comment.block=Presiona {0} dos veces para seleccionar {1} y usa {2} para comentarlo como un bloque.
swift.editor.comment.help.link=Documentar código
swift.editor.comment.intro=Usa {0} para comentar cualquier línea.
swift.editor.comment.several.lines=Selecciona varias líneas con {0} y coméntalas con {1}.
swift.editor.comment.uncomment=Descomenta las líneas comentadas usando el mismo atajo {0}.
swift.editor.completion.basic=Por defecto, <ide/> completa el código instantáneamente. Comienza a escribir {0} donde está el cursor y presiona {1} para seleccionar la función {2}.
swift.editor.completion.basic.shortcut=Siempre puedes invocar la completación básica presionando {0}.
swift.editor.completion.go.next=¡Excelente\! Haz clic en el botón de abajo para comenzar la siguiente lección o usa {0}.
swift.editor.completion.help.link=Completación de código
swift.editor.completion.name=Completación
swift.editor.completion.show=Ahora presiona {0} para mostrar las opciones de completación.
swift.editor.completion.smart=La completación inteligente filtra la lista de sugerencias para mostrar solo los tipos aplicables en el contexto actual. Presiona {0} para ver la lista de sugerencias coincidentes. Presiona {1} para seleccionar la primera.
swift.editor.completion.tab=Selecciona la entrada {0} y presiona {1} (en lugar de {2}). Esto sobrescribirá la palabra en el cursor en lugar de simplemente insertarla.
swift.editor.completion.tab.method=Ahora llama a {0} y {1}, sobrescribiendo fácilmente {2} con {3}.
swift.editor.delete.action=Elimina la línea actual con {0}.
swift.editor.delete.help.link=Líneas de código
swift.editor.delete.name=Eliminar
swift.editor.delete.undo=Para deshacer la línea eliminada, presiona {0}.
swift.editor.duplicate.line=Duplica cualquier línea con {0}.
swift.editor.duplicate.name=Duplicar
swift.editor.duplicate.several.lines=Puedes hacer lo mismo con múltiples líneas. Selecciona dos o más líneas y duplícalas con {0}.
swift.editor.folding.block=Finalmente, usa {0} para plegar las declaraciones de control de flujo.
swift.editor.folding.collapse=A veces necesitas Contraer un fragmento de código para mejorar la legibilidad. Intenta plegar el código con {0}.
swift.editor.folding.collapse.all=Para Contraer todas las regiones en el archivo, usa {0}.
swift.editor.folding.collapse.statement.any=En <ide/>, hay una forma de plegar cualquier secuencia de declaraciones o sentencias. Intenta plegar la región seleccionada usando {0}.
swift.editor.folding.expand=Para expandir una región de código, presiona {0}.
swift.editor.folding.expand.all=De manera similar, presiona {0} para expandir todas las regiones disponibles.
swift.editor.folding.expand.statement=Ahora, presiona {0} para expandir la declaración.
swift.editor.folding.help.link=Plegado de código
swift.editor.folding.name=Plegado
swift.editor.format.help.link=Reformatear y reorganizar código
swift.editor.format.name=Formato de código
swift.editor.format.reformat=<ide/> puede ayudarte a corregir el formato del código con una sola acción. Usa {0} para reformatear el código seleccionado.
swift.editor.format.reformat.whole.file=Para reformatear todo el archivo fuente, usa {0} sin ninguna línea seleccionada. Presiona {1} y luego {2}.
swift.editor.module.description=Aprende a seleccionar, comentar, eliminar, duplicar y mover líneas, formatear código y más.
swift.editor.module.name=Editor
swift.editor.move.help.link=Mover declaraciones
swift.editor.move.line.down=Reorganizar líneas normalmente involucra dos acciones\: cortar y pegar. Pero en <ide/> es solo una acción, ya que presionar {0} mueve la línea actual hacia abajo. Mueve la línea actual al final de la función {1}.
swift.editor.move.line.up=De manera similar, para mover una línea hacia arriba, usa {0}. Mueve la declaración {1} para que esté antes de la configuración.
swift.editor.move.name=Mover
swift.editor.popups.close.param.info=Presiona {0} para cerrar el popup.
swift.editor.popups.doc=Presiona {0} para ver la documentación del símbolo bajo el cursor.
swift.editor.popups.help.link=Popups rápidos
swift.editor.popups.impl=Presiona {0} para ver la definición del símbolo bajo el cursor.
swift.editor.popups.name=Popups rápidos
swift.editor.popups.param.info=Presiona {0} para ver la firma del inicializador.
swift.editor.selection.all=Ahora usa {0} para seleccionar instantáneamente todo el archivo.
swift.editor.selection.expand=Presiona {0} para expandir la selección al siguiente bloque de código.
swift.editor.selection.expand.more=Intenta aumentar la selección con {0} hasta que todo el archivo esté seleccionado.
swift.editor.selection.help.link=Seleccionar estructuras de código
swift.editor.selection.name=Selección
swift.editor.selection.shrink={0} reduce la selección actual. Intenta presionarlo.
swift.editor.selection.word=Coloca el cursor antes de cualquier palabra. Presiona {0} para mover el cursor a la siguiente palabra y seleccionar todo entre ellas.
swift.editor.selections.column=Usa "{0}" para alternar la selección de columna y usa el teclado ({3}) para colocar cursores en todas las líneas desde {1} hasta {2}.
swift.editor.selections.help.link=Múltiples cursores y selecciones
swift.editor.selections.name=Selección múltiple
swift.editor.selections.next=Presiona {0} para seleccionar el símbolo bajo el cursor.
swift.editor.selections.next.again=Presiona {0} nuevamente para seleccionar la siguiente ocurrencia de ese símbolo.
swift.editor.selections.reformat=¡Presiona {0} y usa {1} para reformatear el código\!
swift.editor.selections.replace=Escribe {0} para reemplazar todas las ocurrencias de {1} con {2} y presiona {3}.
swift.editor.selections.select.all=Presiona {0} para seleccionar todas las ocurrencias en el archivo.
swift.editor.selections.select.sample=Ahora escribe {0} y selecciona todos los nombres de casos de prueba que contengan {1}.
swift.editor.selections.select.sample.toggle=Presiona {0} para alternar los casos y {1} nuevamente para salir del modo de selección de columna.
swift.editor.selections.unselect=Presiona {0} para deseleccionar la última ocurrencia.
swift.navigation.code.class=Naveguemos a la clase {0}. Presiona {1}, escribe {2} y presiona {3}.
swift.navigation.code.declaration=Otra acción importante de la serie <strong>Ir a...</strong> es <strong>Ir a declaración</strong>. Coloca el cursor en {0} y presiona {1} para saltar a su declaración.
swift.navigation.code.file=¡Bien\! Ahora abre el archivo {0}\: presiona {1}, escribe {2} y presiona {3}.
swift.navigation.code.fuzzy=Cada diálogo <strong>Ir a...</strong> soporta coincidencia difusa, por lo que puedes encontrar una clase, archivo o símbolo escribiendo solo parte de su nombre.
swift.navigation.code.go.back=Volvamos a {0} usando {1}.
swift.navigation.code.help.link=Navegación de código
swift.navigation.code.implementation=Si un método o clase tiene múltiples implementaciones, {0} te llevará a la primera. Intenta usar {1} para ver todas las definiciones de {2}.
swift.navigation.code.intro=Al trabajar en un proyecto, a menudo necesitas abrir y editar clases, archivos o símbolos específicos. La forma más rápida es usar la tríada principal de navegación\: <strong>Ir a clase/archivo/símbolo</strong>.
swift.navigation.code.name=Navegación de código
swift.navigation.code.non.project.files=Si necesitas incluir también la biblioteca estándar y otros archivos, símbolos o clases no pertenecientes al proyecto, simplemente haz doble clic en el atajo.
swift.navigation.code.recent=Finalmente, hay dos acciones de navegación muy útiles y frecuentemente utilizadas que te ayudan a cambiar rápidamente entre archivos y ventanas de herramientas recientes. La primera es el popup <strong>Archivos recientes</strong>. Ábrelo con {0} y usa las teclas de flecha del teclado para seleccionar lo que necesites.
swift.navigation.code.super=<strong>Ir a definición padre</strong> te navega a la declaración de la clase padre. Presiona {0} para saltar a la clase {1}.
swift.navigation.code.super.again=Ahora presiona {0} nuevamente para saltar a la declaración del protocolo {1}.
swift.navigation.code.switcher=El segundo es el <strong>Switcher</strong>, que se ve similar pero desaparece inmediatamente después de seleccionar algo. Mantén presionada la tecla <shortcut>⌃</shortcut> mientras presionas {0}, luego presiónalo nuevamente para cambiar entre archivos o ventanas de herramientas. Suelta <shortcut>⌃</shortcut> cuando hayas seleccionado lo que necesitas.
swift.navigation.code.symbol=Salta directamente a la declaración de {0} en la clase {1}. Presiona {2}, escribe {3} y presiona {4}.
swift.navigation.module.description=Ventanas, vistas, navegación de código, saltar a fuente, declaración/implementación, estructura de archivo y más.
swift.navigation.module.name=Navegación
swift.navigation.precise.comment.combo=Ahora presiona {0} - {1} - {2} para comentar cada una de estas líneas.
swift.navigation.precise.first.error=Usa {0} para volver al primer error.
swift.navigation.precise.first.warning=Ahora presiona {0} nuevamente - debería apuntar a la primera advertencia en el archivo.
swift.navigation.precise.fix.warning=Presiona {0} y usa {1} para corregir la primera advertencia.
swift.navigation.precise.help.link=Navegar entre errores y advertencias
swift.navigation.precise.intro=Hay varios atajos que pueden aumentar significativamente tu productividad al navegar por archivos de código. Echemos un vistazo rápido a ellos.
swift.navigation.precise.jump.last.changes=Supongamos que tienes un archivo largo y no recuerdas qué cambios hiciste y dónde. Presiona {0} para saltar a los cambios más recientes en el archivo.
swift.navigation.precise.jump.line=Finalmente, cuando necesites saltar a una línea o columna específica en el código, presiona {0}.
swift.navigation.precise.name=Navegación precisa
swift.navigation.precise.next.error=Hay varios warnings y errores en este archivo. Presiona {0} para navegar al primer error.
swift.navigation.precise.next.error.again=Ahora, usa el mismo atajo nuevamente para saltar al siguiente error.
swift.navigation.precise.next.method=Presiona {0} para saltar rápidamente al siguiente método en el archivo actual.
swift.navigation.precise.prev.method=Usa {0} para saltar al método anterior.
swift.navigation.search.action=Finalmente, intenta usar <strong>Buscar acción</strong>({0}) para encontrar y ejecutar rápidamente acciones del IDE. Por ejemplo, escribe ''plugins'' para abrir <strong>Preferencias | Plugins</strong>.
swift.navigation.search.everything=¿Qué pasa si quieres buscar símbolos, nombres de archivo o incluso texto en la configuración del IDE y elementos de menú? Presiona <shortcut>⇧ dos veces</shortcut> para abrir el diálogo <strong>Buscar en todas partes</strong>.
swift.navigation.search.find.usages.method=Ahora busquemos todos los usos del método {0}. Presiona {1} → {2} nuevamente.
swift.navigation.search.find.usages.proto=Este mismo flujo de trabajo aplica a cualquier otra estructura de código. Presiona {0} → {1} para encontrar todos los usos del protocolo {2} en este proyecto.
swift.navigation.search.find.usages.var=No es muy útil, ¿verdad? En código real, probablemente queramos buscar la variable {0} sin incluir nombres de clase, métodos u otras estructuras de código. Intenta presionar {1} y luego {2}.
swift.navigation.search.find.usages.var.result=Ahora AppCode solo muestra los usos reales de la variable {0}.
swift.navigation.search.help.link.1=Buscar y reemplazar en archivos
swift.navigation.search.help.link.2=Buscar y reemplazar en proyecto
swift.navigation.search.intro=La búsqueda en AppCode es diferente. Tenemos funcionalidades especiales para buscar texto y otras específicas para buscar código. Esto es porque el código no es solo texto - tiene una estructura específica formada por estructuras de código.
swift.navigation.search.name=Búsqueda
swift.navigation.search.rule=Hay una regla simple\: identifica el símbolo que necesitas encontrar, no el fragmento de texto. <strong>Buscar usos</strong> funciona con cualquier estructura de código en el contexto del proyecto y encontrará todos los usos en toda la base de código.
swift.navigation.search.text.search=Por supuesto, a veces podrías no saber qué estás buscando y quieres encontrar tantas coincidencias como sea posible buscando texto. En este caso, usa {0} para buscar en el archivo actual o {1} para buscar en todo el proyecto.
swift.navigation.search.var=Hay varias estructuras de código con la palabra {0} en este archivo de ejemplo. El cursor de texto está en la variable llamada {1}. Presiona {2} para encontrar todas las coincidencias de texto de la palabra {3}.
swift.navigation.todo.activate=¿Te preguntas cuántos TODOs hay en tu código? <ide/> tiene una ventana de herramientas <strong>TODO</strong> dedicada. Presiona {0} para activarla.
swift.navigation.todo.all.bookmarks=Usa el atajo {0} para ver todos los bookmarks.
swift.navigation.todo.bookmark=Ahora presiona {0}. Este atajo establece un bookmark en el código. Los bookmarks se guardan en el directorio del proyecto y son útiles cuando quieres guiar a tus colegas a una ubicación específica en el código.
swift.navigation.todo.change.bookmark=Puedes cambiar el nombre del bookmark. Selecciona el bookmark, presiona {0}, ingresa un nuevo nombre y presiona {1}.
swift.navigation.todo.custom=Puedes definir tus propios filtros <strong>TODO</strong> personalizados. Usa {0} →<strong>Editar filtros</strong> para abrir el diálogo de filtros TODO y agrega filtros usando expresiones regulares.
swift.navigation.todo.go.back=Presiona {0} para volver al editor.
swift.navigation.todo.help.link.1=Comentarios TODO
swift.navigation.todo.help.link.2=Favoritos
swift.navigation.todo.name=TODO y Bookmarks
swift.navigation.windows.breakpoints=El diálogo <strong>Breakpoints</strong> funciona igual que el navegador <strong>Breakpoints</strong> en Xcode - muestra una lista de todos los breakpoints en el proyecto. Actívalo usando {0}.
swift.navigation.windows.build=Invoca {0} para compilar el proyecto.
swift.navigation.windows.build.messages=La ventana de herramientas <strong>Mensajes de compilación</strong> muestra la salida del compilador donde puedes filtrar mensajes por tipo (ver el botón <strong>Filtrar mensajes</strong>({0}) a la izquierda).
swift.navigation.windows.debug=La ventana de herramientas <strong>Debug</strong>({0}) es similar al navegador <strong>Debug</strong> de Xcode. Muestra todos los watches y variables locales a la derecha y la lista de threads a la izquierda.
swift.navigation.windows.dismiss.structure.popup=Usa {0} para cerrar este popup o presiona ⏎ para saltar a algún lugar en el código.
swift.navigation.windows.files=La vista <strong>Archivos</strong> es otro modo útil de la vista <strong>Proyecto</strong> de <ide/>. Muestra todos los archivos en el directorio donde están {0} o {1}. Usa esta vista para abrir y ver fácilmente cualquier archivo que no esté incluido en el proyecto.
swift.navigation.windows.files.activate=Presiona {0} para activar la vista <strong>Archivos</strong>.
swift.navigation.windows.find=El diálogo <strong>Buscar en archivos</strong>({0}) proporciona la misma funcionalidad que el navegador <strong>Buscar</strong> en Xcode. Pruébalo ahora para realizar una búsqueda de texto completo.
swift.navigation.windows.go.to.file=Cambiemos de la ventana del simulador de vuelta al IDE y naveguemos a {0} usando {1}.
swift.navigation.windows.help.link=Resumen de la interfaz de usuario
swift.navigation.windows.init.git=Inicializa un repositorio GIT usando {0}→<strong>Crear repositorio Git</strong>. Ahora activa la ventana de herramientas <strong>VCS</strong> usando el atajo {1}.
swift.navigation.windows.intro=Hay muchas vistas de navegación en <ide/>. Conocer qué vista invocar en una situación específica te ayudará a usar el IDE de manera más eficiente.
swift.navigation.windows.jump.to.source=Usa las teclas ↑ y ↓ para seleccionar cualquier estructura de código aquí y presiona {0} para saltar a algún lugar en el código.
swift.navigation.windows.name=Ventana principal y vistas
swift.navigation.windows.project=La vista <strong>Proyecto</strong> es similar al navegador de proyecto en Xcode. Muestra todos los proyectos incluidos en un workspace específico junto con todos sus archivos y grupos. Presiona ({0}) para abrir la vista <strong>Proyecto</strong>.
swift.navigation.windows.project.settings=Haz clic en el icono "{0}" en el menú de opciones de la vista de proyecto y selecciona <strong>Apariencia de árbol | Orden Xcode</strong> para establecer el mismo orden de archivos que en Xcode (esta opción se habilita automáticamente si elegiste el comportamiento de Xcode al configurar <ide/>).
swift.navigation.windows.project.settings.more=Otras características incluyen <strong>Abrir archivos con un clic</strong> y <strong>Seleccionar siempre archivo abierto</strong>. <strong>Abrir archivos con un clic</strong> abre automáticamente el código de un archivo cuando lo seleccionas. <strong>Seleccionar siempre archivo abierto</strong> automáticamente enfoca el nombre del archivo en la vista <strong>Proyecto</strong> cuando el área del editor tiene el foco.
swift.navigation.windows.project2=Por defecto, la vista <strong>Proyecto</strong> en <ide/> muestra archivos y carpetas en el orden en que están almacenados en el sistema de archivos.
swift.navigation.windows.return.to.editor=Presiona {0} para volver a la ventana del editor.
swift.navigation.windows.run=Ahora ejecutemos nuestro proyecto en el simulador y veamos la ventana de herramientas <strong>Run</strong>. Presiona {0}.
swift.navigation.windows.run.window=Esta ventana de herramientas muestra la consola donde puedes ver la salida de tu aplicación o la salida del <strong>Test Runner</strong> si estás ejecutando una configuración de <strong>Test</strong>. Siempre puedes activarla usando ({0}).
swift.navigation.windows.stop=Presiona {0} para detener la aplicación.
swift.navigation.windows.stop.debug=Presiona {0} para detener la aplicación.
swift.navigation.windows.structure=La vista <strong>Estructura</strong> y el popup <strong>Estructura</strong> muestran la estructura de un archivo específico y todos los {0}, {1} y comentarios {2} o {3} en el código. Funcionan de manera similar al navegador <strong>Símbolos</strong> en Xcode.
swift.navigation.windows.structure.activate=Presiona {0} para activar la vista <strong>Estructura</strong>.
swift.navigation.windows.structure.popup=Ahora activa el popup <strong>Estructura</strong> usando {0}.
swift.navigation.windows.toggle.break=Usa {0} para colocar un breakpoint en la línea 11 y presiona {1}.
swift.navigation.windows.vcs.window=La ventana de herramientas <strong>VCS</strong> proporciona todo lo necesario para trabajar con sistemas de control de versiones, incluyendo la vista <strong>Cambios</strong>, <strong>Log VCS</strong> y más.
swift.rdt.debug.eval=Usa {1} para seleccionar {0} y usa <strong>Evaluar expresión</strong>({2} → {3}).
swift.rdt.debug.eval.again=Escribe un punto, selecciona algunas propiedades y presiona {0} para evaluarlas sin cambiar a la consola LLDB.
swift.rdt.debug.help.link.1=Depurar código
swift.rdt.debug.help.link.2=Depuración en AppCode
swift.rdt.debug.intro=Ahora veamos cómo depurar tu código.
swift.rdt.debug.name=Depuración
swift.rdt.debug.prepare=Presiona {1} para navegar a {0}.
swift.rdt.debug.run.cursor=Ahora, coloca el cursor de texto en la línea 21 y ejecuta <strong>Run to Cursor</strong> usando "{0}".
swift.rdt.debug.step.into=Presiona {0} para Step Into y {1} para Step Over.
swift.rdt.debug.step.over.next.line=Step Over a la siguiente línea.
swift.rdt.debug.stop=Presiona {0} para detener la depuración de la aplicación.
swift.rdt.debug.toggle.break=Usa {0} para colocar un breakpoint en la línea 11 y presiona {1}.
swift.rdt.run.actions=<ide/> proporciona dos acciones diferentes para ejecutar y depurar tu proyecto (ya que la depuración suele ser más lenta). Presiona {0} para ejecutar tu aplicación.
swift.rdt.run.another=¡Excelente\! Para seleccionar otra configuración de ejecución o simulador para la configuración actual y ejecutar rápidamente tu aplicación, presiona {0}, selecciona la configuración de ejecución o simulador objetivo y presiona {1}.
swift.rdt.run.final=Presiona {0} para detener tu aplicación.
swift.rdt.run.help.link=Ejecutar aplicaciones
swift.rdt.run.name=Ejecución
swift.rdt.run.stop=Presiona {0} para detener tu aplicación.
swift.rdt.test.additional=Puedes ordenar las pruebas por duración ({0}) o alfabéticamente ({1}) usando los iconos específicos en la ventana de herramientas <strong>Test Runner</strong>. Presiona {2} para ejecutar todas las pruebas nuevamente y ordénalas por duración.
swift.rdt.test.debug.single=Ahora depuremos la prueba. Usa "{0}" para colocar un breakpoint de línea y "{1}" para depurar la prueba.
swift.rdt.test.delete.failed=Usa {1} para eliminar {0}.
swift.rdt.test.failing=Ahora hay una prueba fallida. Usa el atajo {0} para ejecutar todas las pruebas nuevamente.
swift.rdt.test.filter.failed=Haz clic en el icono "{0}" para filtrar solo las pruebas fallidas.
swift.rdt.test.go.back=Presiona {1} para navegar de vuelta a {0}.
swift.rdt.test.help.link.1=Crear pruebas
swift.rdt.test.help.link.2=Pruebas unitarias en AppCode
swift.rdt.test.history=El historial de pruebas incorporado guarda automáticamente los resultados de las últimas ejecuciones de pruebas y también los carga en la ventana del test runner. Haz clic en el icono "{0}" y selecciona un elemento de la lista para cargar una ejecución de prueba anterior.
swift.rdt.test.intro=<ide/> soporta múltiples frameworks de pruebas, incluyendo XCTest, Quick, Kiwi, Catch, Boost.Test y Google Test. Veamos todas las características comunes disponibles al probar tu aplicación.
swift.rdt.test.intro.tests=<ide/> reconoce automáticamente el alcance de las pruebas basado en la posición del cursor de texto. Cuando el cursor de texto está en algún lugar dentro de un archivo de prueba, puedes ejecutar todas las pruebas en ese archivo. Lo mismo aplica para pruebas individuales. Para ejecutar una prueba individual, coloca el cursor de texto dentro del método de prueba.
swift.rdt.test.more=¡Eso es todo\! Para algunos frameworks como <strong>Quick</strong>, <ide/> proporciona una presentación mejorada de los resultados de las pruebas. Para una visión general de todos los frameworks de prueba soportados por <ide/>, mira <a href\="https\://www.youtube.com/watch?v\=DXvx6xNG_jc">este video</a>.
swift.rdt.test.name=Pruebas
swift.rdt.test.prepare=Usa {1} para navegar a {0}.
swift.rdt.test.rerun.failed=Ahora haz clic en {0} para volver a ejecutar solo las pruebas fallidas.
swift.rdt.test.resume=Presiona {0} para reanudar la ejecución.
swift.rdt.test.show=Ahora mostraremos las pruebas en la vista de árbol. Haz clic en el icono "{0}".
swift.rdt.test.single=Usa el mismo atajo {0} para ejecutar una prueba individual.
swift.rdt.test.stop.debug=Presiona {0} para detener la depuración.
swift.rdt.test.suite=Presiona {0} para ejecutar todas las pruebas en la suite de pruebas.
swift.refactoring.change.signature.exec=Presiona {0} para cambiar el nombre {1} a {2}.
swift.refactoring.change.signature.exec.again=Presiona {0} nuevamente. Haz clic en la línea con el parámetro {1} y cámbialo a {2}, o agrega un nombre de parámetro interno.
swift.refactoring.change.signature.final=Finalmente, invoca <strong>Change Signature</strong> nuevamente y usa los botones {0}/{1} o los atajos <shortcut>⌥↑</shortcut>/<shortcut>⌥↓</shortcut> para cambiar el orden de los parámetros.
swift.refactoring.change.signature.help.link=Change Signature
swift.refactoring.change.signature.intro=<strong>Change Signature</strong> es una refactorización que te permite cambiar nombres de métodos y funciones, editar nombres de parámetros internos y externos, cambiar su orden y modificar la visibilidad de métodos y funciones, todo al mismo tiempo.
swift.refactoring.change.signature.name=Change Signature
swift.refactoring.extract.closure.exec=Presiona {0} y selecciona <strong>Extract Closure...</strong>.
swift.refactoring.extract.closure.help.link=Extract Closure
swift.refactoring.extract.closure.intro=Puedes encapsular una selección de código en un nuevo closure con parámetros personalizables y tipos de retorno usando <strong>Extract Closure</strong>. Funciona de manera similar a la refactorización Extract Method.
swift.refactoring.extract.closure.name=Extract Closure
swift.refactoring.extract.function.change.params=Al extraer una función en <ide/>, puedes modificar su firma. Haz clic en un parámetro en la sección <strong>Parameters</strong> y usa los iconos {0}/{1} para cambiar el orden de los parámetros. Haz clic en la línea del parámetro para cambiar su nombre.
swift.refactoring.extract.function.exec.again=Ahora, presiona {0} e intenta modificar la firma de la función extraída.
swift.refactoring.extract.function.help.link=Extract Function
swift.refactoring.extract.function.intro=<strong>Extract Function</strong> es una refactorización que te permite encapsular el código seleccionado en una nueva función con parámetros personalizables y tipos de retorno. Extrae algunas líneas de código a una nueva función {0}. Presiona {1} -> {2}.
swift.refactoring.extract.function.name=Extract Function
swift.refactoring.extract.function.undo=Presiona {0} para deshacer los cambios.
swift.refactoring.extract.variable.description=<strong>Extract Variable</strong> no requiere que selecciones el fragmento exacto de código a extraer. Simplemente coloca el cursor de texto en una declaración y selecciona la expresión deseada.
swift.refactoring.extract.variable.exec=Presiona {0} para extraer la constante {1} a una variable o campo {2}.
swift.refactoring.extract.variable.exec.again=Ahora, presiona {0} y selecciónalo de la lista para extraer {1} a la variable {2}.
swift.refactoring.extract.variable.help.link=Extract Variable
swift.refactoring.extract.variable.name=Extract Variable
swift.refactoring.rename.any=Puedes renombrar cualquier cosa colocando el cursor de texto en un símbolo y usando la refactorización <strong>Rename</strong>.
swift.refactoring.rename.check=Presiona {0}. Como puedes ver, la refactorización <strong>Rename</strong> funciona globalmente e incluso renombra coincidencias en archivos .xib y .storyboard.
swift.refactoring.rename.class=Haz lo mismo nuevamente y renombra el tipo {0} a algún nuevo valor.
swift.refactoring.rename.go.to.file=Presiona {1} para navegar a {0}.
swift.refactoring.rename.help.link=Refactorización "Rename"
swift.refactoring.rename.name=Rename
swift.refactoring.rename.var=Comencemos con algo simple como renombrar el campo {0} a {1}. Presiona {2}, escribe el nuevo nombre y presiona {3}.
swift.refactorings.module.description=Rename, Extract Variable/Method y otras refactorizaciones.
swift.refactorings.module.name=Refactorizaciones
swift.run.debug.test.module.description=Aprende cómo ejecutar, depurar y probar tu aplicación.
swift.run.debug.test.module.name=Ejecutar, Depurar, Probar