swift.code.generations.module.description=Crear a partir del uso, anular/implementar y aplicar soluciones rápidas.
swift.code.generations.module.name=Generación de código
swift.codegeneration.cfu.create.class=Esta vez podemos utilizar el mismo enfoque para crear una declaración de clase. Presiona {0}, selecciona <strong>Crear tipo ''IDE''</strong>, y luego presiona {1}. Ten en cuenta que puedes crearla automáticamente para que esté anidada en la clase actual o en un nuevo archivo.
swift.codegeneration.cfu.create.empty.init=Finalmente, usemos las mismas acciones para crear un inicializador vacío.
swift.codegeneration.cfu.create.init=¡Excelente! Vamos a repetir las mismas acciones para generar un inicializador para nuestra clase {0}. Pulsa {1}, selecciona **Crear inicializador** y luego pulsa {2}.
swift.codegeneration.cfu.create.local=En <ide/>, puedes crear distintas construcciones de código a partir de sus usos simplemente presionando la tecla {0} en la entidad no resuelta. Presiona la tecla {1}, selecciona <strong>Crear variable local ''label''</strong> y luego presiona la tecla {2}.
swift.codegeneration.cfu.help.link=Genera métodos y propiedades de sus usos
swift.codegeneration.cfu.name=Crear desde uso
swift.codegeneration.cfu.nice=¡Qué bien! Observa cómo se generan los parámetros a la par de sus nombres.
swift.codegeneration.cfu.repeat=Repetir las mismas acciones para crear la función {0}.
swift.codegeneration.generate.description=Por último, generar {0} usando {1} → acción <strong>descripción</strong>.
swift.codegeneration.generate.hash=Genera {0} y {1} utilizando {2} → <strong>equals y hash</strong>.
swift.codegeneration.generate.help.link=Generar código
swift.codegeneration.generate.init=Presiona {0} y selecciona <strong>Inicializador</strong> en el popup <strong>Generar</strong>. Selecciona las propiedades a incluir en la signatura del inicializador y presiona {1}.
swift.codegeneration.generate.intro=Puedes generar propiedades {0}, {1}, {2} y {3} así como inicializadores usando la acción <strong>Generar</strong>.
swift.codegeneration.generate.name=Generar
swift.codegeneration.overrideimplement.help.link.1=Redefinir métodos de superclase
swift.codegeneration.overrideimplement.help.link.2=Implementar métodos de una interfaz o una clase abstracta
swift.codegeneration.overrideimplement.implement=Presione {0} → {1} y añada códigos auxiliares para todos los métodos obligatorios de {2}.
swift.codegeneration.overrideimplement.intro=Puede reemplazar cualquier método de una clase superior o implementar cualquier protocolo utilizando las acciones <strong>Reemplazar/Implementar</strong> ({0}/{1}).
swift.codegeneration.overrideimplement.name=Anular/Implementar
swift.codegeneration.overrideimplement.override=Ahora intentemos anular varios métodos a la vez. Presiona {0} y comienza a escribir {1}. La lista de métodos y propiedades que puedes anular se filtrará en sólo dos métodos. Presiona {2} → {3} para anularlos.
swift.codegeneration.quickfix.error.handling=Las intenciones de manejo de errores pueden ayudarte a agregar {0} donde es necesario. Oprime {1}→{2} y selecciona una de las correcciones rápidas.
swift.codegeneration.quickfix.explicit.type=Si necesitas agregar o eliminar un tipo explícito para alguna variable, simplemente presiona {0} y selecciona <strong>Agregar/Eliminar tipo explícito</strong>. Pruébalo ahora con la variable {1}.
swift.codegeneration.quickfix.fixit=Pulsa {0} y selecciona <strong>Aplicar corrección rápida</strong> para reemplazar una variable no utilizada por {1}.
swift.codegeneration.quickfix.go.next.error=Presione {0} para ir al siguiente error.
swift.codegeneration.quickfix.go.next.warning=Presiona {0} para ir a la siguiente advertencia.
swift.codegeneration.quickfix.help.link.1=Acciones de intención
swift.codegeneration.quickfix.help.link.2=Obtener resultados y solucionar problemas
swift.codegeneration.quickfix.intro=<ide/>muestra el mismo {0} para su código Swift como lo hace Xcode.
swift.codegeneration.quickfix.name=Quick-fixes e Intenciones
swift.codegeneration.quickfix.redundant=También puedes eliminar atributos {0} redundantes. Presiona <shortcut>⇧⌥⏎</shortcut>.
swift.codegeneration.quickfix.sourcekit.fixit=Como puedes ver, tenemos varios problemas en este fragmento de código. Vamos a corregir algunos de ellos. Selecciona **Swift→Inspecciones de SourceKit** y haz clic en el botón **Aplicar Fix-it** a la derecha. Esto debería resolver todos los problemas de este grupo.
swift.codegeneration.quickfix.sourcekit.inspection=AppCode también integra SourceKit como una inspección separada. Esto significa que se puede ejecutar para todo el archivo y corregir todos los problemas a la vez si hay varias correcciones disponibles. Presionar {0}.
swift.codegeneration.quickfix.typo.in.string=Tenga en cuenta que todos los usos de variables fueron renombrados automáticamente. Ahora, intente utilizar {0} para reparar la cadena {1}.
swift.codegeneration.quickfix.typo.in.var=Presione {0} para regresar a la ventana del editor, coloque el cursor en la variable con el nombre mal escrito, y presione {1}. Seleccione **Error tipográfico: Cambiar nombre por...**, indique la opción correcta y presione {2}.
swift.editor.comment=Comentar
swift.editor.comment.block=Presiona {0} dos veces para seleccionar {1} y luego comenta con un comentario de bloque usando {2}.
swift.editor.comment.help.link=Documentando código
swift.editor.comment.intro=Comenta cualquier línea con {0}.
swift.editor.comment.several.lines=Selecciona varias líneas con {0} y comenta con {1}.
swift.editor.comment.uncomment=Descomenta la línea comentada con el mismo atajo, {0}.
swift.editor.completion.basic=Por defecto, <ide/> completa su código instantáneamente. Comience a escribir {0} justo donde está el cursor y presione {1} para seleccionar la función {2}.
swift.editor.completion.basic.shortcut=Puedes activar Relleno básico en cualquier momento pulsando {0}.
swift.editor.completion.go.next=¡Impresionante! Haz clic en el botón de abajo para iniciar la siguiente lección o usa {0}.
swift.editor.completion.help.link=Autocompletado de código
swift.editor.completion.name=Autocompletado
swift.editor.completion.show=Ahora pulse {0} para ver las opciones de completado.
swift.editor.completion.smart=La finalización Smart Type filtra la lista de sugerencias para incluir solo aquellos tipos que son aplicables en el contexto actual. Pulsa {0} para ver la lista de sugerencias coincidentes. Elige la primera pulsando {1}.
swift.editor.completion.tab=Selecciona el elemento {0} y presiona {1} (en lugar de {2}). Esto sobrescribe la palabra en el cursor en lugar de solo insertarla.
swift.editor.completion.tab.method=Ahora invoke {0} y {1} para sobrescribir {2} con {3} fácilmente.
swift.editor.delete.action=Eliminar la línea actual con {0}.
swift.editor.delete.help.link=Líneas de código
swift.editor.delete.name=Eliminar
swift.editor.delete.undo=Para restaurar la línea eliminada, presiona {0}.
swift.editor.duplicate.line=Duplicar cualquier línea mediante {0}.
swift.editor.duplicate.name=Duplicar
swift.editor.duplicate.several.lines=Puedes hacer lo mismo con varias líneas. Simplemente selecciona dos o más líneas y duplícalas con {0}.
swift.editor.folding.block=Y, por último, usa {0} para plegar las sentencias de control de flujo.
swift.editor.folding.collapse=A veces necesitas plegar un fragmento de código para mejorar la lectura. Inténtalo plegando código con {0}.
swift.editor.folding.collapse.all=Si quieres colapsar todas las regiones del archivo, usa {0}.
swift.editor.folding.collapse.statement.any=En <ide/>, hay una forma de colapsar cualquier secuencia de declaraciones o llamadas. Intenta colapsar la región seleccionada con {0}.
swift.editor.folding.expand=Para expandir una región de código, presione {0}.
swift.editor.folding.expand.all=Similarmente, presiona {0} para expandir todas las regiones disponibles.
swift.editor.folding.expand.statement=Ahora presiona {0} para ir en el sentido contrario.
swift.editor.folding.help.link=Plegado de código
swift.editor.folding.name=Plegado
swift.editor.format.help.link=Reformatear y ordenar el código
swift.editor.format.name=Formato del código
swift.editor.format.reformat=<ide/> te ayuda a corregir el formato del código con tan sólo una acción. Inténtalo reformateando el código seleccionado con {0}.
swift.editor.format.reformat.whole.file=Para renombrar todo el archivo fuente, usa {0} cuando no hay líneas seleccionadas. Presiona {1} y después {2}.
swift.editor.module.description=Aprende a seleccionar, comentar, eliminar, duplicar y mover líneas, dar formato a tu código, etc.
swift.editor.module.name=Editor
swift.editor.move.help.link=Mover sentencias
swift.editor.move.line.down=Reordenar líneas usualmente requiere dos acciones: cortar y pegar. En <ide/> puedes hacerlo con sólo una ya que al presionar {0} se moverá la línea actual hacia abajo. Mueve la línea actual al final de la función {1}.
swift.editor.move.line.up=Del mismo modo, para subir una línea, usa {0}. Mueve la declaración {1} para que preceda a su configuración.
swift.editor.move.name=Mover
swift.editor.popups.close.param.info=Presiona {0} para cerrar el popup.
swift.editor.popups.doc=Pulsa {0} para ver la documentación del símbolo en el cursor.
swift.editor.popups.help.link=Quick popups (ventanas emergentes rápidas)
swift.editor.popups.impl=Presione {0} para ver la definición del símbolo en el caret.
swift.editor.popups.name=Ventanas emergentes rápidas
swift.editor.popups.param.info=Presiona {0} para ver la firma inicializadora.
swift.editor.selection.all=Ahora selecciona el archivo completo al instante con {0}.
swift.editor.selection.expand=Presiona {0} para expandir la selección al siguiente bloque de código.
swift.editor.selection.expand.more=Intenta expandir la selección con {0} hasta seleccionar el archivo completo.
swift.editor.selection.help.link=Seleccionar constructs de código
swift.editor.selection.name=Selección
swift.editor.selection.shrink={0} reduce la selección actual. Inténtalo pulsándolo.
swift.editor.selection.word=Coloca el cursor antes de cualquier palabra. Presiona {0} para mover el cursor a la siguiente palabra y seleccionar todo el texto entre ambas.
swift.editor.selections.column=Alternar Seleccion de Columna usando {0} y colocar los cursores en todas las líneas de {1} a {2} usando el teclado ({3}).
swift.editor.selections.help.link=Múltiples selecciones y rangos de selección
swift.editor.selections.name=Selecciones múltiples
swift.editor.selections.next=Presiona {0} para seleccionar el símbolo en el cursor.
swift.editor.selections.next.again=Pulsa {0} de nuevo para seleccionar la siguiente coincidencia de este símbolo.
swift.editor.selections.reformat=¡Pulsa {0}, reforma el código con {1} y listo!
swift.editor.selections.replace=Escribe {0} para reemplazar todas las apariciones de {1} con {2} y luego presiona {3}.
swift.editor.selections.select.all=Presiona {0} para seleccionar todas las ocurrencias en el archivo.
swift.editor.selections.select.sample=Ahora escribe {0} y selecciona todos los nombres de caso con {1}.
swift.editor.selections.select.sample.toggle=Presiona {0} para alternar mayúsculas/minúsculas y luego presiona {1} nuevamente para salir del modo Selección de columna.
swift.editor.selections.unselect=Oprime {0} para deseleccionar la última ocurrencia.
swift.navigation.code.class=Vamos a navegar a la clase {0}. Pulsar {1}, teclear {2} y luego pulsar {3}.
swift.navigation.code.declaration=Otra acción importante de la familia **Ir a...** es **Ir a la declaración**. Coloca el cursor en {0} y presiona {1} para ir a su declaración.
swift.navigation.code.file=¡Genial! Ahora abre el archivo {0}: presiona {1}, escribe {2} y presiona {3}.
swift.navigation.code.fuzzy=Cada uno de los cuadros de diálogo <strong>Ir a...</strong> permite utilizar la coincidencia difusa, por lo que puede escribir solo una parte del nombre de una clase, archivo o símbolo para encontrarlo.
swift.navigation.code.go.back=Volvamos a {0} vía {1}.
swift.navigation.code.help.link=Navegación del código
swift.navigation.code.implementation=Si un método o clase tiene varias implementaciones, {0} te llevará a la primera. Intenta usar {1} para ver todas las definiciones de {2}.
swift.navigation.code.intro=Al trabajar en un proyecto, a menudo es necesario abrir y editar una clase, archivo o símbolo determinado. La forma más rápida de hacerlo es mediante la tripleta de navegación principal: <strong>Ir a clase/archivo/símbolo</strong>.
swift.navigation.code.name=Navegación por el código
swift.navigation.code.non.project.files=Si también es necesario incluir bibliotecas estándar y otros archivos que no sean de proyecto, símbolos o clases, simplemente presiona dos veces el atajo.
swift.navigation.code.recent=Por último, hay dos acciones de navegación muy útiles y frecuentemente utilizadas que pueden ayudarte a cambiar rápidamente entre archivos recientes y ventanas de herramientas. La primera es la ventana emergente **Archivos recientes**. Ábrela mediante {0} y selecciona lo que necesitas usando las teclas de flecha del teclado.
swift.navigation.code.super=<strong>Ir a la definición padre</strong> te navega a la declaración de la clase padre. Pulsa {0} para ir a la clase {1}.
swift.navigation.code.super.again=Ahora presiona {0} de nuevo para saltar a la declaración de protocolo {1}.
swift.navigation.code.switcher=El segundo es <strong>Switcher</strong>, que tiene la misma apariencia pero desaparece inmediatamente luego de seleccionar un elemento. Mantenga presionada la tecla <shortcut>⌃</shortcut> mientras presiona {0} y presione nuevamente para cambiar a un archivo o ventana de herramienta. Suelte la tecla <shortcut>⌃</shortcut> después de seleccionar lo que desee.
swift.navigation.code.symbol=Vayamos directamente a la declaración de {0} en la clase {1}. Presione {2}, escriba {3} y luego presione {4}.
swift.navigation.module.description=Ventanas, vistas, navegación de código, salto a la fuente, declaración/implementación, estructura de archivos, y más.
swift.navigation.module.name=Navegación
swift.navigation.precise.comment.combo=Ahora comenta cada una de estas líneas pulsando {0} - {1} - {2}.
swift.navigation.precise.first.error=Ir al primer error con {0}.
swift.navigation.precise.first.warning=Ahora presiona {0} de nuevo - te debería llevar a la primera advertencia del archivo.
swift.navigation.precise.fix.warning=Presiona {0} y usa {1} para corregir la primera advertencia.
swift.navigation.precise.help.link=Navegar entre errores o advertencias
swift.navigation.precise.intro=Varios atajos para navegar dentro de un archivo de código pueden hacer que tu desarrollo sea mucho más eficiente. Veamos rápidamente cuáles son.
swift.navigation.precise.jump.last.changes=Imagina que tienes un archivo largo y no recuerdas bien qué has cambiado en él ni dónde. Pulsa {0} para saltar al último cambio del archivo.
swift.navigation.precise.jump.line=Finalmente, cuando necesites saltar a una línea o columna específica en tu código, presiona {0}.
swift.navigation.precise.name=Navegación precisa
swift.navigation.precise.next.error=Hay severas advertencias y un error en este archivo. Pulse {0} para navegar al primer error.
swift.navigation.precise.next.error.again=Ahora, salta al siguiente error usando el mismo atajo de teclado.
swift.navigation.precise.next.method=Presiona {0} para saltar rápidamente al siguiente método en el archivo actual.
swift.navigation.precise.prev.method=Saltar al método anterior con {0}.
swift.navigation.search.action=Por último, intente utilizar **Buscar acción** ({0}) para encontrar rápidamente una acción de IDE y ejecutarla. Por ejemplo, escriba ''plugins'' para abrir **Preferencias | Plugins**.
swift.navigation.search.everything=¿Qué hacer cuando se quiere buscar texto en símbolos, nombres de archivo o incluso en la configuración del IDE y en las opciones del menú? Presione <shortcut>Doble⇧</shortcut> para abrir el cuadro de diálogo **Buscar en todo el contenido**.
swift.navigation.search.find.usages.method=Ahora vamos a buscar todos los usos del método {0}. Pulsa {1} → {2} de nuevo.
swift.navigation.search.find.usages.proto=El mismo flujo de trabajo se aplica a cualquier otra construcción de código. Pulsar {0} → {1} para buscar todos los usos del protocolo {2} en el proyecto.
swift.navigation.search.find.usages.var=Esto no es muy útil, ¿verdad? En el código real, probablemente queremos buscar la variable {0}, sin incluir nombres de clase, nombres de método o cualquier otra construcción de código. Intente presionar {1} y luego {2}.
swift.navigation.search.find.usages.var.result=Ahora, AppCode muestra solo los usos reales de la variable {0}
swift.navigation.search.help.link.1=Buscar y reemplazar en el archivo
swift.navigation.search.help.link.2=Buscar y reemplazar en el proyecto
swift.navigation.search.intro=La búsqueda en AppCode es distinta. Tenemos funciones especiales para buscar texto y otras funciones específicas para buscar código. Esto se debe a que el código no es solo texto; posee una estructura específica formada por las construcciones de código.
swift.navigation.search.name=Buscar
swift.navigation.search.rule=La regla simple es: identificar el símbolo que necesitas buscar, en lugar de qué fragmento de texto necesitas buscar. <strong>Encontrar Usos</strong> funciona para cualquier construcción de código en el contexto del proyecto, por lo que encontrarás todos los usos en todo el código base.
swift.navigation.search.text.search=Por supuesto, a veces no sabes exactamente qué estás buscando, y quieres encontrar tantas coincidencias como sea posible buscando algún texto. En este caso, usa {0} para buscar en el archivo actual, o usa {1} para buscar en todo el proyecto.
swift.navigation.search.var=Este archivo de ejemplo contiene muchas declaraciones de código que incluyen la palabra {0}. El cursor está actualmente en la variable denominada {1}. Presiona {2} para encontrar todas las ocurrencias de texto de la palabra {3}.
swift.navigation.todo.activate=¿Alguna vez has querido ver cuántos TODOs hay en tu código? En <ide/>, existe una ventana de herramientas <strong>TODO</strong> dedicadas para ellos. Pulsa {0} para activarla.
swift.navigation.todo.all.bookmarks=Visualiza todos los marcadores con el atajo {0}.
swift.navigation.todo.bookmark=Ahora presiona {0}. Este atajo establece un marcador en tu código. Los marcadores se guardan en el directorio del proyecto y son útiles si deseas señalar un lugar específico de tu código a tu colega.
swift.navigation.todo.change.bookmark=Puede cambiar el nombre de un marcador. Selecciónelo, presione {0}, ingrese un nuevo nombre y presione {1}.
swift.navigation.todo.custom=Puedes definir tus propios filtros <strong>TODO</strong> personalizados. Abre dialogo de filtros TODO con {0} → <strong>Editar filtros</strong> y luego agrega tus filtros usando RegExps.
swift.navigation.todo.go.back=Presiona {0} para regresar al editor.
swift.navigation.todo.help.link.1=Comentarios TODO
swift.navigation.todo.help.link.2=Favoritos
swift.navigation.todo.name=TODO y Marcadores
swift.navigation.windows.breakpoints=El cuadro de diálogo <strong>Puntos de interrupción</strong> ofrece la misma funcionalidad que el navegador de <strong>Puntos de interrupción</strong> de Xcode: muestra la lista de todos los puntos de interrupción de tu proyecto. Actívalo utilizando {0}.
swift.navigation.windows.build=Invocar {0} para construir el proyecto.
swift.navigation.windows.build.messages=La ventana de la herramienta <strong>Mensajes de compilación</strong> muestra la salida del compilador y te permite filtrar los mensajes de compilación por su tipo (ver el botón <strong>Filtrar mensajes</strong>({0}) en el lado izquierdo).
swift.navigation.windows.debug=La ventana de herramientas <strong>Depuración</strong> ({0}) es similar al navegador <strong>Depuración</strong> de Xcode. Muestra todos los observadores, variables locales en el lado derecho y la lista de subprocesos en el lado izquierdo.
swift.navigation.windows.dismiss.structure.popup=Descarta este popup usando {0} o presiona ⏎ para saltar a algún lugar en tu código.
swift.navigation.windows.files=La vista **Archivos** es un modo adicional útil para la vista **Proyecto** de <ide/>. Muestra todos los archivos dentro del directorio donde se encuentra {0} o {1}. Con esta vista, puedes abrir fácilmente cualquier archivo que no esté incluido en el proyecto y verlo.
swift.navigation.windows.files.activate=Pulsa {0} para activar la vista <strong>Archivos</strong>.
swift.navigation.windows.find=El diálogo <strong>Buscar en archivos</strong> ({0}) proporciona la misma funcionalidad que el navegador <strong>Buscar</strong> de Xcode. Prueba a usarlo para ejecutar una búsqueda de texto completo ahora.
swift.navigation.windows.go.to.file=Volvamos de la ventana del emulador al IDE y naveguemos a {0} con {1}.
swift.navigation.windows.help.link=Descripción general de la interfaz de usuario
swift.navigation.windows.init.git=Inicializar un repositorio GIT mediante {0}→<strong>Crear repositorio Git</strong>. Ahora active la ventana de herramientas <strong>VCS</strong> con el atajo {1}.
swift.navigation.windows.intro=Existen muchas vistas de navegación en <ide/>. Saber cuál llamar en una situación dada te ayudará a usar el IDE de una manera más eficiente.
swift.navigation.windows.jump.to.source=Utiliza las teclas ↑ y ↓ para seleccionar una construcción de código que se encuentre aquí y presiona {0} para ir a un lugar del código.
swift.navigation.windows.name=Ventanas y vistas principales
swift.navigation.windows.project=La vista de <strong>Proyecto</strong> es similar al navegador de proyectos en Xcode. Muestra todos los proyectos incluidos en un espacio de trabajo en particular y todos los archivos y grupos dentro de ellos. Presione {0} para abrir la vista de <strong>Proyecto</strong>.
swift.navigation.windows.project.settings=Haz clic en el icono {0} del menú de opciones de la vista de proyecto y selecciona **Apariencia del árbol | Orden de Xcode** para establecer el mismo orden de archivos que en Xcode (si seleccionaste el comportamiento de Xcode al configurar <ide/>, esta opción se habilitará automáticamente).
swift.navigation.windows.project.settings.more=Otras funcionalidades incluyen <strong>Abrir archivos con un clic</strong> y <strong>Seleccionar siempre el archivo abierto</strong>. **Abrir archivos con un clic** permite abrir automáticamente el código de un archivo al seleccionarlo. **Seleccionar siempre el archivo abierto** coloca automáticamente el foco en el nombre del archivo en la vista **Proyecto** cuando el área del editor está en foco.
swift.navigation.windows.project2=Por defecto, la vista <strong>Proyecto</strong> en <ide/> muestra los archivos y las carpetas en el mismo orden en el que están almacenados en el sistema de archivos.
swift.navigation.windows.return.to.editor=Presiona {0} para volver a la ventana de edición.
swift.navigation.windows.run=Ahora vamos a ejecutar nuestro proyecto en el simulador para ver la ventana de herramientas <strong>Ejecutar</strong>. Pulsa {0}.
swift.navigation.windows.run.window=Esta ventana de herramientas muestra la consola donde es posible ver la salida de tu aplicación o el **Ejecutor de pruebas** si estás ejecutando la configuración de ejecución **Prueba**. Siempre puedes activarla mediante ({0}).
swift.navigation.windows.stop=Presiona {0} para detener tu aplicación.
swift.navigation.windows.stop.debug=Presiona {0} para detener tu aplicación.
swift.navigation.windows.structure=La vista <strong>Estructura</strong> y el menú emergente <strong>Estructura</strong> muestran la estructura de un archivo particular junto con todos los comentarios {0}, {1} y {2} o {3} de tu código. Funcionan de forma similar al navegador <strong>Símbolo</strong> de Xcode.
swift.navigation.windows.structure.activate=Presiona {0} para activar la vista <strong>Estructura</strong>.
swift.navigation.windows.structure.popup=Ahora activa la ventana emergente <strong>Estructura</strong> con {0}.
swift.navigation.windows.toggle.break=Coloca un punto de interrupción en la línea 11 usando {0} y luego presiona {1}.
swift.navigation.windows.vcs.window=La ventana de herramientas de <strong>VCS</strong> proporciona todo lo que necesitas para trabajar con sistemas de control de versiones, incluyendo la vista de <strong>Cambios</strong>, el <strong>Historial de VCS</strong> y más.
swift.rdt.debug.eval=Selecciona {0} con {1} y utiliza <strong>Evaluar expresión</strong> ({2} → {3}).
swift.rdt.debug.eval.again=Introduce el símbolo del punto, selecciona alguna propiedad y luego presiona {0} para evaluarlo sin cambiar a la consola LLDB.
swift.rdt.debug.help.link.1=Depurar código
swift.rdt.debug.help.link.2=Depuración en AppCode
swift.rdt.debug.intro=Ahora vamos a aprender cómo depurar tu código.
swift.rdt.debug.name=Depurar
swift.rdt.debug.prepare=Presiona {1} para navegar hacia {0}.
swift.rdt.debug.run.cursor=Ahora, coloca el cursor de texto en la línea 21 y ejecuta <strong>Ejecutar hasta el cursor</strong> con "{0}".
swift.rdt.debug.step.into=Presione {0} para depurar en profundidad y después presione {1} para depurar parcialmente.
swift.rdt.debug.step.over.next.line=Saltar a la siguiente línea.
swift.rdt.debug.stop=Presiona {0} para detener la depuración de la aplicación.
swift.rdt.debug.toggle.break=Coloca un punto de interrupción en la línea 11 con {0} y luego presiona {1}.
swift.rdt.run.actions=<ide/> cuenta con dos acciones diferentes para ejecutar el proyecto y para depurarlo (porque en general depurar es más lento). Presione {0} para ejecutar su aplicación.
swift.rdt.run.another=¡Genial! Para seleccionar otra configuración de ejecución o un simulador para la configuración de ejecución actual y ejecutar rápido la aplicación, oprime {0}, selecciona una configuración objetivo de ejecución o simulador y oprime {1}.
swift.rdt.run.final=Detener la aplicación con {0}.
swift.rdt.run.help.link=Ejecutar aplicaciones
swift.rdt.run.name=Ejecutar
swift.rdt.run.stop=Detener app con {0}.
swift.rdt.test.additional=Los iconos específicos de la ventana de herramientas <strong>Ejecutor de pruebas</strong> permiten ordenar las pruebas por duración ({0}) o alfabéticamente ({1}). Ejecute de nuevo todas las pruebas pulsando {2} y luego ordénelas por duración.
swift.rdt.test.debug.single=Ahora, depura la prueba. Ubica un punto de interrupción de línea mediante {0} y luego depura la prueba mediante {1}.
swift.rdt.test.delete.failed=Eliminar {0} mediante {1}
swift.rdt.test.failing=Ahora tenemos una prueba con errores. Vuelve a ejecutar todas las pruebas con el atajo {0}.
swift.rdt.test.filter.failed=Filtrar únicamente las pruebas fallidas haciendo clic en el ícono "{0}".
swift.rdt.test.go.back=Navega hacia atrás hacia {0} presionando {1}.
swift.rdt.test.help.link.1=Crea tests
swift.rdt.test.help.link.2=Pruebas unitarias en AppCode
swift.rdt.test.history=El historial de pruebas integrado guarda automáticamente los resultados de las ejecuciones de pruebas más recientes y también puede mostrarlos en la ventana de herramientas del ejecutor de pruebas. Para cargar una de las ejecuciones de pruebas anteriores, haz clic en el ícono {0} y selecciona uno de los elementos de la lista.
swift.rdt.test.intro=<ide/> soporta muchos marcos de prueba, incluidos XCTest, Quick, Kiwi, Catch, Boost.Test y Google Test. Exploremos todas las características comunes que puede utilizar al probar su aplicación.
swift.rdt.test.intro.tests=<ide/> identifica automáticamente el ámbito de la prueba según la posición del cursor. Cuando el cursor se encuentra en algún lugar del archivo de prueba, se pueden ejecutar todas las pruebas en este archivo. Lo mismo se aplica para una sola prueba. Para ejecutar una sola prueba, coloque el cursor dentro del método de prueba.
swift.rdt.test.more=¡Eso es todo! Para algunos frameworks, como <strong>Quick</strong>, <ide/> ofrece una presentación aún más mejorada de los resultados de las pruebas. Para obtener información general sobre todos los frameworks de prueba admitidos en <ide/>, vea <a href="https://www.youtube.com/watch?v=DXvx6xNGjc">este video</a>.
swift.rdt.test.name=Prueba
swift.rdt.test.prepare=Navega a {0} usando {1}.
swift.rdt.test.rerun.failed=Ahora, vuelve a ejecutar sólo las pruebas que han fallado, haciendo click en {0}.
swift.rdt.test.resume=Presione {0} para continuar la ejecución.
swift.rdt.test.show=Ahora mostraremos los tests en la vista de árbol. Haz clic en el icono {0}.
swift.rdt.test.single=Usa el mismo acceso directo {0} para ejecutar una sola prueba.
swift.rdt.test.stop.debug=Presiona {0} para detener la depuración.
swift.rdt.test.suite=Presiona {0} para ejecutar todas las pruebas en la suite de pruebas.
swift.refactoring.change.signature.exec=Presiona {0} para cambiar el nombre {1} a {2}.
swift.refactoring.change.signature.exec.again=Presiona {0} nuevamente. Haz clic en la fila con el parámetro {1} y cámbialo por {2}, o agrega un nombre de parámetro interno.
swift.refactoring.change.signature.final=Finalmente, vuelve a invocar <strong>Cambiar Signatura</strong> para cambiar el orden de los parámetros utilizando los botones {0}/{1} o los accesos directos <shortcut>⌥↑</shortcut>/<shortcut>⌥↓</shortcut>.
swift.refactoring.change.signature.help.link=Cambiar firma
swift.refactoring.change.signature.intro=<strong>Cambiar firma</strong> es una refactorización que te permite cambiar los nombres de métodos y funciones, editar los nombres de parámetros internos y externos, cambiar su orden y su visibilidad de métodos y funciones, todo a la vez.
swift.refactoring.change.signature.name=Cambiar Firma
swift.refactoring.extract.closure.exec=Presiona {0} después selecciona <strong>Extraer cierre...</strong>.
swift.refactoring.extract.closure.help.link=Extraer closure
swift.refactoring.extract.closure.intro=<strong>Extraer Cierre</strong> te permite encapsular una selección de código en un nuevo cierre, con parámetros personalizables y tipo de retorno. Funciona de forma similar a la refactorización Extraer Método.
swift.refactoring.extract.closure.name=Extraer cierre
swift.refactoring.extract.function.change.params=Al extraer una función en <ide/>, se puede cambiar su firma. Haz clic en alguno de los parámetros en la sección <strong>Parámetros</strong> y usa los íconos {0}/{1} para cambiar el orden de los parámetros. Cambia sus nombres haciendo clic en la fila del parámetro.
swift.refactoring.extract.function.exec.again=Ahora presiona {0} e intenta cambiar la firma de la función extraída.
swift.refactoring.extract.function.help.link=Extraer función
swift.refactoring.extract.function.intro=**Extraer Función** es una refactorización que permite encapsular una selección de código en una nueva función con parámetros personalizables y tipo de retorno. Extrae algunas líneas de código en una nueva función {0}. Presiona {1} -> {2}.
swift.refactoring.extract.function.name=Extraer función
swift.refactoring.extract.function.undo=Oprime {0} para deshacer los cambios.
swift.refactoring.extract.variable.description=<strong>Extracción de variable</strong> no requiere seleccionar el fragmento de código exacto que quieres extraer. Puedes colocar el cursor en la declaración y seleccionar la expresión necesitada.
swift.refactoring.extract.variable.exec=Pulsa {0} para extraer la constante {1} a una variable o campo {2}.
swift.refactoring.extract.variable.exec.again=Ahora, pulsa {0} y extrae {1} en la variable {2}, seleccionándola de la lista.
swift.refactoring.extract.variable.help.link=Extraer variable
swift.refactoring.extract.variable.name=Extraer variable
swift.refactoring.rename.any=Puedes renombrar cualquier elemento colocando el cursor en un símbolo y utilizando la refactorización de <strong>Renombramiento</strong>.
swift.refactoring.rename.check=Presiona {0}. Como puedes ver, la refactorización <strong>Rename</strong> funciona de manera global, incluso renombrando ocurrencias en archivos .xib y .storyboard.
swift.refactoring.rename.class=Repite las mismas acciones y renombra el tipo {0} a un nuevo valor.
swift.refactoring.rename.go.to.file=Pulsa {1} para navegar a {0}.
swift.refactoring.rename.help.link=Enlace de refactorización "rename" (cambiar nombre)
swift.refactoring.rename.name=Renombrar
swift.refactoring.rename.var=Empecemos con algo sencillo como renombrar el campo {0} a {1}. Pulsa {2}, introduce un nuevo nombre, y pulsa {3}.
swift.refactorings.module.description=Renombrado, extracción de variable/método, y otros refactorings.
swift.refactorings.module.name=Refactorizaciones
swift.run.debug.test.module.description=Aprende a ejecutar, depurar y probar tu aplicación.
swift.run.debug.test.module.name=Ejecutar, Depurar, Probar