access.static.field.via.class.reference.text=Calificar acceso static ''{0}'' con referencia a la clase ''{1}''
access.static.method.via.class.reference.text=Calificar llamada static ''{0}'' con referencia a la clase ''{1}''
access.static.via.class.reference.family=Calificar acceso a miembro static con referencia de clase
access.static.via.class.reference.title=Calificar Acceso a Miembro Static con Referencia de Clase
add.0.to.classpath=Añadir ''{0}'' al classpath
add.annotation.attribute.name=Añadir ''{0}\=''
add.annotation.attribute.name.family.name=Añadir nombre de atributo de anotación
add.catch.clause.family=Añadir excepción a cláusula catch
add.catch.clause.text=Añadir cláusula(s) 'catch'
add.class.to.extends.list=Hacer que ''{0}'' extienda ''{1}''
add.compiler.option.fix.name=Añadir ''{0}'' a las opciones del compilador del módulo
add.constructor.parameter.name=Añadir parámetro al constructor
add.constructor.parameters=Añadir parámetros al constructor
add.default.branch.to.variable.initializing.switch.fix.name=Añadir rama ''default'' a la sentencia ''switch'' que inicializa ''{0}''
add.default.constructor.family=Añadir Constructor por Defecto
add.default.constructor.text=Añadir constructor {0} sin argumentos a {1}
add.docTag.to.custom.tags=Añadir ''@{0}'' a etiquetas personalizadas
add.docTag.to.custom.tags.preview=Añade esta etiqueta a una lista de etiquetas personalizadas que serán ignoradas por esta inspección.
add.exception.from.field.initializer.to.constructor.throws.family.text=Añadir excepción a la firma de los constructores de la clase
add.exception.from.field.initializer.to.constructor.throws.text=Añadir excepción a la firma del {0, choice, 0\#constructor por defecto|1\#constructor|2\#constructores} de la clase
add.exception.to.existing.catch.chooser.title=Seleccionar Bloque Catch
add.exception.to.existing.catch.family=Añadir Excepción a Cláusula Catch Existente
add.exception.to.existing.catch.generic=Añadir excepción a cláusula catch existente
add.exception.to.existing.catch.no.replacement=Añadir ''{1}'' al catch con ''{0}''
add.exception.to.existing.catch.replacement=Reemplazar ''{0}'' con el más genérico ''{1}''
add.exception.to.throws.family=Añadir excepción a la firma del método
add.exception.to.throws.header=Añadir {0, choice, 0\#Excepción|2\#Excepciones} a la Firma del Método
add.exception.to.throws.hierarchy=Cambiar todos los métodos en la jerarquía
add.exception.to.throws.only.this=Cambiar solo este método
add.exception.to.throws.text=Añadir {0, choice, 0\#excepción|2\#excepciones} a la firma del método
add.finally.block.family=Añadir bloque 'finally'
add.import=Añadir Import
add.interface.to.implements.list=Hacer que ''{0}'' implemente ''{1}''
add.library.copy.files.to.radio.button=&Copiar archivos de biblioteca ''{0}'' a
add.library.description.choose.folder=Elegir directorio donde se copiará la biblioteca
add.library.error.cannot.copy=No se puede copiar ''{0}'' a ''{1}''\n({2})
add.library.error.not.found=El archivo de biblioteca ''{0}'' no existe
add.library.title.choose.folder=Elegir Directorio
add.library.title.dialog=Añadir Biblioteca ''{0}'' al Proyecto
add.library.use.bundled.library.radio.button=&Usar ''{0}'' de la distribución {1}
add.method.body.text=Añadir cuerpo del método
add.method.family=Añadir método
add.method.qualifier.fix.family=Añadir calificador de método
add.method.qualifier.fix.text=Añadir calificador ''{0}'' al método
add.method.text=Añadir Método ''{0}'' a la Clase ''{1}''
add.missing.annotation.parameters.fix=Añadir parámetros de anotación faltantes - {0}
add.missing.annotation.single.parameter.fix=Añadir parámetro de anotación faltante ''{0}''
add.missing.nested.patterns.fix.text=Añadir patrón{0, choice, 1\#|2\#es} anidado{0, choice, 1\#|2\#s} faltante{0, choice, 1\#|2\#s}
add.missing.str.processor=Añadir Procesador 'STR.'
add.modifier.fix=Hacer ''{0}'' {1}
add.modifier.fix.family=Hacer {0}
add.new.array.family=Añadir expresión new faltante
add.new.array.text=Añadir ''new {0}[]''
add.parameter.from.usage.text=Añadir ''{0}'' como {1,number,ordinal} {2} a {3} ''{4}''
add.qualifier=Añadir calificador
add.qualifier.original.class.chooser.title=Clase Original
add.return.statement.text=Añadir sentencia 'return'
add.runtime.exception.to.throws.family=Añadir excepción runtime a la firma del método
add.runtime.exception.to.throws.header=Añadir Excepción Runtime a la Firma del Método
add.runtime.exception.to.throws.text=Añadir ''{0}'' a la firma del método
add.type.arguments.single.argument.text=Añadir argumentos de tipo explícitos
add.type.arguments.text=Añadir argumentos de tipo explícitos al {0, choice, 1\#1er|2\#2do|3\#3er|4\#{0,number}to} argumento
add.typecast.cast.text=Hacer cast de {1} a ''{0}''
add.typecast.convert.text=Convertir {1} a ''{0}''
add.typecast.family=Añadir cast de tipo
add.typecast.text=Hacer cast a ''{0}''
adjust.method.accepting.functional.expression.fix.family.name=Ajustar método que acepta expresión funcional
adjust.method.accepting.functional.expression.fix.text=Reemplazar ''{0}()'' con ''{1}()''
adjust.package.family=Ajustar nombre del paquete
adjust.package.text=Establecer nombre del paquete a ''{0}''
annotations.fix=Anotaciones
anonymous.class.presentation=Clase anónima derivada de {0}
bring.variable.to.scope.family=Traer variable al ámbito
bring.variable.to.scope.text=Traer ''{0}'' al ámbito
cannot.change.field.exception=No se puede cambiar el tipo del campo ''{0}''.\nRazón\: {1}
cannot.create.java.file.error.text=No se puede crear {0}.java en {1}\: {2}
cannot.create.java.file.error.title=Falló la Creación del Archivo
cannot.create.java.package.error.text=No se puede crear {0} en {1}\: {2}
cannot.create.java.package.error.title=Falló la Creación del Paquete
change.class.signature.family=Cambiar firma de clase
change.class.signature.text=Cambiar firma de ''{0}'' para que coincida con ''{1}''
change.extends.list.family=Extender Clase desde
change.method.parameters.family=Cambiar parámetros del método
change.method.parameters.text=Cambiar parámetros del método a ''{0}''
change.method.signature.from.usage.family=Cambiar firma del método desde el uso
change.method.signature.from.usage.text=Cambiar firma de ''{0}'' a ''{1}({2})''
change.new.operator.type.family=Cambiar tipo del operador new
change.new.operator.type.text=Cambiar ''{0}'' a ''new {1}{2}''
change.parameter.class.family=Cambiar Clase del Parámetro
change.parameter.from.usage.text=Cambiar {0,number,ordinal} {1} de {2} ''{3}'' de ''{4}'' a ''{5}''
change.to.append.family=Corregir append de StringBuilder
change.to.append.text=Cambiar a ''{0}''
change.type.family=Cambiar tipo
change.type.text=Cambiar tipo a ''{0}''
choose.class.to.move.popup.title=Elegir Clase a Mover
choose.constructors.to.add.parameter.to=Elegir Constructores a los que Añadir Parámetro
choose.default.value.parameters.popup.title=Elegir Parámetros de Valor por Defecto
choose.fields.to.generate.constructor.parameters.for=Elegir Campos para Generar Parámetros del Constructor
class.initializer.presentation=Inicializador de clase {0}
class.to.import.chooser.title=Clase a Importar
collection.addall.can.be.replaced.with.constructor.fix.description=La llamada '\#ref()' puede reemplazarse con llamada a constructor parametrizado
collection.addall.can.be.replaced.with.constructor.fix.family.name=Reemplazar llamada 'addAll()/putAll()' con llamada a constructor parametrizado
collection.addall.can.be.replaced.with.constructor.fix.name=Reemplazar llamada ''{0}()'' con llamada a constructor parametrizado
collection.addall.can.be.replaced.with.constructor.fix.options.dialog.title=Agregar clase a verificar
collection.addall.can.be.replaced.with.constructor.fix.options.label=Clases a verificar\:
collection.to.array.family.name=Aplicar conversión '.toArray()'
collection.to.array.text=Aplicar conversión ''.toArray({0})''
convert.primitive.to.boxed.type=Convertir tipo primitivo a tipo envoltorio
convert.to.string.family=Corregir literal de carácter
convert.to.string.text=Convertir a literal de cadena
convert.variable.to.field.in.anonymous.class.fix.name=Mover ''{0}'' a objeto anónimo
create.accessor.for.unused.field.family=Crear accesores para campo no utilizado
create.annotation.family=Agregar anotación a la declaración
create.annotation.text=Anotar como @{0}
create.block=Crear bloque
create.class.from.new.family=Crear clase desde New
create.class.from.usage.family=Crear clase desde uso
create.class.from.usage.text=Crear {0} ''{1}''
create.constant.from.usage.family=Crear constante desde uso
create.constructor.body.command=Crear cuerpo del constructor
create.constructor.family=Crear constructor
create.constructor.from.new.family=Crear constructor desde New
create.constructor.from.new.text=Crear constructor
create.constructor.from.super.call.family=Crear constructor desde llamada super()
create.constructor.from.this.call.family=Crear constructor desde llamada this()
create.constructor.matching.super=Crear constructor coincidente con super
create.constructor.text=Crear constructor en ''{0}''
create.element.in.class=Crear {0} ''{1}'' en ''{2}''
create.field.from.usage.family=Crear campo desde uso
create.field.text=Crear campo {0}
create.getter=Crear Getter
create.getter.and.setter.for.field=Crear getter y setter para ''{0}''
create.getter.for.field=Crear getter para ''{0}''
create.inner.class.from.usage.text=Crear {0} interno ''{1}''
create.local.from.instanceof.usage.family=Crear variable local desde uso de instanceof
create.local.from.instanceof.usage.text=Insertar declaración ''({0}){1}''
create.local.from.usage.family=Crear variable local desde uso
create.member.from.usage.family=Crear miembro desde uso
create.method.body=Crear cuerpo del método
create.method.from.usage.family=Crear método desde uso
create.method.from.usage.text=Crear método ''{0}''
create.parameter.from.usage.family=Crear parámetro desde uso
create.property.from.usage.family=Crear propiedad desde uso
create.property.from.usage.full.text=Crear propiedad ''{0}'' en ''{1}''
create.property.from.usage.text=Crear propiedad ''{0}''
create.property.text=Crear propiedad {0}
create.read.only.property.from.usage.full.text=Crear propiedad de solo lectura ''{0}'' en ''{1}''
create.read.only.property.from.usage.text=Crear propiedad de solo lectura ''{0}''
create.service=Crear servicio
create.service.implementation=Crear implementación de servicio
create.service.implementation.fix.family.name=Crear clase de implementación de servicio
create.service.implementation.fix.name=Crear clase ''{0}''
create.service.interface.fix.family.name=Crear servicio
create.service.interface.fix.name=Crear servicio ''{0}''
create.setter=Crear Setter
create.setter.for.field=Crear setter para ''{0}''
create.type.parameter.from.usage.chooser.title=Lugar para agregar parámetro de tipo
create.type.parameter.from.usage.family=Crear parámetro de tipo desde uso
create.type.parameter.from.usage.text=Crear parámetro de tipo ''{0}''
create.write.only.property.from.usage.full.text=Crear propiedad de solo escritura ''{0}'' en ''{1}''
create.write.only.property.from.usage.text=Crear propiedad de solo escritura ''{0}''
defer.final.assignment.with.temp.family=Diferir asignación final con variable temporal
defer.final.assignment.with.temp.text=Diferir asignación a ''{0}'' usando variable temporal
delete.body.text=Eliminar cuerpo del método
delete.catch.family=Eliminar catch
delete.catch.text=Eliminar catch para ''{0}''
delete.reference.fix.text=Eliminar referencia
delete.return.fix.family=Eliminar return
delete.return.fix.side.effects.text=Eliminar return {0} y extraer efectos secundarios
delete.return.fix.text=Eliminar return {0}
delete.unreachable.statement.fix.text=Eliminar sentencia inalcanzable
enable.optimize.imports.on.the.fly=Habilitar 'Configuración | Editor | General | Auto Import | Optimizar imports al vuelo'
exchange.extends.implements.keyword=Cambiar ''{0} {2}'' a ''{1} {2}''
extend.sealed.name=Hacer que ''{0}'' {1, choice, 1\#extienda|2\#implemente} ''{2}''
extend.sealed.title=Hacer que ''{0}'' {1, choice, 1\#extienda|2\#implemente} ''{2}'' y
extract.side.effects=Extraer {0, choice, 1\#efecto secundario|2\#efectos secundarios}
extract.side.effects.convert.to.if=Extraer efectos secundarios como sentencia 'if'
extract.side.effects.family.name=Eliminar sentencia extrayendo efectos secundarios
field.to.import.chooser.title=Campo a importar
fix.add.special.annotation.family=Agregar a anotaciones especiales
fix.add.special.annotation.text=Agregar ''{0}'' a lista de anotaciones especiales
fix.add.write.annotation.description=Agregar ''@{0}'' a la lista de anotaciones que marcan un campo implícitamente escrito.<p>Esta lista puede editarse en la configuración de inspección ''Declaración no utilizada'' bajo ''Puntos de entrada | Anotaciones''
fix.add.write.annotation.text=Asumir campos anotados con ''@{0}'' como implícitamente escritos
fix.argument.family=Corregir argumentos
fix.expression.role.argument=argumento
fix.expression.role.expression=expresión
fix.expression.role.lambda.return=retorno lambda
fix.expression.role.literal=literal
fix.expression.role.nth.argument={0, choice, 1\#1er|2\#2do|3\#3er|4\#{0,number}to} argumento
fix.expression.role.qualifier=calificador
fix.javadoc.family=Corregir Javadoc
fix.modifiers.family=Corregir modificadores
fix.parameter.type.family=Corregir tipo de parámetro
fix.parameter.type.text=Hacer que ''{0}'' tome parámetro de tipo ''{1}'' aquí
fix.receiver.parameter.name.family=Corregir el nombre del parámetro receptor
fix.receiver.parameter.type.family=Corregir tipo de parámetro receptor
fix.receiver.parameter.type.text=Cambiar al tipo de la clase contenedora
fix.return.type.family=Corregir tipo de retorno
fix.return.type.or.predecessor.text=Hacer que ''{0}'' retorne ''{1}'' o ancestro
fix.return.type.text=Hacer que ''{0}'' retorne ''{1}''
fix.single.character.string.to.char.literal.family=Corregir tipo de literal
fix.single.character.string.to.char.literal.text=Cambiar {0} a {1} (a literal {2})
fix.super.method.return.type.family=Corregir tipo de retorno del método Super
fix.super.method.return.type.text=Hacer que ''{0}'' retorne ''{1}''
fix.throws.list.add.exception=Agregar ''{0}'' a la lista throws de ''{1}''
fix.throws.list.family=Corregir lista de throws
fix.throws.list.remove.exception=Eliminar ''{0}'' de la lista throws de ''{1}''
fix.unused.symbol.injection.family=Agregar a anotaciones de inyección de dependencias
fix.unused.symbol.injection.text=Suprimir advertencia de no utilizado si está anotado con ''{0}''
fix.update.modifier.change.inheritors=Cambiar este método y sus herederos
fix.update.modifier.change.this=Cambiar solo este método
fix.variable.type.family=Corregir tipo de variable
fix.variable.type.text=Cambiar tipo de {0} ''{1}'' a ''{2}''
generate.overloaded.method.or.constructor.with.default.parameter.values=Generar {0} sobrecargado con valores de parámetros por defecto
generate.overloaded.method.with.default.parameter.values=Generar método sobrecargado con valores de parámetros por defecto
implement.methods.fix=Implementar métodos
implement.or.extend.fix.extend.text=Hacer que ''{0}'' extienda ''{1}''
implement.or.extend.fix.family=Implementar/Extender clase base requerida
implement.or.extend.fix.implement.text=Hacer que ''{0}'' implemente ''{1}''
import.class.fix=Importar clase
initialize.final.field.in.constructor.choose.dialog.title=Elegir constructores para agregar inicialización
initialize.final.field.in.constructor.name=Inicializar en constructor
insert.empty.parenthesis=Insertar '()'
insert.new.fix=Insertar new
insert.sam.method.call.fix.family.name=Insertar llamada a método abstract único
insert.sam.method.call.fix.name=Insertar ''.{0}'' para llamar al método de interfaz funcional
insert.super.constructor.call.family=Insertar llamada al constructor de la clase base
intention.move.parenthesis.name=Corregir ubicación del paréntesis de cierre
iterate.iterable=Iterar
java.8.collection.removeif.inspection.description=El bucle puede reemplazarse con 'Collection.removeIf'
java.8.collection.removeif.inspection.fix.name=Reemplazar el bucle con 'Collection.removeIf'
java.8.list.replaceall.inspection.description=El bucle puede reemplazarse con 'List.replaceAll'
java.8.list.replaceall.inspection.fix.name=Reemplazar el bucle con 'List.replaceAll'
java.8.list.sort.inspection.description=Collections.sort podría reemplazarse con List.sort
java.8.list.sort.inspection.fix.name=Reemplazar con List.sort
java.8.map.api.inspection.description=Puede reemplazarse con una única llamada al método ''Map.{0}''
java.8.map.api.inspection.fix.family.name=Reemplazar con una única llamada a método Map
java.8.map.api.inspection.fix.text=Reemplazar con llamada al método ''{0}''
java.9.merge.module.statements.fix.family.name=Combinar con otra directiva ''{0}''
java.9.merge.module.statements.fix.name=Combinar con otra directiva ''{0} {1}''
make.annotation.applicable.to.0.fix=Hacer que la anotación sea aplicable a {0}
make.class.an.interface.family=Convertir clase en interfaz
make.class.an.interface.text=Convertir ''{0}'' en interfaz
make.final.copy.to.temp=Copiar ''{0}'' a variable temporal {1}
make.final.family=Hacer Final
make.interface.an.class.text=Convertir ''{0}'' en clase
make.receiver.parameter.first.family=Hacer que el parámetro receptor sea el primero
make.receiver.parameter.first.text=Mover 'this' al inicio de la lista
make.vararg.parameter.last.family=Hacer que el parámetro vararg sea el último
make.vararg.parameter.last.text=Mover ''{0}'' al final de la lista
merge.duplicate.attributes.family=Combinar atributos duplicados
method.to.import.chooser.title=Método a importar
module.info.add.directive.family.name=Agregar directiva a module-info.java
module.info.add.exports.name=Agregar directiva ''exports {0}'' a module-info.java
module.info.add.opens.name=Agregar directiva ''opens {0}'' a module-info.java
module.info.add.requires.name=Agregar directiva ''requires {0}'' a module-info.java
module.info.add.uses.name=Agregar directiva ''uses {0}'' a module-info.java
move.0.from.module.1.to.2=Mover ''{0}'' del módulo ''{1}'' a ''{2}''
move.0.in.1=Mover ''{0}'' en ''{1}''…
move.bound.class.to.front.fix.text=Mover límite ''{0}'' al inicio de la lista de límites del parámetro de tipo ''{1}''
move.catch.up.family=Subir 'catch'
move.catch.up.text=Mover catch para ''{0}'' antes de ''{1}''
move.class.in.extend.list.family=Mover clase en lista de extensión
move.class.to.package.family=Mover clase al paquete
move.class.to.package.text=Mover al paquete ''{0}''
move.class.to.separate.file.family=Mover clase a archivo separado
move.class.to.separate.file.text=Mover clase ''{0}'' a ''{0}.java''
move.file.to.source.root.text=Mover archivo a una raíz de fuentes
move.switch.branch.up.family=Subir rama switch
move.switch.branch.up.text=Mover rama switch ''{0}'' antes de ''{1}''
navigate.duplicate.element.text=Navegar al {0} duplicado
navigate.variable.declaration.family=Navegar a declaración de variable
navigate.variable.declaration.text=Navegar a variable ''{0}'' declarada anteriormente
negation.broader.scope.family=Negación de ámbito más amplio
negation.broader.scope.text=Cambiar a ''\!({0})''
new.method.body.template.error.text=Por favor corrija la plantilla "Nuevo cuerpo de método"
new.method.body.template.error.title=Error en plantilla de archivo
optimize.imports.fix=Optimizar imports
orderEntry.fix.add.dependency.on.module=Agregar dependencia al módulo ''{0}''
orderEntry.fix.add.dependency.on.module.choose=Agregar dependencia al módulo…
orderEntry.fix.add.library.to.classpath=Agregar biblioteca ''{0}'' al classpath
orderEntry.fix.choose.module.to.add.dependency.on=Elegir módulo para agregar dependencia
orderEntry.fix.circular.dependency.warning=Agregar dependencia al módulo ''{0}'' introducirá una dependencia circular entre los módulos ''{1}'' y ''{2}''.\n¿Agregar dependencia de todos modos?
orderEntry.fix.family.add.library.to.classpath=Agregar biblioteca al classpath
orderEntry.fix.family.add.library.to.classpath.options=Agregar biblioteca al classpath…
orderEntry.fix.family.add.module.dependency=Agregar dependencia de módulo
orderEntry.fix.title.circular.dependency.warning=Advertencia de dependencia circular
permute.arguments=Permutar argumentos
popup.title.choose.library.to.add.dependency.on=Elegir biblioteca para agregar dependencia
qualify.method.call.family=Calificar llamada a método
qualify.method.call.fix=Calificar la llamada con ''{0}''
remove.annotation.fix.family=Eliminar anotación
remove.annotation.fix.text=Eliminar anotación ''@{0}''
remove.class.from.extends.list=Hacer que ''{0}'' no extienda ''{1}''
remove.interface.from.implements.list=Hacer que ''{0}'' no implemente ''{1}''
remove.modifier.fix=Hacer que ''{0}'' no sea {1}
remove.modifier.fix.family=Hacer no {0}
remove.one.modifier.fix=Eliminar modificador ''{0}''
remove.override.fix.family=Eliminar override
remove.override.fix.text=Eliminar anotación override de la declaración del método
remove.parameter.from.usage.text=Eliminar {0,number,ordinal} {1} de {2} ''{3}''
remove.parameter.list=Eliminar lista de parámetros
remove.qualifier.action.text=Eliminar calificador
remove.qualifier.fix=Eliminar calificador
remove.redundant.arguments.family=Eliminar argumentos redundantes
remove.redundant.arguments.text=Eliminar argumentos redundantes para llamar a ''{0}''
remove.redundant.nested.patterns.fix.text=Eliminar patrón{0, choice, 1\#|2\#es} anidado{0, choice, 1\#|2\#s} redundante{0, choice, 1\#|2\#s}
remove.redundant.str.processor=Eliminar procesador 'STR' redundante
remove.suppression.action.family=Eliminar supresión
remove.suppression.action.name=Eliminar supresión ''{0}''
remove.unreachable.branches=Eliminar ramas inalcanzables
remove.unused.element.family=Eliminar {0} sin usar
rename.wrong.reference.family=Renombrar referencia incorrecta
rename.wrong.reference.text=Renombrar referencia
replace.for.each.loop.with.iterator.for.loop=Reemplazar bucle 'for each' con bucle 'for' de iterador
replace.with.getter=Reemplazar con getter
replace.with.getter.setter=Reemplazar con getter/setter
replace.with.list.access.text=Reemplazar con acceso a lista
replace.with.qualifier.text=Reemplazar con calificador
replace.with.qualifier.text.role=Reemplazar {0} con calificador
replace.with.setter=Reemplazar con setter
replace.with.type.pattern.fix=Reemplazar con patrón de tipo
reuse.variable.declaration.family=Reutilizar variable anterior
reuse.variable.declaration.text=Reutilizar variable anterior ''{0}''
safe.delete.family=Eliminación segura
safe.delete.text=Eliminación segura de ''{0}''
seal.class.from.permits.list.fix=Sellar heredero
searching.for.usages.progress.title=Buscando usos…
setup.jdk.location.family=Configurar ubicación del JDK
setup.jdk.location.text=Configurar JDK
side.effect.action.cancel=&Cancelar(&C)
side.effect.action.remove=&Eliminar(&R)
side.effect.action.transform=&Transformar(&T)
side.effects.warning.dialog.title=Se encontraron efectos secundarios
simplify.boolean.expression.extracting.side.effects=\ extrayendo efectos secundarios
simplify.boolean.expression.family=Simplificar expresión booleana
simplify.boolean.expression.text=Simplificar ''{0}'' a {1}
static.import.constant.kind.text=constante static
static.import.constant.text=Importar constante static
static.import.method.choose.method.to.import=Elegir método a importar
static.import.method.kind.text=método static
static.import.method.text=Importar método static
super.class.constructors.chooser.title=Elegir constructores de superclase
surround.annotation.parameter.value.with.quotes=Envolver valor de parámetro de anotación con comillas
surround.with.array.initialization=Envolver con inicialización de array
surround.with.try.catch.fix=Envolver con try/catch
target.class.chooser.title=Elegir clase destino
target.method.chooser.title=Elegir método destino
uidesigner.change.bound.field.type=Cambiar tipo de campo vinculado
uidesigner.change.gui.component.type=Cambiar tipo de componente GUI
unwrap.array.initializer.fix=Reemplazar inicializador de array con su elemento
wrap.expression.using.static.accessor.family=Envolver expresión
wrap.expression.using.static.accessor.text=Envolver usando ''{0}()''
wrap.expression.using.static.accessor.text.role=Envolver {1} usando ''{0}()''
wrap.with.adapter.call.family.name=Adaptar usando llamada u objeto nuevo
wrap.with.adapter.parameter.multiple.text=Adaptar {0, choice, 1\#1er|2\#2do|3\#3er|4\#{0,number}to} argumento usando ''{1}''
wrap.with.adapter.parameter.single.text=Adaptar argumento usando ''{0}''
wrap.with.adapter.text=Adaptar usando ''{0}''
wrap.with.adapter.text.role=Adaptar {1} usando ''{0}''
wrap.with.block=Envolver con bloque
wrap.with.optional.parameter.text=Envolver {0, choice, 1\#1er|2\#2do|3\#3er|4\#{0,number}to} argumento usando ''java.util.Optional''
wrap.with.optional.single.parameter.text=Envolver usando 'java.util.Optional'