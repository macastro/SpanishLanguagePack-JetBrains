action.Swift.ExtractFunction.text=Extraer función...
action.Swift.FormatFileWithSwiftFormat.text=Formatear código con SwiftFormat
action.Swift.Generate.DebugDescription.description=generar debugDescription
action.Swift.Generate.DebugDescription.text=debugDescription...
action.Swift.Generate.Description.description=Generar descripción
action.Swift.Generate.Description.text=descripción...
action.Swift.Generate.EqualsHashValue.description=Generar equals y hash
action.Swift.Generate.EqualsHashValue.text=equals y hash
action.Swift.Generate.Init.description=Generar inicializador
action.Swift.Generate.Init.text=Inicio de inicialización
action.Swift.GenerateDocComment.text=Generar comentario de documentación
action.Swift.IntroduceClosureVariable.text=Extraer variable de cierre...
action.Swift.NewFile.description=Crear nuevo Archivo o Tipo Swift
action.Swift.NewFile.text=Nuevo archivo o tipo Swift
action.Swift.ShowSwiftIDETest.text=Ejecutar informe Swift IDE
action.Swift.SwiftFormatCreateConfigFileAction.text=Crear archivo de configuración de Swift Format
action.Swift.ToggleErrorHints.text=Mostrar sugerencias de errores
action.Swift.ToggleGlobalErrorHints.text=Mostrar sugerencias de error de Swift
action.Swift.ToggleGlobalTypeHints.text=Mostrar sugerencias de tipos de Swift
action.Swift.ToggleTypeHints.text=Mostrar pistas de tipos
auto.import.command.name=Auto-importar módulos
auto.import.completion.presentation.tail.from.0=({0})
auto.import.settings.checkbox.sort=Ordenar importaciones
auto.import.settings.import.symbol=Importar símbolos específicos
auto.import.settings.import.symbol.help=Es preferible añadir la importación del símbolo en sí, en lugar de importar el módulo completo que declara dicho símbolo, al autoimportar símbolos
auto.import.settings.optimize.non.module=optimizar importación de no módulos
auto.import.settings.optimize.non.module.help=Sustituir, durante la optimización de las importaciones, las importaciones explícitas de funciones, estructuras, clases, etc. por importaciones de su módulo padre
call.hierarchy.usage.in=Uso en ''{0}''
change.info.async.throws.label=async/throws:
change.info.default.value.code.comment=valor por defecto = {0}
change.info.default.value.label=Valor predeterminado:
change.info.dialog.invalid.function.name.0=El nombre de la función no es válido: ''{0}''
change.info.dialog.invalid.parameter.internal.name.0=nombre interno del parámetro no válido: ''{0}''
change.info.dialog.invalid.parameter.name.0=Parámetro de nombre no válido: ''{0}''
change.info.dialog.no.function.name.specified=noseespecificóelnombredelafunción
change.info.dialog.parameter.after.variadic.should.have.nonempty.name=El parámetro después de los parámetros variables debe tener un nombre que no esté vacío
change.info.dialog.rethrows.should.have.throwing.parameter=La función 'rethrows' debe tener un parámetro de función de lanzamiento
change.info.internal.name.label=Nombre interno:
change.info.name.label=Nombre:
change.info.optional.label=opcional:
change.info.options.label=Opciones
change.info.return.type.label=Tipo de valor a retornar:
change.info.type.label=Tipo:
change.signature.0.1.will.no.longer.be.visible.from.overriding.0.in.2.3={0} ''{1}'' dejará de estar visible en la anulación {0} de ''{2}'' en ''{3}''
change.signature.0.1.with.2.visibility.wont.be.accessible.from.3.4={0} ''{1}'' con visibilidad {2} no será accesible desde {3} ''{4}''
change.signature.0.can.throw.but.thrown.errors.are.not.handled=''{0}'' puede lanzar, pero no se gestionan los errores lanzados
change.signature.0.is.async.but.not.awaited=''La señal de espera "{0}" está marcada como async, pero no es así
change.signature.dialog.title=Cambiar firma
change.signature.initializer.will.conflict.with.0.in.1.2=El inicializador chocará con {0} en {1} ''{2}''
change.signature.processed.elements.header=Elementos procesados
change.signature.subscript.will.conflict.with.0.in.1.2=El subíndice interferirá con {0} en {1} "{2}"
change.signature.target.not.found=El cursor textual debe estar en una función, inicializador o subíndice
change.signature.title=Cambiar firma
code.style.blank.lines.around.class=Alrededor de la declaración de la clase:
code.style.blank.lines.around.field=Espacios alrededor de campos:
code.style.blank.lines.around.field.in.protocol=Alrededor de una propiedad en el protocolo:
code.style.blank.lines.around.method=En blanco alrededor de métodos/funciones:
code.style.blank.lines.around.method.in.protocol=En el protocolo, alrededor del método/función:
code.style.blank.lines.before.method.body=Líneas en blanco antes del cuerpo del método/función:
code.style.code.generation.doc.comment.style=Prefiere comentarios de documentación de bloque (/** */) en lugar del formato de línea (///)
code.style.code.generation.doc.comment.tag.delimiter=Delimitador de elementos de lista:
code.style.code.generation.prefer.explicit.return=Preferir retorno explícito(&R)
code.style.code.generation.prefer.void=(Vacío prefiriendo a ()(&V)
code.style.code.generation.tab.title=Generación de código
code.style.indent.directives.as.code=Seguir sangría de código
code.style.indent.directives.children=Indentar subdirectivas
code.style.indent.group.title.directives=Directivas
code.style.indent.method.chain=Indentar método de cadena:
code.style.indent.multiline.string.or.regex=Sangría de cadenas multilineales o expresiones regulares
code.style.spaces.after.argument.colon=Espacios tras los dos puntos en llamadas a métodos/funciones
code.style.spaces.after.dictionary.literal.colon=Después de los dos puntos en los pares 'clave:valor' del literal de diccionario
code.style.spaces.after.dictionary.type.colon=Espacio tras el tipo de diccionario: dos puntos
code.style.spaces.after.operator.in.function.declarations=Espacios después de los operadores en declaraciones de funciones
code.style.spaces.after.semicolon=espacios después del punto y coma
code.style.spaces.after.superclass.colon=Tras los dos puntos en la cláusula de herencia de tipo
code.style.spaces.after.type.colon=después de dos puntos en la anotación de tipo
code.style.spaces.around.range.operators=Operadores de rango (..., ..<)
code.style.spaces.attribute.parameters=parámetros de atributo
code.style.spaces.attribute.parentheses=Paréntesis de atributos
code.style.spaces.before.argument.colon=Espacios antes del dos puntos en llamada a función/método
code.style.spaces.before.class.lbrace=Espacio antes de { en definición de clase
code.style.spaces.before.dictionary.literal.colon=Espacios antes de los dos puntos en pares 'clave:valor' de literal de diccionario
code.style.spaces.before.dictionary.type.colon=Espacios antes de los dos puntos en el tipo de diccionario
code.style.spaces.before.method.call.parentheses=Espacios antes de los paréntesis de llamada al método/función
code.style.spaces.before.method.lbrace=Espacios antes de la llave de apertura del método/función
code.style.spaces.before.method.parentheses=Espacios antes de paréntesis de declaración de método/función
code.style.spaces.before.semicolon=espacios antes del punto y coma
code.style.spaces.before.superclass.colon=Espacio anterior al dos puntos en la cláusula de herencia de tipo
code.style.spaces.before.type.colon=Espacios antes de los dos puntos en la anotación de tipo
code.style.spaces.closure.arrow=Flecha de clausura (->)
code.style.spaces.equality.operator=Operador de igualdad '=='
code.style.spaces.group.title.colon=Alrededor de dos puntos
code.style.spaces.group.title.in.ternary=en ternario
code.style.spaces.shift.operators=Operadores de desplazamiento (<<, >>)
code.style.spaces.within.empty.method.call.parentheses=Paréntesis de llamada de método/función vacía
code.style.spaces.within.empty.method.parentheses=Paréntesis de método/función vacío
code.style.spaces.within.literal.brackets=Espacios dentro de paréntesis literales
code.style.spaces.within.method.call.parentheses=Espacios dentro paréntesis de invocación de método/función
code.style.spaces.within.method.parentheses=Espacios dentro de paréntesis de declaración de método/función
code.style.spaces.within.string.interpolations=Interpolación de cadenas
code.style.wrapping.align.in.columns=Alinear en columnas
code.style.wrapping.align.when.multiline=Alinear cuando sea multilínea
code.style.wrapping.array.literal=Arreglo y diccionarios
code.style.wrapping.array.new.line.after.left.bracket=Introducir nueva línea después de '['
code.style.wrapping.array.right.bracket.on.new.line=Colocar ']' en nueva línea
code.style.wrapping.brace.placement.class.declaration=en la declaración de la clase
code.style.wrapping.classes.annotation=Ánnotaciones de la declaración de tipos
code.style.wrapping.closure.signature.on.next.line=Colocar los parámetros en una nueva línea si son varias
code.style.wrapping.fields.annotation=Annotazione delle proprietà
code.style.wrapping.group.title.closure=Clausura
code.style.wrapping.group.title.condition.clauses=Cláusulas de condición
code.style.wrapping.group.title.do.while=Título de la agrupación de ajuste del estilo del código para 'repeat ... while'
code.style.wrapping.group.title.guard=sentencia `guard`
code.style.wrapping.group.title.if=Grupo 'if'
code.style.wrapping.group.title.method.arguments=Argumentos de llamada al método/función
code.style.wrapping.group.title.method.parameters=Parámetros de declaración de método/función
code.style.wrapping.group.title.superclass.list=Lista de superclases y protocolos adoptados
code.style.wrapping.group.title.ternary=Operador ternario
code.style.wrapping.group.title.try=sentencia do
code.style.wrapping.group.title.variable.groups=Grupos de variables
code.style.wrapping.guard.else=else
code.style.wrapping.guard.else.always=Siempre ajustar
code.style.wrapping.guard.else.never=no envolver
code.style.wrapping.guard.else.wrapped=Envuelta condicional
code.style.wrapping.keep.control.statement.in.one.line=Mantener sentencias de control en una línea
code.style.wrapping.keep.simple.argument.blocks.in.one.line=Mantener bloques de argumentos de cierre en una misma línea
code.style.wrapping.keep.simple.blocks.in.one.line=Mantener bloques y cierres (finales) en una línea
code.style.wrapping.keep.simple.methods.in.one.line=Mantener métodos y funciones en una sola línea
code.style.wrapping.local.variables.annotation=Envoltura de anotación de variables locales
code.style.wrapping.method.brace.placement=Dentro del método y de la función
code.style.wrapping.method.chain.dot.on.new.line=Punto '.' en nueva línea
code.style.wrapping.methods.annotation=Anotación de métodos
code.style.wrapping.parameters.annotation=Propiedades de los parámetros
code.style.wrapping.structures.in.one.line=Mantener declaraciones de tipos vacíos en una sola línea
color.conditionally.not.compiled=Palabras clave y directivas // Código no compilado condicionalmente
color.settings.actor=Tipo//Actor
color.settings.anonymous.closure.parameter=Identificador // Parámetro de cierre anónimo
color.settings.argument.label=Identificador//Etiqueta del argumento
color.settings.associated.type=Tipo//Tipo relacionado
color.settings.attribute.argument=Atributo//Argumento del atributo
color.settings.attribute.name=nombre de atributo//nombre de la propiedad del atributo
color.settings.class=tipo//clase
color.settings.colon=Parentesis y operadores // Dos puntos
color.settings.directive=Palabras clave y directivas//Directivas
color.settings.directive.condition=Palabras claves y directivas//Directivas
color.settings.directive.flag=Palabras clave y directivas//Marca de directiva
color.settings.enum.case.value=Identificador//Valor de caso enumerado
color.settings.external.parameter.name=Identificador//Nombre externo del parámetro
color.settings.function.and.method.call=Función//Llamada a funciones y métodos
color.settings.function.and.method.declaration=Función // Declaración de funciones y métodos
color.settings.inline.closure.parameter=identificador//parámetro de cierre en línea
color.settings.inline.hints.error.hint=Sugerencias en línea // Sugerencia de error
color.settings.inline.hints.type.hint=Sugerencia en línea//Sugerencia de tipo
color.settings.keyword=Palabras clave y directivas//Palabras clave
color.settings.module.name=Tipo//Nombre del módulo
color.settings.nested.function.call=Función//Llamada a función anidada
color.settings.nested.function.declaration=función //declaración de función anidada
color.settings.operator.sign=Paréntesis y operadores//Signo de operador
color.settings.property=Identificador/Propiedad
color.settings.protocol=Tipo//Protocolo
color.settings.self.and.super.keywords=Palabras clave //'self' y 'super'
color.settings.struct.and.enum=Tipo//Estructura y enumeración
color.settings.tuple.label=Identificador // Etiqueta de tupla
color.settings.tuple.type.label=Identificador//Etiqueta de tipo tupla
color.settings.type.alias=Tipo//Alias de tipo
color.settings.type.parameter=Tipo//Parámetro genérico
color.settings.wildcard=Identificador//Comodín
command.name.extract.function=Extraer función
context.declaration=declaración
context.statement=sentencia
create.file.action=Crear archivo Swift {0}
create.file.description=Crea un nuevo archivo Swift
create.file.dialog.title=Crear archivo Swift
create.file.kind=Tipo:(&K)
create.file.kind.file=archivo
create.file.title=Archivo Swift
create.file.type.description=Crear un nuevo tipo Swift
create.file.type.dialog.title=Nuevo tipo Swift
create.file.type.dialog.title.with.kind=Crear nuevo Swift {0}
create.file.type.title=Tipo de archivo Swift
create.from.usage.choose.target.type=Selecciona el tipo de destino
create.from.usage.create.function.command=Crear función desde uso
create.from.usage.create.init.command=Crear inicializador desde uso
create.from.usage.create.type.command=Crear nuevo tipo Swift
create.from.usage.create.variable.command=Crear variable desde el uso
create.from.usage.location.in=({0} en)
create.from.usage.location.new.file=Crear archivo desde uso
create.from.usage.location.this.file=este archivo
doc.comments.enable.markdown=Habilita el plugin de Markdown para dar formato a los comentarios de documentación
editor.appearance.error.hints=Mostrar sugerencias de errores Swift
editor.appearance.type.hints=Mostrar sugerencias de tipos Swift
error.cannot.perform.refactoring=No se puede ejecutar la refactorización
error.no.expression.found=Sin expresión encontrada
extract.method.0.1.will.be.shadowed.by.2.1={0} ''{1}'' será sombreado por {2} ''{1}''
extract.method.at.least.two.parameters.have.name.0=Al menos dos parámetros tienen el nombre ''{0}''
extract.method.cannot.extract.mutable.value=El valor mutable no se puede extraer
extract.method.error.cannot.determine.expr.type=No se puede determinar el tipo de la expresión seleccionada
extract.method.error.cannot.determine.function.result.type=tipo de resultado de función nulo
extract.method.error.cannot.determine.parameters.type=no se puede determinar el tipo de parámetros
extract.method.error.cannot.extract.expr.with.var.declarations=No se puede extraer expresión con declaraciones de variables
extract.method.error.cannot.extract.with.returns=no se puede extraer un método a partir de ese código porque devuelve null
extract.method.error.fragment.should.be.inside.code.block=El fragmento de código seleccionado debe estar dentro de un bloque de código
extract.method.error.multiple.exit.points=El fragmento de código seleccionado tiene múltiples puntos de salida
extract.method.error.result.builder.block=No se puede extraer función del cierre del constructor de resultado
extract.method.error.should.represent.expr.or.statements=El bloque seleccionado debe representar un grupo de sentencias o expresiones
extract.method.function.0.will.conflict.with.1.2=La función ''{0}'' entrará en conflicto con {1} {2}
extract.method.method.0.will.conflict.with.1.in.2.3=El método ''{0}'' entrará en conflicto con ''{1}'' de {2} ''{3}''
extract.method.title.closure=Extraer cierre
extract.method.title.function=extracción de función
extract.method.title.method=Extraer método
extract.method.variable.0.will.no.longer.be.accessible=la variable ''{0}'' dejará de ser accesible después de refactorizar
find.usages.base.member.warning.message.default.implementation.method={0} es la implementación por defecto del método declarado en {1}\n\n¿Quieres buscar los usos del protocolo{3, choice,1#método|2#métodos}?
find.usages.base.member.warning.message.default.implementation.property={0} es la implementación predeterminada de una propiedad declarada en {1}\n\n¿Desea buscar los usos del protocolo {2,choice,1#propiedad|2#propiedades}?
find.usages.base.member.warning.message.default.implementation.subscript={0} es la implementación predeterminada del subíndice declarado en {1}\n\n¿Deseas buscar accesos al protocolo {3,choice,1#subíndice|2#subíndices}?
find.usages.base.member.warning.message.implements.method={0} implementa el método declarado en {1}\n\n¿Desea buscar los usos del protocolo {3,choice,1#método|2#método}?
find.usages.base.member.warning.message.implements.property={0} implementa la propiedad declarada en {1}\n\n¿Desea buscar los usos del protocolo {3,choice,1#propiedad|2#propiedades}?
find.usages.base.member.warning.message.implements.subscript={0} implementa el subíndice declarado en {1}\n\n¿Desea buscar los usos del protocolo {3,choice,1#subíndice|2#subíndices}?
find.usages.base.member.warning.message.override.implemented.method={0} sobrescribe el método declarado en {2} e implementa el método declarado en {1}\n\n¿Desea buscar la utilización del {3,choice,1#método|2#métodos} básico y de protocolo?
find.usages.base.member.warning.message.override.implemented.property={0} sobreescribe la propiedad declarada en {2} e implementa la propiedad declarada en {1}\n\n¿Desea buscar el uso de la propiedad {3,choice,1#base|2#protocolo} y la propiedad implementada?
find.usages.base.member.warning.message.override.implemented.subscript={0} reescribe el subíndice declarado en {2} e implementa el subíndice declarado en {1}\n\n¿Dónde quieres buscar el uso de la base y el protocolo {3,choice,1#subíndice|2#subíndices}?
find.usages.base.member.warning.message.override.method={0} sobreescribe el método declarado en {2}\n\n¿Quiere buscar el uso del {3,choice,1#método|2#métodos} base?
find.usages.base.member.warning.message.override.property={0} reemplaza la propiedad declarada en {2}\n\n¿Desea buscar el uso de la {3,choice,1#propiedad|2#propiedades} base?
find.usages.base.member.warning.message.override.subscript={0} pisa sobre la subindexación declarada en {2}\n\n¿Quiere buscar el uso de los {3,choice,1#subíndices|2#subíndices} base?
find.usages.base.member.warning.title=Advertencia
find.usages.option.search.in.not.compiled.code=Mostrar usos potenciales en código no compilado condicionalmente
generate.0.title=Generar {0}
generate.cannot.generate.0.for.1=no se puede generar {0} para {1}
generate.description.multi.string.template=plantilla de cadena de varias líneas
generate.description.single.string.template=Plantilla para cadena de caracteres simple
generate.description.string.concatenation.template=Concatenación de cadenas (+)
generate.equals.hash=equals y hash
generate.equals.hash.choose.in.0=Seleccionar las propiedades a incluir en {0}
generate.if.statements.equals.template=Múltiples sentencias if
generate.init.choose.properties=Selecciona las propiedades a inicializar
generate.init.choose.super.init=Seleccionar inicializador de la superclase
generate.init.init.already.exists=El inicializador ya existe
generate.method.0.and.operator.function.1.are.already.defined=El método ''{0}'' y la función operador ''{1}'' ya están definidos. ¿Quieres borrarlos y continuar?
generate.method.0.and.property.1.are.already.defined=El método ''{0}'' y la propiedad ''{1}'' ya están definidos. ¿Se deben eliminar y continuar?
generate.method.0.is.already.defined=El método ''{0}'' ya está definido. ¿Quieres borrarlo y continuar?
generate.method.0.property.1.and.operator.function.2.are.already.defined=Ya están definidos el método ''{0}'', la propiedad ''{1}'' y la función operador ''{2}''. ¿Quieres eliminarlos y continuar?
generate.operator.function.0.is.already.defined=ya está definida la función de operador ''{0}''. ¿La elimino y continúo?
generate.preparing.generation.title=Preparando la generación...
generate.property.0.and.operator.function.1.are.already.defined=Ya está definida la propiedad ''{0}'' y la función de operador ''{1}''. ¿Eliminarlas y continuar?
generate.property.0.is.already.defined=La propiedad ''{0}'' ya está definida. ¿Quieres borrarla y continuar?
generate.single.expression.equals.template=Expresión única
generate.template.title=Plantilla:(&T)
got.it.no.refactoring.in.not.compiled.code.header=No se pueden realizar cambios en el código no compilado
got.it.no.refactoring.in.not.compiled.code.message=La acción de refactorización no está disponible en código no compilado condicionado. Inténtalo en un contexto de resolución diferente para habilitar las ramas `#if directive` circundantes.
got.it.search.not.compiled.code.header=Usos en código no compilado condicional
got.it.search.not.compiled.code.message=Puede habilitar la búsqueda de usos en código no compilado según las condiciones desde el cuadro de diálogo "Renombrar". Para mostrar el cuadro de diálogo "Renombrar", vuelva a pulsar {0}.
goto.base.type=Tipo base
goto.class.kind=Tipo
goto.class.kinds.title=Tipo
goto.super.action=Ir a superAcción {0}
goto.super.class=ir.a.super.clase
goto.super.extension.of.0=Extensión de {0}
goto.super.location={0} En {1}
goto.super.menu.action=Ir a super{0}(_U)
goto.super.typealias=Typealias o tipo asociado
inheritance.relation.implements=Implementa {0}
inheritance.relation.is.implemented=Es implementado
inheritance.relation.is.overridden=Sobreescribe
inheritance.relation.is.subclassed=es subclase de
inheritance.relation.overrides=Anulaciones {0}
inline.0.action.1=Incluyendo {0} {1}
inline.0.command.1=Incrustando {0} {1}
inline.all.invocations.and.keep.the.0=Inlinear todas las invocaciones y mantener {0}(&A)
inline.all.invocations.and.remove.the.0=Invocar todo y eliminar el {0}(&A)
inline.all.references.and.keep.the.0=Incrustar todas las referencias y conservar {0}(&A)
inline.all.references.and.remove.the.0=Incrustar todas las referencias y eliminar {0}(&A)
inline.all.typealias.and.keep.the.0=Inlinear todo y retener {0}(&A)
inline.all.typealias.and.remove.the.0=Incrustar todos los alias de tipo y eliminar {0}(&A)
inline.error.cannot.access.symbol.0=no se puede acceder al símbolo {0}
inline.error.cannot.resolve.symbol=No se puede resolver el símbolo
inline.error.function.definition.contains.no.body=no contiene cuerpo
inline.error.function.no.return.statement=La función no tiene una declaración `return`
inline.error.implements.function.from.0=El método en línea implementa el método de {0}
inline.error.inline.function.has.conditionally.compiled.code=La función podría no estar correctamente en línea por que contiene código compilado condicionalmente
inline.error.inline.function.only.in.swift.code=El inline de funciones solo se admite en código Swift
inline.error.inline.recursive.function.only.on.invocations=Las funciones recursivas solo se pueden convertir en funciones en línea en invocaciones
inline.error.inline.typealias.has.conditionally.compiled.code=Este alias de tipo puede que no se haya insertado correctamente porque contiene código condicional no compilado
inline.error.inline.variable.has.conditionally.compiled.code=Es posible que la variable no se haya inline adecuadamente porque contiene código compilado condicionalmente
inline.error.inline.variable.no.single.definition=No se encuentra una definición única para insertar.
inline.error.inlined.expression.should.be.part.of.statement=La expresión en línea debe formar parte de la sentencia
inline.error.invalid.function.arguments=argumentos de función no válidos
inline.error.is.overridden.by.function.from.0=El método 'inline' fue sobreescrito por el método de {0}
inline.error.not.function.call=no es una llamada a función
inline.error.overrides.associated.type.from.0=El tipo alias inline sobrescribe el tipo asociado de {0}
inline.error.overrides.function.from.0=Método en línea anula método de {0}
inline.error.unexpected.error=Error inesperado durante el inline
inline.function.description=Reemplazar llamada de función por su cuerpo
inline.function.label.kind.0.name.1=Función en línea {0} {1}:
inline.function.label.kind.0.name.1.2.occurrences=Inlinear {0} llamadas de {2} de {1}:
inline.function.label.kind.0.name.1.occurence={0} Inlinear la llamada a {1}:
inline.include.doc.comments=Comentarios de documentación en línea
inline.recursively=recursivo en línea
inline.this.invocation.only.and.keep.the.0=Solo inline esta invocación, y mantene {0}
inline.this.reference.only.and.keep.the.0=Sólo en línea esta referencia, manteniendo {0}
inline.this.typealias.only.and.keep.the.0=Solo inlinealo esto, conserva {0}
inline.title.0=En línea {0}
inline.typealias.label.kind.0.name.1=Alias en línea {0} {1}:
inline.typealias.label.kind.0.name.1.2.occurrences=Incorpora en línea {0} usos de {2} de {1}:
inline.typealias.label.kind.0.name.1.occurence=Incrustar los usos de {0} {1}:
inline.variable.label.kind.0.name.1=Variable {0} {1} en línea:
inline.variable.label.kind.0.name.1.2.occurrences=Inlinear {0} referencias a {2} de {1}
inline.variable.label.kind.0.name.1.occurence=Referencia en línea {0} {1}:
inspection.conditionally.not.compiled.code=Código no compilado condicionalmente
inspection.missing.doc.comment.parameter.item=comentario de doc perdido para el parámetro
inspection.missing.doc.comment.parameter.item.error=parámetro {0} sin documentar en el comentario
inspection.missing.doc.comment.parameter.item.fix=actualizar doc-comentario
inspection.missing.localization=falta localización
inspection.missing.localization.all.languages.only=Reportar sólo localizaciones faltantes en todos los lenguajes
inspection.redundant.attribute=atributo redundante
inspection.redundant.attribute.error=''@{0}'' es redundante
inspection.redundant.attribute.fix=Quitar redundancia ''@{0}''
inspection.redundant.closure=Cierre redundante
inspection.redundant.closure.error=Creación de cierre redundante
inspection.redundant.closure.fix=Incrustar cuerpo
inspection.redundant.nullable.function.type.error=''{0}'' siempre devuelve tipo no nulo
inspection.redundant.nullable.type=Tipo nulo redundante
inspection.redundant.nullable.type.error=''{0}'' es de tipo no nulo siempre
inspection.redundant.nullable.type.fix=Eliminar '?' redundante
inspection.redundant.return=Devolución redundante
inspection.redundant.return.error='return' es redundante
inspection.redundant.return.fix=Quitar 'return' redundante
inspection.unnecessary.argument.list=Paréntesis de argumento vacío antes del cierre
inspection.unnecessary.argument.list.error=Los corchetes de argumentos son innecesarios
inspection.unnecessary.argument.list.fix=Quitar paréntesis de argumentos innecesarios
inspection.unnecessary.parentheses=Paréntesis innecesarios
inspection.unnecessary.parentheses.error=los paréntesis son innecesarios
inspection.unnecessary.parentheses.fix=Eliminar paréntesis innecesarios
inspection.unnecessary.self=self innecesario
inspection.unnecessary.self.error=error de uso innecesario de 'self'
inspection.unnecessary.self.fix=Remover 'self' innecesario
inspection.unnecessary.tuple.wrap=Envoltura de tupla innecesaria
inspection.unnecessary.tuple.wrap.error=La tupla de un elemento se puede reemplazar con el tipo
inspection.unnecessary.tuple.wrap.fix=Reemplazar tupla de un solo elemento por tipo
intention.access.control.error.access=No se puede acceder a {0}: es {1} en {2}
intention.access.control.error.access.dynamic=%0 no accesible: subíndice de miembro dinámico en %2 es %1
intention.access.control.error.override=No se puede sobreescribir {0}: es {1} en {2}
intention.access.control.fix=Crear {0} {1} en {2}
intention.access.control.remove.setter=nullar {0} de {1}
intention.add.catch.clause=Agregar cláusula 'catch'
intention.add.default.catch.clause=Añadir cláusula 'catch' por defecto
intention.add.digit.separators=agregar separadores de dígitos
intention.add.explicit.qualifier=Añadir calificador explícito
intention.add.explicit.type=Agregar tipo explícito
intention.add.try.to.expression=Agregar 'try' a la expresión
intention.add.try.to.iteration=Agregar 'try' a la iteración
intention.category.swift=Swift
intention.convert.to.binary=convertirabinario
intention.convert.to.closure.argument=convertir a argumento de clausura
intention.convert.to.decimal=convertir a decimal
intention.convert.to.hex=Convertir a hexadecimal
intention.convert.to.multiline.string=Convertir a cadena de texto multilínea
intention.convert.to.octal=Convertir a octal
intention.convert.to.string=Convertir a literal de cadena de una sola línea
intention.convert.to.trailing.closure=Convertir a cierre final
intention.create.actor.0=Crear el actor ''{0}''
intention.create.actor.0.in.new.file=Crear actor ''{0}'' en nuevo archivo
intention.create.actor.0.nested.in.1=''{1}'' en el actor anidado ''{0}''
intention.create.class.0=Crear clase ''{0}''
intention.create.class.0.in.new.file=Crear clase ''{0}'' en nuevo archivo
intention.create.class.0.nested.in.1=Crear clase ''{0}'' anidada en ''{1}''
intention.create.enum.0=Crear enumeración ''{0}''
intention.create.enum.0.in.new.file=Crear enumeración ''{0}'' en un archivo nuevo
intention.create.enum.0.nested.in.1=Crea la enumeración ''{0}'' anidada en ''{1}''
intention.create.enum.case.0=Crear caso de enumeración ''{0}''
intention.create.global.function.0=Crear función global ''{0}''
intention.create.global.variable.0=Crear variable global ''{0}''
intention.create.initializer=Crear inicializador
intention.create.local.variable.0=Crear variable local ''{0}''
intention.create.method.0=Crear método ''{0}''
intention.create.method.0.in.extension=Crear método de extensión ''{0}''
intention.create.new.swift.declaration=Crear una nueva declaración de Swift
intention.create.new.swift.type.in.a.new.file=Crear nuevo tipo Swift en un nuevo archivo
intention.create.property.0=Crear propiedad ''{0}''
intention.create.property.0.in.extension=Crear propiedad de extensión ''{0}''
intention.create.protocol.0=Crear protocolo ''{0}''
intention.create.protocol.0.in.new.file=Crear protocolo ''{0}'' en fichero nuevo
intention.create.protocol.0.nested.in.1=Crear el protocolo ''{0}'' anidado en ''{1}''
intention.create.struct.0=Crear estructura ''{0}''
intention.create.struct.0.in.new.file=Crear estructura ''{0}'' en archivo nuevo
intention.create.struct.0.nested.in.1=Crear estructura ''{0}'' anidada en ''{1}''
intention.create.type.0=Crear el tipo ''{0}''
intention.create.type.0.in.new.file=Crear tipo ''{0}'' en archivo nuevo
intention.create.type.0.nested.in.1='Crear tipo ''{0}'' anidado en ''{1}''
intention.create.type.method.0=Crear método de tipo ''{0}''
intention.create.type.method.0.in.extension=Crear el método ''{0}'' del tipo extensible
intention.create.type.property.0=Crear la propiedad de tipo ''{0}''
intention.create.type.property.0.in.extension=Crear propiedad ''{0}'' de tipo extensión
intention.decrease.string.escape.level=disminuir nivel de escape de cadena
intention.demorgans.law=Leyes de De Morgan
intention.demorgans.law.format=reemplazar ''{0}'' con ''{1}''
intention.extract.class.0.to.extension=Extraer clase ''{0}'' a extensión
intention.extract.class.0.to.type.declaration=Extraer clase ''{0}'' a declaración de tipo
intention.extract.conformance.to.extension.cannot.add.protocol.conformance.to.protocol=La extensión del protocolo no puede ser compatible con otro protocolo
intention.extract.conformance.to.extension.cannot.extract.class=no se puede extraer la clase heredada ''{0}'' a la extensión
intention.extract.conformance.to.extension.familyName=Extraer conformidad a la familia de extensiones
intention.extract.conformance.to.extension.type.cannot.be.local=La conformidad de extracción con el tipo de extensión no puede ser local
intention.extract.conformance.to.extension.type.must.be.fileprivate=debe ser al menos fileprivate
intention.extract.enum.0.to.extension=Extraer enumeración ''{0}'' a extensión
intention.extract.enum.0.to.type.declaration=Extraer enumerado '{'0'}' a la declaración de tipo
intention.extract.from.extension.to.type.declaration.error.message.title=Extraer miembro a su declaración de tipo original
intention.extract.from.extension.to.type.declaration.familyName=Extraer miembro de extensión a su declaración de tipo original
intention.extract.from.extension.to.type.declaration.original.analysis.on.type.not.allowed=La declaracion del tipo original esta fuera del alcance
intention.extract.from.extension.to.type.declaration.original.type.not.found=No se encontró el tipo de declaración original
intention.extract.function.0.to.extension=Extraer la función {0} a una extensión
intention.extract.function.0.to.type.declaration=Extrae la función ''{0}'' a la declaración de tipo
intention.extract.initializer.to.extension=Extraer inicializador a la extensión
intention.extract.initializer.to.type.declaration=Extraer inicializador para tipo de declaración
intention.extract.member.to.extension.cannot.extract.from.protocol=no se puede extraer del protocolo
intention.extract.member.to.extension.type.cannot.be.local=El término de extracción no puede ser local
intention.extract.member.to.extension.type.must.be.fileprivate=El tipo debe ser al menos fileprivate
intention.extract.members.to.extension.error.message.title=Extraer miembros para extender
intention.extract.members.to.extension.familyName=Extraer miembros a extensión
intention.extract.multiple.members.to.extension=Extraer miembros a extensión
intention.extract.multiple.members.to.type.declaration=Extraer miembros a declaración de tipo
intention.extract.property.0.to.extension=Extraer propiedad ''{0}'' a la extensión
intention.extract.property.0.to.type.declaration=Extraer propiedad ''{0}'' a la declaración del tipo
intention.extract.struct.0.to.extension=Extraer estructura ''{0}'' a extensión
intention.extract.struct.0.to.type.declaration=Extraer estructura ''{0}'' a una declaración de tipo
intention.extract.subscript.to.extension=Extraer subíndice a extensión
intention.extract.subscript.to.type.declaration=Extraer subíndice a declaración de tipo
intention.extract.typealias.0.to.extension=Extraer alias de tipo "{0}" a extensión
intention.extract.typealias.0.to.type.declaration=Extraer el alias de tipo ''{0}'' hacia la declaración de tipo
intention.flip.binary.expression=Invertir expresión binaria
intention.flip.binary.expression.format='Invertir ''{0}''
intention.flip.comparison=Invertir comparación
intention.flip.comparison.format='Invertir ''{0}'' por ''{1}''
intention.generate.documentation.comment=Añadir comentario de documentación
intention.implement.equals=Implementar equals faltante
intention.implement.hash=implementar hash faltante
intention.implement.members.error=El tipo {0} no es compatible con {1} {2}
intention.implement.members.implement.missing=Implementar {0} {0,choice,1#miembro|2#miembros} ausentes
intention.implement.missing.equals.hash=Implementar los `equals` y `hash` que faltan
intention.increase.string.escape.level=incrementar nível de escape de string
intention.invert.if.statement=Invertir sentencia 'if'
intention.join.declaration.and.assignment=Unir declaración y asignación
intention.localize.string=Localizar cadena
intention.localize.string.title.case=Localizar Cadena
intention.mark.the.enclosing.function.as.throws=Añadir "throws" a la signatura de la función
intention.merge.conditions=Condiciones de la unión
intention.merge.else.if=Fusionar 'else if'
intention.merge.nested.if=Fusionar if anidado
intention.negate.comparison=comparación de negación
intention.negate.comparison.format=''{0}'' negar a ''{1}''
intention.remove.digit.separators=Eliminar separadores de dígitos
intention.remove.explicit.type=Eliminar tipo explícito
intention.replace.guard.with.if=reemplazar 'guard' por 'if'
intention.replace.if.with.guard=reemplazar 'if' por 'guard'
intention.replace.rethrows.with.throws='rethrows' reemplazar por 'throws'
intention.simplifyifelse.collapse.conditional.expression=Contraer expresión condicional
intention.simplifyifelse.collapse.guard=Plegar 'guard'
intention.simplifyifelse.collapse.ifelse=Colapar if-else
intention.simplifyifelse.familyName=Simplificar if-else
intention.simplifyifelse.replace.guard.with.0=reemplazar ''guard'' con ''{0}''
intention.simplifyifelse.replace.if.else.with.0=Reemplazar ''if else'' con ''{0}''
intention.simplifyifelse.simplify=Simplificar
intention.simplifyifelse.simplify.guard=Simplificar 'guard'
intention.simplifyifelse.simplify.if.else=Simplificar 'if else'
intention.split.condition=Dividir en condición individual
intention.split.declaration.and.assignment=Dividir declaración y asignación
intention.split.else.if=Dividir 'else if'
intention.split.into.separate.declarations=Dividir en declaraciones separadas
intention.split.nested.if=Dividir en if anidados
intention.suppress.call.error.with.try=¡Suprime el error con 'try!'
intention.surround.with.do.catch=Envolver con 'do/catch'
intention.swift.module.info=Mostrar información del módulo
intention.switch.resolve.configuration.specified=Cambie a ''{0}'' para habilitar esta rama
intention.unresolved.reference.0.1=importar {0} ''{1}''
intention.unwrap.with.guard.let=Desempaquetar con 'guard let'
intention.unwrap.with.if.let=Descomprimir con 'if let'
intention.wrong.return.type.fix=Tipo de retorno de la función de corrección
intention.wrong.return.type.fix.with.types=''{0}'' para que devuelva ''{1}''
introduce.variable.declare.with.var=Declarar variable con var(&V)
introduce.variable.expression.will.be.ambiguous.without.explicit.type=La expresión de variable será ambigua,<br/>sin un tipo explícito
introduce.variable.specify.type.explicitly=Especificar tipo explícitamente(&T)
notification.group.plugin.errors=El servicio de idioma Swift ha fallado
optimize.imports.rearranged.imports=Importaciones reordenadas
optimize.imports.removed.0.added.1.imports=Se eliminaron {0} {0,choice,0#import|1#importes|1<importes}, se agregaron {1} {1,choice,0#import|1#importes|1<importes>}
optimize.imports.removed.0.imports=Se {0,choice,0#eliminó|1#eliminaron|1<eliminaron} {0} {0,choice,0#import|1#import|1<import>}
override.implement.elements.to.implement.chooser.title=Seleccionar miembros que implementar
override.implement.elements.to.override.chooser.title=Selecciona los miembros a sobreescribir
override.implement.elements.to.override.implement.chooser.title=Elegir miembros a sobreescribir/implementar
override.implement.implement.not.allowed=no se puede implementar
override.implement.nothing.to.implement=No hay nada que implementar
override.implement.nothing.to.override=Nada que sobreescribir
override.implement.override.not.allowed=No permitido sobrescribir
override.implement.progress=Procesando el miembro a sobreescribir/implementar...
override.implement.show.members.to.implement.title=Mostrar miembros a implementar
override.implement.show.no.optional.members=Mostrar miembros opcionales(sin elementos opcionales)
override.implement.show.only.optional.members=Mostrar sólo miembros opcionales
override.implement.show.optional.member=Mostrar 1 optional member(&O)
override.implement.show.optional.members=Mostrar {0} miembros opcionales (&O)
refactor.0.overrides.associated.type.of.1={0} reemplaza el tipo asociado de {1}
refactor.0.overrides.declaration.in.1={0} sobrescribe la declaración de {1}
refactor.0.overrides.initializer.of.1={0} sobrescribe el inicializador de {1}
refactor.0.overrides.method.of.1={0} reemplaza el método de {1}
refactor.0.overrides.property.of.1={0} sobreescribe la propiedad de {1}
refactor.0.overrides.subscript.of.1={0} sobrescribe el subíndice de {1}
refactor.base.declaration=Refactorizar base {0,choice,1#declaración|2#declaraciones}
refactor.only.current.declaration=Refactorizar solo la declaración actual
refactoring.option.search.in.not.compiled.code=Aplicable a código no compilado con condición
rename.containing.file.dialog.description=Renombrar el archivo contenedor con el siguiente nombre:
rename.containing.file.dialog.title=Renombrar archivo contenedor
rename.containing.file.entity.name=Archivo contenedor
rename.error.dynamic.called.values=No se puede renombrar valores de llamada dinámicos
rename.error.message.renaming.swift.member.elements.in.objective.c.code.is.not.supported=No se admite el renombrado de elementos miembro de swift en código Objective-C
rename.error.title=Swift - Renombrar
rename.inheritor.entity.name=Hijo
rename.inheritors=Renombrar herederos
rename.inheritors.to=Renombrar herederos a:
rename.init.is.not.supported=El inicializador de Swift no se puede renombrar
rename.related.dialog.description=Renombrar declaraciones relacionadas con el nombre:
rename.related.dialog.title=Renombrar declaraciones relacionadas
rename.related.entity.name=Declaración relacionada
rename.self.is.not.supported=No se admite el cambio de nombre propio
rename.title=Renombrar Swift
searching.for.implementations=Buscando impls...
searching.for.overriders=Buscando reemplazos...
searching.for.subclasses=Buscando subclases...
sourcekit.fix.it=Aplicar Fix-it
sourcekit.inspections=inspecciones de SourceKit
swift-format.dump.progress=Generando archivo de configuración '.swift-format' por defecto
swift-format.format.progress=Swift-Format formatea {0}
swift.name=Swift
syntax.error.call.can.throw.but.it.is.executed.in.a.non.throwing.autoclosure=La llamada puede lanzar, pero se ejecuta en un cierre automático que no lanza
syntax.error.call.can.throw.but.it.is.not.marked.with.try.and.it.is.executed.in.a.non.throwing.autoclosure=La llamada puede lanzar, pero no está marcada con `try` y se ejecuta en una autoclausura que no lanza
syntax.error.call.can.throw.in.default.argument=La llamada puede lanzar, pero no puede lanzar en el argumento predeterminado
syntax.error.call.can.throw.in.property.initializer=La llamada puede generar una excepción, pero no puede generar una excepción en el inicializador de la propiedad
syntax.error.call.can.throw.not.marked.with.try=La llamada puede lanzar una excepción pero no está marcada con 'try'
syntax.error.call.can.throw.not.marked.with.try.not.exhaustive=La llamada puede lanzar, pero no está marcada con `try` y el `catch` envolvente no es exhaustivo
syntax.error.call.can.throw.not.marked.with.try.not.handled=La llamada puede lanzar una excepción pero no está marcada con 'try' y el error no se maneja
syntax.error.call.rethrows.function.can.only.throw.parameter.call.not.handled=Llamada puede lanzar, pero el error no ha sido manejado; las funciones de 'rethrows' solo pueden lanzar cuando sus parámetros lanzan
syntax.error.call.rethrows.function.can.only.throw.parameter.call.not.marked.with.try.not.handled=La función se puede lanzar, pero no está marcada con 'try', y el error no se maneja. Las funciones declaradas como 'rethrows' solo pueden lanzarse cuando se lanza su parámetro formal
syntax.error.duplicate.platform=La plataforma ''{0}'' ya se ha especificado
syntax.error.error.is.not.handled=El error no está manejado porque la función que lo encierra no está declarada como 'throws'
syntax.error.error.is.not.handled.not.exhaustive=Error no gestionado porque el catch no es exhaustivo
syntax.error.errors.are.not.handled=Los errores arrojados aquí no se manejan
syntax.error.errors.are.not.handled.not.exhaustive=Los errores lanzados desde aquí no son manejados porque la captura externa no es exhaustiva
syntax.error.hashbang.line.is.allowed.only.in.the.first.line.of.the.file=La línea hashbang sólo se permite en la primera línea del archivo
syntax.error.hashbang.line.is.allowed.only.in.the.first.line.of.the.main.file=La línea hashbang solo está permitida en la primera línea del archivo principal
syntax.error.hashbang.line.is.allowed.only.in.the.main.file=La línea 'Hashbang' sólo se permite en el archivo principal
syntax.error.interpolation.can.throw.but.it.is.executed.in.a.non.throwing.autoclosure=la interpolación puede lanzarse pero se ejecuta en un cierre automático que no lanza
syntax.error.interpolation.can.throw.but.it.is.not.marked.with.try.and.it.is.executed.in.a.non.throwing.autoclosure=la interpolación puede lanzar, pero no está marcada con try y se ejecuta en un autocierre que no lanza
syntax.error.interpolation.can.throw.in.default.argument=La interpolación se puede lanzar, pero no se puede lanzar un error desde el argumento predeterminado
syntax.error.interpolation.can.throw.in.property.initializer=La interpolación puede arrojar, pero no se pueden arrojar errores desde el inicializador de la propiedad
syntax.error.interpolation.can.throw.not.marked.with.try=La interpolación puede arrojar una excepción pero no está marcada con 'try'
syntax.error.interpolation.can.throw.not.marked.with.try.not.exhaustive=La interpolación puede lanzar una excepción, pero no está marcada con 'try' y la captura externa no es exhaustiva
syntax.error.interpolation.can.throw.not.marked.with.try.not.handled=La interpolación puede lanzar, pero no está marcada con un "try" y el error no se controla
syntax.error.interpolation.rethrows.function.can.only.throw.parameter.call.not.handled=La interpolación puede lanzar, pero el error no se maneja; las funciones declaradas 'rethrows' solo pueden lanzar si sus parámetros lanzan
syntax.error.interpolation.rethrows.function.can.only.throw.parameter.call.not.marked.with.try.not.handled=La interpolación se puede replantear, pero no se marcó con 'try' y el error no se manejó; la función que declara 'rethrows' solo puede replantear si su parámetro de llamada no se marcó con 'try' y no se manejó
syntax.error.iteration.can.throw.not.marked.with.try=La iteración puede generar excepciones, pero no está marcada con try
syntax.error.iteration.can.throw.not.marked.with.try.not.exhaustive=La iteración puede lanzar, pero no está marcada con try y la captura circundante no es exhaustiva
syntax.error.iteration.can.throw.not.marked.with.try.not.handled=La iteración puede lanzar una excepción, pero no está marcada con 'try' y el error no se ha manejado
syntax.error.operator.can.throw.not.marked.with.try=El operador puede lanzar una excepción, pero la expresión no está marcada con 'try'
syntax.error.property.can.throw.but.it.is.executed.in.a.non.throwing.autoclosure=El acceso a la propiedad puede generar una excepción, pero se ejecuta en un autocierre que no genera excepciones
syntax.error.property.can.throw.but.it.is.not.marked.with.try.and.it.is.executed.in.a.non.throwing.autoclosure=Acceso a la propiedad puede lanzar, pero no está marcada con 'try' y se ejecuta en un autocierre no lanzador
syntax.error.property.can.throw.in.default.argument=El acceso a la propiedad puede lanzar pero no puede lanzar desde el argumento por defecto
syntax.error.property.can.throw.in.property.initializer=El acceso a propiedades puede lanzar excepciones, pero no se puede lanzar un error desde el inicializador de propiedades
syntax.error.property.can.throw.not.marked.with.try=El acceso a la propiedad puede lanzar, pero no está marcado con 'try'
syntax.error.property.can.throw.not.marked.with.try.not.exhaustive=El acceso a la propiedad puede provocar una excepción, pero no está marcado como "try" y la captura externa no es exhaustiva
syntax.error.property.can.throw.not.marked.with.try.not.handled=El acceso a la propiedad puede generar una excepción, pero no se marcó con 'try' y el error no se controló
syntax.error.property.rethrows.function.can.only.throw.parameter.call.not.handled=El acceso a la propiedad puede lanzar, pero el error no está manejado; una función que declara 'rethrows' sólo puede lanzar cuando sus parámetros lanzan
syntax.error.property.rethrows.function.can.only.throw.parameter.call.not.marked.with.try.not.handled=El acceso a la propiedad puede lanzar (raise) pero no está marcado con 'try', el error no se maneja; Las funciones que declaran 'rethrows' solo pueden lanzar cuando los parámetros lanzan
syntax.error.rethrows.function.can.only.throw.parameter.call=Una función que declara 'rethrows' solo puede lanzar cuando su parámetro llama
syntax.error.rethrows.function.must.take.a.throwing.function.argument=La función 'rethrows' debe tomar un argumento de función que lance una excepción
syntax.error.rethrows.is.not.allowed.in.closures='rethrows' no está permitido en cierres
syntax.error.rethrows.is.not.allowed.in.function.type.elements=No se permite relanzar elementos en el tipo de función
syntax.error.rethrows.is.not.allowed.in.subscripts=Los 'rethrows' no están permitidos en subíndices
syntax.error.subscript.can.throw.but.it.is.executed.in.a.non.throwing.autoclosure=El acceso de subíndice puede generar una excepción, pero se ejecuta en un autocierre que no genera excepciones
syntax.error.subscript.can.throw.but.it.is.not.marked.with.try.and.it.is.executed.in.a.non.throwing.autoclosure=El acceso al subíndice puede generar una excepción, pero no está marcado con `try` y se ejecuta en un cierre automático no generador de excepciones
syntax.error.subscript.can.throw.in.default.argument=El acceso al subíndice puede arrojar, pero no puede arrojar un error desde el argumento predeterminado
syntax.error.subscript.can.throw.in.property.initializer=el subíndice de acceso puede lanzar, pero no puede lanzar un error desde el inicializador de la propiedad
syntax.error.subscript.can.throw.not.marked.with.try=El acceso a subíndices puede lanzar pero no está marcado con 'try'
syntax.error.subscript.can.throw.not.marked.with.try.not.exhaustive=El acceso al subíndice puede lanzar pero no está marcado con 'try' y la captura externa no es exhaustiva
syntax.error.subscript.can.throw.not.marked.with.try.not.handled=El acceso al subíndice puede lanzar una excepción, pero no está marcado con try, y el error no se ha manejado
syntax.error.subscript.rethrows.function.can.only.throw.parameter.call.not.handled=el error no se maneja; las funciones que declaran 'rethrows' sólo pueden lanzar cuando lo hace su parámetro
syntax.error.subscript.rethrows.function.can.only.throw.parameter.call.not.marked.with.try.not.handled=La suscripción puede relanzar, pero no está marcada con 'try'; el error no está manejado; solo las funciones que declaran 'rethrows' pueden relanzarse cuando su parámetro lo hace
syntax.error.thrown.expression.type.0.does.not.conform.to.ErrorType=El tipo de expresión lanzada ''{0}'' no se ajusta a ''{1}''
syntax.error.throws.is.not.allowed.in.subscripts=No se permite 'throws' en subíndices
syntax.error.try.cannot.appear.to.the.right='try' no puede aparecer a la derecha de un operador no asignado
syntax.error.try.cannot.appear.to.the.right.fix=Mover 'try' a la izquierda
syntax.error.typealias.without.assignment=Error de sintaxis, el alias de tipo no tiene asignación
syntax.error.unrecognized.platform.name.0=Nombre de plataforma no reconocido ''{0}''
syntax.error.variable.declaration.with.multiple.variables.cannot.have.explicit.getters.setters=Las declaraciones var con múltiples variables no pueden tener getters/setters explícitos
syntax.error.variable.declaration.with.multiple.variables.cannot.have.implicit.getter.clause=La declaración 'var' con múltiples variables no puede tener una cláusula 'getter' implícita
syntax.error.variable.declaration.with.multiple.variables.cannot.have.willset.didset.clause=No se pueden declarar múltiples variables en una sentencia 'var' con una cláusula willSet/didSet
usage.type.argument.label=Etiqueta de argumento
usage.type.conditionally.not.compiled=Posible uso en código condicionalmente no compilado
usage.type.extension=extensión
usage.type.function.declaration=Declaración de función
usage.type.key.path=Expresión de ruta de clave
usage.type.operator.declaration=Declaración de operador
usage.type.precedence.group.declaration=Declaración de grupo de precedencia
usage.type.raw.value=valor nulo
usage.type.requirement=Uso en el requerimiento
usage.type.type.alias=Alias de tipo
usage.type.type.parameter=parámetro tipo tipo