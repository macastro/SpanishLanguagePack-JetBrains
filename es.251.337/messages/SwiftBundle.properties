action.Swift.ExtractFunction.text=Extraer función…
action.Swift.FormatFileWithSwiftFormat.text=Reformatear código usando Swift-Format
action.Swift.Generate.DebugDescription.description=Generar debugDescription
action.Swift.Generate.DebugDescription.text=debugDescription…
action.Swift.Generate.Description.description=Generar descripción
action.Swift.Generate.Description.text=description…
action.Swift.Generate.EqualsHashValue.description=Generar equals y hash
action.Swift.Generate.EqualsHashValue.text=equals y hash
action.Swift.Generate.Init.description=Generar inicializador
action.Swift.Generate.Init.text=Inicializador
action.Swift.GenerateDocComment.text=Generar comentario de documentación
action.Swift.IntroduceClosureVariable.text=Extraer closure…
action.Swift.NewFile.description=Crear nuevo archivo o tipo Swift
action.Swift.NewFile.text=Archivo/tipo Swift
action.Swift.ShowSwiftIDETest.text=Ejecutar informe de IDE Swift
action.Swift.SwiftFormatCreateConfigFileAction.text=Crear archivo de configuración Swift-Format
action.Swift.ToggleErrorHints.text=Mostrar sugerencias de error
action.Swift.ToggleGlobalErrorHints.text=Mostrar sugerencias de error Swift
action.Swift.ToggleGlobalTypeHints.text=Mostrar sugerencias de tipo Swift
action.Swift.ToggleTypeHints.text=Mostrar sugerencias de tipo
auto.import.command.name=Importar módulo automáticamente
auto.import.completion.presentation.tail.from.0=\ ({0})
auto.import.settings.checkbox.sort=Ordenar imports
auto.import.settings.import.symbol=Importar símbolos específicos automáticamente
auto.import.settings.import.symbol.help=Al importar símbolos automáticamente, es preferible agregar el import del símbolo mismo en lugar de importar todo el módulo que lo declara
auto.import.settings.optimize.non.module=Optimizar imports no modulares
auto.import.settings.optimize.non.module.help=Al optimizar imports, reemplazar imports explícitos de funciones, structs, clases, etc. por el import de su módulo padre
call.hierarchy.usage.in=Uso en ''{0}''
change.info.async.throws.label=async/throws\:
change.info.default.value.code.comment="valor por defecto \= {0}"
change.info.default.value.label=Valor por defecto\:
change.info.dialog.invalid.function.name.0=Nombre de función inválido\: ''{0}''
change.info.dialog.invalid.parameter.internal.name.0=Nombre interno de parámetro inválido\: ''{0}''
change.info.dialog.invalid.parameter.name.0=Nombre de parámetro inválido\: ''{0}''
change.info.dialog.no.function.name.specified=No se especificó nombre de función
change.info.dialog.parameter.after.variadic.should.have.nonempty.name=El parámetro después de un variadic debe tener un nombre no vacío
change.info.dialog.rethrows.should.have.throwing.parameter=Una función 'rethrows' debe tener un parámetro de función que lance excepciones
change.info.internal.name.label=Nombre interno\:
change.info.name.label=Nombre\:
change.info.optional.label=Opcional\:
change.info.options.label=Opciones
change.info.return.type.label=Tipo de retorno\:
change.info.type.label=Tipo\:
change.signature.0.1.will.no.longer.be.visible.from.overriding.0.in.2.3={0} ''{1}'' ya no será visible desde la sobreescritura de {0} en {2} ''{3}''
change.signature.0.1.with.2.visibility.wont.be.accessible.from.3.4={0} ''{1}'' con visibilidad "{2}" no será accesible desde {3} ''{4}''
change.signature.0.can.throw.but.thrown.errors.are.not.handled=''{0}'' puede lanzar excepciones, pero los errores lanzados no son manejados
change.signature.0.is.async.but.not.awaited=''{0}'' es una llamada await pero no está marcada como async
change.signature.dialog.title=Cambiar firma
change.signature.initializer.will.conflict.with.0.in.1.2=El inicializador entrará en conflicto con {0} en {1} ''{2}''
change.signature.processed.elements.header=Elementos para cambiar firma
change.signature.subscript.will.conflict.with.0.in.1.2=El subscript entrará en conflicto con {0} en {1} ''{2}''
change.signature.target.not.found=El cursor debe estar en una función, inicializador o subscript
change.signature.title=Cambiar firma
code.style.blank.lines.around.class=Alrededor de declaraciones de tipo\:
code.style.blank.lines.around.field=Alrededor de propiedades\:
code.style.blank.lines.around.field.in.protocol=Alrededor de propiedades en protocolo\:
code.style.blank.lines.around.method=Alrededor de métodos/funciones\:
code.style.blank.lines.around.method.in.protocol=Alrededor de métodos/funciones en protocolo\:
code.style.blank.lines.before.method.body=Antes del cuerpo de método/función\:
code.style.code.generation.doc.comment.style=Preferir comentarios de documentación en bloque(/** */) sobre línea(///)
code.style.code.generation.doc.comment.tag.delimiter=Delimitador de elementos de lista\:
code.style.code.generation.prefer.explicit.return=Preferir return explícito(&R)
code.style.code.generation.prefer.void=Preferir Void sobre ()(&V)
code.style.code.generation.tab.title=Generación de código
code.style.indent.directives.as.code=Seguir indentación del código
code.style.indent.directives.children=Indentar hijos
code.style.indent.group.title.directives=Directivas
code.style.indent.method.chain=Indentación de cadena de métodos\:
code.style.indent.multiline.string.or.regex=Indentar strings multilínea o regex
code.style.spaces.after.argument.colon=Después de dos puntos en llamada a método/función
code.style.spaces.after.dictionary.literal.colon=Después de dos puntos en pares 'key\:value' de diccionario literal
code.style.spaces.after.dictionary.type.colon=Después de dos puntos en tipos de diccionario
code.style.spaces.after.operator.in.function.declarations=Operador en declaraciones de función
code.style.spaces.after.semicolon=Después de punto y coma
code.style.spaces.after.superclass.colon=Después de dos puntos en cláusula de herencia de tipo
code.style.spaces.after.type.colon=Después de dos puntos en anotaciones de tipo
code.style.spaces.around.range.operators=Operadores de rango (..., ..<)
code.style.spaces.attribute.parameters=Parámetros de atributo
code.style.spaces.attribute.parentheses=Paréntesis de atributo
code.style.spaces.before.argument.colon=Antes de dos puntos en llamada a método/función
code.style.spaces.before.class.lbrace=Llave izquierda de declaración de tipo
code.style.spaces.before.dictionary.literal.colon=Antes de dos puntos en pares 'key\:value' de diccionario literal
code.style.spaces.before.dictionary.type.colon=Antes de dos puntos en tipos de diccionario
code.style.spaces.before.method.call.parentheses=Paréntesis de llamada a método/función
code.style.spaces.before.method.lbrace=Llave izquierda de método/función
code.style.spaces.before.method.parentheses=Paréntesis de declaración de método/función
code.style.spaces.before.semicolon=Antes de punto y coma
code.style.spaces.before.superclass.colon=Antes de dos puntos en cláusula de herencia de tipo
code.style.spaces.before.type.colon=Antes de dos puntos en anotaciones de tipo
code.style.spaces.closure.arrow=Flecha de closure (->)
code.style.spaces.equality.operator=Operador de igualdad '\=\='
code.style.spaces.group.title.colon=Alrededor de dos puntos
code.style.spaces.group.title.in.ternary=En operador ternario
code.style.spaces.shift.operators=Operadores de desplazamiento (<<, >>)
code.style.spaces.within.empty.method.call.parentheses=Paréntesis vacíos de llamada a método/función
code.style.spaces.within.empty.method.parentheses=Paréntesis vacíos de declaración de método/función
code.style.spaces.within.literal.brackets=Corchetes en literales de array y diccionario
code.style.spaces.within.method.call.parentheses=Paréntesis de llamada a método/función
code.style.spaces.within.method.parentheses=Paréntesis de declaración de método/función
code.style.spaces.within.string.interpolations=Interpolaciones de string
code.style.wrapping.align.in.columns=Alinear en columnas
code.style.wrapping.align.when.multiline=Alinear cuando es multilínea
code.style.wrapping.array.literal=Literales de array y diccionario
code.style.wrapping.array.new.line.after.left.bracket=Nueva línea después de '['
code.style.wrapping.array.right.bracket.on.new.line=']' en nueva línea
code.style.wrapping.brace.placement.class.declaration=En declaraciones de tipo
code.style.wrapping.classes.annotation=Atributos de tipo
code.style.wrapping.closure.signature.on.next.line=Parámetros en nueva línea cuando es multilínea
code.style.wrapping.fields.annotation=Atributos de propiedad
code.style.wrapping.group.title.closure=Closures
code.style.wrapping.group.title.condition.clauses=Cláusulas condicionales
code.style.wrapping.group.title.do.while=Sentencia 'repeat … while'
code.style.wrapping.group.title.guard=Sentencia 'guard'
code.style.wrapping.group.title.if=Sentencia 'if'
code.style.wrapping.group.title.method.arguments=Argumentos de llamada a método/función
code.style.wrapping.group.title.method.parameters=Parámetros de declaración de método/función
code.style.wrapping.group.title.superclass.list=Lista de superclases y protocolos adoptados
code.style.wrapping.group.title.ternary=Operador ternario
code.style.wrapping.group.title.try=Sentencia 'do'
code.style.wrapping.group.title.variable.groups=Grupos de variables
code.style.wrapping.guard.else='else'
code.style.wrapping.guard.else.always=Siempre nueva línea
code.style.wrapping.guard.else.never=Nunca nueva línea
code.style.wrapping.guard.else.wrapped=Nueva línea si es necesario
code.style.wrapping.keep.control.statement.in.one.line=Mantener sentencia de control en una línea
code.style.wrapping.keep.simple.argument.blocks.in.one.line=Mantener argumentos closure en una línea
code.style.wrapping.keep.simple.blocks.in.one.line=Mantener bloques y closures (trailing) en una línea
code.style.wrapping.keep.simple.methods.in.one.line=Mantener métodos y funciones en una línea
code.style.wrapping.local.variables.annotation=Atributos de variables locales
code.style.wrapping.method.brace.placement=En métodos y funciones
code.style.wrapping.method.chain.dot.on.new.line='.' en nueva línea
code.style.wrapping.methods.annotation=Atributos de método
code.style.wrapping.parameters.annotation=Atributos de parámetro
code.style.wrapping.structures.in.one.line=Mantener declaraciones de tipo vacías en una línea
color.conditionally.not.compiled=Palabras clave y directivas//Código no compilado condicionalmente
color.settings.actor=Tipos//Actor
color.settings.anonymous.closure.parameter=Identificadores//Parámetro de closure anónimo
color.settings.argument.label=Identificadores//Etiqueta de argumento
color.settings.associated.type=Tipos//Tipo asociado
color.settings.attribute.argument=Atributos//Argumento de atributo
color.settings.attribute.name=Atributos//Nombre de atributo
color.settings.class=Tipos//Clase
color.settings.colon=Llaves y operadores//Dos puntos
color.settings.directive=Palabras clave y directivas//Directiva
color.settings.directive.condition=Palabras clave y directivas//Condición de directiva
color.settings.directive.flag=Palabras clave y directivas//Flag de directiva
color.settings.enum.case.value=Identificadores//Valor de case enum
color.settings.external.parameter.name=Identificadores//Nombre externo de parámetro
color.settings.function.and.method.call=Funciones//Llamada a función y método
color.settings.function.and.method.declaration=Funciones//Declaración de función y método
color.settings.inline.closure.parameter=Identificadores//Parámetro de closure inline
color.settings.inline.hints.error.hint=Sugerencias inline//Sugerencia de error
color.settings.inline.hints.type.hint=Sugerencias inline//Sugerencia de tipo
color.settings.keyword=Palabras clave y directivas//Palabra clave
color.settings.module.name=Tipos//Nombre de módulo
color.settings.nested.function.call=Funciones//Llamada a función anidada
color.settings.nested.function.declaration=Funciones//Declaración de función anidada
color.settings.operator.sign=Llaves y operadores//Operador
color.settings.property=Identificadores//Propiedad
color.settings.protocol=Tipos//Protocolo
color.settings.self.and.super.keywords=Palabras clave y directivas//'self' y 'super'
color.settings.struct.and.enum=Tipos//Struct y enum
color.settings.tuple.label=Identificadores//Etiqueta de tupla
color.settings.tuple.type.label=Identificadores//Etiqueta de tipo tupla
color.settings.type.alias=Tipos//Alias de tipo
color.settings.type.parameter=Tipos//Parámetro genérico
color.settings.wildcard=Identificadores//Comodín
command.name.extract.function=Extraer función
context.declaration=Declaración
context.statement=Sentencia
create.file.action=Crear archivo Swift {0}
create.file.description=Crear nuevo archivo Swift
create.file.dialog.title=Nuevo archivo Swift
create.file.kind=Tipo(&K)\:
create.file.kind.file=Archivo
create.file.title=Archivo Swift
create.file.type.description=Crear nuevo tipo Swift
create.file.type.dialog.title=Nuevo tipo Swift
create.file.type.dialog.title.with.kind=Nuevo {0} Swift
create.file.type.title=Tipo Swift
create.from.usage.choose.target.type=Elegir tipo destino
create.from.usage.create.function.command=Crear función desde uso
create.from.usage.create.init.command=Crear inicializador desde uso
create.from.usage.create.type.command=Crear nuevo tipo Swift
create.from.usage.create.variable.command=Crear variable desde uso
create.from.usage.location.in=(en {0})
create.from.usage.location.new.file=Nuevo archivo
create.from.usage.location.this.file=Este archivo
doc.comments.enable.markdown=Habilitar plugin Markdown para formatear comentarios de documentación
editor.appearance.error.hints=Mostrar sugerencias de error Swift
editor.appearance.type.hints=Mostrar sugerencias de tipo Swift
error.cannot.perform.refactoring=No se puede realizar la refactorización
error.no.expression.found=No se encontró expresión
extract.method.0.1.will.be.shadowed.by.2.1={0} ''{1}'' será ocultado por {2} ''{1}''
extract.method.at.least.two.parameters.have.name.0=Al menos dos parámetros tienen el nombre ''{0}''
extract.method.cannot.extract.mutable.value=No se puede extraer valor mutable
extract.method.error.cannot.determine.expr.type=No se puede determinar el tipo de la expresión seleccionada
extract.method.error.cannot.determine.function.result.type=No se puede determinar el tipo de retorno de la función
extract.method.error.cannot.determine.parameters.type=No se puede determinar el tipo de los parámetros
extract.method.error.cannot.extract.expr.with.var.declarations=No se puede extraer expresión con declaraciones de variables
extract.method.error.cannot.extract.with.returns=No se puede extraer una función que contiene instrucciones return
extract.method.error.fragment.should.be.inside.code.block=El fragmento seleccionado debe estar dentro de un bloque de código
extract.method.error.multiple.exit.points=El fragmento seleccionado tiene múltiples puntos de salida
extract.method.error.result.builder.block=No se puede extraer una función dentro de un closure de result builder
extract.method.error.should.represent.expr.or.statements=El bloque seleccionado debe representar un conjunto de declaraciones o una expresión
extract.method.function.0.will.conflict.with.1.2=La función ''{0}'' entrará en conflicto con {1} {2}
extract.method.method.0.will.conflict.with.1.in.2.3=El método ''{0}'' entrará en conflicto con {1} en {2} ''{3}''
extract.method.title.closure=Extraer closure
extract.method.title.function=Extraer función
extract.method.title.method=Extraer método
extract.method.variable.0.will.no.longer.be.accessible=La variable ''{0}'' no será accesible después de la refactorización
find.usages.base.member.warning.message.default.implementation.method={0} es la implementación por defecto del método declarado en {1}\n\n¿Buscar usos del {3,choice,1\#método|2\#método} del protocolo?
find.usages.base.member.warning.message.default.implementation.property={0} es la implementación por defecto de la propiedad declarada en {1}\n\n¿Buscar usos de la {3,choice,1\#propiedad|2\#propiedad} del protocolo?
find.usages.base.member.warning.message.default.implementation.subscript={0} es la implementación por defecto del subscript declarado en {1}\n\n¿Buscar usos del {3,choice,1\#subscript|2\#subscript} del protocolo?
find.usages.base.member.warning.message.implements.method={0} implementa el método declarado en {1}\n\n¿Buscar usos del {3,choice,1\#método|2\#método} del protocolo?
find.usages.base.member.warning.message.implements.property={0} implementa la propiedad declarada en {1}\n\n¿Buscar usos de la {3,choice,1\#propiedad|2\#propiedad} del protocolo?
find.usages.base.member.warning.message.implements.subscript={0} implementa el subscript declarado en {1}\n\n¿Buscar usos del {3,choice,1\#subscript|2\#subscript} del protocolo?
find.usages.base.member.warning.message.override.implemented.method={0} sobrescribe el método declarado en {2} e implementa el método declarado en {1}\n\n¿Buscar usos del {3,choice,1\#método|2\#método} base y del protocolo?
find.usages.base.member.warning.message.override.implemented.property={0} sobrescribe la propiedad declarada en {2} e implementa la propiedad declarada en {1}\n\n¿Buscar usos de la {3,choice,1\#propiedad|2\#propiedad} base y del protocolo?
find.usages.base.member.warning.message.override.implemented.subscript={0} sobrescribe el subscript declarado en {2} e implementa el subscript declarado en {1}\n\n¿Buscar usos del {3,choice,1\#subscript|2\#subscript} base y del protocolo?
find.usages.base.member.warning.message.override.method={0} sobrescribe el método declarado en {2}\n\n¿Buscar usos del {3,choice,1\#método|2\#método} base?
find.usages.base.member.warning.message.override.property={0} sobrescribe la propiedad declarada en {2}\n\n¿Buscar usos de la {3,choice,1\#propiedad|2\#propiedad} base?
find.usages.base.member.warning.message.override.subscript={0} sobrescribe el subscript declarado en {2}\n\n¿Buscar usos del {3,choice,1\#subscript|2\#subscript} base?
find.usages.base.member.warning.title=Advertencia
find.usages.option.search.in.not.compiled.code=Mostrar usos potenciales en código condicionalmente no compilado
generate.0.title=Generar {0}
generate.cannot.generate.0.for.1=No se puede generar {0} para {1}
generate.description.multi.string.template=String multilínea
generate.description.single.string.template=String única
generate.description.string.concatenation.template=Múltiples strings con concatenación (+)
generate.equals.hash=equals y hash
generate.equals.hash.choose.in.0=Elegir propiedades para incluir en {0}
generate.if.statements.equals.template=Múltiples sentencias if
generate.init.choose.properties=Elegir propiedades para inicializar
generate.init.choose.super.init=Elegir inicializador de superclase
generate.init.init.already.exists=El inicializador ya existe
generate.method.0.and.operator.function.1.are.already.defined=El método ''{0}'' y la función operador ''{1}'' ya están definidos. ¿Eliminarlos y continuar?
generate.method.0.and.property.1.are.already.defined=El método ''{0}'' y la propiedad ''{1}'' ya están definidos. ¿Eliminarlos y continuar?
generate.method.0.is.already.defined=El método ''{0}'' ya está definido. ¿Eliminarlo y continuar?
generate.method.0.property.1.and.operator.function.2.are.already.defined=El método ''{0}'', la propiedad ''{1}'' y la función operador ''{2}'' ya están definidos. ¿Eliminarlos y continuar?
generate.operator.function.0.is.already.defined=La función operador ''{0}'' ya está definida. ¿Eliminarla y continuar?
generate.preparing.generation.title=Preparando generación...
generate.property.0.and.operator.function.1.are.already.defined=La propiedad ''{0}'' y la función operador ''{1}'' ya están definidas. ¿Eliminarlas y continuar?
generate.property.0.is.already.defined=La propiedad ''{0}'' ya está definida. ¿Eliminarla y continuar?
generate.single.expression.equals.template=Expresión única
generate.template.title=Plantilla(&T)\:
got.it.no.refactoring.in.not.compiled.code.header=Refactorización no disponible
got.it.no.refactoring.in.not.compiled.code.message=La refactorización no está disponible en código condicionalmente no compilado. Cambie a un contexto de análisis diferente para habilitar la rama `\#if directive` circundante.
got.it.search.not.compiled.code.header=Usos en código condicionalmente no compilado
got.it.search.not.compiled.code.message=La búsqueda de usos en código condicionalmente no compilado se puede habilitar desde el diálogo Renombrar. Para mostrar el diálogo Renombrar, presione {0} nuevamente.
goto.base.type=Tipo base
goto.class.kind=Tipo
goto.class.kinds.title=Tipos
goto.super.action=Seleccionar {0}
goto.super.class=Clase o protocolo
goto.super.extension.of.0=Extensión de {0}
goto.super.location={0} (en {1})
goto.super.menu.action=Super {0}(_U)
goto.super.typealias=Typealias o tipo asociado
inheritance.relation.implements=Implementa {0}
inheritance.relation.is.implemented=Es implementado
inheritance.relation.is.overridden=Es sobrescrito
inheritance.relation.is.subclassed=Es subclasificado
inheritance.relation.overrides=Sobrescribe {0}
inline.0.action.1=Inlinear {0} {1}
inline.0.command.1=Inlinear {0} {1}
inline.all.invocations.and.keep.the.0=Inlinear todas las invocaciones y mantener {0}(&A)
inline.all.invocations.and.remove.the.0=Inlinear todas las invocaciones y eliminar {0}(&A)
inline.all.references.and.keep.the.0=Inlinear todas las referencias y mantener {0}(&A)
inline.all.references.and.remove.the.0=Inlinear todas las referencias y eliminar {0}(&A)
inline.all.typealias.and.keep.the.0=Inlinear todos los usos y mantener {0}(&A)
inline.all.typealias.and.remove.the.0=Inlinear todos los usos y eliminar {0}(&A)
inline.error.cannot.access.symbol.0=No se puede acceder al símbolo {0}
inline.error.cannot.resolve.symbol=No se puede resolver el símbolo
inline.error.function.definition.contains.no.body=La definición de función no contiene cuerpo
inline.error.function.no.return.statement=La función carece de sentencia return
inline.error.implements.function.from.0=El método a inlinear implementa un método de {0}
inline.error.inline.function.has.conditionally.compiled.code=La función podría no inlinearse correctamente porque contiene código condicionalmente no compilado
inline.error.inline.function.only.in.swift.code=El inlineado de funciones solo está soportado en código Swift
inline.error.inline.recursive.function.only.on.invocations=El inlineado de funciones recursivas solo está soportado en invocaciones
inline.error.inline.typealias.has.conditionally.compiled.code=El typealias podría no inlinearse correctamente porque contiene código condicionalmente no compilado
inline.error.inline.variable.has.conditionally.compiled.code=La variable podría no inlinearse correctamente porque contiene código condicionalmente no compilado
inline.error.inline.variable.no.single.definition=No se encontró una definición única para inlinear
inline.error.inlined.expression.should.be.part.of.statement=La expresión inlineada debería ser parte de una sentencia
inline.error.invalid.function.arguments=Argumentos de función inválidos
inline.error.is.overridden.by.function.from.0=El método a inlinear es sobrescrito por un método de {0}
inline.error.not.function.call=No es una llamada a función
inline.error.overrides.associated.type.from.0=El typealias a inlinear sobrescribe un tipo asociado de {0}
inline.error.overrides.function.from.0=El método a inlinear sobrescribe un método de {0}
inline.error.unexpected.error=Error inesperado durante el inlineado
inline.function.description=Reemplazar llamada a función por su cuerpo
inline.function.label.kind.0.name.1=Inlinear {0} {1}\:
inline.function.label.kind.0.name.1.2.occurrences=Inlinear {2} llamadas a {0} {1}\:
inline.function.label.kind.0.name.1.occurence=Inlinear llamada a {0} {1}\:
inline.include.doc.comments=Inlinear comentarios de documentación
inline.recursively=Inlinear recursivamente
inline.this.invocation.only.and.keep.the.0=Inlinear solo esta invocación y mantener {0}
inline.this.reference.only.and.keep.the.0=Inlinear solo esta referencia y mantener {0}
inline.this.typealias.only.and.keep.the.0=Inlinear solo este uso y mantener {0}
inline.title.0=Inlinear {0}
inline.typealias.label.kind.0.name.1=Inlinear {0} {1}\:
inline.typealias.label.kind.0.name.1.2.occurrences=Inlinear {2} usos de {0} {1}\:
inline.typealias.label.kind.0.name.1.occurence=Inlinear uso de {0} {1}\:
inline.variable.label.kind.0.name.1=Inlinear {0} {1}\:
inline.variable.label.kind.0.name.1.2.occurrences=Inlinear {2} referencias a {0} {1}\:
inline.variable.label.kind.0.name.1.occurence=Inlinear referencia a {0} {1}\:
inspection.conditionally.not.compiled.code=Código condicionalmente no compilado
inspection.missing.doc.comment.parameter.item=Comentario doc y firma de función no coinciden
inspection.missing.doc.comment.parameter.item.error=Parámetro {0} no descrito en el comentario doc
inspection.missing.doc.comment.parameter.item.fix=Actualizar comentario doc
inspection.missing.localization=Falta localización
inspection.missing.localization.all.languages.only=Reportar solo localizaciones faltantes en todos los idiomas
inspection.redundant.attribute=Atributo redundante
inspection.redundant.attribute.error=''@{0}'' es redundante
inspection.redundant.attribute.fix=Eliminar ''@{0}'' redundante
inspection.redundant.closure=Closure redundante
inspection.redundant.closure.error=Creación de closure redundante
inspection.redundant.closure.fix=Inlinear cuerpo
inspection.redundant.nullable.function.type.error=''{0}'' siempre devuelve un tipo no nulo
inspection.redundant.nullable.type=Tipo nullable redundante
inspection.redundant.nullable.type.error=''{0}'' siempre es un tipo no nulo
inspection.redundant.nullable.type.fix=Eliminar '?' redundante
inspection.redundant.return=Return redundante
inspection.redundant.return.error='return' es redundante
inspection.redundant.return.fix=Eliminar 'return' redundante
inspection.unnecessary.argument.list=Paréntesis de argumentos vacíos antes de closure
inspection.unnecessary.argument.list.error=Paréntesis de argumentos innecesarios
inspection.unnecessary.argument.list.fix=Eliminar paréntesis de argumentos innecesarios
inspection.unnecessary.parentheses=Paréntesis innecesarios
inspection.unnecessary.parentheses.error=Paréntesis innecesarios
inspection.unnecessary.parentheses.fix=Eliminar paréntesis innecesarios
inspection.unnecessary.self='self' innecesario
inspection.unnecessary.self.error='self' es innecesario
inspection.unnecessary.self.fix=Eliminar 'self' innecesario
inspection.unnecessary.tuple.wrap=Envoltura de tupla innecesaria
inspection.unnecessary.tuple.wrap.error=La tupla de un solo elemento puede reemplazarse por el tipo
inspection.unnecessary.tuple.wrap.fix=Reemplazar tupla de un solo elemento por el tipo
intention.access.control.error.access=No se puede acceder a {0}\: es {1} en {2}
intention.access.control.error.access.dynamic=No se puede acceder a {0}\: el subscript dinámico es {1} en {2}
intention.access.control.error.override=No se puede sobrescribir {0}\: es {1} en {2}
intention.access.control.fix=Hacer {0} {1} en {2}
intention.access.control.remove.setter=Eliminar {1} de {0}
intention.add.catch.clause=Agregar 'catch'
intention.add.default.catch.clause=Agregar cláusula 'catch' por defecto
intention.add.digit.separators=Agregar separadores de dígitos
intention.add.explicit.qualifier=Agregar calificador explícito
intention.add.explicit.type=Agregar tipo explícito
intention.add.try.to.expression=Agregar 'try' a la expresión
intention.add.try.to.iteration=Agregar 'try' a la iteración
intention.category.swift=Swift
intention.convert.to.binary=Convertir a binario
intention.convert.to.closure.argument=Convertir a argumento closure
intention.convert.to.decimal=Convertir a decimal
intention.convert.to.hex=Convertir a hexadecimal
intention.convert.to.multiline.string=Convertir a literal de string multilínea
intention.convert.to.octal=Convertir a octal
intention.convert.to.string=Convertir a literal de string de una línea
intention.convert.to.trailing.closure=Convertir a trailing closure
intention.create.actor.0=Crear actor ''{0}''
intention.create.actor.0.in.new.file=Crear actor ''{0}'' en nuevo archivo
intention.create.actor.0.nested.in.1=Crear actor ''{0}'' anidado en ''{1}''
intention.create.class.0=Crear clase ''{0}''
intention.create.class.0.in.new.file=Crear clase ''{0}'' en nuevo archivo
intention.create.class.0.nested.in.1=Crear clase ''{0}'' anidada en ''{1}''
intention.create.enum.0=Crear enum ''{0}''
intention.create.enum.0.in.new.file=Crear enum ''{0}'' en nuevo archivo
intention.create.enum.0.nested.in.1=Crear enum ''{0}'' anidado en ''{1}''
intention.create.enum.case.0=Crear case de enum ''{0}''
intention.create.global.function.0=Crear función global ''{0}''
intention.create.global.variable.0=Crear variable global ''{0}''
intention.create.initializer=Crear inicializador
intention.create.local.variable.0=Crear variable local ''{0}''
intention.create.method.0=Crear método ''{0}''
intention.create.method.0.in.extension=Crear método de extensión ''{0}''
intention.create.new.swift.declaration=Crear nueva declaración Swift
intention.create.new.swift.type.in.a.new.file=Crear nuevo tipo Swift en un nuevo archivo
intention.create.property.0=Crear propiedad ''{0}''
intention.create.property.0.in.extension=Crear propiedad de extensión ''{0}''
intention.create.protocol.0=Crear protocolo ''{0}''
intention.create.protocol.0.in.new.file=Crear protocolo ''{0}'' en nuevo archivo
intention.create.protocol.0.nested.in.1=Crear protocolo ''{0}'' anidado en ''{1}''
intention.create.struct.0=Crear struct ''{0}''
intention.create.struct.0.in.new.file=Crear struct ''{0}'' en nuevo archivo
intention.create.struct.0.nested.in.1=Crear struct ''{0}'' anidado en ''{1}''
intention.create.type.0=Crear tipo ''{0}''
intention.create.type.0.in.new.file=Crear tipo ''{0}'' en nuevo archivo
intention.create.type.0.nested.in.1=Crear tipo ''{0}'' anidado en ''{1}''
intention.create.type.method.0=Crear método de tipo ''{0}''
intention.create.type.method.0.in.extension=Crear método de tipo de extensión ''{0}''
intention.create.type.property.0=Crear propiedad de tipo ''{0}''
intention.create.type.property.0.in.extension=Crear propiedad de tipo de extensión ''{0}''
intention.decrease.string.escape.level=Disminuir nivel de escape de string
intention.demorgans.law=Ley de De Morgan
intention.demorgans.law.format=Reemplazar ''{0}'' por ''{1}''
intention.extract.class.0.to.extension=Extraer clase ''{0}'' a extensión
intention.extract.class.0.to.type.declaration=Extraer clase ''{0}'' a declaración de tipo
intention.extract.conformance.to.extension.cannot.add.protocol.conformance.to.protocol=Una extensión de protocolo no puede conformar a otros protocolos
intention.extract.conformance.to.extension.cannot.extract.class=No se puede extraer la herencia de clase ''{0}'' a una extensión
intention.extract.conformance.to.extension.familyName=Extraer conformidad a extensión
intention.extract.conformance.to.extension.type.cannot.be.local=No se puede crear una extensión en un ámbito local
intention.extract.conformance.to.extension.type.must.be.fileprivate=El tipo debe ser al menos fileprivate
intention.extract.enum.0.to.extension=Extraer enum ''{0}'' a extensión
intention.extract.enum.0.to.type.declaration=Extraer enum ''{0}'' a declaración de tipo
intention.extract.from.extension.to.type.declaration.error.message.title=Extraer miembro a su declaración de tipo original
intention.extract.from.extension.to.type.declaration.familyName=Extraer miembro a su declaración de tipo original
intention.extract.from.extension.to.type.declaration.original.analysis.on.type.not.allowed=La declaración de tipo original está fuera de alcance
intention.extract.from.extension.to.type.declaration.original.type.not.found=No se encuentra la declaración de tipo original
intention.extract.function.0.to.extension=Extraer función ''{0}'' a extensión
intention.extract.function.0.to.type.declaration=Extraer función ''{0}'' a declaración de tipo
intention.extract.initializer.to.extension=Extraer inicializador a extensión
intention.extract.initializer.to.type.declaration=Extraer inicializador a declaración de tipo
intention.extract.member.to.extension.cannot.extract.from.protocol=No se puede extraer del protocolo
intention.extract.member.to.extension.type.cannot.be.local=No se puede crear extensión en ámbito local
intention.extract.member.to.extension.type.must.be.fileprivate=El tipo debe ser al menos fileprivate
intention.extract.members.to.extension.error.message.title=Extraer miembros a extensión
intention.extract.members.to.extension.familyName=Extraer miembros a extensión
intention.extract.multiple.members.to.extension=Extraer miembros a extensión
intention.extract.multiple.members.to.type.declaration=Extraer miembros a declaración de tipo
intention.extract.property.0.to.extension=Extraer propiedad ''{0}'' a extensión
intention.extract.property.0.to.type.declaration=Extraer propiedad ''{0}'' a declaración de tipo
intention.extract.struct.0.to.extension=Extraer struct ''{0}'' a extensión
intention.extract.struct.0.to.type.declaration=Extraer struct ''{0}'' a declaración de tipo
intention.extract.subscript.to.extension=Extraer subíndice a extensión
intention.extract.subscript.to.type.declaration=Extraer subíndice a declaración de tipo
intention.extract.typealias.0.to.extension=Extraer alias de tipo ''{0}'' a extensión
intention.extract.typealias.0.to.type.declaration=Extraer alias de tipo ''{0}'' a declaración de tipo
intention.flip.binary.expression=Invertir expresión binaria
intention.flip.binary.expression.format=Invertir ''{0}''
intention.flip.comparison=Invertir comparación
intention.flip.comparison.format=Invertir ''{0}'' a ''{1}''
intention.generate.documentation.comment=Agregar comentario de documentación
intention.implement.equals=Implementar equals faltante
intention.implement.hash=Implementar hash faltante
intention.implement.members.error=El tipo {0} no cumple con {1} {2}
intention.implement.members.implement.missing=Implementar {0} {0, choice,1\#miembro|2\#miembros} faltante(s)
intention.implement.missing.equals.hash=Implementar equals y hash faltantes
intention.increase.string.escape.level=Aumentar nivel de escape de cadena
intention.invert.if.statement=Invertir sentencia 'if'
intention.join.declaration.and.assignment=Unir declaración y asignación
intention.localize.string=Localizar cadena
intention.localize.string.title.case=Localizar cadena
intention.mark.the.enclosing.function.as.throws=Agregar 'throws' a la firma de la función
intention.merge.conditions=Combinar condiciones
intention.merge.else.if=Combinar 'else if'
intention.merge.nested.if=Combinar 'if' anidado
intention.negate.comparison=Negar comparación
intention.negate.comparison.format=Negar ''{0}'' a ''{1}''
intention.remove.digit.separators=Eliminar separadores de dígitos
intention.remove.explicit.type=Eliminar tipo explícito
intention.replace.guard.with.if=Reemplazar 'guard' con 'if'
intention.replace.if.with.guard=Reemplazar 'if' con 'guard'
intention.replace.rethrows.with.throws=Reemplazar 'rethrows' con 'throws'
intention.simplifyifelse.collapse.conditional.expression=Contraer expresión condicional
intention.simplifyifelse.collapse.guard=Contraer 'guard'
intention.simplifyifelse.collapse.ifelse=Contraer 'if else'
intention.simplifyifelse.familyName=Simplificar if-else
intention.simplifyifelse.replace.guard.with.0=Reemplazar ''guard'' con ''{0}''
intention.simplifyifelse.replace.if.else.with.0=Reemplazar ''if else'' con ''{0}''
intention.simplifyifelse.simplify=Simplificar
intention.simplifyifelse.simplify.guard=Simplificar 'guard'
intention.simplifyifelse.simplify.if.else=Simplificar 'if else'
intention.split.condition=Dividir en condiciones separadas
intention.split.declaration.and.assignment=Dividir en declaración y asignación
intention.split.else.if=Dividir 'else if'
intention.split.into.separate.declarations=Dividir en declaraciones separadas
intention.split.nested.if=Dividir en 'if' anidados
intention.suppress.call.error.with.try=Suprimir este error con 'try\!'
intention.surround.with.do.catch=Envolver con 'do/catch'
intention.swift.module.info=Mostrar información del módulo
intention.switch.resolve.configuration.specified=Cambiar a ''{0}'' para hacer esta rama válida
intention.unresolved.reference.0.1=Importar {0} ''{1}''
intention.unwrap.with.guard.let=Desenvolver con 'guard let'
intention.unwrap.with.if.let=Desenvolver con 'if let'
intention.wrong.return.type.fix=Corregir tipo de retorno de función
intention.wrong.return.type.fix.with.types=Hacer que ''{0}'' retorne ''{1}''
introduce.variable.declare.with.var=Declarar con var(&V)
introduce.variable.expression.will.be.ambiguous.without.explicit.type=La expresión será ambigua<br/>sin tipo explícito
introduce.variable.specify.type.explicitly=Especificar tipo explícitamente(&T)
notification.group.plugin.errors=Fallo del servicio de lenguaje Swift
optimize.imports.rearranged.imports=Imports reordenados
optimize.imports.removed.0.added.1.imports={0} {0,choice,0\#import|1\#import|1<imports} eliminado(s), {1} {1,choice,0\#import|1\#import|1<imports} agregado(s)
optimize.imports.removed.0.imports={0} {0,choice,0\#import|1\#import|1<imports} eliminado(s)
override.implement.elements.to.implement.chooser.title=Seleccionar miembros a implementar
override.implement.elements.to.override.chooser.title=Seleccionar miembros a sobreescribir
override.implement.elements.to.override.implement.chooser.title=Seleccionar miembros a sobreescribir/implementar
override.implement.implement.not.allowed=No se puede implementar
override.implement.nothing.to.implement=Nada que implementar
override.implement.nothing.to.override=Nada que sobreescribir
override.implement.override.not.allowed=No se puede sobreescribir
override.implement.progress=Procesando miembros a sobreescribir/implementar...
override.implement.show.members.to.implement.title=Mostrar miembros a implementar
override.implement.show.no.optional.members=Mostrar miembros opcionales (ninguno)
override.implement.show.only.optional.members=Mostrar miembros opcionales (solo opcionales)
override.implement.show.optional.member=Mostrar 1 miembro opcional(&O)
override.implement.show.optional.members=Mostrar {0} miembros opcionales(&O)
refactor.0.overrides.associated.type.of.1={0} sobreescribe tipo asociado de {1}
refactor.0.overrides.declaration.in.1={0} sobreescribe declaración en {1}
refactor.0.overrides.initializer.of.1={0} sobreescribe inicializador de {1}
refactor.0.overrides.method.of.1={0} sobreescribe método de {1}
refactor.0.overrides.property.of.1={0} sobreescribe propiedad de {1}
refactor.0.overrides.subscript.of.1={0} sobreescribe subíndice de {1}
refactor.base.declaration=Refactorizar {0,choice,1\#declaración|2\#declaraciones} base
refactor.only.current.declaration=Refactorizar solo declaración actual
refactoring.option.search.in.not.compiled.code=Aplicar a código condicionalmente no compilado
rename.containing.file.dialog.description=Renombrar archivo contenedor a\:
rename.containing.file.dialog.title=Renombrar archivo contenedor
rename.containing.file.entity.name=Archivo Include
rename.error.dynamic.called.values=No se pueden renombrar valores llamados dinámicamente
rename.error.message.renaming.swift.member.elements.in.objective.c.code.is.not.supported=No se admite renombrar elementos miembro de Swift en código Objective-C
rename.error.title=Swift - Renombrar
rename.inheritor.entity.name=Heredero
rename.inheritors=Renombrar herederos
rename.inheritors.to=Renombrar herederos a\:
rename.init.is.not.supported=No se admite renombrar inicializadores Swift
rename.related.dialog.description=Renombrar declaraciones relacionadas a\:
rename.related.dialog.title=Renombrar declaraciones relacionadas
rename.related.entity.name=Declaración relacionada
rename.self.is.not.supported=No se admite renombrar el parámetro self
rename.title=Renombrar nombre Swift
searching.for.implementations=Buscando implementaciones...
searching.for.overriders=Buscando sobreescrituras...
searching.for.subclasses=Buscando subclases...
sourcekit.fix.it=Aplicar Fix-it
sourcekit.inspections=Inspecciones SourceKit
swift-format.dump.progress=Creando archivo de configuración '.swift-format' predeterminado
swift-format.format.progress=Formateando {0} con Swift-Format
swift.name=Swift
syntax.error.call.can.throw.but.it.is.executed.in.a.non.throwing.autoclosure=La llamada puede lanzar pero se ejecuta en una autoclosure que no lanza
syntax.error.call.can.throw.but.it.is.not.marked.with.try.and.it.is.executed.in.a.non.throwing.autoclosure=La llamada puede lanzar pero no está marcada con 'try' y se ejecuta en una autoclosure que no lanza
syntax.error.call.can.throw.in.default.argument=La llamada puede lanzar pero no se pueden lanzar errores desde un argumento predeterminado
syntax.error.call.can.throw.in.property.initializer=La llamada puede lanzar pero no se pueden lanzar errores desde un inicializador de propiedad
syntax.error.call.can.throw.not.marked.with.try=La llamada puede lanzar pero no está marcada con 'try'
syntax.error.call.can.throw.not.marked.with.try.not.exhaustive=La llamada puede lanzar pero no está marcada con 'try' y el catch envolvente no es exhaustivo
syntax.error.call.can.throw.not.marked.with.try.not.handled=La llamada puede lanzar pero no está marcada con 'try' y el error no está manejado
syntax.error.call.rethrows.function.can.only.throw.parameter.call.not.handled=La llamada puede lanzar pero el error no está manejado; una función marcada como 'rethrows' solo puede lanzar cuando sus parámetros lanzan
syntax.error.call.rethrows.function.can.only.throw.parameter.call.not.marked.with.try.not.handled=La llamada puede lanzar pero no está marcada con 'try' y el error no está manejado; una función marcada como 'rethrows' solo puede lanzar cuando sus parámetros lanzan
syntax.error.duplicate.platform=Plataforma ''{0}'' ya especificada
syntax.error.error.is.not.handled=El error no está manejado porque la función envolvente no está declarada como 'throws'
syntax.error.error.is.not.handled.not.exhaustive=El error no está manejado porque el catch envolvente no es exhaustivo
syntax.error.errors.are.not.handled=Los errores lanzados desde aquí no están manejados
syntax.error.errors.are.not.handled.not.exhaustive=Los errores lanzados desde aquí no están manejados porque el catch envolvente no es exhaustivo
syntax.error.hashbang.line.is.allowed.only.in.the.first.line.of.the.file=La línea hashbang solo está permitida en la primera línea del archivo
syntax.error.hashbang.line.is.allowed.only.in.the.first.line.of.the.main.file=La línea hashbang solo está permitida en la primera línea del archivo principal
syntax.error.hashbang.line.is.allowed.only.in.the.main.file=La línea hashbang solo está permitida en el archivo principal
syntax.error.interpolation.can.throw.but.it.is.executed.in.a.non.throwing.autoclosure=La interpolación puede lanzar pero se ejecuta en una autoclosure que no lanza
syntax.error.interpolation.can.throw.but.it.is.not.marked.with.try.and.it.is.executed.in.a.non.throwing.autoclosure=La interpolación puede lanzar pero no está marcada con 'try' y se ejecuta en una autoclosure que no lanza
syntax.error.interpolation.can.throw.in.default.argument=La interpolación puede lanzar pero no se pueden lanzar errores desde un argumento predeterminado
syntax.error.interpolation.can.throw.in.property.initializer=La interpolación puede lanzar pero no se pueden lanzar errores desde un inicializador de propiedad
syntax.error.interpolation.can.throw.not.marked.with.try=La interpolación puede lanzar pero no está marcada con 'try'
syntax.error.interpolation.can.throw.not.marked.with.try.not.exhaustive=La interpolación puede lanzar pero no está marcada con 'try' y el catch envolvente no es exhaustivo
syntax.error.interpolation.can.throw.not.marked.with.try.not.handled=La interpolación puede lanzar pero no está marcada con 'try' y el error no está manejado
syntax.error.interpolation.rethrows.function.can.only.throw.parameter.call.not.handled=La interpolación puede lanzar pero el error no está manejado; una función marcada como 'rethrows' solo puede lanzar cuando sus parámetros lanzan
syntax.error.interpolation.rethrows.function.can.only.throw.parameter.call.not.marked.with.try.not.handled=La interpolación puede lanzar pero no está marcada con 'try' y el error no está manejado; una función marcada como 'rethrows' solo puede lanzar cuando sus parámetros lanzan
syntax.error.iteration.can.throw.not.marked.with.try=La iteración puede lanzar pero no está marcada con 'try'
syntax.error.iteration.can.throw.not.marked.with.try.not.exhaustive=La iteración puede lanzar pero no está marcada con 'try' y el catch envolvente no es exhaustivo
syntax.error.iteration.can.throw.not.marked.with.try.not.handled=La iteración puede lanzar pero no está marcada con 'try' y el error no está manejado
syntax.error.operator.can.throw.not.marked.with.try=El operador puede lanzar pero la expresión no está marcada con 'try'
syntax.error.property.can.throw.but.it.is.executed.in.a.non.throwing.autoclosure=El acceso a propiedad puede lanzar pero se ejecuta en una autoclosure que no lanza
syntax.error.property.can.throw.but.it.is.not.marked.with.try.and.it.is.executed.in.a.non.throwing.autoclosure=El acceso a propiedad puede lanzar pero no está marcado con 'try' y se ejecuta en una autoclosure que no lanza
syntax.error.property.can.throw.in.default.argument=El acceso a propiedad puede lanzar pero no se pueden lanzar errores desde un argumento predeterminado
syntax.error.property.can.throw.in.property.initializer=El acceso a propiedad puede lanzar pero no se pueden lanzar errores desde un inicializador de propiedad
syntax.error.property.can.throw.not.marked.with.try=El acceso a propiedad puede lanzar pero no está marcado con 'try'
syntax.error.property.can.throw.not.marked.with.try.not.exhaustive=El acceso a propiedad puede lanzar pero no está marcado con 'try' y el catch envolvente no es exhaustivo
syntax.error.property.can.throw.not.marked.with.try.not.handled=El acceso a propiedad puede lanzar pero no está marcado con 'try' y el error no está manejado
syntax.error.property.rethrows.function.can.only.throw.parameter.call.not.handled=El acceso a propiedad puede lanzar pero el error no está manejado; una función marcada como 'rethrows' solo puede lanzar cuando sus parámetros lanzan
syntax.error.property.rethrows.function.can.only.throw.parameter.call.not.marked.with.try.not.handled=El acceso a propiedad puede lanzar pero no está marcado con 'try' y el error no está manejado; una función marcada como 'rethrows' solo puede lanzar cuando sus parámetros lanzan
syntax.error.rethrows.function.can.only.throw.parameter.call=Una función marcada como 'rethrows' solo puede lanzar cuando sus parámetros lanzan
syntax.error.rethrows.function.must.take.a.throwing.function.argument=Una función 'rethrows' debe tomar un argumento de función que lance
syntax.error.rethrows.is.not.allowed.in.closures=No se permite 'rethrows' en closures
syntax.error.rethrows.is.not.allowed.in.function.type.elements=Solo las declaraciones de función pueden marcarse como 'rethrows'
syntax.error.rethrows.is.not.allowed.in.subscripts=No se permite 'rethrows' en subíndices
syntax.error.subscript.can.throw.but.it.is.executed.in.a.non.throwing.autoclosure=El acceso a subíndice puede lanzar pero se ejecuta en una autoclosure que no lanza
syntax.error.subscript.can.throw.but.it.is.not.marked.with.try.and.it.is.executed.in.a.non.throwing.autoclosure=El acceso a subíndice puede lanzar pero no está marcado con 'try' y se ejecuta en una autoclosure que no lanza
syntax.error.subscript.can.throw.in.default.argument=El acceso a subíndice puede lanzar pero no se pueden lanzar errores desde un argumento predeterminado
syntax.error.subscript.can.throw.in.property.initializer=El acceso a subíndice puede lanzar pero no se pueden lanzar errores desde un inicializador de propiedad
syntax.error.subscript.can.throw.not.marked.with.try=El acceso a subíndice puede lanzar pero no está marcado con 'try'
syntax.error.subscript.can.throw.not.marked.with.try.not.exhaustive=El acceso a subíndice puede lanzar pero no está marcado con 'try' y el catch envolvente no es exhaustivo
syntax.error.subscript.can.throw.not.marked.with.try.not.handled=El acceso a subíndice puede lanzar pero no está marcado con 'try' y el error no está manejado
syntax.error.subscript.rethrows.function.can.only.throw.parameter.call.not.handled=El acceso a subíndice puede lanzar pero el error no está manejado; una función marcada como 'rethrows' solo puede lanzar cuando sus parámetros lanzan
syntax.error.subscript.rethrows.function.can.only.throw.parameter.call.not.marked.with.try.not.handled=El acceso a subíndice puede lanzar pero no está marcado con 'try' y el error no está manejado; una función marcada como 'rethrows' solo puede lanzar cuando sus parámetros lanzan
syntax.error.thrown.expression.type.0.does.not.conform.to.ErrorType=El tipo ''{0}'' de la expresión lanzada no cumple con ''{1}''
syntax.error.throws.is.not.allowed.in.subscripts=No se permite 'throws' en subíndices
syntax.error.try.cannot.appear.to.the.right='try' no puede aparecer a la derecha de un operador que no sea de asignación
syntax.error.try.cannot.appear.to.the.right.fix=Mover 'try' a la izquierda
syntax.error.typealias.without.assignment=La declaración de alias de tipo carece de asignación
syntax.error.unrecognized.platform.name.0=Nombre de plataforma no reconocido ''{0}''
syntax.error.variable.declaration.with.multiple.variables.cannot.have.explicit.getters.setters=Una declaración 'var' con múltiples variables no puede tener getters/setters explícitos
syntax.error.variable.declaration.with.multiple.variables.cannot.have.implicit.getter.clause=Una declaración 'var' con múltiples variables no puede tener una cláusula getter implícita
syntax.error.variable.declaration.with.multiple.variables.cannot.have.willset.didset.clause=Una declaración 'var' con múltiples variables no puede tener una cláusula willSet/didSet
usage.type.argument.label=Etiqueta de argumento
usage.type.conditionally.not.compiled=Uso potencial en código condicionalmente no compilado
usage.type.extension=Extensión
usage.type.function.declaration=Declaración de función
usage.type.key.path=Expresión de key path
usage.type.operator.declaration=Declaración de operador
usage.type.precedence.group.declaration=Declaración de grupo de precedencia
usage.type.raw.value=Valor raw
usage.type.requirement=Uso en requerimiento
usage.type.type.alias=Alias de tipo
usage.type.type.parameter=Parámetro de tipo