inspection.jvm.languages.group.name=Lenguajes JVM
jvm.inspections.sql.source.to.sink.flow.display.name=Se usa una cadena no segura como SQL
jvm.inspections.sql.source.to.sink.flow.too.complex=Demasiado complejo para verificar que la cadena usada en SQL sea segura
jvm.inspections.sql.source.to.sink.flow.unsafe=La cadena usada en SQL puede no ser segura
jvm.inspections.sql.source.unsafe.to.sink.flow.check.private.final.field=Considerar campos private o final en la misma clase como seguros
jvm.inspections.sql.source.unsafe.to.sink.flow.check.private.final.field.comment=Si está habilitado, los campos private o final se consideran seguros, de lo contrario se procesarán según las reglas
jvm.inspections.sql.source.unsafe.to.sink.flow.check.private.methods=Considerar los parámetros de métodos private como seguros
jvm.inspections.sql.source.unsafe.to.sink.flow.check.private.methods.comment=Si está deshabilitado, los parámetros de métodos private se considerarán como desconocidos
jvm.inspections.sql.source.unsafe.to.sink.flow.check.warn.if.complex=Reportar cadenas demasiado complejas para verificar
jvm.inspections.sql.source.unsafe.to.sink.flow.check.warn.if.complex.comment=Puede ser útil verificar estas cadenas manualmente
jvm.inspections.sql.source.unsafe.to.sink.flow.safe.class=Clases seguras\:
jvm.inspections.sql.source.unsafe.to.sink.flow.safe.class.comment=Se considera que estas clases contienen solo datos seguros
jvm.inspections.sql.source.unsafe.to.sink.flow.untainted.annotations=Anotaciones no contaminadas\:
jvm.inspections.sql.source.unsafe.to.sink.flow.untainted.annotations.comment=Estas anotaciones se usarán como anotaciones '@Untainted' durante el análisis
jvm.inspections.sql.source.unsafe.to.sink.flow.untainted.methods=Métodos no contaminados\:
jvm.inspections.sql.source.unsafe.to.sink.flow.untainted.methods.comment=Se considera que estos métodos devuelven solo objetos seguros