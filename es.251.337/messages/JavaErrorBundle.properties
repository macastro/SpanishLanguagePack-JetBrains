abstract.cannot.be.instantiated=''{0}'' es abstract; no se puede instanciar
abstract.method.0.cannot.be.accessed.directly.method.reference.context=El método abstract ''{0}'' no puede ser accedido directamente
abstract.method.in.non.abstract.class=Método abstract en clase no abstract
abstract.methods.cannot.have.a.body=Los métodos abstract no pueden tener cuerpo
actual.type.argument.contradict.inferred.type=El argumento de tipo actual y el tipo inferido se contradicen
ambiguous.method.call=Llamada a método ambigua\: tanto ''{0}'' como ''{1}'' coinciden
ambiguous.method.call.no.match=No se puede resolver el método ''{0}'' en ''{1}''
ambiguous.method.html.tooltip=<html><body><table border\=0><tr><td colspan\={0}>Llamada a método ambigua. Tanto</td></tr><tr>{1}<td>en <b>{2}</b>\\&nbsp;como</td></tr><tr>{3}<td>en <b>{4}</b>\\&nbsp;coinciden</td></tr></table></body></html>
ambiguous.reference=La referencia a ''{0}'' es ambigua, tanto ''{1}'' como ''{2}'' coinciden
an.enclosing.instance.of.type.not.in.scope.method.reference.context=Una instancia envolvente de tipo {0} no está en el alcance
annotation.annotation.type.expected=Se esperaba un tipo de anotación
annotation.cannot.be.local=No se permiten anotaciones locales
annotation.container.abstract=La anotación contenedora ''{0}'' no tiene un valor por defecto para ''{1}''
annotation.container.bad.type=Anotación contenedora inválida ''{0}''\: el método ''value'' debe tener tipo ''{1}''
annotation.container.low.retention=La anotación contenedora ''{0}'' tiene una retención más corta (''{1}'') que la anotación contenida
annotation.container.missed.annotation=La anotación contenedora ''{0}'' no tiene la anotación @{1} requerida
annotation.container.no.value=Anotación contenedora inválida ''{0}''\: no se declaró el método ''value''
annotation.container.not.applicable=La anotación contenedora ''@{0}'' no es aplicable a {1}
annotation.container.wide.target=El target de la anotación contenedora ''{0}'' no es un subconjunto del target de esta anotación
annotation.container.wrong.place=La anotación contenedora ''{0}'' no debe estar presente al mismo tiempo que el elemento que contiene
annotation.cyclic.element.type=Tipo de elemento de anotación cíclico
annotation.duplicate.annotation=Anotación duplicada
annotation.duplicate.attribute=Atributo duplicado ''{0}''
annotation.duplicate.explained=Anotación duplicada. {0}
annotation.illegal.array.initializer=Inicializador ilegal para ''{0}''
annotation.interface.is.not.used=@interface ''{0}'' nunca se utiliza
annotation.interface.members.may.not.have.parameters=Los miembros de @interface no pueden tener parámetros
annotation.invalid.annotation.member.type=Tipo inválido ''{0}'' para miembro de anotación
annotation.may.not.have.extends.list=@interface no puede tener lista extends
annotation.may.not.have.type.parameters=@interface no puede tener parámetros de tipo
annotation.members.may.not.have.throws.list=Los miembros de @interface no pueden tener lista throws
annotation.missing.attribute={0} requerido pero faltante
annotation.missing.method=No se puede encontrar el método ''{0}''
annotation.non.class.literal.attribute.value=El valor del atributo debe ser un literal de clase
annotation.non.constant.attribute.value=El valor del atributo debe ser constante
annotation.non.enum.constant.attribute.value=El valor del atributo debe ser una constante enum
annotation.non.repeatable=La declaración de ''{0}'' no tiene una anotación java.lang.annotation.Repeatable válida
annotation.not.allowed.class=El tipo literal de clase no puede ser anotado
annotation.not.allowed.here=Las anotaciones no están permitidas aquí
annotation.not.allowed.in.permit.list=Las anotaciones no están permitidas en la lista 'permits'
annotation.not.allowed.ref=La anotación no es aplicable a este tipo de referencia
annotation.not.allowed.static=El tipo calificador de miembro static no puede ser anotado
annotation.not.allowed.var=El tipo 'var' no puede ser anotado
annotation.not.allowed.void=El tipo 'void' no puede ser anotado
annotation.not.applicable=''@{0}'' no es aplicable a {1}
annotation.on.static.member.qualifying.type.family.name=Mover anotación de tipo
annotation.type.permits=No se permite cláusula permits para tipo de anotación
annotation.unknown.method=No se puede resolver el método ''{0}''
anonymous.class.implements.interface.cannot.have.qualifier=La clase anónima implementa interfaz; new no puede tener calificador
anonymous.class.implements.interface.cannot.have.type.arguments=La clase anónima implementa interfaz; no puede tener argumentos de tipo
anonymous.classes.must.not.extend.sealed.classes=Las clases anónimas no deben extender clases sealed
array.creation.with.type.arguments=No se puede crear un array con argumentos de tipo
array.initializer.not.allowed=No se permite inicializador de array aquí
array.type.expected=Se esperaba tipo array; encontrado\: ''{0}''
assert.identifier.warn=El uso de 'assert' como identificador no está soportado desde Java 1.4
assignment.to.final.variable=No se puede asignar un valor a la variable final ''{0}''
auto.closeable.resource=recurso auto-closeable
bad.qualifier.in.super.method.reference.extended=Calificador de tipo incorrecto en llamada super por defecto\: la interfaz redundante {0} es extendida por {1}
bad.qualifier.in.super.method.reference.overridden=Calificador de tipo incorrecto en llamada super por defecto\: el método {0} está sobrescrito en {1}
bad.type.in.switch.expression=Tipo incorrecto en expresión switch\: {0} no puede convertirse a {1}
binary.numbers.must.contain.at.least.one.hexadecimal.digit=Los números binarios deben contener al menos un dígito binario
binary.operator.not.applicable=El operador ''{0}'' no puede aplicarse a ''{1}'', ''{2}''
break.outside.switch.expr=No se permite break fuera de una expresión switch
break.outside.switch.or.loop=Break fuera de switch o bucle
call.to.super.is.not.allowed.in.enum.constructor=No se permite llamar a super en un constructor de enum
cannot.access.member.on.type=No se puede acceder al miembro porque ''{0}'' tiene tipo primitivo {1}
cannot.be.referenced.from.static.context=''{0}'' no puede ser referenciado desde un contexto static
cannot.call.method.on.type=No se puede llamar al método porque ''{0}'' tiene tipo primitivo {1}
cannot.create.array.with.empty.diamond=No se puede crear un array con '<>'
cannot.find.class=No se puede encontrar la clase {0}
cannot.infer.functional.interface.type=No se puede inferir el tipo de interfaz funcional
cannot.resolve.constructor=No se puede resolver el constructor ''{0}''
cannot.resolve.method=No se puede resolver el método ''{0}''
cannot.resolve.package=No se puede resolver el paquete {0}
cannot.resolve.symbol=No se puede resolver el símbolo ''{0}''
cannot.select.dot.class.from.type.variable=No se puede acceder al objeto class de un parámetro de tipo
cannot.select.from.a.type.parameter=No se puede seleccionar desde un parámetro de tipo
cannot.select.from.parameterized.type=No se puede acceder al objeto class de tipo parametrizado
case.statement.outside.switch=Sentencia case fuera de switch
catch.without.try='catch' sin 'try'
clash.methods.message=''{0}'' colisiona con ''{1}''
clash.methods.message.show.classes=''{0}'' en ''{2}'' colisiona con ''{1}'' en ''{3}''
class.already.imported=''{0}'' ya está definido en esta unidad de compilación
class.cannot.be.inherited.with.different.arguments={0} no puede ser heredada con diferentes argumentos\: {1}
class.cannot.extend.multiple.classes=La clase no puede extender múltiples clases
class.cannot.inherit.from.its.type.parameter=La clase no puede heredar de su parámetro de tipo
class.clashes.with.package=La clase ''{0}'' colisiona con un paquete del mismo nombre
class.expected=Se esperaba un nombre de clase aquí
class.in.default.package=La clase ''{0}'' está en el paquete por defecto
class.is.already.defined.in.single.static.import=La clase ''{0}'' ya está definida en un import static único
class.is.ambiguous.in.single.static.import=La clase ''{0}'' es ambigua en un import static único
class.is.not.used=La clase ''{0}'' nunca se usa
class.must.be.abstract=La clase ''{0}'' debe declararse como abstract o implementar el método abstract ''{1}'' en ''{2}''
class.must.implement.method=La clase ''{0}'' debe implementar el método abstract ''{1}'' en ''{2}''
class.name.expected=Se esperaba un nombre de clase
class.not.allowed.to.extend.sealed.class.from.another.module=No se permite que la clase extienda una clase sealed de otro módulo
class.not.allowed.to.extend.sealed.class.from.another.package=No se permite que la clase extienda una clase sealed de otro paquete
classes.extends.prohibited.super=Las clases no pueden extender directamente ''{0}''
compact.constructor.in.regular.class=Se esperaba lista de parámetros
constant.expression.required=Se requiere expresión constante
constructor.call.must.be.first.statement=La llamada a ''{0}'' debe ser la primera instrucción en el cuerpo del constructor
constructor.call.must.be.top.level.statement=La llamada a ''{0}'' debe ser una declaración de nivel superior en el cuerpo del constructor
constructor.call.only.allowed.in.constructor=La llamada a ''{0}'' solo está permitida en el cuerpo del constructor
constructor.is.not.used=El constructor ''{0}'' nunca se usa
continue.outside.loop=Continue fuera del bucle
continue.outside.switch.expr=Continue fuera de la expresión switch envolvente
create.class.action.this.not.valid.java.qualified.name=Este no es un nombre cualificado Java válido
cyclic.inheritance=Herencia cíclica involucrando ''{0}''
declaration.not.allowed=No se permite la declaración aquí
declaration.or.variable.expected=Se esperaba una declaración, variable final o effectively final
deconstruction.pattern.requires.record=El patrón de desestructuración solo puede aplicarse a un record, ''{0}'' no es un record
deconstruction.pattern.type.contain.annotation=No se permiten anotaciones en los tipos de patrón de desestructuración
default.label.must.not.contains.case.keyword=La etiqueta para el caso por defecto solo debe usar la palabra clave 'default', sin 'case'
default.label.not.allowed.here=No se permite la etiqueta default aquí\: 'default' solo puede usarse como una única etiqueta case o emparejada únicamente con 'null'
default.method.overrides.object.member=El método default ''{0}'' sobrescribe un miembro de ''java.lang.Object''
deprecated.default.constructor=El constructor por defecto en ''{0}'' está obsoleto
deprecated.since.symbol=''{0}'' está obsoleto desde la versión {1}
deprecated.symbol=''{0}'' está obsoleto
diamond.operator.not.allowed.here=El operador Diamond no está permitido aquí
different.case.kinds.in.switch=Se utilizan diferentes tipos de case en el switch
direct.abstract.method.access=No se puede acceder directamente al método abstract ''{0}''
dot.expected.after.super.or.this=Se esperaba '.'
duplicate.class=Clase duplicada\: ''{0}''
duplicate.class.in.other.file=Clase duplicada encontrada en el archivo ''{0}''
duplicate.default.switch.label=Etiqueta default duplicada
duplicate.label=La etiqueta ''{0}'' ya está en uso
duplicate.method=''{0}'' ya está definido en ''{1}''
duplicate.reference.in.list=Referencia duplicada a ''{0}'' en la lista ''{1}''
duplicate.switch.label=Etiqueta duplicada ''{0}''
duplicate.unconditional.pattern.label=Patrón incondicional duplicado
else.without.if='else' sin 'if'
empty.character.literal=Literal de carácter vacío
enum.constant.must.implement.method=La constante enum ''{0}'' debe implementar el método abstract ''{1}'' en ''{2}''
enum.identifier.warn=El uso de 'enum' como identificador no está soportado en versiones posteriores a Java 1.5
enum.is.not.used=El enum ''{0}'' nunca se usa
enum.types.cannot.be.instantiated=Los tipos enum no pueden ser instanciados
error.cannot.infer.pattern.type=No se puede inferir el tipo de patrón\: {0}
error.cannot.resolve.class=No se puede resolver la clase ''{0}''
error.cannot.resolve.class.or.package=No se puede resolver la clase o paquete ''{0}''
error.extra.semicolons.between.import.statements.not.allowed=No se permiten puntos y coma extra entre declaraciones import
error.guard.allowed.after.patterns.only=Solo se permite guard después de patrones
error.implicit.class.contains.no.main.method=La clase implícita no contiene método 'main'
error.implicit.class.has.invalid.file.name=El nombre del archivo para la clase implícita no es un identificador válido
error.initializers.are.not.allowed.in.implicit.classes=Los inicializadores no están permitidos en clases implícitas
error.interface.member.clashes=El miembro @interface entra en conflicto con ''{0}'' en {1}
error.package.statement.not.allowed.for.implicit.class=La declaración package no está permitida para una clase implícita
exception.already.caught=La excepción ''{0}'' ya ha sido capturada
exception.already.caught.warn=Sección inalcanzable\: {1, choice, 0\#la excepción|2\#las excepciones} ''{0}'' ya {1, choice, 0\#ha sido|2\#han sido} capturada{1, choice, 0\#|2\#s}
exception.is.never.thrown=La excepción ''{0}'' nunca se lanza en el método
exception.must.be.disjoint=Los tipos en multi-catch deben ser disjuntos\: ''{0}'' es una subclase de ''{1}''
exception.never.thrown.try=La excepción ''{0}'' nunca se lanza en el bloque try correspondiente
expected.boolean.expression=Se esperaba una expresión booleana
expected.catch.or.finally=Se esperaba 'catch' o 'finally'
expected.class.or.package=Se esperaba una clase o paquete
expected.comma=Se esperaba ','
expected.expression=Se esperaba una expresión
expected.identifier=Se esperaba un identificador
expected.identifier.or.type=Se esperaba un identificador o tipo
expected.lbrace=Se esperaba '{'
expected.lparen=Se esperaba '('
expected.lparen.or.lbracket=Se esperaba '(' o '['
expected.parameter=Se esperaba un parámetro
expected.rbrace=Se esperaba '}'
expected.rbracket=Se esperaba ']'
expected.rparen=Se esperaba ')'
expected.semicolon=Se esperaba ';'
expected.statement=Se esperaba una declaración
expected.switch.label=Se esperaba 'case', 'default' o '}'
expected.switch.rule=Se esperaba una expresión, bloque o declaración throw
expected.while=Se esperaba 'while'
expression.expected=Se esperaba una expresión
expression.with.type.void.not.allowed.as.string.template.embedded.expression=No se permite una expresión de tipo 'void' como expresión incrustada en plantilla de cadena
extends.after.enum=No se permite la cláusula extends para enum
extension.method.in.class=Los métodos de extensión solo pueden usarse dentro de una interfaz
extension.method.should.have.a.body=El método de extensión debe tener un cuerpo
field.is.already.defined.in.single.static.import=El campo ''{0}'' ya está definido en un único import static
field.is.ambiguous.in.single.static.import=El campo ''{0}'' es ambiguo en un único import static
field.is.not.used=El campo ''{0}'' nunca se usa
field.is.not.used.for.reading=El campo {0} ''{1}'' está asignado pero nunca se accede
final.method.override=''{0}'' no puede sobrescribir ''{1}'' en ''{2}''; el método sobrescrito es final
finally.without.try='finally' sin 'try'
floating.point.number.too.large=Número de punto flotante demasiado grande
floating.point.number.too.small=Número de punto flotante demasiado pequeño
foreach.not.applicable=Foreach no es aplicable al tipo ''{0}''
formal.varargs.element.type.inaccessible.here=El tipo de elemento formal varargs {0} es inaccesible aquí
functional.interface.must.not.be.sealed.error.description=La interfaz funcional no puede declararse como ''{0}''
generic.array.creation=No se permite la creación de arrays genéricos
generic.extend.exception=La clase genérica no puede extender 'java.lang.Throwable'
generics.annotation.members.may.not.have.type.parameters=Los miembros @interface no pueden tener parámetros de tipo
generics.cannot.be.inherited.as.raw.and.generic=''{0}'' no puede heredarse como tipo raw y con argumentos de tipo genéricos ''{1}''
generics.cannot.be.inherited.with.different.type.arguments=''{0}'' no puede heredarse con diferentes argumentos de tipo\: ''{1}'' y ''{2}''
generics.cannot.catch.type.parameters=No se pueden capturar parámetros de tipo
generics.cannot.instanceof.type.parameters=Se esperaba una clase o array
generics.diamond.not.applicable=El operador diamond no es aplicable para tipos no parametrizados
generics.duplicate.type.parameter=Parámetro de tipo duplicado\: ''{0}''
generics.enum.may.not.have.type.parameters=El enum no puede tener parámetros de tipo
generics.holder.method=Método
generics.holder.type=Tipo
generics.inferred.type.for.type.parameter.is.not.within.its.bound.extend=El tipo inferido ''{2}'' para el parámetro de tipo ''{0}'' no está dentro de su límite; debería extender ''{1}''
generics.inferred.type.for.type.parameter.is.not.within.its.bound.implement=El tipo inferido ''{2}'' para el parámetro de tipo ''{0}'' no está dentro de su límite; debería implementar ''{1}''
generics.methods.have.same.erasure={0}; ambos métodos tienen el mismo borrado
generics.methods.have.same.erasure.hide={0}; ambos métodos tienen el mismo borrado, pero ninguno oculta al otro
generics.methods.have.same.erasure.override={0}; ambos métodos tienen el mismo borrado, pero ninguno sobrescribe al otro
generics.reference.parameters.not.allowed=No se permiten parámetros de referencia aquí
generics.select.static.class.from.parameterized.type=No se permiten argumentos de tipo aquí porque la clase ''{0}'' es static
generics.type.argument.cannot.be.of.primitive.type=El argumento de tipo no puede ser de tipo primitivo
generics.type.arguments.on.raw.method=Argumentos de tipo proporcionados en un método raw
generics.type.arguments.on.raw.type=Argumentos de tipo proporcionados en un tipo raw
generics.type.or.method.does.not.have.type.parameters={0} ''{1}'' no tiene parámetros de tipo
generics.type.parameter.cannot.be.instantiated=El parámetro de tipo ''{0}'' no puede instanciarse directamente
generics.type.parameter.is.not.within.its.bound.extend=El parámetro de tipo ''{0}'' no está dentro de su límite; debería extender ''{1}''
generics.type.parameter.is.not.within.its.bound.implement=El parámetro de tipo ''{0}'' no está dentro de su límite; debería implementar ''{1}''
generics.unchecked.assignment=Asignación sin verificar\: ''{0}'' a ''{1}''
generics.unchecked.call=Invocación sin verificar del método ''{0}''
generics.unchecked.call.to.member.of.raw.type=Llamada sin verificar a ''{0}'' como miembro del tipo raw ''{1}''
generics.unchecked.cast=Conversión sin verificar\: ''{0}'' a ''{1}''
generics.wildcard.not.expected=No se esperaba comodín
generics.wildcards.may.be.used.only.as.reference.parameters=Los comodines solo pueden usarse como parámetros de referencia
generics.wrong.number.of.type.arguments=Número incorrecto de argumentos de tipo\: {0}; requerido\: {1}
guarded.pattern.variable.must.be.final=La variable usada en el patrón protegido debe ser final o efectivamente final
hexadecimal.numbers.must.contain.at.least.one.hexadecimal.digit=Los números hexadecimales deben contener al menos un dígito hexadecimal
identifier.is.not.allowed.here=No se permite identificador aquí
illegal.escape.character.in.character.literal=Carácter de escape ilegal en literal de carácter
illegal.escape.character.in.string.literal=Carácter de escape ilegal en literal de cadena
illegal.forward.reference=No se puede leer el valor del campo ''{0}'' antes de su definición
illegal.forward.reference.enum=No se puede hacer referencia a la constante enum ''{0}'' antes de su definición
illegal.generic.type.for.instanceof=Tipo genérico ilegal para instanceof
illegal.initializer=Inicializador ilegal para ''{0}''
illegal.line.end.in.string.literal=No se permite fin de línea en literales de cadena
illegal.self.reference=No se puede leer el valor del campo ''{0}'' desde dentro de su definición
illegal.self.reference.enum=No se puede hacer referencia a la constante enum ''{0}'' desde su propia definición
illegal.to.access.static.member.from.enum.constructor.or.instance.initializer=No está permitido acceder al miembro static ''{0}'' desde el {1, choice, 1\#constructor del enum|2\#inicializador de campo de instancia|3\#inicializador de instancia}
illegal.type.void=Tipo ilegal\: 'void'
illegal.underscore=Guión bajo ilegal
illegal.unicode.escape=Secuencia de escape Unicode ilegal
implements.after.interface=No se permite cláusula implements para interfaz
implicit.class.can.not.be.referenced=No se puede hacer referencia a la clase implícita ''{0}''
impossible.assign.declared.outside.guard=No se puede asignar un valor a la variable ''{0}'', porque está declarada fuera del guard
inaccessible.type=La clase ''{0}'' es inaccesible aquí
incompatible.modifiers=Combinación ilegal de modificadores\: ''{0}'' y ''{1}''
incompatible.parameter.types.in.lambda=Tipos de parámetros incompatibles en expresión lambda\: se esperaba {0} pero se encontró {1}
incompatible.parameter.types.in.lambda.wrong.number.of.parameters=Tipos de parámetros incompatibles en expresión lambda\: número incorrecto de parámetros\: se esperaban {0} pero se encontraron {1}
incompatible.return.type=Intentando usar tipo de retorno incompatible
incompatible.switch.null.type=''{0}'' no se puede convertir a ''{1}''
incompatible.types=Tipos incompatibles. Encontrado\: ''{1}'', requerido\: ''{0}''
incompatible.types.html.tooltip=<html><body><table><tr><td style\=''padding\: 0px 16px 8px 4px;color\: {5}''>Tipo requerido\: </td><td style\=''padding\: 0px 4px 8px 0px;''>{0}</td>{1}</tr><tr><td style\=''padding\: 0px 16px 0px 4px;color\: {5}''>Proporcionado\: </td><td style\=''padding\: 0px 4px 0px 0px;''>{2}</td>{3}</tr></table>{4}</body></html>
incompatible.types.reason.ambiguous.method.reference=<br/>razón\: referencia a método ambigua\: tanto ''{0}'' como ''{1}'' coinciden
incomplete.project.state.pending.reference=Se resolverá cuando el proyecto esté completamente cargado
inconvertible.type.cast=Tipos inconvertibles; no se puede convertir ''{0}'' a ''{1}''
incorrect.number.of.nested.patterns=Número incorrecto de patrones anidados\: se esperaba {0} pero se encontró {1}
inheritance.from.final.class=No se puede heredar de {1} ''{0}''
initializer.must.be.able.to.complete.normally=El inicializador debe poder completarse normalmente
instance.method.cannot.override.static.method=El método de instancia ''{0}'' en ''{1}'' no puede sobrescribir el método static ''{2}'' en ''{3}''
instanceof.pattern.equals=El tipo de patrón ''{0}'' es el mismo que el tipo de expresión
instanceof.pattern.supertype=El tipo de patrón ''{0}'' es un supertipo del tipo de expresión ''{1}''
insufficient.language.level=No se admite {0} en el nivel de lenguaje ''{1}''
integer.number.too.large=Número entero demasiado grande
interface.expected=Se esperaba una interfaz aquí
interface.is.not.used=La interfaz ''{0}'' nunca se usa
interface.methods.cannot.have.body=Los métodos abstract de interfaz no pueden tener cuerpo
invalid.case.label.combination.constants.and.patterns=Combinación de etiquetas case inválida\: una etiqueta case debe consistir en una lista de constantes case o un único patrón case
invalid.case.label.combination.constants.and.patterns.unnamed=Combinación de etiquetas case inválida\: una etiqueta case debe consistir en una lista de constantes case o una lista de patrones case
invalid.case.label.combination.several.patterns=Combinación de etiquetas case inválida\: una etiqueta case no debe consistir en más de un patrón case
invalid.case.label.combination.several.patterns.unnamed=Combinación de etiquetas case inválida\: se permiten múltiples patrones solo si ninguno declara variables de patrón
invalid.default.and.null.order=Orden de etiquetas case inválido\: 'null' debe ser primero y 'default' debe ser segundo
invalid.package.annotation.containing.file=Las anotaciones de package deben estar en el archivo package-info.java
invalid.permits.clause=Cláusula permits inválida\: ''{0}'' debe estar sellado
invalid.permits.clause.direct.implementation=Cláusula permits inválida\: ''{0}'' debe {1, choice, 1\#extender|2\#implementar} directamente ''{2}''
invalid.qualified.new=New calificado inválido
invalid.statement=Declaración inválida
is.not.an.enclosing.class=''{0}'' no es una clase contenedora
label.without.statement=Etiqueta sin declaración
lambda.expression.not.expected=No se esperaba expresión lambda aquí
lambda.parameters.consistency.message=No se puede mezclar 'var' y parámetros con tipo explícito en expresión lambda
lambda.variable.must.be.final=La variable usada en la expresión lambda debe ser final o efectivamente final
local.class.is.not.used=La clase local ''{0}'' nunca se usa
local.class.referenced.from.other.switch.branch=No se puede hacer referencia a la clase local ''{0}'' desde otra rama switch
local.classes.must.not.extend.sealed.classes=Las clases locales no deben extender clases selladas
local.variable.is.never.used=La variable ''{0}'' nunca se usa
local.variable.is.not.assigned=La variable ''{0}'' nunca es asignada
local.variable.is.not.used.for.reading=La variable ''{0}'' está asignada pero nunca se accede
long.number.too.large=Número long demasiado grande
lvti.array=No se permite 'var' como tipo de elemento de un array
lvti.compound=No se permite 'var' en una declaración compuesta
lvti.lambda=No se puede inferir el tipo\: la expresión lambda requiere un tipo objetivo explícito
lvti.method.ref=No se puede inferir el tipo\: la referencia a método requiere un tipo objetivo explícito
lvti.no.initializer=No se puede inferir el tipo\: 'var' en variable sin inicializador
lvti.null=No se puede inferir el tipo\: el inicializador de variable es 'null'
lvti.selfReferenced=No se puede inferir el tipo para ''{0}'', se usa en su propio inicializador de variable
lvti.void=No se puede inferir el tipo\: el inicializador de variable es 'void'
malformed.floating.point.literal=Literal de punto flotante mal formado
marked.for.removal.default.constructor=El constructor por defecto en ''{0}'' está obsoleto y marcado para eliminación
marked.for.removal.symbol=''{0}'' está obsoleto y marcado para eliminación
marked.for.removal.symbol.since=''{0}'' está obsoleto desde la versión {1} y marcado para eliminación
member.referenced.before.constructor.called=No se puede referenciar ''{0}'' antes de llamar al constructor del supertipo
method.call.expected=Se esperaba llamada a método
method.called.before.constructor.called=No se puede llamar a ''{0}'' antes de llamar al constructor de la superclase
method.does.not.override.super=El método no sobrescribe el método de su superclase
method.is.not.used=El método ''{0}'' nunca se usa
method.reference.expression.is.not.expected=No se esperaba expresión de referencia a método aquí
missing.method.body=Falta cuerpo del método, o declarar como abstract
missing.package.statement=Falta declaración de package\: ''{0}''
missing.package.statement.package.name.invalid=Falta declaración de package pero el nombre de package ''{0}'' que corresponde a la ruta del archivo no es válido
missing.return.statement=Falta declaración return
missing.return.type=Declaración de método inválida; se requiere tipo de retorno
missing.return.value=Falta valor de retorno
modifier.not.allowed=Modificador ''{0}'' no permitido aquí
modifier.not.allowed.on.classes.without.sealed.super=El modificador 'non-sealed' no está permitido en clases sin superclase sealed
modifier.not.allowed.on.local.classes=El modificador ''{0}'' no está permitido en clases locales
modifiers.for.enum.constants=No se permiten modificadores para constantes enum
module.access.bad.name=El package ''{0}'' está declarado en un módulo con nombre inválido (''{1}'')
module.access.does.not.read=El package ''{0}'' está declarado en el módulo ''{1}'', pero el módulo ''{2}'' no lo lee
module.access.from.named=El package ''{0}'' está declarado en el módulo ''{1}'', que no lo exporta al módulo ''{2}''
module.access.from.unnamed=El package ''{0}'' está declarado en el módulo ''{1}'', que no lo exporta al módulo sin nombre
module.access.not.in.graph=El package ''{0}'' está declarado en el módulo ''{1}'', que no está en el grafo de módulos
module.access.to.unnamed=El package ''{0}'' está declarado en el módulo sin nombre, pero el módulo ''{1}'' no lo lee
module.ambiguous=Referencia de módulo ambigua\: {0}
module.bad.name=Nombre inválido para el módulo ''{0}''
module.conflicting.packages=El package ''{0}'' existe en otro módulo\: {1}
module.conflicting.reads=El módulo ''{0}'' lee el paquete ''{1}'' tanto de ''{2}'' como de ''{3}''
module.cyclic.dependence=Dependencia cíclica\: {0}
module.does.not.read=El módulo ''{0}'' no lee ''{1}''
module.duplicate.exports=''exports'' duplicado\: {0}
module.duplicate.exports.target=Objetivo ''exports'' duplicado\: {0}
module.duplicate.impl=Implementación duplicada\: {0}
module.duplicate.opens=''opens'' duplicado\: {0}
module.duplicate.opens.target=Objetivo ''opens'' duplicado\: {0}
module.duplicate.provides=''provides'' duplicado\: {0}
module.duplicate.requires=''requires'' duplicado\: {0}
module.duplicate.uses=''uses'' duplicado\: {0}
module.file.duplicate='module-info.java' ya existe en el módulo
module.file.wrong.location=La declaración del módulo debe ubicarse en la raíz de fuentes del módulo
module.file.wrong.name=La declaración del módulo debe estar en un archivo llamado 'module-info.java'
module.no.package=Un archivo de módulo no debe tener sentencia 'package'
module.not.found=Módulo no encontrado\: {0}
module.not.in.graph=Falta el módulo ''{0}'' en el grafo de módulos
module.not.on.path=El módulo no está en las dependencias\: {0}
module.open.duplicate.text=Ir al duplicado
module.opens.in.weak.module='opens' no está permitido en un módulo abierto
module.service.abstract=La implementación del servicio es una clase abstract\: {0}
module.service.alien=La implementación del servicio debe definirse en el mismo módulo que la directiva provides
module.service.enum=La definición del servicio es un enum\: {0}
module.service.impl=El tipo de implementación del servicio debe ser un subtipo del tipo de interfaz del servicio, o tener un método 'provider' public static sin argumentos
module.service.inner=La implementación del servicio es una clase interna\: {0}
module.service.no.ctor=La implementación del servicio no tiene un constructor public por defecto\: {0}
module.service.provider.type=El tipo de retorno del método ''provider'' debe ser un subtipo del tipo de interfaz del servicio\: {0}
module.service.unused=Interfaz de servicio proporcionada pero no exportada ni usada
module.unwanted.modifier.warn=Los modificadores en 'requires java.base' están prohibidos en versiones desde Java 10
multiple.non.overriding.abstract.methods.found.in.0=Se encontraron múltiples métodos abstract no sobrescritos en {0}
multiple.non.overriding.abstract.methods.found.in.interface.0=Se encontraron múltiples métodos abstract no sobrescritos en la interfaz {0}
multiple.switch.labels=Se permiten múltiples etiquetas switch para un grupo de sentencias etiquetadas switch solo si ninguna declara variables de patrón
native.methods.cannot.have.a.body=Los métodos native no pueden tener cuerpo
no.default.constructor.available=No hay constructor por defecto disponible en ''{0}''
no.enclosing.instance.in.scope=No hay instancia contenedora del tipo ''{0}'' en el alcance
no.interface.expected=No se espera una interfaz aquí
no.target.method.found=No se encontró método objetivo
non.static.method.cannot.be.referenced.from.a.static.context.method.reference.context=No se puede referenciar método no static desde un contexto static
non.static.symbol.referenced.from.static.context=No se puede referenciar {0} no static ''{1}'' desde un contexto static
not.a.functional.interface={0} no es una interfaz funcional
not.a.statement=No es una sentencia
not.allowed.in.interface=No permitido en interfaz
not.allowed.in.sealed.hierarchy=''{0}'' no está permitido en la jerarquía sealed
not.inner.class=''{0}'' no es una clase interna
not.loop.label=No es una etiqueta de bucle\: ''{0}''
null.label.not.allowed.here=Combinación de etiquetas case inválida\: 'null' solo puede usarse como única etiqueta case o emparejada únicamente con 'default'
numeric.overflow.in.expression=Desbordamiento numérico en la expresión
only.one.constructor.call.allowed.in.constructor=Solo se permite una llamada explícita al constructor en el constructor
overridden.method.does.not.throw={0}; el método sobrescrito no lanza ''{1}''
overrides.deprecated.method=Sobrescribe método obsoleto en ''{0}''
overrides.marked.for.removal.method=Sobrescribe método que está obsoleto y marcado para eliminación en ''{0}''
package.clashes.with.class=El paquete ''{0}'' colisiona con una clase del mismo nombre
package.is.empty=El paquete está vacío\: {0}
package.local.symbol=''{0}'' no es public en ''{1}''. No se puede acceder desde fuera del paquete
package.name.file.path.mismatch=El nombre del paquete ''{0}'' no corresponde con la ruta del archivo ''{1}''
package.not.found=Paquete no encontrado\: {0}
parameter.excluding.hierarchy.disable.text=No resaltar parámetros para métodos heredados
parameter.is.not.used=El parámetro ''{0}'' nunca se usa
parameterized.qualifier.on.static.method.reference.context=Calificador parametrizado en referencia a método static
pattern.is.not.exhaustive=El patrón ''{0}'' no es exhaustivo en ''{1}''
pattern.variable.is.not.used=La variable de patrón ''{0}'' nunca se usa
permit.list.must.contain.outside.inheritors=La cláusula permits de clase sealed debe contener todas las subclases
permits.after.enum=No se permite cláusula permits para enum
permits.list.generics.are.not.allowed=No se permiten genéricos en la lista permits
permitted.subclass.must.have.modifier=Todas las subclases de clase sealed deben ser final, sealed o non-sealed
private.constructor.is.not.used=El constructor private ''{0}'' nunca se usa
private.field.is.not.assigned=El campo private ''{0}'' nunca se asigna
private.field.is.not.used=El campo private ''{0}'' nunca se usa
private.inner.class.is.not.used=La clase interna private ''{0}'' nunca se usa
private.inner.interface.is.not.used=La interfaz interna private ''{0}'' nunca se usa
private.method.is.not.used=El método private ''{0}'' nunca se usa
private.methods.in.interfaces.should.have.body=Los métodos private en interfaces deben tener cuerpo
private.symbol=''{0}'' tiene acceso private en ''{1}''
processor.missing.from.string.template.expression=Falta el procesador en la expresión de plantilla de cadena
protected.symbol=''{0}'' tiene acceso protected en ''{1}''
public.class.should.be.named.after.file=La clase ''{0}'' es public, debe declararse en un archivo llamado ''{0}.java''
qualified.class.reference.not.allowed.in.qualified.new=No se permite referencia de clase calificada en new calificado
qualified.enum.constant.in.switch=Una etiqueta case de switch enum debe ser el nombre no calificado de una constante de enumeración
qualified.enum.constant.in.switch.remove.fix=Eliminar calificador
qualified.new.of.static.class=New calificado de clase static
qualifier.must.be.expression=El calificador debe ser una expresión
raw.processor.type.not.allowed=No se permite el tipo de procesador raw\: {0}
receiver.name.mismatch=El nombre del receptor no coincide con el tipo de la clase contenedora
receiver.static.context=El receptor no puede usarse en un contexto static
receiver.type.mismatch=El tipo del receptor no coincide con el tipo de la clase contenedora
receiver.wrong.context=No se permiten receptores fuera de la lista de parámetros del método
receiver.wrong.position=El receptor debe ser el primer parámetro
record.accessor=Accessor de componente de record
record.accessor.wrong.return.type=Tipo de retorno incorrecto del accessor de componente. Esperado\: ''{0}'', encontrado\: ''{1}''
record.canonical.constructor=Constructor canónico
record.canonical.constructor.wrong.parameter.name=Los nombres de parámetros del constructor canónico deben coincidir con los nombres de componentes del record. Esperado\: ''{0}'', encontrado\: ''{1}''
record.canonical.constructor.wrong.parameter.type=Tipo de parámetro incorrecto para el componente de record ''{0}''. Esperado\: ''{1}'', encontrado\: ''{2}''
record.compact.constructor=Constructor compacto
record.compact.constructor.return=No se permite sentencia 'return' en constructor compacto
record.component.cstyle.declaration=No se permite declaración de array estilo C en componente de record
record.component.not.initialized=El componente de record ''{0}'' podría no estar inicializado en el constructor canónico
record.component.restricted.name=Nombre de componente de record ilegal ''{0}''
record.component.vararg.not.last=El componente vararg del record debe ser el último en la lista
record.constructor.call.in.canonical=El constructor canónico no puede delegar a otro constructor
record.extends=No se permite cláusula extends para record
record.header.regular.class=Encabezado de record declarado para no-record
record.instance.field=No se permite campo de instancia en record
record.instance.initializer=No se permite inicializador de instancia en record
record.is.not.used=El record ''{0}'' nunca se utiliza
record.no.constructor.call.in.non.canonical=El constructor de record no canónico debe delegar en otro constructor
record.no.header=El record no tiene encabezado declarado
record.permits=No se permite cláusula permits para record
record.special.method.non.public={0} debe ser ''public''
record.special.method.stronger.access=El nivel de acceso de {0} no puede ser más restrictivo que el nivel de acceso del record (''{1}'')
record.special.method.throws={0} no puede declarar excepciones lanzadas
record.special.method.type.parameters={0} no puede tener parámetros de tipo
recursive.constructor.invocation=Invocación recursiva del constructor
redundant.semicolon.warn=Los puntos y coma redundantes entre sentencias import están prohibidos a partir de Java 21
remove.unused.imports.quickfix.text=Eliminar imports no utilizados
repeated.annotation.target=Objetivo de anotación repetido
repeated.interface=Interfaz repetida
repeated.modifier=Modificador repetido ''{0}''
resource.variable.must.be.final=La variable usada como recurso try-with-resources debe ser final o efectivamente final
restricted.identifier=''{0}'' es un identificador restringido y no puede usarse para declaraciones de tipo
restricted.identifier.reference=Referencia ilegal al tipo restringido ''{0}''
restricted.identifier.warn=El uso de ''{0}'' como nombre de clase no está soportado en versiones desde Java {1}
return.from.constructor=No se puede retornar un valor desde el constructor
return.from.void.method=No se puede retornar un valor desde un método con tipo de resultado void
return.outside.method=Return fuera del método
return.outside.switch.expr=Return fuera de la expresión switch envolvente
return.statement.not.allowed.before.explicit.constructor.call=No se permite 'return' antes de la llamada a ''{0}''
safevararg.annotation.cannot.be.applied.for.record.component=@SafeVarargs no está permitido en un componente de record
safevarargs.not.allowed.non.final.instance.methods=@SafeVarargs no está permitido en métodos de instancia no final
safevarargs.not.allowed.on.methods.with.fixed.arity=@SafeVarargs no está permitido en métodos con aridad fija
safevarargs.not.applicable.for.reifiable.types=@SafeVarargs no es aplicable para tipos reificables
safevarargs.not.suppress.potentially.unsafe.operations=@SafeVarargs no suprime operaciones potencialmente inseguras
sealed.cannot.be.functional.interface=La clase sealed no puede usarse como interfaz funcional
sealed.must.have.inheritors=La clase sealed debe tener subclases
sealed.type.inheritor.expected.modifiers=Se esperan los modificadores {0}, {1} o {2}
sealed.type.inheritor.expected.modifiers2=Se esperaba el modificador ''{0}'' o ''{1}''
single.import.class.conflict=''{0}'' ya está definido en una importación de tipo único
statement.must.be.prepended.with.case.label=La sentencia debe ir precedida de una etiqueta case
static.interface.method.call.qualifier=El método static solo puede ser invocado en la clase de interfaz que lo contiene
static.member.accessed.via.instance.reference=Miembro static ''{0}.{1}'' accedido mediante referencia de instancia
static.method.cannot.be.annotated.with.override=Los métodos static no pueden ser anotados con @Override
static.method.cannot.override.instance.method=El método static ''{0}'' en ''{1}'' no puede sobrescribir el método de instancia ''{2}'' en ''{3}''
static.method.referenced.through.non.static.qualifier.method.reference.context=Método static referenciado a través de calificador no static
static.method.referenced.through.receiver.method.reference.context=Método static referenciado a través del receptor
static.methods.in.interfaces.should.have.body=Los métodos static en interfaces deben tener un cuerpo
suspicious.name.assignment=''{0}'' probablemente no debería asignarse a ''{1}''
suspicious.name.parameter=''{0}'' probablemente no debería pasarse como parámetro ''{1}''
suspicious.name.return=''{0}'' probablemente no debería retornarse desde el método ''{1}''
switch.class.or.array.type.expected=clase o array
switch.constant.expression.required=Se requiere una expresión constante, patrón o null
switch.dominance.of.preceding.label=La etiqueta está dominada por una etiqueta case precedente ''{0}''
switch.expr.empty=La expresión 'switch' no tiene ninguna cláusula case
switch.expr.incomplete=La expresión 'switch' no cubre todos los valores de entrada posibles
switch.expr.no.result=La expresión switch no tiene expresiones de resultado
switch.expr.rule.should.produce.result=La regla de expresión switch debe producir un resultado en todas las rutas de ejecución
switch.expr.should.produce.result=La expresión switch debe producir un resultado en todas las rutas de ejecución
switch.expression.cannot.be.void=El tipo objetivo para la expresión switch no puede ser void
switch.illegal.fall.through.to=Fall-through ilegal a un patrón
switch.invalid.selector.types=No se admite el tipo de selector de ''{0}''
switch.pattern.expected=Se espera un patrón para el tipo de selector switch ''{0}''
switch.statement.empty=La sentencia 'switch' no tiene ninguna cláusula case
switch.statement.incomplete=La sentencia 'switch' no cubre todos los valores de entrada posibles
switch.unconditional.boolean.and.default.exist='switch' tiene todos los valores booleanos y una etiqueta default
switch.unconditional.boolean.and.unconditional.exist='switch' tiene todos los valores booleanos y un patrón incondicional
switch.unconditional.pattern.and.default.exist=El 'switch' tiene tanto un patrón incondicional como una etiqueta default
target.method.is.generic=El método objetivo es genérico
target.type.of.a.lambda.conversion.must.be.an.interface=El tipo objetivo de una conversión lambda debe ser una interfaz
text.block.new.line=Inicio de bloque de texto ilegal\: falta nueva línea después de comillas de apertura
text.block.unclosed=Bloque de texto sin cerrar
text.class.cannot.access=No se puede acceder a {0}
text.class.inherits.abstract.and.default={0} hereda abstract y default para {1} de los tipos {2} y {3}
text.class.inherits.unrelated.defaults={0} hereda defaults no relacionados para {1} de los tipos {2}
text.class.is.not.accessible={0} no es accesible en el contexto actual
text.improper.formed.type=Tipo mal formado\: faltan algunos parámetros de tipo
too.many.array.dimensions=Demasiadas dimensiones de array
too.many.characters.in.character.literal=Demasiados caracteres en el literal de carácter
two.methods.are.inherited.with.same.signature=Los métodos {0} de {1} y {2} de {3} se heredan con la misma firma
type.parameter.cannot.be.followed.by.other.bounds=El parámetro de tipo no puede ser seguido por otros límites
type.parameter.has.incompatible.upper.bounds=El parámetro de tipo {0} tiene límites superiores incompatibles\: {1}
type.parameter.is.not.used=El parámetro de tipo ''{0}'' nunca se usa
type.pattern.expected=Se esperaba un patrón de tipo
unary.operator.not.applicable=El operador ''{0}'' no puede ser aplicado a ''{1}''
unchecked.overriding.incompatible.return.type=Sobrescritura sin verificar\: el tipo de retorno requiere una conversión sin verificar. Encontrado ''{0}'', requerido ''{1}''
unclosed.char.literal=Literal de carácter sin cerrar
unclosed.comment=Comentario sin cerrar
underscore.identifier.error=Desde Java 9, '_' es una palabra clave y no puede usarse como identificador
underscore.identifier.error.unnamed=No se permite usar '_' como referencia
underscore.identifier.warn=El uso de '_' como identificador no está soportado en versiones desde Java 9
underscore.lambda.identifier=No se permite usar '_' como nombre de parámetro lambda
unexpected.token=Token inesperado
unexpected.type=Tipo inesperado. Encontrado\: ''{1}'', requerido\: ''{0}''
unexpected.type.class.expected=Tipo inesperado\: se esperaba una clase
unhandled.close.exceptions={1, choice, 0\#excepción|2\#excepciones} no manejada(s) de {2}\: {0}
unhandled.exceptions={1, choice, 0\#excepción|2\#excepciones} no manejada(s)\: {0}
unknown.class=Clase desconocida\: ''{0}''
unqualified.super.disallowed=No se permite la referencia super no calificada en método de extensión
unreachable.statement=Sentencia inalcanzable
unreachable.statement.false.condition=La condición del bucle es siempre false haciendo que el cuerpo del bucle sea inalcanzable
unrelated.overriding.methods.return.types=los métodos tienen tipos de retorno no relacionados
unresolved.label=Etiqueta no definida\: ''{0}''
unsafe.cast.in.instanceof=''{0}'' no puede convertirse de forma segura a ''{1}''
valid.switch.1_7.selector.types=char, byte, short, int, Character, Byte, Short, Integer, String, o un enum
valid.switch.selector.types=byte, char, short o int
vararg.cstyle.array.declaration=No se permite la declaración de array estilo C en el parámetro vararg
vararg.not.last.parameter=El parámetro vararg debe ser el último en la lista
variable.already.assigned=La variable ''{0}'' podría ya haber sido asignada
variable.already.defined=La variable ''{0}'' ya está definida en el ámbito
variable.assigned.in.loop=La variable ''{0}'' podría ser asignada en el bucle
variable.expected=Se esperaba una variable
variable.must.be.final=La variable ''{0}'' es accedida desde una clase interna, necesita ser declarada como final
variable.must.be.final.or.effectively.final=La variable ''{0}'' es accedida desde una clase interna, necesita ser final o efectivamente final
variable.not.initialized=La variable ''{0}'' podría no haber sido inicializada
visibility.access.problem=No se puede acceder a ''{0}'' en ''{1}''
visibility.module.access.problem=El acceso a ''{0}'' en ''{1}'' está impedido por {2}
void.type.is.not.allowed=El tipo 'void' no está permitido aquí
weaker.privileges={0}; intentando asignar privilegios de acceso más débiles (''{1}''); era ''{2}''
when.expression.is.false=Esta etiqueta case tiene un guard que es una expresión constante con valor 'false'
wildcard.type.cannot.be.instantiated=El tipo comodín ''{0}'' no puede ser instanciado directamente
wrong.constructor.arguments=''{0}'' no puede ser aplicado a ''{1}''
wrong.method.arguments=''{0}'' en ''{1}'' no puede ser aplicado a ''{2}''
yield.unexpected=Yield fuera de la expresión switch
yield.unqualified.method.warn=La llamada no calificada al método 'yield' no está soportada en versiones desde Java 14
yield.void=El tipo de expresión no debe ser 'void'