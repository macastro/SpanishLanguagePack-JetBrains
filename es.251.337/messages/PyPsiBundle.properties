ACT.CMD.use.import=Usar un módulo importado
ACT.from.some.module.import=Importar desde…
ACT.qualify.with.module=Calificar con un módulo importado
ANN.assign.to.none=Asignación a None
ANN.assignment.expression.as.a.target=La expresión de asignación no se puede usar como objetivo aquí
ANN.assignment.expression.in.an.iterable=La expresión de asignación no se puede usar en un iterable de comprensión
ANN.assignment.expressions.within.a.comprehension.cannot.be.used.in.a.class.body=Las expresiones de asignación dentro de una comprensión no se pueden usar en el cuerpo de una clase
ANN.assignment.to.keyword=Asignación a palabra clave
ANN.await.outside.async.function='await' fuera de función async
ANN.break.outside.loop='break' fuera del bucle
ANN.can.t.use.starred.expression.here=No se puede usar expresión con asterisco aquí
ANN.cannot.assign.to.debug=No se puede asignar a __debug__
ANN.cant.assign.to.await.expr=No se puede asignar a una expresión await
ANN.cant.assign.to.call=No se puede asignar a una llamada de función
ANN.cant.assign.to.comprh=No se puede asignar a una comprensión de lista
ANN.cant.assign.to.dict.comprh=No se puede asignar a una comprensión de diccionario
ANN.cant.assign.to.generator=No es posible asignar a una expresión generadora
ANN.cant.assign.to.lambda=No se puede asignar a lambda
ANN.cant.assign.to.literal=No se puede asignar a un literal
ANN.cant.assign.to.operator=No se puede asignar a un operador
ANN.cant.assign.to.parens=No se puede asignar a ()
ANN.cant.assign.to.set.comprh=No se puede asignar a una comprensión de conjunto
ANN.cant.aug.assign.starred.assignment.target.must.be.in.list.or.tuple=El objetivo de asignación con asterisco debe estar en una lista o tupla
ANN.cant.aug.assign.to.comprh=No es posible la asignación aumentada a una comprensión de lista
ANN.cant.aug.assign.to.dict.comprh=No es posible la asignación aumentada a una comprensión de diccionario
ANN.cant.aug.assign.to.generator=No es posible la asignación aumentada a una expresión generadora
ANN.cant.aug.assign.to.list.or.comprh=No es posible la asignación aumentada a un literal de lista o comprensión
ANN.cant.aug.assign.to.set.comprh=No es posible la asignación aumentada a una comprensión de conjunto
ANN.cant.aug.assign.to.tuple.or.generator=No es posible la asignación aumentada a un literal de tupla o expresión generadora
ANN.cant.delete.call=No se puede eliminar una llamada de función
ANN.cant.delete.literal=No se puede eliminar un literal
ANN.continue.break.or.return.in.star.except='break', 'continue' y 'return' no pueden aparecer en un bloque except*
ANN.continue.outside.loop='continue' fuera del bucle
ANN.default.except.must.be.last=el 'except\:' predeterminado debe ser el último
ANN.deleting.none=Eliminando None
ANN.duplicate.param.name=nombre de parámetro duplicado
ANN.exception.group.in.star.except=ExceptionGroup no se puede usar en except*
ANN.fstrings.illegal.conversion.character=Carácter de conversión ilegal ''{0}''\: debe ser uno de ''s'', ''r'', ''a''
ANN.fstrings.missing.conversion.character=Se espera un carácter de conversión\: debe ser uno de 's', 'r', 'a'
ANN.fstrings.single.right.brace.not.allowed.inside.fstrings=No se permite un único '}' dentro de f-strings
ANN.generator.expression.must.be.parenthesized.if.not.sole.argument=La expresión generadora debe estar entre paréntesis si no es el único argumento
ANN.ignore.errors.like.this=Ignorar errores como este
ANN.illegal.target.for.variable.annotation=Objetivo ilegal para una anotación de variable
ANN.missing.closing.quote=Falta comilla de cierre [{0}]
ANN.missing.closing.triple.quotes=Faltan comillas triples de cierre
ANN.multiple.args=no se permiten múltiples parámetros *
ANN.multiple.kwargs=no se permiten múltiples parámetros **
ANN.multiple.slash=no se permiten múltiples parámetros /
ANN.name.used.both.as.global.and.param=El nombre ''{0}'' se usa tanto como parámetro como global
ANN.named.parameters.after.star=los parámetros nombrados deben seguir al * simple
ANN.named.parameters.before.slash=los parámetros nombrados deben preceder al / simple
ANN.no.exception.to.reraise=No hay excepción para relanzar
ANN.non.default.param.after.default=parámetro no predeterminado después del parámetro predeterminado
ANN.non.empty.return.inside.asynchronous.generator='return' no vacío dentro del generador asíncrono
ANN.patterns.attribute.name.is.repeated=El nombre de atributo ''{0}'' está repetido
ANN.patterns.double.star.pattern.cannot.be.used.outside.mapping.patterns=El patrón de estrella doble no se puede usar fuera de patrones de mapeo
ANN.patterns.invalid.complex.number.literal=Literal de número complejo inválido
ANN.patterns.key.pattern.can.only.be.value.or.literal.pattern=El patrón de clave solo puede ser un patrón de valor o un patrón literal
ANN.patterns.name.already.bound=El nombre ''{0}'' ya está vinculado
ANN.patterns.pattern.does.not.bind.names=El patrón no vincula {0,choice,1\#nombre|2\#nombres} {1}
ANN.patterns.pattern.makes.remaining.alternatives.unreachable=El patrón hace que las alternativas restantes sean inalcanzables
ANN.patterns.pattern.makes.remaining.case.clauses.unreachable=El patrón hace que las cláusulas case restantes sean inalcanzables
ANN.patterns.repeated.star.pattern=Patrón de estrella repetido
ANN.patterns.single.star.pattern.cannot.be.used.outside.sequence.patterns=El patrón de estrella única no se puede usar fuera de patrones de secuencia
ANN.python.does.not.support.yield.from.inside.async.functions=Python no soporta 'yield from' dentro de funciones async
ANN.regular.param.after.keyword=parámetro regular después del parámetro **
ANN.regular.param.after.vararg=parámetro regular después del parámetro *
ANN.return.outside.of.function='return' fuera de función
ANN.slash.param.after.keyword=el parámetro / debe preceder al parámetro **
ANN.slash.param.after.vararg=el parámetro / debe preceder al parámetro *
ANN.star.import.at.top.only='import *' solo permitido a nivel de módulo
ANN.starred.param.after.kwparam=parámetro * después del parámetro **
ANN.try.except.can.not.have.except.and.star.except=La declaración Try no puede contener tanto except como except*
ANN.tuple.py3=el desempaquetado de parámetros de tupla no está soportado en Python 3
ANN.unparenthesized.assignment.expression.statement=Las expresiones de asignación sin paréntesis están prohibidas en el nivel superior de una declaración de expresión
ANN.unparenthesized.assignment.expression.value=Las expresiones de asignación sin paréntesis están prohibidas en el nivel superior del lado derecho de una declaración de asignación
ANN.variable.annotation.cannot.be.combined.with.tuple.unpacking=Una anotación de variable no se puede combinar con desempaquetado de tupla
ANN.variable.annotation.cannot.be.used.in.assignment.with.multiple.targets=Una anotación de variable no se puede usar en asignación con múltiples objetivos
ANN.yield.outside.of.function='yield' fuera de función
INSP.GROUP.python=Python
INSP.NAME.abstract.class=La clase debe implementar todos los métodos abstractos
INSP.NAME.argument.equal.default=El argumento de función es igual al valor del parámetro predeterminado
INSP.NAME.assignment.to.loop.or.with.parameter=Asignaciones a parámetro de bucle 'for' o declaración 'with'
INSP.NAME.attribute.outside.init=Un atributo de instancia está definido fuera de `__init__`
INSP.NAME.augment.assignment=La asignación puede ser reemplazada con asignación aumentada
INSP.NAME.bad.except.clauses.order=Orden incorrecto de cláusulas 'except'
INSP.NAME.byte.literal=Un literal de bytes contiene un carácter no ASCII
INSP.NAME.calling.non.callable=Intento de llamar a un objeto no invocable
INSP.NAME.chained.comparisons=Comparaciones encadenadas demasiado complejas
INSP.NAME.check.can.be.simplified=Comprobación redundante de variable booleana
INSP.NAME.class.has.no.init=La clase no tiene método `__init__`
INSP.NAME.class.var.variables=Uso inválido de variables ClassVar
INSP.NAME.classic.class.usage=Uso de clase de estilo clásico
INSP.NAME.comparison.with.none=Uso de operadores de igualdad para comparar con None
INSP.NAME.compatibility=El código es incompatible con versiones específicas de Python
INSP.NAME.coroutine.is.not.awaited=La corrutina ''{0}'' no está esperada
INSP.NAME.dataclass.definition.and.usages=Definición y uso inválidos de Data Classes
INSP.NAME.decorator.outside.class=Decorador específico de clase usado fuera de la clase
INSP.NAME.default.argument=El argumento predeterminado es mutable
INSP.NAME.deprecated.function.class.or.module=Función, clase o módulo obsoleto
INSP.NAME.dict.creation=La creación del diccionario puede ser reescrita como literal de diccionario
INSP.NAME.docstring.types=El tipo en docstring no coincide con el tipo inferido
INSP.NAME.dunder.slots=Usos inválidos de clases con definiciones '__slots__'
INSP.NAME.duplicate.keys=El diccionario contiene claves duplicadas
INSP.NAME.exception.not.inherit=Las excepciones no heredan de la clase estándar 'Exception'
INSP.NAME.final.classes.methods.and.variables=Usos inválidos de clases, métodos y variables final
INSP.NAME.first.arg.assign=El primer argumento del método es reasignado
INSP.NAME.from.future.import=Posición incorrecta de from __future__ import
INSP.NAME.global.undefined=La variable global no está definida a nivel de módulo
INSP.NAME.inconsistent.indentation=Indentación inconsistente
INSP.NAME.incorrect.call.arguments=Argumentos de llamada incorrectos
INSP.NAME.incorrect.docstring=Docstring incorrecto
INSP.NAME.init.return=Método __init__ que retorna un valor
INSP.NAME.invalid.interpreter=Intérprete inválido
INSP.NAME.invalid.usages.of.override.decorator=Usos inválidos del decorador @override
INSP.NAME.list.creation=Declaración de lista no óptima
INSP.NAME.mandatory.encoding=No se especificó codificación para el archivo
INSP.NAME.method.may.be.static=El método no está declarado como static
INSP.NAME.method.over=La firma del método no coincide con la firma del método sobrescrito
INSP.NAME.missing.or.empty.docstring=Docstring faltante o vacío
INSP.NAME.missing.super.constructor=Falta llamada a '__init__' de la superclase
INSP.NAME.missing.type.hints=Falta type hinting en la definición de función
INSP.NAME.nested.decorators=Anidamiento problemático de decoradores
INSP.NAME.new.init.signature=Firmas incompatibles de __new__ y __init__
INSP.NAME.new.style.generics.type.param.syntax=Uso inválido de parámetros de tipo y alias de tipo de nuevo estilo
INSP.NAME.non.ascii=El archivo contiene caracteres no ASCII
INSP.NAME.none.function.assignment=Asignando llamadas a funciones que no retornan nada
INSP.NAME.oldstyle.class=La clase de estilo antiguo contiene características de clase de estilo nuevo
INSP.NAME.overloads.in.regular.python.files=Sobrecarga en archivos Python regulares
INSP.NAME.pep8.naming=Violación de la convención de nombres PEP 8
INSP.NAME.problematic.first.parameter=Primer parámetro inadecuado
INSP.NAME.property.access=Acceso inapropiado a propiedades
INSP.NAME.property.definition=Definición incorrecta de propiedad
INSP.NAME.protected.member=Accediendo a un miembro protected de una clase o módulo
INSP.NAME.protocol.definition.and.usages=Definiciones y usos inválidos de protocolo
INSP.NAME.pytest-parametrized=Argumentos incorrectos en @pytest.mark.parametrize
INSP.NAME.pytest.unpassed.fixture=El fixture no es solicitado por las funciones de prueba
INSP.NAME.redeclaration=Nombres redeclarados sin uso
INSP.NAME.redundant.parentheses=Paréntesis redundantes
INSP.NAME.relative.import=Imports relativos sospechosos
INSP.NAME.requirements=Requisitos de paquete no satisfechos
INSP.NAME.set.function.to.literal=La llamada a función puede ser reemplazada por un literal de conjunto
INSP.NAME.shadowing.builtins=Ocultando nombres incorporados
INSP.NAME.single.quoted.docstring=Docstring con comillas simples
INSP.NAME.statement.effect=La declaración no tiene efecto
INSP.NAME.str.format=Errores en operaciones de formato de cadenas
INSP.NAME.too.broad.exception.clauses=Cláusulas de excepción poco claras
INSP.NAME.trailing.semicolon=Punto y coma final prohibido en una declaración
INSP.NAME.tuple.assignment.balance=El balance de asignación de tupla es incorrecto
INSP.NAME.tuple.item.assignment=La asignación de elementos de tupla está prohibida
INSP.NAME.type.checker=Tipo incorrecto
INSP.NAME.type.hints=Definiciones y usos inválidos de type hints
INSP.NAME.typed.dict=Definición y usos inválidos de TypedDict
INSP.NAME.unbound=Variables locales no vinculadas
INSP.NAME.unnecessary.backslash=Barra invertida innecesaria
INSP.NAME.unreachable.code=Código inalcanzable
INSP.NAME.unresolved.refs=Referencias sin resolver
INSP.NAME.unused=Símbolos locales sin usar
INSP.NAME.wrong.super.arguments=Argumentos incorrectos para llamar a super
INSP.abstract.class.add.to.superclasses=Agregar ''{0}'' a las superclases
INSP.abstract.class.class.must.implement.all.abstract.methods=La clase {0} debe implementar todos los métodos abstract
INSP.abstract.class.set.as.metaclass=Establecer ''{0}'' como metaclase
INSP.argument.equals.to.default=El argumento es igual al valor del parámetro por defecto
INSP.arguments.not.declared.but.provided.by.decorator=Los siguientes argumentos no están declarados pero son proporcionados por el decorador\: {0}
INSP.assignment.can.be.replaced.with.augmented.assignment=La asignación puede ser reemplazada por una asignación aumentada
INSP.assignment.to.loop.or.with.parameter=La variable ''{0}'' ya está declarada en el bucle ''for'' o declaración ''with'' anterior
INSP.async.call=Falta sintaxis `await` en llamadas a corrutinas
INSP.attribute.outside.init=Atributo de instancia {0} definido fuera de __init__
INSP.auto.to.manual.field.numbering=No se puede cambiar de numeración automática de campos a especificación manual
INSP.bad.except.exception.class.already.caught=La clase de excepción ''{0}'' ya ha sido capturada
INSP.bad.except.superclass.of.exception.class.already.caught=''{0}'', superclase de la clase de excepción ''{1}'', ya ha sido capturada
INSP.byte.literal.contains.illegal.characters=El literal de bytes contiene caracteres > 255
INSP.cant.return.value.from.init=No se puede retornar un valor desde __init__
INSP.chained.comparisons.ignore.statements.with.constant.in.the.middle=Ignorar declaraciones con una constante en el medio
INSP.class.has.no.init=La clase no tiene método __init__
INSP.class.is.not.subtype.of.class=''{0}'' no es una instancia o subclase de ''{1}''
INSP.class.object.is.not.callable=El objeto ''{0}'' no es invocable
INSP.class.var.can.be.used.only.in.class.body='ClassVar' solo puede usarse para asignaciones en el cuerpo de la clase
INSP.class.var.can.not.be.assigned.to.instance=No se puede asignar a la variable de clase ''{0}'' a través de la instancia
INSP.class.var.can.not.be.used.in.annotation.for.function.return.value='ClassVar' no puede usarse en anotación para valor de retorno de función
INSP.class.var.can.not.be.used.in.annotations.for.function.parameters='ClassVar' no puede usarse en anotaciones para parámetros de función
INSP.class.var.can.not.be.used.in.function.body='ClassVar' no puede usarse en anotaciones para variables locales
INSP.class.var.can.not.include.type.variables=El parámetro 'ClassVar' no puede incluir variables de tipo
INSP.class.var.can.not.override.class.variable=No se puede sobrescribir la variable de clase ''{0}'' (previamente declarada en la clase base ''{1}'') con variable de instancia
INSP.class.var.can.not.override.instance.variable=No se puede sobrescribir la variable de instancia ''{0}'' (previamente declarada en la clase base ''{1}'') con variable de clase
INSP.classic.class.usage.old.style.class=Clase de estilo antiguo
INSP.classic.class.usage.old.style.class.ancestors=Clase de estilo antiguo, porque todas las clases de las que hereda son de estilo antiguo
INSP.comparison.with.none.performed.with.equality.operators=Comparación con None realizada con operadores de igualdad
INSP.compatibility.basestring.type.not.available.in.py3=El tipo basestring no está disponible en Python 3
INSP.compatibility.check.for.compatibility.with.python.versions=Verificar compatibilidad con versiones de Python\:
INSP.compatibility.feature.allow.async.and.await.as.names=permitir 'async' y 'await' como nombres
INSP.compatibility.feature.allow.backslashes.in.f-strings=permitir barras invertidas dentro de partes de expresión de f-strings
INSP.compatibility.feature.allow.deep.expression.nesting.in.f-strings=permitir anidar expresiones en especificadores de formato a esta profundidad
INSP.compatibility.feature.allow.duplicate.kwargs=permitir expresiones ** duplicadas
INSP.compatibility.feature.allow.duplicate.positional.varargs=permitir expresiones * duplicadas
INSP.compatibility.feature.allow.keyword.arguments.after.kwargs=permitir argumentos de palabra clave después de **expression
INSP.compatibility.feature.allow.new.lines.in.f-strings=permitir nuevas líneas en partes de expresión de f-strings sin comillas triples
INSP.compatibility.feature.allow.positional.arguments.after.expression=permitir argumentos posicionales después de *expression
INSP.compatibility.feature.allow.quote.reuse.in.f-strings=permitir anidamiento de literales de cadena con el mismo tipo de comillas dentro de f-strings
INSP.compatibility.feature.allow.to.mix.bytes.and.non.bytes.literals=permitir mezclar literales de bytes y no bytes
INSP.compatibility.feature.allow.trailing.comma.after.kwargs=permite una coma final después de expresión **
INSP.compatibility.feature.allow.trailing.comma.after.positional.vararg=permite una coma final después de expresión *
INSP.compatibility.feature.have.method=tiene el método {0}
INSP.compatibility.feature.have.module=tiene el módulo {0}
INSP.compatibility.feature.have.module.builtin=tiene el módulo __builtin__
INSP.compatibility.feature.have.module.builtins=tiene el módulo builtins
INSP.compatibility.feature.have.nonlocal.keyword=tiene la palabra clave nonlocal
INSP.compatibility.feature.have.type.long=tiene el tipo long. Use int en su lugar.
INSP.compatibility.feature.line.comments.in.f-strings=permite comentarios dentro de partes de expresión de f-strings
INSP.compatibility.feature.support.arbitrary.expressions.as.decorator=soporta expresiones arbitrarias como decorador
INSP.compatibility.feature.support.assignment.expressions=soporta expresiones de asignación
INSP.compatibility.feature.support.backquotes=soporta comillas invertidas, use repr() en su lugar
INSP.compatibility.feature.support.continue.inside.finally.clause=soporta 'continue' dentro de cláusula 'finally'
INSP.compatibility.feature.support.diamond.operator=soporta <>, use \!\= en su lugar
INSP.compatibility.feature.support.ellipsis.outside.slices=soporta '...' fuera de segmentaciones de secuencia
INSP.compatibility.feature.support.long.integer.literal.suffix=soporta el sufijo ''{0}''
INSP.compatibility.feature.support.match.statements=soporta declaraciones match
INSP.compatibility.feature.support.matrix.multiplication.operators=soporta operadores de multiplicación de matrices
INSP.compatibility.feature.support.old.style.octal.literals=soporta esta sintaxis. Requiere el prefijo '0o' para literales octales
INSP.compatibility.feature.support.parenthesized.context.expressions=soporta expresiones de contexto entre paréntesis
INSP.compatibility.feature.support.positional.only.parameters=soporta parámetros solo posicionales
INSP.compatibility.feature.support.print.statement=soporta esta sintaxis. La declaración print ha sido reemplazada por la función print()
INSP.compatibility.feature.support.raise.with.no.arguments.outside.except.block=soporta esta sintaxis. Raise sin argumentos solo puede usarse en un bloque except
INSP.compatibility.feature.support.starred.except.part=soporta parte except*
INSP.compatibility.feature.support.starred.expressions.as.assignment.targets=soporta expresiones con asterisco como objetivos de asignación
INSP.compatibility.feature.support.starred.expressions.in.dicts=soporta expresiones con asterisco en diccionarios
INSP.compatibility.feature.support.starred.expressions.in.subscriptions=soporta expresiones con asterisco en subscripciones
INSP.compatibility.feature.support.starred.expressions.in.tuples.lists.and.sets=soporta expresiones con asterisco en tuplas, listas y conjuntos
INSP.compatibility.feature.support.starred.expressions.in.type.annotations=soporta expresiones con asterisco en anotaciones de tipo
INSP.compatibility.feature.support.string.literal.prefix=soporta el prefijo ''{0}''
INSP.compatibility.feature.support.super.without.arguments=soporta esta sintaxis. super() debe tener argumentos en Python 2
INSP.compatibility.feature.support.this.syntax=soporta esta sintaxis
INSP.compatibility.feature.support.this.syntax.in.list.comprehensions=soporta esta sintaxis en comprensiones de lista
INSP.compatibility.feature.support.type.alias.statements=soporta declaraciones de alias de tipo
INSP.compatibility.feature.support.underscores.in.numeric.literals=soporta guiones bajos en literales numéricos
INSP.compatibility.feature.support.unpacking.without.parentheses.in.return.statements=soporta desempaquetado sin paréntesis en declaraciones return
INSP.compatibility.feature.support.unpacking.without.parentheses.in.yield.statements=soporta desempaquetado sin paréntesis en declaraciones yield
INSP.compatibility.feature.support.variable.annotations=soporta anotaciones de variables
INSP.compatibility.feature.support.yield.from=soporta esta sintaxis. La delegación a un subgenerador está disponible desde Python 3.3; use iteración explícita sobre el subgenerador en su lugar.
INSP.compatibility.inspection.unsupported.feature.prefix=Python {0,choice,1\#versión|2\#versiones} {1} {0,choice,1\#no|2\#no} {2}
INSP.compatibility.keyword.argument.repeated=Argumento de palabra clave repetido
INSP.compatibility.new.union.syntax.not.available.in.earlier.version=permite escribir tipos union como X | Y
INSP.compatibility.old.dict.methods.not.available.in.py3=Los métodos dict.iterkeys(), dict.iteritems() y dict.itervalues() no están disponibles en Python 3
INSP.compatibility.positional.argument.after.keyword.argument=Argumento posicional después de argumento de palabra clave
INSP.compatibility.positional.argument.after.kwargs=Argumento posicional después de expresión **
INSP.compatibility.pre35.versions.do.not.allow.return.with.argument.inside.generator=Las versiones de Python < 3.3 no permiten 'return' con argumento dentro de un generador.
INSP.compatibility.support.equality.signs.in.fstrings=soporta signos de igualdad en f-strings
INSP.compatibility.this.syntax.available.only.since.py3=Esta sintaxis solo está disponible desde Python 3
INSP.dataclasses.argument.ignored.if.class.already.defines.method=''{0}'' se ignora si la clase ya define el método ''{1}''
INSP.dataclasses.attribute.default.set.using.method=Se establece un valor por defecto usando ''{0}''
INSP.dataclasses.attribute.lacks.type.annotation=El atributo ''{0}'' carece de anotación de tipo
INSP.dataclasses.attribute.useless.until.post.init.declared=El atributo ''{0}'' es inútil hasta que se declare ''__post_init__''
INSP.dataclasses.attrs.post.init.should.not.take.any.parameters.except.self='__attrs_post_init__' no debe tomar ningún parámetro excepto 'self'
INSP.dataclasses.attrs.post.init.would.not.be.called.until.init.parameter.set.to.true='__attrs_post_init__' no se llamará hasta que el parámetro 'init' se establezca en True
INSP.dataclasses.cannot.specify.both.default.and.default.factory=No se puede especificar tanto 'default' como 'default_factory'
INSP.dataclasses.cannot.specify.both.default.and.factory=No se puede especificar tanto 'default' como 'factory'
INSP.dataclasses.eq.must.be.true.if.order.true='eq' debe ser true si 'order' es true
INSP.dataclasses.field.cannot.have.default.factory=El campo no puede tener una factory por defecto
INSP.dataclasses.frozen.attribute.should.be.false.if.class.defines.setattr.or.delattr='frozen' debe ser False si la clase define '__setattr__' o '__delattr__'
INSP.dataclasses.frozen.dataclasses.can.not.inherit.non.frozen.one=Las dataclasses congeladas no pueden heredar de una no congelada y viceversa
INSP.dataclasses.hash.ignored.if.class.already.defines.cmp.or.order.or.frozen.parameters='__hash__' se ignora si la clase ya define los parámetros 'cmp/order' y 'frozen'
INSP.dataclasses.method.is.ignored.if.class.already.defines.parameter=''{0}'' se ignora si la clase ya define el parámetro ''{1}''
INSP.dataclasses.method.should.be.called.on.attrs.instances=El método ''{0}'' debe llamarse en instancias de attrs
INSP.dataclasses.method.should.be.called.on.attrs.types=El método ''{0}'' debe llamarse en tipos de attrs
INSP.dataclasses.method.should.be.called.on.dataclass.instances=El método ''{0}'' debe llamarse en instancias de dataclass
INSP.dataclasses.method.should.be.called.on.dataclass.instances.or.types=El método ''{0}'' debe llamarse en instancias o tipos de dataclass
INSP.dataclasses.method.should.take.only.n.parameter=''{0}'' debe tomar solo {1} {1,choice,1\#parámetro|2\#parámetros}
INSP.dataclasses.mutable.attribute.default.not.allowed.use.default.factory=No se permite el valor por defecto mutable ''{0}''. Use ''default_factory''
INSP.dataclasses.object.attribute.read.only=El atributo ''{1}'' del objeto ''{0}'' es de solo lectura
INSP.dataclasses.object.could.have.no.attribute.because.it.declared.as.init.only=El objeto ''{0}'' no puede tener el atributo ''{1}'' porque está declarado como solo-init
INSP.dataclasses.operator.not.supported.between.instances.of.class=''{0}'' no soportado entre instancias de ''{1}''
INSP.dataclasses.operator.not.supported.between.instances.of.classes=''{0}'' no soportado entre instancias de ''{1}'' y ''{2}''
INSP.dataclasses.order.argument.should.be.false.if.class.defines.one.of.order.methods='order' debe ser False si la clase define uno de los métodos de orden
INSP.dataclasses.post.init.should.take.all.init.only.variables.in.same.order.they.defined='__post_init__' debe tomar todas las variables solo-init en el mismo orden en que están definidas
INSP.dataclasses.post.init.should.take.all.init.only.variables.including.inherited.in.same.order.they.defined='__post_init__' debe tomar todas las variables solo-init (incl. heredadas) en el mismo orden en que están definidas
INSP.dataclasses.post.init.would.not.be.called.until.init.parameter.set.to.true='__post_init__' no se llamará hasta que el parámetro 'init' se establezca en True
INSP.dataclasses.unsafe.hash.attribute.should.be.false.if.class.defines.hash='unsafe_hash' debe ser False si la clase define '__hash__'
INSP.decorator.receives.unexpected.builtin=Este decorador no recibirá un callable que pueda esperar; el decorador incorporado devuelve un objeto especial
INSP.decorators.method.only.decorator.on.method.outside.class=Decorador {0} en un método fuera de la clase
INSP.default.arguments.default.argument.value.mutable=El valor del argumento por defecto es mutable
INSP.deleter.should.not.return=El deleter no debe retornar un valor
INSP.deleter.signature.advice=La firma del deleter debe ser (self)
INSP.deprecation.abc.decorator.deprecated.use.alternative=''{0}'' está obsoleto desde Python 3.3. Use ''{1}'' con ''{2}'' en su lugar
INSP.dict.creation.this.dictionary.creation.could.be.rewritten.as.dictionary.literal=Esta creación de diccionario podría reescribirse como un literal de diccionario
INSP.doc.param.should.be.str=El parámetro doc debe ser una cadena
INSP.docstring.types.change.type=Cambiar tipo de {0} de {1} a {2}
INSP.docstring.types.dynamically.inferred.type.does.not.match.specified.type=El tipo inferido dinámicamente ''{0}'' no coincide con el tipo especificado ''{1}''
INSP.docstring.types.fix.docstring=Corregir docstring
INSP.dunder.slots.class.object.attribute.read.only=El atributo ''{1}'' del objeto ''{0}'' es de solo lectura
INSP.dunder.slots.name.in.slots.conflicts.with.class.variable=''{0}'' en __slots__ entra en conflicto con una variable de clase
INSP.duplicate.keys.dictionary.contains.duplicate.keys=El diccionario contiene claves duplicadas ''{0}''
INSP.empty.docstring=Docstring vacío
INSP.exception.inheritance.exception.does.not.inherit.from.base.exception.class=La excepción no hereda de la clase base 'Exception'
INSP.expected.dict.got.type=Se esperaba un diccionario, se obtuvo {0}
INSP.expected.iterable.got.type=Se esperaba un iterable, se obtuvo {0}
INSP.expression.can.be.simplified=La expresión puede simplificarse
INSP.expression.is.not.callable=La expresión no es invocable
INSP.final.already.declared.name.could.not.be.redefined.as.final=Un nombre ya declarado no puede redefinirse como 'Final'
INSP.final.either.instance.attribute.or.class.attribute.could.be.type.hinted.as.final=Tanto el atributo de instancia como el atributo de clase pueden tener sugerencia de tipo 'Final'
INSP.final.final.attribute.could.not.be.overridden=''{0}'' es ''Final'' y no puede ser sobrescrito
INSP.final.final.attribute.should.be.declared.in.class.body.or.init=El atributo 'Final' debe declararse en el cuerpo de la clase o en '__init__'
INSP.final.final.class.could.not.contain.abstract.methods=La clase 'Final' no puede contener métodos abstractos
INSP.final.final.could.not.be.mixed.with.abstract.decorators='Final' no puede mezclarse con decoradores abstractos
INSP.final.final.could.not.be.used.in.annotation.for.function.return.value='Final' no puede usarse en la anotación para el valor de retorno de una función
INSP.final.final.could.not.be.used.in.annotations.for.function.parameters='Final' no puede usarse en anotaciones para parámetros de función
INSP.final.final.could.not.be.used.inside.loop='Final' no puede usarse dentro de un bucle
INSP.final.final.could.only.be.used.as.outermost.type='Final' solo puede usarse como tipo más externo
INSP.final.final.name.should.be.initialized.with.value=El nombre 'Final' debe inicializarse con un valor
INSP.final.final.should.be.placed.on.first.overload='@final' debe colocarse en la primera sobrecarga
INSP.final.final.should.be.placed.on.implementation='@final' debe colocarse en la implementación
INSP.final.final.target.could.not.be.reassigned=''{0}'' es ''Final'' y no puede ser reasignado
INSP.final.if.assigned.value.omitted.there.should.be.explicit.type.argument.to.final=Si se omite el valor asignado, debe haber un argumento de tipo explícito para 'Final'
INSP.final.method.marked.as.final.should.not.be.overridden=''{0}'' está marcado como ''@final'' y no debe ser sobrescrito
INSP.final.no.need.to.mark.method.in.final.class.as.final=No es necesario marcar el método en una clase 'Final' como '@final'
INSP.final.non.method.function.could.not.be.marked.as.final=Una función que no es método no puede marcarse como '@final'
INSP.final.super.classes.are.marked.as.final.and.should.not.be.subclassed={0} {1,choice,1\#está|2\#están} marcada(s) como ''@final'' y no debe(n) tener subclases
INSP.first.arg.assign.method.parameter.reassigned=El parámetro del método ''{0}'' ha sido reasignado
INSP.first.param.must.not.be.tuple=El primer parámetro de un método no estático no debe ser una tupla
INSP.format.requires.mapping=El formato requiere mapeo
INSP.format.requires.no.mapping=El formato no requiere mapeo
INSP.from.future.import.from.future.imports.must.occur.at.beginning.file=Las importaciones from __future__ deben ocurrir al inicio del archivo
INSP.func.property.name.mismatch=Los nombres de la función y el decorador no coinciden; no se creó el acceso a la propiedad
INSP.function.lacks.positional.argument=La función ''{0}'' carece de un argumento posicional
INSP.getter.return.smth=El getter debe retornar o generar algo
INSP.getter.signature.advice=La firma del getter debe ser (self)
INSP.global.variable.undefined=La variable global ''{0}'' no está definida a nivel de módulo
INSP.incompatible.options=Las opciones de formato en el bloque "{0}" son incompatibles
INSP.inconsistent.indentation.mix.tabs.spaces=Indentación inconsistente\: mezcla de tabulaciones y espacios
INSP.inconsistent.indentation.previous.line.used.spaces.this.line.uses.tabs=Indentación inconsistente\: la línea anterior usó espacios, esta línea usa tabulaciones
INSP.inconsistent.indentation.previous.line.used.tabs.this.line.uses.spaces=Indentación inconsistente\: la línea anterior usó tabulaciones, esta línea usa espacios
INSP.incorrect.arguments=Argumento(s) incorrecto(s)
INSP.init.incompatible.to.new=La firma no es compatible con __new__
INSP.interpreter.configure.python.interpreter=Configurar intérprete de Python
INSP.interpreter.interpreter.settings=Configuración del intérprete
INSP.interpreter.invalid.python.interpreter.selected.for.module=Intérprete de Python inválido seleccionado para el módulo
INSP.interpreter.invalid.python.interpreter.selected.for.project=Intérprete de Python inválido seleccionado para el proyecto
INSP.interpreter.no.python.interpreter.configured.for.module=No hay intérprete de Python configurado para el módulo
INSP.interpreter.no.python.interpreter.configured.for.project=No hay intérprete de Python configurado para el proyecto
INSP.interpreter.pipenv.interpreter.associated.with.another.module=El intérprete Pipenv está asociado con otro módulo\: ''{0}''
INSP.interpreter.pipenv.interpreter.associated.with.another.project=El intérprete Pipenv está asociado con otro proyecto\: ''{0}''
INSP.interpreter.pipenv.interpreter.not.associated.with.any.module=El intérprete Pipenv no está asociado con ningún módulo
INSP.interpreter.pipenv.interpreter.not.associated.with.any.project=El intérprete Pipenv no está asociado con ningún proyecto
INSP.interpreter.python.has.reached.its.end.life.and.is.no.longer.supported.in.python.plugin=Python {0} ha alcanzado su fecha de fin de vida y ya no está soportado en el plugin de Python
INSP.interpreter.python.has.reached.its.end.of.life.and.is.no.longer.supported.in.pycharm=Python {0} ha alcanzado su fecha de fin de vida y ya no está soportado en PyCharm
INSP.interpreter.use.interpreter=Usar {0}
INSP.interpreter.use.suggested.interpreter=Usar intérprete sugerido
INSP.list.creation.this.list.creation.could.be.rewritten.as.list.literal=La inicialización de lista en múltiples pasos puede reemplazarse con un literal de lista
INSP.mandatory.encoding.checkbox.enable.in.python.3=Habilitar en Python 3+
INSP.mandatory.encoding.label.encoding.comment.format=Formato del comentario de codificación\:
INSP.mandatory.encoding.label.select.default.encoding=Seleccionar codificación predeterminada\:
INSP.mandatory.encoding.no.encoding.specified.for.file=No se especificó codificación para el archivo
INSP.manual.to.auto.field.numbering=No se puede cambiar de especificación manual de campos a numeración automática
INSP.message.single.quoted.docstring=Se deben usar cadenas con triple comilla doble para docstrings.
INSP.method.may.be.static=El método <code>\#ref</code> puede ser 'static'
INSP.method.parameters.metaclass.method.first.argument.name=Nombre del primer argumento del método de metaclase
INSP.missing.parameter.in.docstring=Falta el parámetro {0} en el docstring
INSP.missing.super.constructor.message=Falta la llamada a __init__ de la superclase
INSP.missing.type.hints.add.type.hints=Agregar type hints
INSP.missing.type.hints.add.type.hints.for=Agregar type hints para ''{0}''
INSP.missing.type.hints.checkbox.only.when.types.are.known=Solo cuando los tipos son conocidos (recopilados en tiempo de ejecución o inferidos)
INSP.missing.type.hints.type.hinting.missing.for.function.definition=Faltan type hints para la definición de función
INSP.must.have.first.parameter=El método debe tener un primer parámetro, generalmente llamado ''{0}''
INSP.named.tuple=Definición inválida de 'typing.NamedTuple'
INSP.new.incompatible.to.init=La firma no es compatible con __init__
INSP.new.style.generics.are.not.allowed.inside.type.param.bounds=Los tipos genéricos no están permitidos dentro de restricciones y límites de parámetros de tipo
INSP.new.style.generics.assignment.expressions.not.allowed=No se permiten expresiones de asignación dentro de declaraciones de clases, funciones y alias de tipo que tengan lista de parámetros de tipo
INSP.new.style.generics.classes.with.type.param.list.should.not.extend.generic=Las clases con una lista explícita de parámetros de tipo no deben extender 'Generic'
INSP.new.style.generics.extending.protocol.does.not.need.parameterization=Extender 'Protocol' no necesita parametrización en clases con lista de parámetros de tipo
INSP.new.style.generics.mixing.old.style.and.new.style.type.vars.not.allowed=No se permite mezclar variables de tipo tradicionales y de nuevo estilo
INSP.new.style.generics.old.style.type.vars.not.allowed.in.new.style.type.aliases=No se permiten TypeVars tradicionales dentro de declaraciones de alias de tipo de nuevo estilo
INSP.no.docstring=Falta docstring
INSP.no.format.specifier.char=Falta el carácter especificador de formato
INSP.non.ascii.char.non.ascii.character.in.file.but.no.encoding.declared=Carácter no ASCII ''{0}'' en el archivo, pero no se declaró codificación
INSP.none.function.assignment=La función ''{0}'' no retorna nada
INSP.oldstyle.class.getattribute=La clase de estilo antiguo contiene definición de __getattribute__
INSP.oldstyle.class.slots=La clase de estilo antiguo contiene definición de __slots__
INSP.oldstyle.class.super=La clase de estilo antiguo contiene llamada al método super
INSP.overloads.series.overload.decorated.functions.should.always.be.followed.by.implementation=Una serie de funciones decoradas con @overload siempre debe ir seguida de una implementación sin @overload
INSP.overloads.series.overload.decorated.methods.should.always.be.followed.by.implementation=Una serie de métodos decorados con @overload siempre debe ir seguida de una implementación sin @overload
INSP.overloads.this.function.overload.signature.not.compatible.with.implementation=La firma de esta función decorada con @overload no es compatible con la implementación
INSP.overloads.this.method.overload.signature.not.compatible.with.implementation=La firma de este método decorado con @overload no es compatible con la implementación
INSP.override.missing.super.method=Falta el método super para override
INSP.package.requirements.add.import=Agregar Import
INSP.package.requirements.administrator.privileges.required=Se requieren privilegios de administrador
INSP.package.requirements.administrator.privileges.required.button.configure=Configurar
INSP.package.requirements.administrator.privileges.required.button.install.anyway=Instalar de todos modos
INSP.package.requirements.administrator.privileges.required.description=La instalación de paquetes en ''{0}'' requiere privilegios de administrador.\n\nConfigura un entorno virtual por proyecto como intérprete del proyecto\npara evitar instalar paquetes en un área protegida del sistema de archivos.
INSP.package.requirements.requirement.has.been.ignored=''{0}'' ha sido ignorado
INSP.package.requirements.requirements.file.empty=El archivo de requisitos está vacío
INSP.package.requirements.requirements.have.been.ignored=Los requisitos han sido ignorados
INSP.pandas.series.values.replace.with.tolist=Se recomienda el método Series.to_list()
INSP.parameter(s).unfilled=Parámetro(s) sin completar
INSP.parameter.unfilled=Parámetro ''{0}'' sin completar
INSP.pep8.coding.style.violation=Violación del estilo de codificación PEP 8
INSP.pep8.ignore.base.class=Ignorar clase base
INSP.pep8.ignore.method.names.for.descendants.of.class=Ignorar nombres de métodos para descendientes de clase
INSP.pep8.naming.argument.name.should.be.lowercase=El nombre del argumento debe estar en minúsculas
INSP.pep8.naming.camelcase.variable.imported.as.constant=Variable CamelCase importada como constante
INSP.pep8.naming.camelcase.variable.imported.as.lowercase=Variable CamelCase importada como minúscula
INSP.pep8.naming.class.names.should.use.capwords.convention=Los nombres de clase deben usar la convención CapWords
INSP.pep8.naming.column.name.excluded.base.classes=Clases base excluidas\:
INSP.pep8.naming.column.name.ignored.errors=Errores ignorados\:
INSP.pep8.naming.constant.variable.imported.as.non.constant=Variable constante importada como no constante
INSP.pep8.naming.function.name.should.be.lowercase=El nombre de la función debe estar en minúsculas
INSP.pep8.naming.lowercase.variable.imported.as.non.lowercase=Variable en minúsculas importada como no minúsculas
INSP.pep8.naming.variable.in.function.should.be.lowercase=La variable en la función debe estar en minúsculas
INSP.possible.callees=Posibles destinatarios de llamada
INSP.probably.mistyped.self=¿No querías decir 'self'?
INSP.property.cannot.be.deleted=La propiedad ''{0}'' no puede eliminarse
INSP.property.cannot.be.read=La propiedad ''{0}'' no puede leerse
INSP.property.cannot.be.set=La propiedad ''{0}'' no puede establecerse
INSP.protected.member.access.to.protected.member.of.class=Acceso a un miembro protected {0} de una clase
INSP.protected.member.access.to.protected.member.of.module=Acceso a un miembro protected {0} de un módulo
INSP.protected.member.ignore.annotations=Ignorar anotaciones
INSP.protected.member.ignore.test.functions=Ignorar funciones de test
INSP.protected.member.name.not.declared.in.all=''{0}'' no está declarado en __all__
INSP.protocol.all.bases.protocol.must.be.protocols=Todas las bases de un protocolo deben ser protocolos
INSP.protocol.element.type.incompatible.with.protocol=El tipo de ''{0}'' es incompatible con ''{1}''
INSP.protocol.newtype.cannot.be.used.with.protocol.classes=NewType no puede usarse con clases de protocolo
INSP.protocol.only.runtime.checkable.protocols.can.be.used.with.instance.class.checks=Solo los protocolos @runtime_checkable pueden usarse con comprobaciones de instancia y clase
INSP.python.suppressor.suppress.for.class=Suprimir para una clase
INSP.python.suppressor.suppress.for.function=Suprimir para una función
INSP.python.suppressor.suppress.for.statement=Suprimir para una declaración
INSP.redeclared.name=Se redeclaró ''{0}'' definido arriba sin uso
INSP.redundant.parens.ignore.argument.of.operator=Ignorar argumento del operador %
INSP.redundant.parens.ignore.empty.lists.of.base.classes=Ignorar listas vacías de clases base
INSP.redundant.parens.ignore.tuples=Ignorar tuplas
INSP.relative.import.relative.import.outside.package=Importación relativa fuera de un paquete
INSP.requirements.ignore.packages.label=Paquetes ignorados\:
INSP.requirements.package.containing.module.not.listed.in.project.requirements=El paquete que contiene el módulo ''{0}'' no está listado en los requisitos del proyecto
INSP.requirements.package.requirements.not.satisfied=No se satisface{1,choice,1\#n|2\#n} {1,choice,1\#el requisito|2\#los requisitos} {0} del paquete
INSP.setter.should.not.return=El setter no debería retornar un valor
INSP.setter.signature.advice=La firma del setter debería ser (self, value)
INSP.shadowing.builtins.ignore.built.ins.label=Incorporados ignorados\:
INSP.shadowing.builtins.shadows.built.in.name=Oculta el nombre incorporado ''{0}''
INSP.shadowing.names=Ocultando nombres de ámbitos exteriores
INSP.shadows.name.from.outer.scope=Oculta el nombre ''{0}'' del ámbito exterior
INSP.signature.mismatch=La firma del método ''{0}'' no coincide con la firma del método base en la clase ''{1}''
INSP.simplify.boolean.check.ignore.comparison.to.zero=Ignorar comparación con cero
INSP.simplify.chained.comparison=Simplificar comparación encadenada
INSP.statement.effect.statement.having.no.effect.can.be.replaced.with.function.call=La declaración parece no tener efecto y puede reemplazarse con una llamada a función para tener efecto
INSP.statement.effect.statement.seems.to.have.no.effect=La declaración parece no tener efecto
INSP.str.format.can.not.use.star.in.formats.when.using.mapping=No se puede usar '*' en formatos cuando se usa un mapeo
INSP.str.format.key.has.no.argument=La clave ''{0}'' no tiene argumento correspondiente
INSP.str.format.unexpected.argument.type=Tipo inesperado {0}
INSP.str.format.unsupported.format.character.b=Carácter de formato 'b' no soportado
INSP.strange.arg.want.callable=Argumento extraño; se espera un callable
INSP.stub.packages=Anunciador de paquetes stub
INSP.stub.packages.compatibility=Paquetes stub incompatibles
INSP.stub.packages.compatibility.ignore=Ignorar compatibilidad de ''{0}''
INSP.stub.packages.compatibility.ignored.packages.label=Paquetes stub ignorados\:
INSP.stub.packages.compatibility.incompatible.packages.message=''{0}{1}{2}'' es incompatible con ''{3}{4}{5}''. Versión esperada de ''{6}''\: [{7}]
INSP.symbol.is.not.callable=''{0}'' no es invocable
INSP.too.broad.exception.clause=Cláusula de excepción demasiado amplia
INSP.too.few.args.for.fmt.string=Muy pocos argumentos para la cadena de formato
INSP.too.few.keys=Muy pocas claves de mapeo
INSP.too.many.args.for.fmt.string=Demasiados argumentos para la cadena de formato
INSP.trailing.semicolon=Punto y coma al final de la declaración
INSP.try.except.import.error=''{0}'' en el bloque try con ''except ImportError'' también debería definirse en el bloque except
INSP.tuple.assignment.balance.need.more.values.to.unpack=Se necesitan más valores para desempaquetar
INSP.tuple.assignment.balance.only.one.starred.expression.allowed.in.assignment=Solo se permite una expresión con asterisco en la asignación
INSP.tuple.assignment.balance.too.many.values.to.unpack=Demasiados valores para desempaquetar
INSP.tuples.never.assign.items=Las tuplas no soportan asignación de elementos
INSP.type.checker.expected.matched.type.got.type.instead=Se esperaba el tipo ''{0}'' (tipo genérico coincidente ''{1}''), pero se obtuvo ''{2}''
INSP.type.checker.expected.type.from.dunder.set.got.type.instead=Se esperaba el tipo ''{0}'' (de ''__set__''), pero se obtuvo ''{1}''
INSP.type.checker.expected.type.got.type.instead=Se esperaba el tipo ''{0}'', pero se obtuvo ''{1}''
INSP.type.checker.expected.types.prefix=Tipo(s) posible(s)\:
INSP.type.checker.init.should.return.none=__init__ debe retornar None
INSP.type.checker.only.concrete.class.can.be.used.where.matched.protocol.expected=Solo se puede usar una clase concreta donde se espera el protocolo ''{0}'' (tipo genérico coincidente ''{1}'')
INSP.type.checker.only.concrete.class.can.be.used.where.protocol.expected=Solo se puede usar una clase concreta donde se espera el protocolo ''{0}''
INSP.type.checker.returning.type.has.implicit.return=Función que retorna ''{0}'' tiene ''return None'' implícito
INSP.type.checker.type.does.not.have.expected.attribute=El tipo ''{0}'' no tiene {1,choice,1\#el atributo esperado|2\#los atributos esperados} {2}
INSP.type.checker.typed.dict.extra.key=Clave extra ''{0}'' para TypedDict ''{1}''
INSP.type.checker.typed.dict.missing.keys=A TypedDict ''{0}'' le {1,choice,1\#falta la clave|2\#faltan las claves}\: {2}
INSP.type.checker.unexpected.argument.from.paramspec=Argumento inesperado (de ParamSpec ''{0}'')
INSP.type.checker.unexpected.types.prefix=Tipo(s) inesperado(s)\:
INSP.type.checker.unfilled.parameter.for.paramspec=Parámetro ''{0}'' sin completar (de ParamSpec ''{1}'')
INSP.type.checker.unfilled.vararg=Parámetro ''{0}'' sin completar, se esperaba ''{1}''
INSP.type.checker.yield.from.async.generator=No se puede usar yield from en ''{0}'', use 'async for' en su lugar
INSP.type.checker.yield.from.send.type.mismatch=Se esperaba el tipo send ''{0}'', pero se obtuvo ''{1}''
INSP.type.checker.yield.type.mismatch=Se esperaba el tipo yield ''{0}'', pero se obtuvo ''{1}''
INSP.type.hints.annotated.must.be.called.with.at.least.two.arguments='Annotated' debe ser llamado con al menos dos argumentos
INSP.type.hints.argument.to.paramspec.must.be.string.equal.to.variable.name=El argumento para 'ParamSpec()' debe ser una cadena igual al nombre de la variable a la que se asigna
INSP.type.hints.argument.to.typevar.must.be.string.equal.to.variable.name=El argumento para 'TypeVar()' debe ser una cadena igual al nombre de la variable a la que se asigna
INSP.type.hints.argument.to.typevar.tuple.must.be.string.equal.to.variable.name=El argumento para 'TypeVarTuple()' debe ser una cadena igual al nombre de la variable a la que se asigna
INSP.type.hints.bivariant.type.variables.are.not.supported=No se soportan variables de tipo bivariantes
INSP.type.hints.builtin.cannot.be.parameterized.directly=El incorporado ''{0}'' no puede ser parametrizado directamente
INSP.type.hints.cannot.inherit.from.generic.multiple.times=No se puede heredar de 'Generic[...]' múltiples veces
INSP.type.hints.cannot.inherit.from.plain.generic=No se puede heredar de 'Generic' simple
INSP.type.hints.generics.should.be.specified.through.square.brackets=Los genéricos deben especificarse mediante corchetes
INSP.type.hints.illegal.callable.format='Callable' debe usarse como 'Callable[[arg, ...], result]'
INSP.type.hints.illegal.first.parameter=El primer parámetro de 'Callable' debe ser una expresión de parámetro
INSP.type.hints.illegal.literal.parameter='Literal' puede ser parametrizado con literales int, cadenas byte y unicode, bools, valores Enum, None, otros tipos literales o alias de tipo a otros tipos literales
INSP.type.hints.invalid.type.self=Tipo 'self' inválido
INSP.type.hints.literal.must.have.at.least.one.parameter='Literal' debe tener al menos un parámetro
INSP.type.hints.non.default.type.vars.cannot.follow.defaults=TypeVars sin valor predeterminado no pueden seguir a los que tienen valores predeterminados
INSP.type.hints.non.self.attribute.could.not.be.type.hinted=No se puede dar sugerencia de tipo al atributo non-self
INSP.type.hints.parameterized.generics.cannot.be.used.with.instance.class.checks=Los genéricos parametrizados no pueden usarse con comprobaciones de instancia y clase
INSP.type.hints.parameters.to.generic.must.all.be.type.variables=Los parámetros de 'Generic[...]' deben ser todos variables de tipo
INSP.type.hints.parameters.to.generic.must.all.be.unique=Los parámetros de 'Generic[...]' deben ser todos únicos
INSP.type.hints.parameters.to.generic.types.cannot.contain.more.than.one.unpacking=Los parámetros para genéricos no pueden contener más de un desempaquetado
INSP.type.hints.parameters.to.generic.types.must.be.types=Los parámetros para tipos genéricos deben ser tipos
INSP.type.hints.paramspec.expects.string.literal.as.first.argument='ParamSpec()' espera un literal de string como primer argumento
INSP.type.hints.self.use.for.cls.parameter.with.self.annotation=No se puede usar 'Self' si el parámetro 'cls' no está anotado con 'Self'
INSP.type.hints.self.use.for.self.parameter.with.self.annotation=No se puede usar 'Self' si el parámetro 'self' no está anotado con 'Self'
INSP.type.hints.self.use.in.staticmethod=No se puede usar 'Self' en staticmethod
INSP.type.hints.self.use.outside.class=No se puede usar 'Self' fuera de una clase
INSP.type.hints.single.typevar.constraint.not.allowed=No se permite una única restricción
INSP.type.hints.some.type.variables.are.not.listed.in.generic=Algunas variables de tipo ({0}) no están listadas en ''Generic[{1}]''
INSP.type.hints.type.alias.cannot.be.parameterized='TypeAlias' no puede ser parametrizado
INSP.type.hints.type.alias.must.be.immediately.initialized=El alias de tipo debe inicializarse inmediatamente
INSP.type.hints.type.alias.must.be.top.level.declaration=El alias de tipo debe ser una declaración de nivel superior
INSP.type.hints.type.alias.must.be.used.as.standalone.type.hint='TypeAlias' debe usarse como type hint independiente
INSP.type.hints.type.cannot.be.used.with.instance.class.checks=''{0}'' no puede usarse con comprobaciones de instancia y clase
INSP.type.hints.type.comment.cannot.be.matched.with.unpacked.variables=El comentario de tipo no puede coincidir con variables desempaquetadas
INSP.type.hints.type.self.not.supertype.its.class=El tipo de self ''{0}'' no es un supertipo de su clase ''{1}''
INSP.type.hints.type.signature.has.too.few.arguments=La firma de tipo tiene muy pocos argumentos
INSP.type.hints.type.signature.has.too.many.arguments=La firma de tipo tiene demasiados argumentos
INSP.type.hints.type.specified.both.in.type.comment.and.annotation=Tipos especificados tanto en comentario de tipo como en anotación
INSP.type.hints.type.var.tuple.must.always.be.unpacked=TypeVarTuple siempre debe estar desempaquetado
INSP.type.hints.type.variables.cannot.be.used.with.instance.class.checks=Las variables de tipo no pueden usarse con comprobaciones de instancia y clase
INSP.type.hints.type.variables.must.not.be.redefined=Las variables de tipo no deben redefinirse
INSP.type.hints.typeIs.does.not.match=El tipo de retorno de TypeIs ''{0}'' no es consistente con el tipo del primer parámetro ''{1}''
INSP.type.hints.typeIs.has.zero.arguments=Las funciones TypeGuard o TypeIs definidas por el usuario deben tener al menos un parámetro
INSP.type.hints.typevar.constraints.cannot.be.combined.with.bound=Las restricciones no pueden combinarse con bound\=…
INSP.type.hints.typevar.constraints.cannot.be.parametrized.by.type.variables=Las restricciones no pueden ser parametrizadas por variables de tipo
INSP.type.hints.typevar.expects.string.literal.as.first.argument='TypeVar()' espera un literal de string como primer argumento
INSP.type.hints.typevar.expression.must.be.always.directly.assigned.to.variable=Una expresión 'TypeVar()' siempre debe asignarse directamente a una variable
INSP.type.hints.typevar.tuple.expects.string.literal.as.first.argument='TypeVarTuple()' espera un literal de string como primer argumento
INSP.type.hints.typing.self.cannot.be.parameterized='Self' no puede ser parametrizado
INSP.typeddict.cannot.add.non.string.key.to.typeddict=No se puede agregar una clave no string a TypedDict "{0}"
INSP.typeddict.cannot.be.required.and.not.required.at.the.same.time=La clave no puede ser requerida y no requerida al mismo tiempo
INSP.typeddict.cannot.overwrite.typeddict.field=No se puede sobrescribir el campo TypedDict
INSP.typeddict.cannot.overwrite.typeddict.field.while.merging=No se puede sobrescribir el campo TypedDict ''{0}'' durante la fusión
INSP.typeddict.first.argument.has.to.match.variable.name=El primer argumento debe coincidir con el nombre de la variable
INSP.typeddict.invalid.statement.in.typeddict.definition.expected.field.name.field.type=Sentencia inválida en definición de TypedDict; se esperaba 'field_name\: field_type'
INSP.typeddict.key.cannot.be.deleted=La clave ''{0}'' de TypedDict ''{1}'' no puede ser eliminada
INSP.typeddict.key.should.be.string=La clave debe ser string
INSP.typeddict.qualifiers.cannot.be.used.outside.typeddict.definition=''{0}'' solo puede usarse en una definición de TypedDict
INSP.typeddict.required.notrequired.must.have.exactly.one.type.argument=''{0}'' debe tener exactamente un argumento de tipo
INSP.typeddict.right.hand.side.values.are.not.supported.in.typeddict=Los valores del lado derecho no están soportados en TypedDict
INSP.typeddict.specifying.metaclass.not.allowed.in.typeddict=No se permite especificar una metaclase en TypedDict
INSP.typeddict.this.operation.might.break.typeddict.consistency=Esta operación podría romper la consistencia de TypedDict
INSP.typeddict.total.value.must.be.true.or.false=El valor de 'total' debe ser True o False
INSP.typeddict.typeddict.cannot.have.key=TypedDict "{0}" no puede tener la clave ''{1}''
INSP.typeddict.typeddict.cannot.inherit.from.non.typeddict.base.class=TypedDict no puede heredar de una clase base que no sea TypedDict
INSP.typeddict.typeddict.field.is.readonly=La clave TypedDict "{0}" es ReadOnly
INSP.typeddict.typeddict.has.no.key=TypedDict "{0}" no tiene la clave ''{1}''
INSP.typeddict.typeddict.has.no.keys=TypedDict "{0}" no tiene las claves ({1})
INSP.typeddict.typeddict.key.must.be.string.literal.expected.one=La clave de TypedDict debe ser un literal de string; se esperaba uno de ({0})
INSP.typeddict.value.must.be.type=El valor debe ser un tipo
INSP.unbound.function.too.large=La función ''{0}'' es demasiado grande para analizar
INSP.unbound.local.variable=La variable local ''{0}'' podría ser referenciada antes de su asignación
INSP.unbound.name.undefined=El nombre ''{0}'' puede estar indefinido
INSP.unbound.nonlocal.variable=La variable nonlocal ''{0}'' debe estar vinculada en un ámbito de función exterior
INSP.unexpected.arg=Argumento inesperado
INSP.unexpected.arg(s)=Argumento(s) inesperado(s)
INSP.unexpected.parameter.in.docstring=Parámetro inesperado {0} en docstring
INSP.unnecessary.backslash.unnecessary.backslash.in.expression=Barra invertida innecesaria en la expresión
INSP.unreachable.code=Este código es inalcanzable
INSP.unresolved.refs.cannot.find.reference.in.type=No se puede encontrar la referencia ''{0}'' en ''{1}''
INSP.unresolved.refs.class.does.not.define.operator=La clase ''{0}'' no define ''{1}'', por lo que el operador ''{2}'' no puede usarse en sus instancias
INSP.unresolved.refs.class.object.has.no.attribute=El objeto ''{0}'' no tiene el atributo ''{1}''
INSP.unresolved.refs.ignore.references.label=Referencias ignoradas\:
INSP.unresolved.refs.import.resolves.to.its.containing.file=El import se resuelve a su archivo contenedor
INSP.unresolved.refs.module.not.found=Módulo ''{0}'' no encontrado
INSP.unresolved.refs.unresolved.attribute.for.class=Referencia de atributo no resuelta ''{0}'' para la clase ''{1}''
INSP.unresolved.refs.unresolved.reference=Referencia no resuelta ''{0}''
INSP.unsupported.format.character=Carácter de formato ''{0}'' no soportado
INSP.unused.import.statement=Sentencia import no utilizada <code>\#ref</code>
INSP.unused.locals.ignore.lambda.parameters=Ignorar parámetros lambda
INSP.unused.locals.ignore.range.iteration.variables=Ignorar variables de iteración de range
INSP.unused.locals.ignore.variables.starting.with=Ignorar variables que empiezan con '_'
INSP.unused.locals.ignore.variables.used.in.tuple.unpacking=Ignorar variables usadas en desempaquetado de tuplas
INSP.unused.locals.local.class.isnot.used=La clase local ''{0}'' no se utiliza
INSP.unused.locals.local.function.isnot.used=La función local ''{0}'' no se utiliza
INSP.unused.locals.local.variable.isnot.used=El valor de la variable local ''{0}'' no se utiliza
INSP.unused.locals.parameter.isnot.used=El valor del parámetro ''{0}'' no se utiliza
INSP.unused.locals.replace.with.wildcard=Reemplazar con _
INSP.use.fixture.without.declaration.in.test.function=El fixture ''{0}'' no es solicitado por funciones de test o marcador '@pytest.mark.usefixtures'
INSP.usually.named=Normalmente el primer parámetro de estos métodos se llama ''{0}''
INSP.usually.named.self=Normalmente el primer parámetro de un método se llama 'self'
INTN.NAME.add.type.hint.for.variable=Agregar type hint para variable
INTN.NAME.add.type.hints.for.function=Agregar type hints para función
INTN.NAME.convert.collection.literal=Convertir colección a {0}
INTN.NAME.convert.import.qualify=Convertir 'from module import' a 'import module'
INTN.NAME.convert.import.unqualify=Convertir 'import module' a 'from module import'
INTN.NAME.convert.type.comment.to.variable.annotation=Convertir comentario de tipo a anotación de variable
INTN.NAME.demorgan.law=Ley de De Morgan
INTN.NAME.flip.comparison=Invertir comparación
INTN.NAME.hide.type.annotations=Ocultar anotaciones de tipo
INTN.NAME.insert.docstring.stub=Insertar stub de docstring
INTN.NAME.join.if=Unir sentencias 'if'
INTN.NAME.negate.comparison=Negar comparación
INTN.NAME.specify.type.in.annotation=Especificar tipo para referencia usando anotación
INTN.NAME.specify.type.in.docstring=Especificar tipo para referencia en docstring
INTN.NAME.split.if=Dividir sentencia 'if'
INTN.NAME.toggle.import.alias=Alternar uso de alias de import
INTN.add.import.alias=Agregar alias
INTN.add.import.alias.dialog.message=Alias para ''{0}''\:
INTN.add.import.alias.title=Agregar Alias
INTN.add.import.alias.to.name=Agregar alias a ''{0}''
INTN.add.parameters.to.docstring=Agregar parámetros al docstring
INTN.add.qualifier=Agregar calificador ''{0}''
INTN.add.type.hint.for.variable=Agregar type hint para la variable ''{0}''
INTN.add.type.hint.for.variable.PEP484.incompatible.type=El tipo ''{0}'' no puede expresarse en línea en formato PEP 484
INTN.add.type.hints.for.function=Agregar type hints para la función ''{0}''
INTN.category.python=Python
INTN.convert.absolute.to.relative=Convertir importación absoluta a relativa
INTN.convert.builtin.import=Convertir importación de módulo incorporado a forma soportada
INTN.convert.collection.literal=Convertir {0} a {1}
INTN.convert.dict.constructor.to.dict.literal=Convertir constructor dict a literal dict
INTN.convert.dict.literal.to.dict.constructor=Convertir literal dict a constructor dict
INTN.convert.except.to=Convertir 'except exceptClass, Target' a 'except exceptClass as Target'
INTN.convert.lambda.to.function=Convertir lambda a función
INTN.convert.method.to.property=Convertir método a propiedad
INTN.convert.relative.to.absolute=Convertir importación relativa a absoluta
INTN.convert.static.method.to.function=Convertir método static a función
INTN.convert.to.from.import=Convertir a ''from {0} import {1}''
INTN.convert.to.fstring.literal=Convertir a literal f-string
INTN.convert.to.plain.import=Convertir a ''import {0}''
INTN.convert.type.comment.to.variable.annotation=Convertir a anotación de variable
INTN.convert.variadic.param=Convertir parámetros variables a normales
INTN.flip.comparison=Invertir ''{0}''
INTN.flip.comparison.to.operator=Invertir ''{0}'' a ''{1}''
INTN.format.operator.to.method=Convertir operador format a llamada del método 'str.format'
INTN.hide.type.annotations=Ocultar anotaciones de tipo
INTN.insert.assertion=Insertar aserción de tipo
INTN.insert.docstring.stub=Insertar stub de docstring
INTN.invert.if.condition=Invertir condición 'if'
INTN.join.if=Unir dos declaraciones 'if'
INTN.multiple.usages.of.import.found=Se Encontraron Múltiples Usos de la Importación
INTN.negate.comparison=Negar ''{0}'' a ''{1}''
INTN.quoted.string=Convertir strings con comillas simples a dobles y viceversa
INTN.quoted.string.double.to.single=Convertir string con comillas dobles a comillas simples
INTN.quoted.string.single.to.double=Convertir string con comillas simples a comillas dobles
INTN.remove.import.alias=Eliminar alias ''{0}''
INTN.remove.qualifier=Eliminar calificador ''{0}''
INTN.remove.qualifier.from.all.usages=Eliminar calificador de todos los usos
INTN.remove.qualifier.from.this.name=Eliminar calificador de este nombre
INTN.replace.backquote.expression=Reemplazar expresión con comillas invertidas
INTN.replace.list.comprehensions=Convertir list comprehensions a forma soportada
INTN.replace.list.comprehensions.with.for=Convertir list comprehensions a bucle 'for'
INTN.replace.noteq.operator=Reemplazar operador de desigualdad
INTN.replace.octal.numeric.literal=Convertir literal numérico octal a forma soportada
INTN.replace.plus.with.format.operator=Reemplazar + con operador de formateo de strings
INTN.replace.plus.with.str.format=Reemplazar + con llamada al método str.format
INTN.replace.raise.statement=Convertir declaración raise a forma soportada
INTN.replace.with.method=Reemplazar con llamada al método str.format
INTN.specify.return.type.in.annotation=Especificar tipo de retorno usando anotación
INTN.specify.return.type.in.docstring=Especificar tipo de retorno en docstring
INTN.specify.type.in.annotation=Especificar tipo para la referencia usando anotación
INTN.specify.type.in.docstring=Especificar tipo para la referencia en docstring
INTN.split.if=Dividir en 2 declaraciones 'if'
INTN.string.concatenation.to.format=Reemplazar concatenación de strings con 'str.format'
INTN.transform.into.if.else.statement=Transformar expresiones condicionales en declaraciones 'if/else'
INTN.triple.quoted.string=Convertir string con triple comilla a comillas simples
INTN.yield.from=Transformar iteraciones explícitas con 'yield' en expresiones 'yield from'
QDOC.accessor.kind=Tipo de accessor\:
QDOC.assigned.to=Asignado a\:
QDOC.attributes=Atributos\:
QDOC.built.in.description=descripción incorporada
QDOC.class=clase
QDOC.class.attribute=Atributo de clase {0} de {1}
QDOC.copied.from=Copiado de\:
QDOC.directory.name=Directorio "{0}"
QDOC.file.name=Archivo "{0}"
QDOC.inferred.type.name=Tipo inferido\: {0}
QDOC.instance.attribute=Atributo de instancia {0} de {1}
QDOC.keyword.args=Argumentos keyword\:
QDOC.module.name=Módulo {0}
QDOC.module.path.unknown=(Ruta del módulo desconocida)
QDOC.not.defined.in.parentheses=(no definido)
QDOC.package.name=Paquete {0}
QDOC.parameter.name=Parámetro "{0}"
QDOC.parameter.name.of.link=Parámetro {0} de {1}
QDOC.parameter.of.function.name=Parámetro "{0}" de la función "{1}"
QDOC.parameter.of.method.name=Parámetro "{0}" del método "{1}"
QDOC.params=Parámetros\:
QDOC.property.getter=getter de propiedad
QDOC.property.name.of.link=Propiedad {0} de {1}
QDOC.python.3.sdk.needed.to.render.docstrings=Se necesita un SDK local de Python 3 configurado para renderizar docstrings.
QDOC.raises=Lanza\:
QDOC.returns=Retorna\:
QDOC.type.alias.statement.name.of.link=Declaración de alias de tipo {0} de {1}
QDOC.type.parameter.kind=tipo\:
QDOC.type.parameter.name=Parámetro de tipo {0}
QDOC.type.parameter.name.of.link=Parámetro de tipo {0} de {1}
QDOC.variable.name=Variable "{0}"
QFIX.NAME.add.exception.base=Agregar clase base Exception
QFIX.NAME.add.field.to.class=Agregar campo a la clase
QFIX.NAME.add.method.to.class=Agregar método a la clase
QFIX.NAME.add.specifier=Agregar carácter especificador de formato
QFIX.NAME.auto.import=Importar
QFIX.NAME.convert.builtin=Convertir importación de módulo incorporado
QFIX.NAME.create.function.in.module=Crear función en el módulo
QFIX.NAME.docstring=Corregir docstring
QFIX.NAME.ignore.errors.like.this=Ignorar errores como este
QFIX.NAME.ignore.requirements=Ignorar {0,choice,1\#requisito|2\#requisitos}
QFIX.NAME.ignore.shadowed.built.in.name=Ignorar nombre incorporado sombreado
QFIX.NAME.install.and.import.package=Instalar e importar paquete ''{0}''
QFIX.NAME.install.requirements=Instalar {0,choice,1\#requisito|2\#requisitos}
QFIX.NAME.local.auto.import=Importar localmente
QFIX.NAME.make.function=Crear función desde método
QFIX.NAME.make.function.return.type=Hacer que la función retorne el tipo inferido
QFIX.NAME.make.list=Reemplazar tupla por lista
QFIX.NAME.make.return.stmts.explicit=Hacer explícitas las declaraciones 'return None'
QFIX.NAME.make.static=Hacer método estático
QFIX.NAME.move.except.up=Mover cláusula except hacia arriba
QFIX.NAME.remove.argument=Eliminar argumento
QFIX.NAME.remove.assignment=Eliminar asignación
QFIX.NAME.remove.assignment.target=Eliminar objetivo de asignación
QFIX.NAME.remove.call=Eliminar llamada
QFIX.NAME.remove.dict.key=Eliminar esta clave
QFIX.NAME.remove.exception.target=Eliminar objetivo de excepción
QFIX.NAME.remove.parameter=Eliminar parámetro
QFIX.NAME.remove.statement=Eliminar declaración
QFIX.NAME.remove.string.prefix=Eliminar prefijo
QFIX.NAME.remove.underscores.in.numeric=Eliminar guiones bajos en literales numéricos
QFIX.NAME.remove.with.target=Eliminar objetivo 'with'
QFIX.NAME.rename.argument=Renombrar argumento
QFIX.NAME.rename.parameter=Renombrar parámetro
QFIX.NAME.replace.with.true.or.false=Reemplazar con True o False
QFIX.NAME.simplify.boolean.expression=Simplificar expresión booleana
QFIX.NAME.unpack.type.var.tuple=Desempaquetar el TypeVarTuple
QFIX.NAME.unresolved.reference.add.param=Crear parámetro para referencia
QFIX.NAME.unresolved.reference.create.function=Crear función ''{0}''
QFIX.NAME.update.parameters=Actualizar parámetros
QFIX.action.failed=Acción fallida
QFIX.add.encoding=Agregar declaración de codificación
QFIX.add.field.to.class=Agregar campo ''{0}'' a la clase {1}
QFIX.add.field.to.class.popup.content.added.init=Se agregó __init__ a la clase <code>{0}</code><br/>para acomodar el nuevo campo <code>{1}</code>
QFIX.add.fixture.to.test.function.parameters.list=Agregar fixture a parámetros de función de prueba
QFIX.add.from.future.import.annotations=Agregar 'from __future__ import annotations'
QFIX.add.global=Agregar declaración global
QFIX.add.imported.packages.to.requirements=Agregar paquetes importados a requirements…
QFIX.add.method.to.class=Agregar método {0}() a la clase {1}
QFIX.add.parameter.self=Agregar parámetro ''{0}''
QFIX.add.property=Agregar propiedad para el campo
QFIX.add.qualifier=Agregar calificador
QFIX.add.super=Agregar llamada a superclase
QFIX.augment.assignment=Reemplazar asignación con asignación aumentada
QFIX.auto.import.import.name=Importar ''{0}''
QFIX.auto.import.import.this.name=Importar este nombre
QFIX.chained.comparison=Simplificar comparación encadenada
QFIX.change.base.class=Cambiar clase base
QFIX.classic.class.transform=Heredar de object
QFIX.convert.indents=Convertir indentación
QFIX.convert.indents.to.spaces=Convertir indentación a espacios
QFIX.convert.indents.to.tabs=Convertir indentación a tabulaciones
QFIX.convert.single.quoted.docstring=Convertir docstring a formato de triple comilla doble
QFIX.convert.to.new.style=Convertir a clase de nuevo estilo
QFIX.coroutine.is.not.awaited=Corrutina no esperada
QFIX.create.class=Crear clase
QFIX.create.class.0=Crear clase ''{0}''
QFIX.create.class.in.module=Crear clase ''{0}'' en el módulo {1}
QFIX.create.function.in.module=Crear función {0}() en el módulo {1}
QFIX.create.property=Crear propiedad
QFIX.default.argument=Reemplazar argumento predeterminado mutable
QFIX.dict.creation=Reemplazar creación de diccionario
QFIX.docstring.add.parameter=Agregar parámetro docstring ''{0}''
QFIX.docstring.insert.stub=Insertar docstring
QFIX.docstring.remove.parameter=Eliminar parámetro docstring ''{0}''
QFIX.failed.to.add.field=<br/>¡Error al agregar el campo\!<br/><br/>
QFIX.failed.to.add.function=<br/>¡Error al agregar la función\!<br/><br/>
QFIX.failed.to.add.method=<br/>¡Error al agregar el método\!<br/><br/>
QFIX.ignore.shadowed.built.in.name=Ignorar nombre incorporado oculto "{0}"
QFIX.install.and.import.package=Instalar e importar paquete
QFIX.introduce.variable=Introducir variable para declaración
QFIX.list.creation=Reemplazar con literal de lista
QFIX.local.auto.import.import.locally={0} localmente
QFIX.make.function.return.type=Hacer que ''{0}'' retorne ''{1}''
QFIX.make.public=Hacer público
QFIX.move.attribute=Mover atributo al método __init__
QFIX.move.from.future.import=Mover 'from __future__ import' a la ubicación correcta
QFIX.optimize.imports=Optimizar imports
QFIX.pandas.series.values.replace.with.tolist=Reemplazar list(Series.values) con Series.to_list()
QFIX.redundant.parentheses=Eliminar paréntesis redundantes
QFIX.remove.annotation=Eliminar la anotación
QFIX.remove.argument.equal.default=Eliminar argumentos iguales al valor predeterminado
QFIX.remove.decorator=Eliminar decorador
QFIX.remove.function.annotations=Eliminar anotaciones de función
QFIX.remove.generic.parameters=Eliminar parámetros genéricos
QFIX.remove.square.brackets=Eliminar corchetes
QFIX.remove.string.prefix=Eliminar {0} inicial
QFIX.remove.trailing.semicolon=Eliminar punto y coma final
QFIX.remove.trailing.suffix=Eliminar sufijo final
QFIX.remove.type.comment=Eliminar el comentario de tipo
QFIX.remove.unnecessary.backslash=Eliminar barra invertida innecesaria en expresión
QFIX.rename.parameter=Renombrar a ''{0}''
QFIX.rename.unresolved.reference=Renombrar referencia
QFIX.replace.equality=Reemplazar igualdad
QFIX.replace.function.set.with.literal=Reemplazar llamada a función con literal de conjunto
QFIX.replace.star.by.unpack=Reemplazar por typing_extensions.Unpack
QFIX.replace.with.old.union.style=Reemplazar con Union de estilo antiguo
QFIX.replace.with.square.brackets=Reemplazar con corchetes
QFIX.replace.with.target.name=Reemplazar con el nombre objetivo
QFIX.replace.with.true.or.false=Reemplazar con {0}
QFIX.replace.with.type.name=Reemplazar con el nombre del tipo
QFIX.replace.with.typing.alias=Reemplazar con alias de typing
QFIX.simplify.boolean.expression=Reemplazar expresión booleana con ''{0}''
QFIX.statement.effect=Reemplazar con llamada a función
QFIX.surround.with.square.brackets=Rodear con corchetes
QFIX.unresolved.reference=Reemplazar ''{0}'' con ''{1}.{0}''
QFIX.unresolved.reference.add.param=Crear parámetro ''{0}''
QFIX.unresolved.reference.create.function=Crear función
QFIX.use.property=Usar property para el campo
custom.type.mimic.name=Clase dinámica basada en {0}
debugger.cleaning.signature.cache=Limpiando la Caché de Tipos Recolectados Dinámicamente
element.presentation.location.string.in.class=({0} en {1})
element.presentation.location.string.in.class.stub=({0} en stub de {1})
element.presentation.location.string.module=({0})
element.presentation.location.string.module.stub=(stub de {0})
filetype.python.docstring.description=Python docstring
filetype.python.function.type.annotation.description=Comentario de tipo de función Python PEP-484
filetype.python.type.hint.description=Type hint Python PEP-484
find.usages.class=clase
find.usages.function=función
find.usages.imported.module.alias=alias de módulo importado
find.usages.keyword.argument=argumento keyword
find.usages.method=método
find.usages.parameter=parámetro
find.usages.unnamed=<sin nombre>
find.usages.variable=variable
ignore.overridden.functions=Ignorar funciones sobreescritas
python.docstring.format=Formato de docstring\:
python.docstring.select.type=Seleccionar Tipo de Docstring
python.find.usages=Buscar Usos
python.find.usages.base.method.question=El método {0} sobreescribe el método de la clase {1}.\n¿Desea buscar usos del método base?
python.find.usages.untyped.probable.usage=Uso sin tipo (probable)
python.find.usages.usage.in.import.statement=Uso en una declaración import
python.find.usages.usage.in.isinstance=Uso en isinstance()
python.find.usages.usage.in.superclass.list=Uso en la lista de superclases
python.find.usages.usage.in.type.hint=Uso en un type hint
refactoring.extract.method=Extraer método
refactoring.extract.method.error.bad.selection=No se puede realizar la refactorización Extraer Método usando los elementos seleccionados
refactoring.extract.method.error.class.level=No se puede realizar la refactorización a nivel de clase
refactoring.extract.method.error.empty.fragment=No se puede realizar la refactorización desde un fragmento de código vacío
refactoring.extract.method.error.interrupted.execution.flow=No se puede realizar la refactorización cuando el flujo de ejecución está interrumpido
refactoring.extract.method.error.local.variable.modifications=No se puede realizar la refactorización desde la expresión con modificaciones de variables locales dentro de un fragmento de código.
refactoring.extract.method.error.local.variable.modifications.and.returns=No se puede realizar la refactorización desde la expresión con modificaciones de variables locales e instrucciones return dentro de un fragmento de código
refactoring.extract.method.error.name.clash=El nombre del método entra en conflicto con un nombre existente
refactoring.extract.method.error.returns=No se puede extraer un método con instrucciones return dentro de un fragmento de código
refactoring.extract.method.error.star.import=No se puede realizar la refactorización con una declaración de import con asterisco dentro de un bloque de código
refactoring.extract.method.error.yield=No se puede realizar la refactorización con una declaración 'yield' dentro de un bloque de código
refactoring.inline.all.border.title=Inlinear
refactoring.inline.all.keep.declaration=Inlinear todas las invocaciones y mantener la declaración
refactoring.inline.all.remove.declaration=Inlinear todas las invocaciones y eliminar la declaración
refactoring.inline.can.not.multiline.string.to.f.string=No se puede inlinear string multilínea a f-string
refactoring.inline.can.not.string.to.nested.f.string=No se puede inlinear string a f-string anidado
refactoring.inline.can.not.string.with.backslashes.or.quotes.to.f.string=No se puede inlinear string con barras invertidas y comillas a f-string
refactoring.inline.function=Inlinear la función {0}
refactoring.inline.function.async=No se pueden inlinear funciones async
refactoring.inline.function.builtin=No se pueden inlinear funciones builtin
refactoring.inline.function.command.name=Inlineando {0}
refactoring.inline.function.constructor=No se pueden inlinear llamadas a constructores
refactoring.inline.function.decorator=No se pueden inlinear funciones con decorators
refactoring.inline.function.function.to.inline=Función a inlinear
refactoring.inline.function.generator=No se pueden inlinear generators
refactoring.inline.function.global=No se pueden inlinear funciones con variables globales
refactoring.inline.function.interrupts.flow=No se pueden inlinear funciones que interrumpen el flujo de control
refactoring.inline.function.invocations.to.be.inlined=Invocaciones a inlinear en {0} archivos
refactoring.inline.function.is.decorator=La función {0} se usa como decorator y no se puede inlinear. La definición de la función no se eliminará
refactoring.inline.function.is.overridden=No se pueden inlinear métodos sobreescritos
refactoring.inline.function.is.reference=La función {0} se usa como referencia y no se puede inlinear. La definición de la función no se eliminará
refactoring.inline.function.nested=No se pueden inlinear funciones con otra declaración de función
refactoring.inline.function.nonlocal=No se pueden inlinear funciones con variables nonlocal
refactoring.inline.function.overrides.method=No se pueden inlinear métodos que sobreescriben otros métodos
refactoring.inline.function.self.referrent=No se pueden inlinear funciones que se referencian a sí mismas
refactoring.inline.function.skeleton.only=No se puede inlinear una función desde el módulo binario
refactoring.inline.function.special.method=No se pueden inlinear métodos especiales
refactoring.inline.function.star=No se pueden inlinear funciones con argumentos *
refactoring.inline.function.title=Inlinear Función
refactoring.inline.function.uses.unpacking=La función {0} usa desempaquetado de argumentos y no se puede inlinear. La definición de la función no se eliminará
refactoring.inline.label.function=Función {0}
refactoring.inline.label.method=Método {0}
refactoring.inline.local.multiassignment=La definición está en una asignación múltiple
refactoring.inline.method=Inlinear el método {0}
refactoring.inline.this.only=Inlinear solo esta invocación y mantener la declaración
refactoring.introduce.constant.cannot.extract.selected.expression=La expresión seleccionada no se puede extraer como constante
refactoring.introduce.constant.dialog.title=Extraer Constante
refactoring.introduce.constant.scope.error=El nombre ya está declarado en el scope
refactoring.introduce.name.error=Nombre incorrecto
refactoring.introduce.selection.error=No se puede realizar la refactorización usando los elementos seleccionados
refactoring.introduce.variable.dialog.title=Extraer Variable
refactoring.introduce.variable.scope.error=El nombre entra en conflicto con una variable o parámetro existente
refactoring.move.module.members.error.cannot.place.elements.into.nonpython.file=No se pueden colocar elementos en un archivo que no sea Python
refactoring.name.label.text={0} tiene {1} ocurrencia{2, choice, 0\#|1\#s}
refactoring.progress.title.updating.existing.usages=Actualizando usos existentes…
type.param.list.annotator.two.or.more.types.required=Se requieren dos o más tipos
type.param.list.annotator.type.parameter.already.defined=El parámetro de tipo con nombre ''{0}'' ya está definido en esta lista de parámetros de tipo
type.param.list.annotator.type.var.tuple.and.param.spec.can.not.have.bounds=ParamSpec y TypeVarTuple no pueden tener restricciones ni límites superiores
unresolved.docstring.param.reference=La función ''{0}'' no tiene un parámetro ''{1}''
unresolved.import.reference=No existe módulo llamado ''{0}''