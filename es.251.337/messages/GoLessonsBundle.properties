go.add.method.to.interface.generate=Pulsa {0} dos veces para terminar de editar y generar el método.
go.add.method.to.interface.implement=Puedes hacer lo contrario. Por ejemplo, añadimos la declaración del método {0} a la declaración de la interfaz y generamos la implementación necesaria para la estructura. \nPresiona {1} y selecciona {2}. Luego ingresa {3}, presiona {4} dos veces y luego ingresa {5}.
go.add.method.to.interface.name=Agregar o quitar implementación de método
go.add.method.to.interface.remove=Se puede declarar un nuevo método y quitar un método innecesario de la declaración de la interfaz.\nEl método {0} parece extraño en las estructuras {1} y {2}. Pulse {3} y seleccione {4} para quitar la declaración y todas sus implementaciones.
go.apply.fix=Selecciona {0} y pulsa {1}.
go.basic.and.smart.type.completion.difference.basic=Para invocar la finalización básica, también puedes pulsar {0}.\nPulsa {0}, ve la lista de sugerencias y selecciona {1}.
go.basic.and.smart.type.completion.difference.smart=Necesitamos devolver un puntero, pero la finalización básica no sugiere punteros. En este caso, la finalización inteligente de código con correspondencia de tipos puede ser útil. Filtra la lista de sugerencias y muestra sólo los tipos aplicables al contexto actual.\nLlama a la finalización inteligente pulsando {0}, selecciona {1} de la lista y pulsa {2} para reemplazar el valor actual.
go.basic.and.smart.type.completion.goto.next.error=La sugerencia seleccionada se resalta como un error en el archivo, presiona {0} para conocer la razón.
go.basic.and.smart.type.completion.name=Autocompletado básico e inteligente de tipos
go.basic.and.smart.type.completion.type.and.choose=Por defecto, <ide/> completa tu código de forma instantánea. Comienza a escribir {0} justo en el punto en el que se encuentra el cursor e inmediatamente verás un menú desplegable con sugerencias coincidentes. Elige {0} del menú pulsando {1}.
go.basic.completion.invoke.completion=Ten en cuenta que <ide/> inserta automáticamente una nueva importación. A continuación, activa la finalización básica presionando {0}, selecciona {1} y presiona {2}.
go.basic.completion.lesson.name=Autocompletado básico
go.choose.name=Seleccionar {0} para completar la refactorización.
go.code.completion.module.name=Autocompletado de código
go.comment.navigation.lesson.name=Declaraciones en comentarios
go.comment.navigation.task=Nuestro paquete {0} no es tan grande y podemos navegar fácilmente en él. Pero algunos paquetes podrían ser enormes con cientos de líneas de código y comentarios.\nEn el IDE, puedes ir a las declaraciones desde los comentarios si estas declaraciones están en el mismo paquete. Los nombres de dichos métodos, funciones y estructuras en los comentarios tienen un color ligeramente diferente. Como la función {1} en la sección de comentarios en la línea 32.\nPara navegar a la declaración de la función desde este comentario, coloca el cursor en el nombre de la función en el comentario y presiona {2}.
go.comments.comment.block=Puedes comentar un bloque de código. Por ejemplo, vamos a comentar el bloque seleccionado, pulsa {0}.
go.comments.comment.one.line=Comentar cualquier línea con {0}.
go.comments.lesson.name=Adicionar y eliminar comentarios
go.comments.uncomment.block=Para descomentar el bloque de código. Presiona {0} de nuevo.
go.comments.uncomment.line=Descomentar la línea comentada con el mismo atajo, {0}
go.completion.for.functions.choose.item=Selecciona la función {0} parpadeante de la lista y pulsa {1}. Cuando veas la lista de sugerencias, puedes empezar a escribir para reducir el número de resultados.
go.completion.for.functions.press.twice=Ahora, escribe un punto ({0}) y presiona {1} <strong>dos veces</strong>. En este caso, el IDE encuentra todas las funciones que aceptan un string como primer argumento. Ten en cuenta que el punto hace que parezca un método aunque no lo sea.
go.debug.function.calls.add.arguments.for.evaluation=En paréntesis, escriba {0}. El campo debe mostrar {1}.
go.debug.function.calls.click.evaluate=Haga clic en {0} o presione {1}. Luego puede cerrar el cuadro de diálogo.
go.debug.function.calls.enter.expression.to.evaluate=En el campo {0}, comienza a escribir {1}, selecciona {2} de la lista de sugerencias.
go.debug.function.calls.evaluate.expression=Invocar la acción {0} pulsando {1}.
go.debug.function.calls.lesson.name=Depurar llamadas a funciones
go.debug.function.calls.mac.note=Ten en cuenta que tu sistema operativo podría pedirte una contraseña para iniciar el servidor de depuración.
go.debug.function.calls.run.to.cursor=El cursor se encuentra ahora al final de la línea 15. Pulse {0} para ver cómo funciona la acción {1}.
go.debug.function.calls.step.over=Intenta sobrepasar la construcción {0} utilizando {1}.
go.debug.function.calls.toggle.breakpoint=En modo de debug, puedes pasarle diferentes valores a una función y ver qué devuelve. Descubre más sobre la función "Evaluar expresión" en <a href="{0}">la documentación</a>.\n{1}Para empezar a hacer debug, necesitas crear un punto de interrupción. Pulsa {2} para activar o desactivar un punto de interrupción.
go.debug.function.calls.version.warning=<strong>Aviso</strong>: para esta característica, necesitas Go 1.11 o superior.
go.debug.function.context.menu=Existen diferentes formas de depurar tu código. Una de ellas es con ayuda del menú de contexto.\nHaz clic con el botón derecho del mouse sobre un área en el editor y selecciona el elemento del menú destacado que dice {0}. Ten en cuenta que la redacción exacta puede variar: podría ser {1} cuando esté en el contexto de la función {2}, o {3} en otros contextos.
go.debug.function.more.menu=Haz clic en el botón {0} de la ventana de herramientas {1}.
go.debug.run.sample=Escoge el elemento de menú {0} o prueba {1}.
go.debug.stop.debug=Presiona {0} para detener la depuración y finalizar la lección.
go.dump.goroutines.click.button.DlvFilterGoroutinesAction=En la pestaña abierta {0}, haz clic en el botón {1}.
go.dump.goroutines.click.button.more=De la lista desplegable, seleccionar {0}.
go.dump.goroutines.dump.tab=La pestaña {0} muestra una lista de las goroutines de tu aplicación. Nuestra aplicación tiene varias de ellas. Pero tu aplicación real podría tener más. En <ide/>, puedes aplicar un filtro que busca una goroutine específica y estudiar los resultados filtrados.
go.dump.goroutines.filter.goroutines=En el campo de búsqueda {0}, escribe {1} para filtrar la lista. Este filtro solo deja las pilas de ejecución con goroutines cuyo nombre contiene {1}.
go.dump.goroutines.name=Volcado de goroutines
go.dump.goroutines.toggle.breakpoint=En Go, las tareas concurrentes se denominan goroutines. Para crear una goroutine, utiliza la sentencia {0} delante de una llamada a función o método.\nPuedes obtener un volcado de todas las goroutines que utiliza tu programa, aplicar un filtro para buscar una goroutine específica y estudiar los resultados filtrados.\nPara volcar goroutines, debes iniciar la depuración. Pero primero, debes crear un punto de interrupción. Pulsa {1} para alternar el punto de interrupción.{2}
go.extract.inline.variables.extract.task=Presiona {0} para extraer una variable, elige una expresión de cadena, ingresa un nombre nuevo y presiona {1} para finalizar la refactorización.
go.extract.inline.variables.inline.task=A diferencia del refactor de {0}, {1} ayuda a eliminar una variable redundante. Pulse {2} para insertar la variable en su único uso.
go.extract.inline.variables.lesson.name=Extrae e inlinea variables
go.extract.methods.with.returns.complete.refactoring=Escribe {0} y presiona {1}.
go.extract.methods.with.returns.intro=Con la refactorización {0}, puedes tomar un fragmento de código, moverlo a un método separado y reemplazar el código antiguo con una llamada al nuevo método. Si el código sale en la instrucción return, se extrae tal cual. Lee más sobre la refactorización {0} en el artículo <a href="{1}">Extraer funciones y métodos</a>.
go.extract.methods.with.returns.invoke.refactoring=Compruebe que el cursor se encuentra antes de la cláusula {0} que puede extraer. Pulse {1}.
go.extract.methods.with.returns.lesson.name=Extraer métodos con retornos
go.feature.trainer.specify.sdk.to.continue.learning.title=Especifica el Go SDK para continuar aprendiendo
go.feature.trainer.too.old.go.sdk.notification.text=Los tutoriales requieren Go SDK <b>{1}</b> o posterior para la gestión de dependencias con los módulos Go. Su versión actual de Go SDK es <b>{0}</b>.
go.feature.trainer.too.old.go.sdk.notification.title=Actualizar Go SDK a <b>{0}</b> o posterior
go.fmt.lesson.name=Formateo de código con go fmt
go.fmt.task=Si prefieres formatear tu código con {0}, puedes presionar {1} para ejecutarlo.
go.formatting.clear.selection=Para limpiar la selección, presiona {0}
go.formatting.lesson.name=Formateo de código con un formateador incorporado
go.formatting.reformat.selection=<ide/> te puede ayudar con el formateado de código. Pulsa {0} para reformatear el bloque de código seleccionado.
go.formatting.whole.file=Para dar formato a todo el archivo fuente, usa {0} cuando no haya líneas seleccionadas.
go.generics.change.casing=Antes de generar un archivo de prueba, corrijamos nuestro estilo de código. En la documentación oficial de Go, los nombres de los parámetros de tipo están escritos en mayúsculas, el parámetro {0} en nuestro código está en minúsculas.\nPara corregir la capitalización, podemos utilizar una corrección rápida. Para hacerlo, presiona {1} y selecciona {2}.
go.generics.click.function=Haz clic en {0} y en la ventana emergente {1}, selecciona {2}.
go.generics.fix.type=El siguiente problema en nuestro código es que el tipo se contiene a sí mismo, lo que generará un error {0}. Para evitarlo, debes incluir un puntero a un tipo, en lugar del tipo en sí. El IDE cuenta con una solución rápida para esta situación.\nPresiona {1} y selecciona {2}.
go.generics.implement.methods.name=Genéricos: implementa métodos faltantes
go.generics.inspections.change.interface.to.any=Antes de continuar, refactorizaremos una cosa más. Utilizamos una interfaz vacía que puede reemplazarse por {0}.
go.generics.inspections.delete.type.parameters=La función {0} tiene corchetes para usar parámetros de tipo, pero dentro de estos corchetes vemos una lista de parámetros vacía. Para corregir ese error, presiona {1} y selecciona {2}.
go.generics.inspections.title=Inspecciones para parámetros de tipo
go.generics.inspections.union.interfaces.with.methods=Según el <a href="{0}">equipo de Go</a>, no puedes usar interfaces con métodos en un tipo unión. Por lo tanto, {1} no se puede usar como término entre los elementos de la unión.
go.generics.inspections.unused.type.parameter=Los parámetros de tipo están sombreados porque no los usamos en ningún lugar del código. Solucionémoslo reemplazando el tipo {0} en la sección de parámetros con {1}.
go.generics.right.click.function=Eliminamos todos los errores en el archivo y podemos intentar generar una prueba para la función {0}.\nHaz clic derecho en la función {0}.
go.generics.running.code.click.link=Ahora, haga clic en el enlace resultante para abrir su código en un navegador.\nPara ejecutar su código con parámetros de tipo, simplemente haga clic en el botón {0}.
go.generics.running.code.missing.go118.download.or.local=Puedes tratar de encontrar Go {0} usando la lista desplegable si lo instalaste anteriormente. O bien, haz clic en el botón {1} y selecciona si deseas descargar la versión necesaria del SDK ({2}) o navegar hacia una copia local en el disco duro ({3}).\n Al utilizar cualquiera de las opciones mencionadas, selecciona cualquier versión mayor que Go {0}, y haz clic en {4} en todos los diálogos para aplicar un nuevo SDK.
go.generics.running.code.missing.go118.downloading=<ide/> ahora descarga y descomprime el SDK de Go. Una vez concluido este paso, el IDE indexará estos archivos para utilizarlos como ayuda para la codificación.
go.generics.running.code.missing.go118.indexing=Ahora, <ide/> indexa archivos SDK. Espera a que se procesen. Luego, podrás usar este SDK de Go.
go.generics.running.code.missing.go118.quickfix=Actualmente, estás usando Go {0}. Para usar genéricos en este lección, necesitas instalar Go 1.18 o superior, o cambiarte a él.\nPuedes hacerlo pulsando {1} y seleccionando {2}.
go.generics.running.code.name=Ejecutando el código
go.generics.running.code.playground=Otra manera de ejecutar tu código es mediante {0}.\nPara probar esta funcionalidad, presiona {1}. De aparecer el cuadro de diálogo de confirmación, presiona {2} para hacer público el archivo. En la esquina inferior derecha del editor, se mostrará una ventana emergente con un enlace a la página en {0}.
go.generics.test.generation.module=Generando pruebas para parámetros de tipo
go.goto.next.error=Para ir al siguiente error resaltado en el archivo, presiona {0}.
go.goto.next.warning=Para ir a la siguiente advertencia resaltada en el archivo, presiona {0}.
go.navigation.module.description=Navega por tu base de código
go.navigation.module.name=Navegación
go.onboarding.apply.action=Selecciona la acción {0} y pulsa {1}.
go.onboarding.apply.intention=Selecciona {0} y presiona {1}.
go.onboarding.balloon.about.debug.panel=La ventana de herramientas **{0}** provee una barra de herramientas con varias acciones de depuración. Puedes tomar el curso **{1}** para probarlas más tarde.
go.onboarding.balloon.click.here=Haga clic aquí para establecer un punto de interrupción
go.onboarding.balloon.open.file=Doble clic para abrir {0}
go.onboarding.balloon.open.learn.toolbar=Cambia a la ventana de herramientas {0} para continuar con esta lección
go.onboarding.balloon.project.directory=Haz doble clic en el directorio de proyectos para expandirlo y ver los archivos de proyecto
go.onboarding.balloon.project.view=Haga clic para abrir la vista **Proyecto**
go.onboarding.balloon.start.debugging=Haz clic en el icono para empezar a depurar
go.onboarding.balloon.stop.debugging=Haz clic en el icono para detener la depuración
go.onboarding.case.changed=El caso ha cambiado.
go.onboarding.change.ui.settings=En esta lección, <ide/> cambia algunos ajustes de IU al estado predeterminado. Sus preferencias se restablecerán cuando complete o cierre la lección.
go.onboarding.click.run.button=Haz clic en el botón de ejecución resaltado {0} para mostrar las opciones de ejecución.
go.onboarding.click.run.button.balloon=Haz clic para mostrar las opciones de ejecución
go.onboarding.close.debug.tool.window=Para cerrar la ventana de herramientas {0}, pulse {1}.
go.onboarding.context.menu=Existen diferentes formas de ejecutar tu código. Una de ellas es con la ayuda del botón de ejecución {0} cercano a la función {1}.
go.onboarding.epilog=¡Felicitaciones! Has completado el recorrido de incorporación. En este punto, puedes:\n  - <callback id="{0}">Cerrar</callback> el proyecto de aprendizaje{1}\n  - <callback id="{2}">Mostrar</callback> más lecciones
go.onboarding.feedback.system.found.sdks=SDKs encontrados:
go.onboarding.feedback.system.no.sdks=ninguno
go.onboarding.feedback.system.used.sdk=SDK utilizada:
go.onboarding.indexing.description=Al abrir un proyecto por primera vez, <ide/> escanea el Go SDK y el proyecto en sí para recopilar los detalles requeridos para asistencia de codificación. Para continuar, espera hasta que se complete la indexación.
go.onboarding.invoke.completion.tip=<strong>Consejo</strong>: puedes presionar {0} para ver las sugerencias de autocompletado en cualquier parte del código.
go.onboarding.invoke.intention.for.code=Las intenciones también te ahorran tiempo y hacen que la codificación sea más fácil. Usemos una intención para convertir rápidamente la función {0} en una exportada. Presione {1}.
go.onboarding.invoke.intention.for.code.balloon=Presione {0} para mostrar todas las intenciones disponibles
go.onboarding.invoke.intention.for.warning.1=Acabas de corregir un error pero puedes hacer que este código se vea aún mejor. <ide/> resalta y añade un circulo amarillo a las líneas de código que pueden mejorarse.
go.onboarding.invoke.intention.for.warning.2=Presiona {0} para ver las advertencias y aplicar una solución rápida.
go.onboarding.invoke.intention.for.warning.balloon=Presiona {0} para mostrar todos los arreglos rápidos disponibles
go.onboarding.invoke.search.everywhere.1=Al trabajar en <ide/>, quizá necesites buscar archivos en tu proyecto, símbolos, tipos o incluso acciones del IDE. En esta lección, busquemos la acción {0} para poner en minúsculas la cadena {1}.
go.onboarding.invoke.search.everywhere.2=Presiona {0} dos veces para abrir el diálogo {1}.
go.onboarding.lesson.name=Familiarízate con {0}
go.onboarding.module.description=Descripción general de las funciones principales en {0}
go.onboarding.module.name=Tour de iniciación
go.onboarding.project.view.description=La vista <strong>Proyecto</strong> es una de las principales ventanas de herramientas. Contiene el directorio del proyecto, los paquetes específicos de SDK y archivos temporales. Haz clic en el botón rayado para previsualizar el contenido del proyecto de demostración. También puedes abrirlo pulsando {0}.
go.onboarding.return.to.welcome=y volver a la pantalla de Bienvenida
go.onboarding.run.sample=Selecciona "{0}" o prueba "{1}".
go.onboarding.run.widget.balloon=Con este widget, puede ejecutar acciones de ejecución conocidas por la configuración seleccionada
go.onboarding.search.everywhere.description=Como ves, el texto seleccionado, {0}, se ha copiado automáticamente en la cadena de entrada. Vamos a escribir {1} en lugar de {0}.
go.onboarding.select.fix=Aplica el primer elemento: {0}. Con esta corrección, los paréntesis innecesarios habrán desaparecido.
go.onboarding.select.item=<ide/> muestra opciones de auto completado automáticamente mientras escribes. Selecciona el elemento {0} usando las flechas de tu teclado y presiona {1}.
go.onboarding.start.debugging=Haz clic en el ícono {0} para comenzar el proceso de depuración.
go.onboarding.start.typing=Ahora, empieza a escribir {0} para ver las opciones de autocompletado.
go.onboarding.start.typing.balloon=Empieza a escribir {0} para mostrar las opciones de finalización
go.onboarding.stop.debugging=Vamos a detener la depuración. Haz clic en el icono {0}.
go.onboarding.temporary.configuration.description=<ide/> acaba de crear una configuración de ejecución temporal. Puede encontrarla en {0}. Con este widget, puede ejecutar acciones de ejecución populares para la configuración seleccionada, como ejecutar {1} y depurar {2}. Se pueden mostrar otras acciones como perfilar {3} y ejecutar con cobertura {4} haciendo clic en {5}.
go.onboarding.toggle.breakpoint.1=Podrás ver que, en lugar del valor esperado {0}, el método {1} devuelve {2}. Iremos a la instrucción return para depurar el código problemático.
go.onboarding.toggle.breakpoint.2=Haz clic en el canal dentro del área resaltada para establecer un punto de interrupción.
go.onboarding.type.division=Una vez que hayas descubierto el problema en el código, vamos a corregirlo. Divide la suma resultante por la longitud de los valores. El script de la lección ya inserta {0}.
go.playground.module.name=Execute el código en el Playground de Go
go.playground.note=<strong>Nota</strong>: para esta lección, necesitas una conexión con el servidor del playground de Go.
go.playground.paste.url=En el campo {0}, presiona {1} para pegar el URL y haz clic en {2}.
go.playground.run.code.in.playground=Pulsa el botón {0} de la barra de herramientas para ejecutar tu código usando el servidor Go Playground.
go.playground.run.code.locally=Pulsa el botón {0} en la barra de herramientas para ejecutar tu código en tu máquina.
go.playground.run.copy.link=Puedes importar código desde archivos y enlaces de Go Playground. Copia el enlace seleccionado presionando {0}.
go.playground.select.open.in.playground=Haz clic con el botón derecho sobre el código seleccionado y navega por {0} | {1}.\n<ide/> importará este código a un archivo temporal.
go.playground.select.run.locally=Ejecutemos este código localmente. Para ello, selecciona la casilla {0} en la barra de herramientas.
go.playground.select.url=En el diálogo {0}, selecciona el botón de selección {1}.
go.postfix.completion.better.variable.names.in.templates.description=<ide/> puede ayudarte con los nombres de las variables generadas con plantillas de sufijos {0} y {1}. Por ejemplo, entre estas sugerencias puedes encontrar: {2} o {3} para índices, o {4} para {5}.\nEscribe {6} y selecciona la plantilla de sufijo {7} de la lista de completado.
go.postfix.completion.lesson.name=Autocompletar sufijo
go.postfix.completion.task=Con las plantillas de sufijo, puedes transformar una expresión ya escrita a otra, en función de un sufijo tras el punto, el tipo de expresión y su contexto.\nNuestro slice de alfabetos está desordenado. Para ordenar el slice de strings correctamente, podemos aplicar la función {0} del paquete {1} al slice.\nYa hemos escrito la variable que contiene el slice. En lugar de ir adelante y atrás, apliquemos la plantilla de sufijo {1}. Escribe el punto ({2}) tras la variable {3} para ver la lista de sugerencias de completado de sufijo. Selecciona {1} de la lista o escríbela en el editor y, a continuación, pulsa {4} para completar la sentencia.
go.press.and.apply.fix=Presiona {0} y selecciona {1}.
go.refactoring.inline.dialog=En el diálogo que se abrirá, haz click en "{0}".
go.refactoring.menu.extract.method=Ahora extraigamos un método que calcule la distancia entre dos puntos. Pulsa {0} y selecciona {1}  en la lista o pulsa {2} para invocar la acción directamente.
go.refactoring.menu.inline.refactoring=Para inlinizar un método, presione {0} y seleccione {1}.
go.refactoring.menu.introduce.parameter.eng=Supongamos que necesita extraer {0} a una constante. {1} puede hacerlo. En el menú de refactorización, seleccione {1} y pulse {2}.
go.refactoring.menu.lesson.name=Menú de refactorización
go.refactoring.menu.select.math.sqrt=Selecciona la expresión parpadeante para extraer el método completo de tu código y presiona {0}.
go.refactoring.menu.show.refactoring.list=<ide/> proporciona una variedad de refactorizaciones. Muchas de ellas tienen sus propios atajos de teclado, pero siempre puedes presionar {0} para listar todas las refactorizaciones disponibles en el contexto actual.
go.refactoring.menu.start.refactoring=Selecciona {0} para reemplazar todas las ocurrencias de {1} en tu código.
go.refactorings.module.description=La refactorización te ayuda a mantener tu código sólido, seco y fácil de mantener
go.refactorings.module.name=Refactorizaciones
go.rename.apply.intention=Ingresa un nuevo nombre para este campo. Por ejemplo: escribe {0} y guarda el resultado presionando {1}.
go.rename.invoke.intentions=Puedes renombrar cualquier cosa colocando el cursor en un símbolo y utilizando el refactor de {0}. Coloca el cursor en el campo {1} en cualquier parte del código y luego presiona {2}.
go.rename.lesson.name=Renombrar
go.running.code.context.menu=Existen distintas formas de ejecutar tu código. Una de ellas es mediante el menú contextual.\nPrueba a invocar el menú contextual haciendo click con el botón derecho en una zona del editor donde se encuentre tu código.
go.running.code.run.sample=Haz clic en {0} para ejecutar tu código. La salida de tu aplicación se mostrará en la ventana de herramientas {1}.
go.search.everywhere.goto.type=¡Excelente! Pero a veces necesitas encontrar solo tipos o buscar solo en algunos directorios específicos. Usa {0} para buscar tipos.
go.search.everywhere.quick.documentation=Presiona {0} para ver la documentación del tipo seleccionado.
go.search.everywhere.type.popup.closed.warning.message=Presiona {0} para abrir nuevamente la ventana de búsqueda.
go.search.everywhere.type.type.name=Supongamos que necesitas encontrar un tipo que se llama {0}. Escribe las letras iniciales de las palabras de búsqueda: {1}. No navegues todavía hasta el tipo encontrado.
go.search.everywhere.use.all.places=Se encontró el tipo coincidente en el proyecto de demostración. Sin embargo, puedes encontrar otros tipos que no están incluidos en el proyecto. Vamos a cambiar el filtro {0} a {1} para mostrar los tipos coincidentes de Go SDK.
go.smart.type.completion.lesson.name=Completamiento de tipo inteligente
go.smart.type.completion.task=La autocompletación de tipos inteligente filtra la lista de sugerencias para incluir sólo aquellos tipos que son aplicables en el contexto actual. Presiona {0} para ver la lista de sugerencias coincidentes. Elige la primera presionando {1}.
go.statement.completion.complete.condition=Añadir una condición entre paréntesis {0} y presionar {1} para pasar al enunciado {2}.
go.statement.completion.complete.finish.body=Escriba una línea de código: {0} y luego presione {1} para completar la declaración y aplicar formato.
go.statement.completion.complete.for=Oprime {0} para completar la declaración {1}.
go.statement.completion.complete.if=Escriba {0} y presione {1} para generar la instrucción.
go.statement.completion.help.link=Completado de declaración
go.statement.completion.lesson.name=Completar enunciados
go.support.for.table.tests.call.context.menu=En <ide/>, puedes ejecutar todas las pruebas en la función o solamente algunas de ellas.
go.support.for.table.tests.name=Soporte para pruebas de tabla
go.support.for.table.tests.run.subtest=Puedes ejecutar subpruebas individuales de la misma manera. Haz clic en el icono de canal cerca de la subprueba {0} y selecciona {1}.
go.support.fuzz.testing.check.failing=¡Vaya, la prueba de fuzz ha fallado! Para saber la razón, desplázate hacia abajo en la salida en la ventana de herramientas {0} y haz clic en el enlace que conduce al directorio {1}.
go.support.fuzz.testing.run=Las pruebas fuzz son una manera de automatizar tus pruebas mediante la presentación continua de varias entradas. Vamos a ejecutar nuestra prueba fuzz para comprobar nuestra función con los diferentes datos generados.
go.support.fuzz.testing.title=Fuzz testing
go.to.internal.directory=A partir de {0} 2021.2, podéis navegar a las interfaces almacenadas en la carpeta {1}.
go.to.internal.directory.hover.over.tab=También puedes pasar el cursor por encima de la pestaña del editor para ver la ubicación del archivo. Por ejemplo, pasa el cursor por encima de la pestaña {0}.
go.to.internal.directory.name=Navegación y formato de código
go.to.internal.directory.reformat.gofmt.on.save=El archivo {0} necesita una reformateo de código. Presione {1} para reformatear el archivo.
go.type.parameters.description=Características que te pueden ayudar a trabajar con genéricos
go.type.parameters.module.name=Genéricos (parámetros de tipo)
go.view.hierarchies.choose.any.implementation=Selecciona cualquier implementación y pulsa {0} o haz clic en ella.
go.view.hierarchies.goto.implementation=Presiona {0} para buscar implementaciones de {1}.
go.view.hierarchies.hide.find.tool.window=Presiona {0} para ocultar la ventana de herramientas de {1}
go.view.hierarchies.hide.method.hierarchy=Ocultemos también {0}, presiona {1} otra vez.
go.view.hierarchies.invoke.implementations.again=La declaración del método base tiene su propio icono de margen {0}. Haz clic en él o presiona {1} nuevamente.
go.view.hierarchies.lesson.name=Ver jerarquías
go.view.hierarchies.navigate.to.base=Puedes navegar al método base desde el derivado. Presiona {0} o haz clic en el icono {1} en el canal de edición.
go.view.hierarchies.open.in.find.tool.window=Para jerarquías grandes, tal vez quieras buscar implementaciones en la ventana de herramientas {0}. Haz clic en {1}.
go.view.hierarchies.open.method.hierarchy=Quizás desee explorar la jerarquía completa para este método. Pulse {0}.
go.view.hierarchies.open.type.hierarchy=Para ver subtipos, presiona {0}.
go.what.s.new.module.description=Descubre las mejoras clave de GoLand 2024.2
go.what.s.new.module.name=Novedades de GoLand 2024.2
go.working.with.json.add.key.to.tags=También puede utilizar una acción de intención para agregar etiquetas XML y ASN1.\nVuelva a llamar a las acciones de intención presionando {0}, después, seleccione {1} y escriba {2}.
go.working.with.json.change.style=Puedes aplicar un estilo de código diferente para los nombres de campo en las etiquetas. Por ejemplo, cámbialo a camelCase.
go.working.with.json.copy=<ide/> tiene varios instrumentos que pueden ayudarle a manejar el código JSON más eficazmente.
go.working.with.json.introduce.type=Vamos a extraer la estructura insertada {0}.
go.working.with.json.name=Trabajando con JSON
go.working.with.json.name.struct=Cambia el nombre de la estructura si lo deseas y presiona {0} para terminar de editar. El IDE arreglará tu formato automáticamente.
go.working.with.json.replace=Pulsa {0} para reemplazar la sección de comentarios.\n<ide/> convierte automáticamente la parte JSON copiada a un tipo struct.
go.working.with.json.update.value.in.tags=Lo mismo aplica para la actualización en lote de valores de etiqueta. Digamos que queremos agregar {0} a cada etiqueta en la estructura actual.
go.working.with.parameters.invoke.intentions.1=Verifique que el cursor se encuentra en el primer parámetro del método {0}. Pulse {1} para activar las acciones de intención.
go.working.with.parameters.invoke.intentions.2=Ver el método {0} en el editor. El cursor está en el primer parámetro. Pulsa {1} para invocar acciones de intención.
go.working.with.parameters.invoke.intentions.3=Si se necesitan parámetros para que un método implemente una interfaz, es inseguro eliminarlos. Pulsa {0} para ver una lista de opciones posibles.
go.working.with.parameters.lesson.name=Acciones de contexto
go.working.with.parameters.press.action.again=Ahora pulsa {0} nuevamente.
go.working.with.parameters.remove.parameters=<ide/> destaca solo los nombres de parámetros no utilizados si sus tipos se utilizan para implementar una especificación de método. En este caso, puedes renombrar este parámetro a {0} o eliminar su nombre por completo.
go.working.with.parameters.signature.combined=Observa cómo los tipos de la firma se han combinado.
go.working.with.parameters.signature.expanded=Para mostrar la firma en su estado inicial, selecciona {0}.
go.working.with.parameters.single.type=Si tienes múltiples parámetros de un solo tipo en la firma de la función o método, puedes utilizar una especificación de tipo corta para estos parámetros ({0}) o tener una especificación de tipo separada para cada parámetro ({1}).
go.working.with.parameters.that.are.not.used=<ide/> puede detectar parámetros en la firma que no se usan en el cuerpo de un método o una función. Como no se usan, puedes eliminarlos usando el quick-fix {0}.
toggle.case.part=caja