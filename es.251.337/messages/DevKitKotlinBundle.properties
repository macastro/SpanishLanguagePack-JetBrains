inspection.extension.class.should.not.be.open.text=La clase de extensión no debería ser open
inspection.light.service.must.not.be.open.message=El servicio ligero no puede ser open
inspection.use.platform.process.await.exit.display.name=Usar 'com.intellij.util.io.ProcessKt.awaitExit()'
inspections.an.explicit.method.should.be.used.to.retrieve.an.application.service.message=Proporcionar un método explícito 'getInstance()' para acceder al servicio de aplicación en lugar de una propiedad
inspections.application.service.as.static.immutable.property.with.backing.field.message=El servicio de aplicación no debe ser especificado como una propiedad inmutable static con campo de respaldo
inspections.companion.object.in.extension=Objeto companion en extensión
inspections.companion.object.in.extension.message=Los objetos companion en implementaciones de extensiones IDE solo deben contener loggers y constantes
inspections.create.object.and.move.prohibited.declarations.fix.text=Crear objeto y mover declaraciones prohibidas
inspections.empty.companion.object.in.extension.message=Las extensiones no deberían contener objetos companion
inspections.forbidden.method.in.suspend.context=Método prohibido en contexto suspend
inspections.forbidden.method.in.suspend.context.check.canceled.fix.text=Reemplazar 'ProgressManager.checkCanceled' con 'checkCancelled' amigable con corrutinas
inspections.forbidden.method.in.suspend.context.check.canceled.text=No llamar a 'ProgressManager.checkCanceled' en contexto suspend. Usar la función de nivel superior 'checkCancelled'
inspections.forbidden.method.in.suspend.context.default.modality.state.text='defaultModalityState()' no funciona en contexto suspend. Use 'contextModality()' si realmente es necesario
inspections.forbidden.method.in.suspend.context.invoke.and.wait.fix.text=Reemplazar llamada 'invokeAndWait' con 'withContext(Dispatchers.EDT) {}'
inspections.forbidden.method.in.suspend.context.invoke.and.wait.text='invokeAndWait' puede bloquear la corrutina actual. Use 'Dispatchers.EDT' en su lugar
inspections.forbidden.method.in.suspend.context.invoke.later.fix.launch.text=Reemplazar 'invokeLater' con 'launch(Dispatchers.EDT)'
inspections.forbidden.method.in.suspend.context.invoke.later.fix.with.context.text=(puede cambiar la semántica) Reemplazar llamada 'invokeLater' con 'withContext(Dispatchers.EDT) {}'
inspections.forbidden.method.in.suspend.context.invoke.later.text='invokeLater' no es idiomático en contexto suspend. Use 'Dispatchers.EDT' en su lugar
inspections.forbidden.method.in.suspend.context.navigate.to.suspend.context=Navegar al contexto suspend
inspections.forbidden.method.in.suspend.context.text=Método ''{0}'' anotado con @RequiresBlockingContext. No está diseñado para ser llamado desde funciones suspend
inspections.move.prohibited.declarations.to.top.level.fix.text=Mover declaraciones prohibidas al nivel superior
inspections.plugin.extension.registers.kotlin.object=Clase de extensión es un objeto Kotlin
inspections.plugin.kotlin.object.registered.as.extension=Objeto Kotlin registrado como extensión
inspections.remove.empty.companion.object.fix.text=Eliminar objeto companion vacío