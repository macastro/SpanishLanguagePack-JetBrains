choose.python.sdk.to.start.learning.header=Se requiere intérprete Python
no.interpreter.in.learning.project=No se puede configurar el intérprete, inténtelo <callback id="{0}">manualmente</callback>.
no.interpreter.in.user.project=No se encuentra el intérprete de Python, <callback id="{0}">abrir</callback> el proyecto de Python de demostración para configurar el intérprete de forma automática o haga clic <callback id="{1}">aquí</callback> para hacerlo manualmente.
python.3.required.warning.message=Para completar esta lección, <callback id="{0}">configura un intérprete</callback> basado en Python 3.
python.debug.workflow.help.link=Parte 1. Depuración de código Python
python.debug.workflow.rerun=Reejecutemos nuestro programa. Simplemente haz clic en {0} nuevamente o usa {1}.
python.editor.coding.assistance.fix.error=Vamos a corregir este error. Pulsa {0} y selecciona {1} o {2} <strong>→ math</strong>
python.editor.coding.assistance.press.to.fix=Pulsa {0} para reemplazar la tupla por una lista.
python.f.string.completion.complete.it=Completa el enunciado con {0}. Pulsa {1} para aplicar el primer ítem.
python.f.string.completion.help.link=Completar F-string
python.f.string.completion.invoke.manually=Puede invocar la finalización manualmente con {0}
python.f.string.completion.lesson.name=Autocompletado de f-string
python.f.string.completion.result.message=Puede ver que una cadena Python simple fue reemplazada por una cadena f después de la finalización.
python.f.string.completion.type.prefix=<ide/> admite la conversión automática de f-string. Solo comienza a escribir {0}.
python.in.place.refactoring.add.parameter=Agreguemos un argumento a este método. Colocamos el cursor del editor justo después del primer parámetro. Ahora escribe una coma y el nombre del parámetro: {0}.
python.in.place.refactoring.finish.rename=Presionar {0} para finalizar el cambio de nombre.
python.in.place.refactoring.help.rename.link=Renombrar código en lugar
python.in.place.refactoring.help.signature.link=Cambiar firma en su lugar
python.in.place.refactoring.invoke.intention.for.parameter=<ide/> espera que vas a cambiar la signatura del método. Puedes notarlo al ver el mismo ícono {0} en el gutter. Cuando termines de escribir el nombre del parámetro nuevo, invoca las intenciones presionando {1}.
python.in.place.refactoring.invoke.intentions=<ide/> está suponiendo que vas a renombrar la variable. Puedes notarlo por el icono {0} en el borde. Invoca las intenciones con {1} cuando termines de escribir el nombre nuevo.
python.in.place.refactoring.lesson.name=Refactorización en el lugar
python.in.place.refactoring.remark.about.application.scope=Nota: La refactorización directa sólo puede aplicarse en el punto de definición, mientras que la invocación directa de refactorizaciones de cambio de nombre o cambio de firma pueden llamarse tanto desde la definición como desde el uso.
python.in.place.refactoring.set.default.value=Ahora debes escribir el valor que se insertará como argumento en cada llamada. Puedes elegir "{0}" para este ejemplo. Luego presiona "{1}" para continuar.
python.in.place.refactoring.signature.preview=<ide/> te está mostrando la vista previa de la firma corta. Pulsa {0} para continuar.
python.in.place.refactoring.start.type.new.name=Consideremos un enfoque alternativo para realizar refactorizaciones. Supongamos que queremos renombrar la variable local {0} a {1}. Simplemente comienza a escribir el nuevo nombre.
python.in.place.refactoring.update.callers=Pulsa {0} para actualizar las llamadas.
python.onboarding.apply.action=Selecciona la acción {0} y presiona {1}.
python.onboarding.apply.intention=Selecciona {0} y presiona {1}.
python.onboarding.balloon.about.debug.panel=La ventana de herramientas {0} proporciona una barra de herramientas con varias acciones de depuración. Puede tomar la lección {1} más adelante para probarlas.
python.onboarding.balloon.click.here=Haz clic aquí para establecer un punto de interrupción
python.onboarding.balloon.open.file=Haga doble clic para abrir {0}
python.onboarding.balloon.open.learn.toolbar=Cambie a la ventana de herramientas {0} para continuar con esta lección
python.onboarding.balloon.project.directory=Expande el directorio del proyecto para ver los archivos del proyecto
python.onboarding.balloon.project.view=Clic para abrir la **vista de proyecto**
python.onboarding.balloon.start.debugging=Haz clic en el icono para iniciar a depurar
python.onboarding.balloon.stop.debugging=Haz clic en el icono para detener la depuración
python.onboarding.case.changed=cambio de mayúsculas
python.onboarding.change.ui.settings=Para esta lección, PyCharm realizará cambios en algunos ajustes de la interfaz de usuario para volver a establecer el estado predeterminado. Cuando completes o salgas de la lección, se restablecerán tus preferencias.
python.onboarding.choose.values.item=Seleccionar {0} y pulsar {1}.
python.onboarding.complete.template=Teclea {0} y luego pulsa {1}.
python.onboarding.epilog=¡Enhorabuena! Has completado el tour de incorporación. En este punto puedes:
python.onboarding.feedback.system.found.interpreters=Intérpretes encontrados:
python.onboarding.feedback.system.no.interpreters=ninguno
python.onboarding.feedback.system.start.interpreter=Iniciar intérprete:
python.onboarding.feedback.system.used.interpreter=Intérprete usado:
python.onboarding.indexing.description=Cuando se abre un proyecto por primera vez, <ide/> escanea el SDK de Python y el proyecto en sí para recopilar los detalles necesarios para la asistencia de codificación. Para continuar, espere a que se complete la indexación.
python.onboarding.interpreter.description=PyCharm ya ha configurado un intérprete de Python para este curso. Puedes modificarlo o crear otro para tus proyectos. La forma más sencilla de hacerlo es usar el selector de intérprete de Python en la barra de estado.
python.onboarding.interpreter.tip=<strong>Consejo:</strong> aquí puedes consultar la configuración del intérprete de Python
python.onboarding.invoke.completion=Ahora comencemos escribiendo {0} entre paréntesis {1}. <ide/> muestra las opciones de completado automáticamente mientras escribe. También puedes presionar {2} y seguir escribiendo para reducir la lista.
python.onboarding.invoke.completion.balloon=Comienza a escribir {0} para mostrar todas las opciones de completado disponibles
python.onboarding.invoke.intention.for.code=Las intenciones también ahorran tu tiempo y hacen más fácil la codificación. Usemos una intención para añadir rápidamente un tipo de retorno para {0}. Presione {1}.
python.onboarding.invoke.intention.for.code.balloon=Presiona {0} para mostrar las intenciones disponibles
python.onboarding.invoke.intention.for.warning.1=Acabas de arreglar un bug, pero puedes mejorar el aspecto de este código. PyCharm resalta las líneas de código que se pueden mejorar y les agrega una bombilla amarilla.
python.onboarding.invoke.intention.for.warning.2=Presiona {0} para previsualizar las advertencias y aplicar una solución rápida.
python.onboarding.invoke.intention.for.warning.balloon=Presione {0} para mostrar correcciones rápidas disponibles
python.onboarding.invoke.search.everywhere.1=Al trabajar en <ide/>, puede que desees buscar archivos de tu proyecto, símbolos, clases, o incluso acciones del IDE. En esta lección, vamos a buscar la acción {0} para hacer que la cadena {1} sea minúscula.
python.onboarding.invoke.search.everywhere.2=Pulsa dos veces {0} para abrir el cuadro de diálogo {1}.
python.onboarding.lesson.name=Familiarízate con PyCharm
python.onboarding.module.description=Una breve descripción general de las funcionalidades principales de {0}.
python.onboarding.module.name=Tour de iniciación
python.onboarding.project.view.description=La <strong>vista de proyecto</strong> es una de las ventanas principales. Contiene el directorio del proyecto, las librerías externas específicas del SDK y los archivos de prueba. Presiona el botón con rayas para previsualizar el contenido del proyecto de demostración. También puedes abrirlo presionando {0}.
python.onboarding.run.options.professional=Otras acciones como perfil {0} y ejecutar con cobertura {1} se pueden mostrar haciendo clic en {2}.
python.onboarding.run.sample=Por ahora, vamos a ejecutar el archivo actual, haga clic en {0} o presione {1}.
python.onboarding.run.sample.balloon=Ejecuta el archivo actual, haz clic en {0} o presiona {1}.
python.onboarding.search.everywhere.description=Como puedes ver, el texto seleccionado, {0}, se ha copiado automáticamente en la cadena de entrada. Vamos a escribir {1} en lugar de {0}.
python.onboarding.select.fix=Aplicar el primer elemento: {0}. Con esta corrección, tu código tendrá un aspecto limpio.
python.onboarding.start.debugging=Haz clic en el icono {0} para comenzar el proceso de depuración.
python.onboarding.stop.debugging=Detengamos la depuración. Haz clic en el icono {0}.
python.onboarding.temporary.configuration.description=Has abierto el ejemplo de demostración. ¡Ahora, ejecutémoslo! En el {0} resaltado, puedes ver acciones de ejecución populares para la configuración seleccionada. Por ejemplo, puedes ejecutar tu código {1} o depurarlo {2}.
python.onboarding.toggle.breakpoint.1=Puede que notes que en lugar del valor esperado de {0}, el método {1} devuelve {2}. Vamos a parar en la sentencia de retorno para depurar el código problemático.
python.onboarding.toggle.breakpoint.2=Haz clic en el margen dentro del área resaltada para establecer un punto de interrupción.
python.onboarding.type.division=Después de que descubras el problema en el código, vamos a arreglarlo. Divide la suma resultante entre la longitud de los valores. El script del curso ya inserta {0}.
python.postfix.completion.complete=Selecciona {0} de la lista y presiona {1} para completar la instrucción.
python.postfix.completion.type=Escribe {0} después de los paréntesis para ver la lista de sugerencias.
python.quick.fix.refactoring.choose.change.signature=Elegir corrección rápida de {0}.
python.quick.fix.refactoring.close.completion.list=Por ahora, no queremos aplicar ninguna finalización. Cerrar la lista ({0})
python.quick.fix.refactoring.finish.refactoring=Presiona {0} (o haz clic en {1}) para finalizar la refactorización.
python.quick.fix.refactoring.help.link=Cambiar firma
python.quick.fix.refactoring.invoke.intentions=Como habrás notado, <ide/> te está mostrando una advertencia aquí. Invoquemos intenciones presionando {0}.
python.quick.fix.refactoring.lesson.name=Quick-fix para refactorizar
python.quick.fix.refactoring.select.new.parameter=Establezcamos el valor predeterminado para el nuevo parámetro. Haga clic en la línea del nuevo parámetro. Alternativamente, puede cambiar el foco al parámetro presionando {0} y luego {1}.
python.quick.fix.refactoring.set.default.value=Puedes navegar por los campos y la casilla de verificación usando {0}. Cuando la casilla está marcada, <ide/> inserta el valor predeterminado en las otras llamadas o lo establece como el valor predeterminado para el nuevo parámetro. La vista previa de la firma te ayudará a entender la diferencia. Ahora establece el valor predeterminado en 0.
python.quick.fix.refactoring.type.new.argument=Algunos refactorings pueden implementarse como correcciones rápidas. Supongamos que queremos añadir un parámetro al método {0} y pasarle la variable {1}. Escribamos {2} después del primer argumento.
python.rename.exclude.item=Parece que {0} debería excluirse de la refactorización de renombrado. Selecciónelo y presione {1}.
python.rename.expand.dynamic.references=En casos simples, {0} realizará la refactorización de renombrado sin confirmación. Sin embargo, en esta muestra, <ide/> detecta dos llamadas del método {0} para objetos con tipos desconocidos. Expande el elemento {1}.
python.rename.find.window.closed.warning=Presiona {0} para abrir nuevamente la ventana de herramienta de búsqueda.
python.rename.finish.refactoring=Completa la refactorización de renombrar con el botón {0}.
python.rename.press.rename=Presione {0} y cambie el nombre del campo {1} (por ejemplo, a {2}).
python.run.configuration.help.link=Ayuda en la ejecución de código
python.run.configuration.lets.run=Ejecutemos un ejemplo simple con {0}.
python.smart.completion.finish.completion=Sólo tienes que seleccinar el elemento {0} para completar esta lección.
python.smart.completion.help.link=Completado de coincidencia de tipos
python.smart.completion.try.basic.completion=Prueba a usar el autocompletado básico pulsando {0}.
python.smart.completion.use.smart.completion=Lamentablemente, <ide/> no tiene información directa sobre el tipo {0}. Pero aveces, ¡puede sugerir la finalización usando el contexto! Usa {1} para invocar Finalización inteligente.
python.tab.completion.lesson.name=Autocompletar tabla
python.tab.completion.select.item=Selecciona el elemento {0} con las flechas del teclado o empieza a escribirlo.
python.tab.completion.start.completion=Supongamos que quieres reemplazar {0} por {1}. Invoque la complementación presionando {2}.
python.tab.completion.use.tab.completion=Si presionas {0} vas a insertar {1} delante de {2}. En cambio, presiona {3} para reemplazar {2} por {1}.
toggle.case.part=mayús/minús