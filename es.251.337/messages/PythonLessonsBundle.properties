choose.python.sdk.to.start.learning.header=Se requiere intérprete de Python
no.interpreter.in.learning.project=No se puede configurar el intérprete, intente hacerlo <callback id\="{0}">manualmente</callback>.
no.interpreter.in.user.project=No se encuentra el intérprete de Python, <callback id\="{0}">abra</callback> el proyecto de demostración de Python para configurar el intérprete automáticamente o haga clic <callback id\="{1}">aquí</callback> para hacerlo manualmente.
python.3.required.warning.message=Para completar esta lección, <callback id\="{0}">configure un intérprete</callback> basado en Python 3.
python.debug.workflow.help.link=Parte 1. Depurando Código Python
python.debug.workflow.rerun=Volvamos a ejecutar nuestro programa. Simplemente haga clic en {0} nuevamente o use {1}.
python.editor.coding.assistance.fix.error=Vamos a corregir este error. Presione {0} y seleccione {1} o {2} <strong>→ math</strong>
python.editor.coding.assistance.press.to.fix=Presione {0} para reemplazar la tupla con una lista.
python.f.string.completion.complete.it=Complete la declaración con {0}. Solo presione {1} para aplicar el primer elemento.
python.f.string.completion.help.link=Autocompletado de F-string
python.f.string.completion.invoke.manually=Puede invocar el autocompletado manualmente con {0}.
python.f.string.completion.lesson.name=Autocompletado de F-string
python.f.string.completion.result.message=Puede ver que una cadena Python simple fue reemplazada por f-string después del autocompletado.
python.f.string.completion.type.prefix=<ide/> admite la conversión automática de f-string. Solo comience a escribir {0}.
python.in.place.refactoring.add.parameter=Agreguemos un argumento a este método. Colocamos el cursor del editor justo después del primer parámetro. Ahora escriba una coma y el nombre del parámetro\: {0}.
python.in.place.refactoring.finish.rename=Presione {0} para finalizar el renombrado.
python.in.place.refactoring.help.rename.link=Renombrar código in situ
python.in.place.refactoring.help.signature.link=Cambiar firma in situ
python.in.place.refactoring.invoke.intention.for.parameter=<ide/> espera que vaya a cambiar la firma del método. Puede notarlo al ver el mismo icono {0} en el margen. Cuando termine de escribir el nombre del nuevo parámetro, invoque las intenciones presionando {1}.
python.in.place.refactoring.invoke.intentions=<ide/> está adivinando que va a renombrar la variable. Puede notarlo por el icono {0} en el margen. Invoque las intenciones con {1} cuando termine de escribir el nuevo nombre.
python.in.place.refactoring.lesson.name=Refactorización in situ
python.in.place.refactoring.remark.about.application.scope=Nota\: La refactorización in situ solo puede aplicarse en el punto de definición mientras que la invocación directa de las refactorizaciones de renombrado o cambio de firma puede llamarse tanto desde la definición como desde el uso.
python.in.place.refactoring.set.default.value=Ahora necesita escribir el valor que se insertará como argumento en cada llamada. Puede elegir {0} para este ejemplo. Luego presione {1} para continuar.
python.in.place.refactoring.signature.preview=<ide/> le está mostrando la vista previa corta de la firma. Presione {0} para continuar.
python.in.place.refactoring.start.type.new.name=Consideremos un enfoque alternativo para realizar refactorizaciones. Suponga que queremos renombrar la variable local {0} a {1}. Solo comience a escribir el nuevo nombre.
python.in.place.refactoring.update.callers=Presione {0} para actualizar los llamadores.
python.onboarding.apply.action=Seleccione la acción {0} y presione {1}.
python.onboarding.apply.intention=Seleccione {0} y presione {1}.
python.onboarding.balloon.about.debug.panel=La ventana de herramientas {0} proporciona una barra de herramientas con varias acciones de depuración. Puede tomar la lección {1} más tarde para probarlas.
python.onboarding.balloon.click.here=Haga clic aquí para establecer un breakpoint
python.onboarding.balloon.open.file=Doble clic para abrir {0}
python.onboarding.balloon.open.learn.toolbar=Cambie a la ventana de herramientas {0} para continuar esta lección
python.onboarding.balloon.project.directory=Expanda el directorio del proyecto para ver los archivos del proyecto
python.onboarding.balloon.project.view=Haga clic para abrir la <strong>vista de Proyecto</strong>
python.onboarding.balloon.start.debugging=Haga clic en el icono para iniciar la depuración
python.onboarding.balloon.stop.debugging=Haga clic en el icono para detener la depuración
python.onboarding.case.changed=Se ha cambiado el caso.
python.onboarding.change.ui.settings=Para esta lección, PyCharm cambiará algunas configuraciones de la interfaz al estado predeterminado. Sus preferencias se restaurarán cuando complete o salga de la lección.
python.onboarding.choose.values.item=Seleccione {0} y presione {1}.
python.onboarding.complete.template=Presione {0}.
python.onboarding.epilog=¡Felicitaciones\! Ha completado el tour de iniciación. En este punto puede\:\n  - <callback id\="{0}">Cerrar</callback> el proyecto de aprendizaje{1}\n  - <callback id\="{2}">Mostrar</callback> más lecciones
python.onboarding.feedback.system.found.interpreters=Intérpretes encontrados\:
python.onboarding.feedback.system.no.interpreters=ninguno
python.onboarding.feedback.system.start.interpreter=Iniciar intérprete\:
python.onboarding.feedback.system.used.interpreter=Intérprete utilizado\:
python.onboarding.indexing.description=Cuando abre un proyecto por primera vez, <ide/> escanea el SDK de Python y el proyecto en sí para recopilar los detalles necesarios para la asistencia de código. Para continuar, espere hasta que se complete la indexación.
python.onboarding.interpreter.description=PyCharm ya ha configurado un intérprete de Python para este curso. Puede modificarlo o crear otro para sus proyectos. La forma más simple de hacerlo es usar el selector de intérprete de Python en la barra de estado.
python.onboarding.interpreter.tip=<strong>Consejo\:</strong> aquí puede descubrir la configuración de su intérprete de Python
python.onboarding.invoke.completion=Ahora empecemos a escribir {0} dentro de los paréntesis {1}. <ide/> muestra opciones de autocompletado automáticamente mientras escribe. Alternativamente, también puede presionar {2} y continuar escribiendo para reducir la lista.
python.onboarding.invoke.completion.balloon=Empiece a escribir {0} para mostrar todas las opciones de autocompletado disponibles
python.onboarding.invoke.intention.for.code=Las intenciones también ahorran tiempo y facilitan la codificación. Usemos una intención para agregar rápidamente un tipo de retorno para {0}. Presione {1}.
python.onboarding.invoke.intention.for.code.balloon=Presione {0} para mostrar las intenciones disponibles
python.onboarding.invoke.intention.for.warning.1=Acaba de corregir un error, pero puede hacer que este código se vea aún mejor. PyCharm resalta y agrega un foco amarillo a las líneas de código que se pueden mejorar.
python.onboarding.invoke.intention.for.warning.2=Presione {0} para previsualizar las advertencias y aplicar una corrección rápida.
python.onboarding.invoke.intention.for.warning.balloon=Presione {0} para mostrar las correcciones rápidas disponibles
python.onboarding.invoke.search.everywhere.1=Mientras trabaja en <ide/>, es posible que desee buscar archivos en su proyecto, símbolos, clases o incluso acciones del IDE. En esta lección, busquemos la acción {0} para convertir la cadena {1} a minúsculas.
python.onboarding.invoke.search.everywhere.2=Presione {0} dos veces para abrir el diálogo {1}.
python.onboarding.lesson.name=Familiarícese con PyCharm
python.onboarding.module.description=Una breve descripción de las principales características en {0}.
python.onboarding.module.name=Tour de iniciación
python.onboarding.project.view.description=La <strong>vista de Proyecto</strong> es una de las principales ventanas de herramientas. Contiene el directorio del proyecto, bibliotecas externas específicas del SDK y archivos temporales. Haga clic en el botón rayado para previsualizar el contenido del proyecto de demostración. También puede abrirlo presionando {0}.
python.onboarding.run.options.professional=Otras acciones como profile {0}, y ejecutar con coverage {1} se pueden mostrar haciendo clic en {2}.
python.onboarding.run.sample=Ahora, vamos a ejecutar el archivo actual, haga clic en {0} o presione {1}.
python.onboarding.run.sample.balloon=Vamos a ejecutar el archivo actual, haga clic en {0} o presione {1}.
python.onboarding.search.everywhere.description=Como puede ver, el texto seleccionado, {0}, se ha copiado automáticamente en la cadena de entrada. Escribamos {1} en lugar de {0}.
python.onboarding.select.fix=Aplique el primer elemento\: {0}. Con esta corrección, su código se ve ordenado.
python.onboarding.start.debugging=Haga clic en el icono {0} para iniciar el proceso de depuración.
python.onboarding.stop.debugging=Detengamos la depuración. Haga clic en el icono {0}.
python.onboarding.temporary.configuration.description=Ha abierto el ejemplo de demostración. ¡Ahora, vamos a ejecutarlo\! En el {0} resaltado, puede ver acciones populares de ejecución para la configuración seleccionada. Por ejemplo, puede ejecutar su código {1} o depurarlo {2}.
python.onboarding.toggle.breakpoint.1=Puede notar que en lugar del valor esperado {0}, el método {1} devuelve {2}. Detengámonos en la declaración return para depurar el código problemático.
python.onboarding.toggle.breakpoint.2=Haga clic en el margen dentro del área resaltada para establecer un breakpoint.
python.onboarding.type.division=Una vez que ha descubierto el problema en el código, vamos a arreglarlo. Divida la suma resultante por la longitud de los valores. El script de la lección ya inserta {0}.
python.postfix.completion.complete=Seleccione {0} de la lista y presione {1} para completar la declaración.
python.postfix.completion.type=Escriba {0} después del paréntesis para ver la lista de sugerencias.
python.quick.fix.refactoring.choose.change.signature=Elija la corrección rápida {0}.
python.quick.fix.refactoring.close.completion.list=Por ahora, no queremos aplicar ningún autocompletado. Cierre la lista ({0}).
python.quick.fix.refactoring.finish.refactoring=Presione {0} (o haga clic en {1}) para finalizar la refactorización.
python.quick.fix.refactoring.help.link=Cambiar firma
python.quick.fix.refactoring.invoke.intentions=Como habrá notado, <ide/> le está mostrando una advertencia aquí. Invoquemos las intenciones presionando {0}.
python.quick.fix.refactoring.lesson.name=Refactorización de corrección rápida
python.quick.fix.refactoring.select.new.parameter=Vamos a establecer el valor predeterminado para el nuevo parámetro. Haga clic en la línea del nuevo parámetro. Alternativamente, puede cambiar el foco al parámetro presionando {0} y luego {1}.
python.quick.fix.refactoring.set.default.value=Puede navegar por los campos y la casilla de verificación usando {0}. Con la casilla seleccionada, <ide/> incorpora el valor predeterminado a los otros llamadores o lo establece como valor predeterminado para el nuevo parámetro. La Vista Previa de Firma le ayudará a entender la diferencia. Ahora establezca el valor predeterminado en 0.
python.quick.fix.refactoring.type.new.argument=Algunas refactorizaciones pueden realizarse como correcciones rápidas. Suponga que queremos agregar un parámetro al método {0} y pasarle la variable {1}. Escribamos {2} después del primer argumento.
python.rename.exclude.item=Parece que {0} debería excluirse de la refactorización de renombrado. Selecciónelo y presione {1}.
python.rename.expand.dynamic.references=En casos simples, {0} realizará la refactorización de renombrado sin confirmación. Sin embargo, en este ejemplo, <ide/> detecta dos llamadas al método {0} para objetos con tipos desconocidos. Expanda el elemento {1}.
python.rename.find.window.closed.warning=Presione {0} para abrir la ventana de búsqueda nuevamente.
python.rename.finish.refactoring=Complete la refactorización de renombrado con el botón {0}.
python.rename.press.rename=Presione {0} y renombre el campo {1} (por ejemplo, a {2}).
python.run.configuration.help.link=Asistencia para Ejecución de Código
python.run.configuration.lets.run=Ejecutemos nuestro ejemplo simple con {0}.
python.smart.completion.finish.completion=Ahora solo elija el elemento {0} para terminar esta lección.
python.smart.completion.help.link=Autocompletado por coincidencia de tipo
python.smart.completion.try.basic.completion=Intente usar el Autocompletado Básico presionando {0}.
python.smart.completion.use.smart.completion=Desafortunadamente, <ide/> no tiene información directa sobre el tipo {0}. ¡Pero a veces puede sugerir autocompletado por el contexto\! Use {1} para invocar el Autocompletado Inteligente.
python.tab.completion.lesson.name=Autocompletado con Tab
python.tab.completion.select.item=Seleccione el elemento {0} usando las flechas del teclado o simplemente comience a escribirlo.
python.tab.completion.start.completion=Suponga que desea reemplazar {0} con {1}. Invoque el autocompletado presionando {2}.
python.tab.completion.use.tab.completion=Si presiona {0}, insertará {1} antes de {2}. En su lugar, presione {3} para reemplazar {2} con {1}.
toggle.case.part=mayúsculas/minúsculas