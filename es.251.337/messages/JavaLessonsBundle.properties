java.basic.completion.activate=Para activar el Completado Básico, presione {0} y verá el menú lookup nuevamente.
java.basic.completion.choose.first=Puede elegir el primer elemento del menú Lookup presionando {0}.
java.basic.completion.choose.item=Seleccione {0} dentro del menú lookup y presione {1}.
java.basic.completion.complete=Presione {0} para completar esta declaración.
java.basic.completion.deeper.level=A veces, necesita ver sugerencias para constantes o métodos estáticos. Presione {0} dos veces para obtenerlas en el lookup.
java.basic.completion.module.promotion=Encontrará más información sobre refactorizaciones en el módulo {0}.
java.debug.workflow.confirm.hot.swap=Confirme la recarga de <strong>Hot Swap</strong>.
java.debug.workflow.drop.frame=Hemos parcheado nuestro método, pero todavía estamos ejecutando el {0} obsoleto, que volverá a lanzar la excepción. Eliminemos el frame y volvamos al estado anterior a la llamada de {1}. Haga clic en {2} cerca de la llamada superior en el frame de pila o presione {3}.
java.debug.workflow.hotswap.disabled.warning=La función <strong>Hot Swap</strong> está deshabilitada en la configuración del IDE. Habilítela en {0} | {1} | {2} <strong>→</strong> {3} o simplemente <callback id\="{4}">haga clic para activar</callback>.
java.debug.workflow.invalid.drop=Parece que realizó una acción que no estaba planificada por la lección. Por favor, reinicie la lección.
java.debug.workflow.no.confirmation=<strong>Hot Swap</strong> se realiza automáticamente en segundo plano. Puede ver un mensaje correspondiente en la esquina inferior izquierda.
java.debug.workflow.rebuild=Podríamos volver a ejecutar nuestro pequeño programa después de la corrección, pero para programas grandes, la reejecución puede llevar mucho tiempo. Si la corrección solo afecta a un método puro (como en este caso), podemos reconstruir el proyecto y aplicar <strong>Hot Swap</strong> en lugar de volver a ejecutar. Presione {0} para construir el proyecto.
java.editor.coding.assistance.press.to.fix=Presione {0} para reemplazar el argumento con un array vacío.
java.extract.method.edit.method.name=Edite el nombre del nuevo método o deje el que el IDE propuso. Luego presione {0}.
java.inheritance.hierarchy.choose.any.implementation=Elija cualquier implementación y presione {0} o haga clic en ella.
java.inheritance.hierarchy.goto.implementation=Presione {0} para buscar implementaciones de {1}.
java.inheritance.hierarchy.help.link=Jerarquía de código fuente
java.inheritance.hierarchy.hide.find.tool.window=Presione {0} para ocultar la ventana de herramientas {1}.
java.inheritance.hierarchy.hide.method.hierarchy=Ocultemos (también) {0}. Presione {1} nuevamente.
java.inheritance.hierarchy.invoke.implementations.again=La declaración del método base tiene su propio icono de margen {0}. Haga clic en él o presione {1} nuevamente.
java.inheritance.hierarchy.last.note=<strong>Nota\:</strong> Las acciones {0} y {1} también se pueden aplicar a clases. Las acciones {2} y {3} se usan raramente, pero siempre puede encontrarlas con {4} usando el filtro {5}.
java.inheritance.hierarchy.lesson.name=Jerarquía de herencia
java.inheritance.hierarchy.navigate.to.base=Puede navegar a un método super desde el derivado. Presione {0} o haga clic en el icono {1} en el margen del editor.
java.inheritance.hierarchy.open.class.hierarchy=Para ver la jerarquía de clases, presione {0}.
java.inheritance.hierarchy.open.in.find.tool.window=Para jerarquías grandes, es posible que desee buscar implementaciones en la ventana de herramientas {0}. Haga clic en {1}.
java.inheritance.hierarchy.open.method.hierarchy=Es posible que desee explorar toda la jerarquía para este método. Presione {0}.
java.missed.sdk.click.setup=<ide/> no puede encontrar el JDK en su computadora. El IDE necesita JDK para ejecutar programas Java y proporcionarle asistencia de código. Para configurar JDK, haga clic en el enlace resaltado {0}.
java.missed.sdk.configure=Configure JDK usando una de las opciones sugeridas. Puede descargarlo o especificar una ruta al directorio home del JDK existente en su computadora.
java.missed.sdk.read.more.tip=<strong>Consejo</strong>\: puede leer más sobre JDK en <a href\=''{0}''>la documentación</a>.
java.missed.sdk.show.options=Haga clic para ver las opciones disponibles
java.missed.sdk.wait.installation=Por favor espere mientras el IDE instala JDK
java.onboarding.apply.action=Seleccione la acción {0} y presione {1}.
java.onboarding.apply.intention=Seleccione {0} y presione {1}.
java.onboarding.balloon.about.debug.panel=La ventana de herramientas {0} proporciona una barra de herramientas con varias acciones de depuración. Puede tomar la lección {1} más tarde para probarlas.
java.onboarding.balloon.click.here=Haga clic aquí para establecer un breakpoint
java.onboarding.balloon.open.file=Doble clic para abrir {0}
java.onboarding.balloon.open.learn.toolbar=Cambie a la ventana de herramientas {0} para continuar esta lección
java.onboarding.balloon.project.view=Haga clic para abrir la <strong>vista de Proyecto</strong>
java.onboarding.balloon.source.directory=Expanda el directorio {0} para ver los archivos fuente del proyecto
java.onboarding.balloon.start.debugging=Haga clic en el icono para iniciar la depuración
java.onboarding.balloon.stop.debugging=Haga clic en el icono para detener la depuración
java.onboarding.case.changed=El caso ha cambiado.
java.onboarding.change.ui.settings=Para esta lección, IDEA cambiará algunas configuraciones de UI al estado predeterminado. Sus preferencias se restaurarán cuando complete o salga de la lección.
java.onboarding.choose.values.item=Ahora puede comenzar a escribir {0} para reducir la lista de completado o seleccionar este elemento y presionar {1}.
java.onboarding.epilog=¡Felicitaciones\! Ha completado el tour de iniciación. En este punto puede\:\n  - <callback id\="{0}">Cerrar</callback> el proyecto de aprendizaje{1}\n  - <callback id\="{2}">Mostrar</callback> más lecciones
java.onboarding.feedback.system.current.jdk=JDK actual\:
java.onboarding.feedback.system.found.jdks=JDKs encontrados\:
java.onboarding.feedback.system.jdk.at.start=JDK al inicio\:
java.onboarding.feedback.system.lang.level=Nivel de lenguaje\:
java.onboarding.indexing.description=Cuando abre un proyecto por primera vez, <ide/> escanea el JDK y el proyecto mismo para recopilar los detalles necesarios para la asistencia de código. Para continuar, espere hasta que se complete la indexación.
java.onboarding.invoke.completion=Ahora escribamos un punto {0} para mostrar todas las opciones de completado disponibles.
java.onboarding.invoke.completion.balloon=Escriba un punto {0} para mostrar todas las opciones de completado disponibles
java.onboarding.invoke.completion.tip=<strong>Consejo</strong>\: <ide/> muestra opciones de completado automáticamente mientras escribe. Además, puede presionar {0} para mostrar elementos de completado en cualquier lugar del código.
java.onboarding.invoke.intention.for.code=Las intenciones también ahorran tiempo y facilitan la codificación. Usemos una intención para reformatear la concatenación de cadenas. Presione {0} para mostrar las opciones posibles.
java.onboarding.invoke.intention.for.code.balloon=Presione {0} para mostrar las intenciones disponibles
java.onboarding.invoke.intention.for.warning.1=Acaba de corregir un error, pero puede hacer que este código se vea aún mejor. IDEA resalta y agrega un foco amarillo a las líneas de código que se pueden mejorar.
java.onboarding.invoke.intention.for.warning.2=Presione {0} para previsualizar las advertencias y aplicar una corrección rápida.
java.onboarding.invoke.intention.for.warning.balloon=Presione {0} para mostrar las correcciones rápidas disponibles
java.onboarding.invoke.search.everywhere.1=Mientras trabaja en <ide/>, es posible que desee buscar archivos en su proyecto, símbolos, clases o incluso acciones del IDE. En esta lección, busquemos la acción {0} para convertir la cadena {1} a minúsculas.
java.onboarding.invoke.search.everywhere.2=Presione {0} dos veces para abrir el diálogo {1}.
java.onboarding.lesson.name=Familiarícese con IDEA
java.onboarding.module.description=Una breve descripción de las principales características en {0}.
java.onboarding.module.name=Tour de iniciación
java.onboarding.project.view.description=La <strong>vista de Proyecto</strong> es una de las principales ventanas de herramientas. Contiene el directorio del proyecto, bibliotecas externas específicas del SDK y archivos scratch. Haga clic en el botón rayado para previsualizar el contenido del proyecto demo. También puede abrirlo presionando {0}.
java.onboarding.run.options.community=Otras acciones como ejecutar con cobertura {0} se pueden mostrar haciendo clic en {1}.
java.onboarding.run.options.ultimate=Otras acciones como perfilar {0} y ejecutar con cobertura {1} se pueden mostrar haciendo clic en {2}.
java.onboarding.run.sample=Ahora, vamos a ejecutar el archivo actual, haga clic en {0} o presione {1}.
java.onboarding.run.sample.balloon=Vamos a ejecutar el archivo actual, haga clic en {0} o presione {1}
java.onboarding.search.everywhere.description=Como puede ver, el texto seleccionado, {0}, se ha copiado automáticamente en la cadena de entrada. Escribamos {1} en lugar de {0}.
java.onboarding.select.fix=Aplique el primer elemento\: {0}. En este caso, el bucle <strong>for-each</strong> hará que el código sea más fácil de entender.
java.onboarding.start.debugging=Haga clic en el icono {0} para iniciar el proceso de depuración.
java.onboarding.stop.debugging=Detengamos la depuración. Haga clic en el icono {0}.
java.onboarding.temporary.configuration.description=Ha abierto el ejemplo demo. ¡Ahora, vamos a ejecutarlo\! En el {0} resaltado, puede ver acciones populares de ejecución para la configuración seleccionada. Por ejemplo, puede ejecutar su código {1} o depurarlo {2}.
java.onboarding.toggle.breakpoint.1=Puede notar que en lugar del valor esperado {0}, el método {1} devuelve {2}. Detengámonos en la declaración return para depurar el código problemático.
java.onboarding.toggle.breakpoint.2=Haga clic en el margen dentro del área resaltada para establecer un breakpoint.
java.onboarding.type.division=Una vez que ha descubierto el problema en el código, vamos a arreglarlo. Divida la suma resultante por la longitud de los valores. El script de la lección ya insertó {0}.
java.onboarding.wait.indexing=Por favor espere mientras el IDE indexa los archivos JDK
java.postfix.completion.complete=Seleccione {0} de la lista o escriba el mismo valor en el editor. Presione {1} para completar la declaración.
java.postfix.completion.type=Escriba {0} después del paréntesis para ver la lista de sugerencias de completado postfijo.
java.refactoring.menu.confirm.constant=En este diálogo, puede elegir el tipo, nombre, clase padre y visibilidad de la nueva constante. Puede dejar los valores predeterminados y presionar {0} o hacer clic en {1}.
java.refactoring.menu.inline.variable=Ahora vamos a reemplazar el uso único de la variable {0} con una expresión que la define. Puede presionar {1} y seleccionar {2} de la lista o presionar {3} para invocar esta acción directamente.
java.refactoring.menu.inline.variable.eng=Ahora vamos a reemplazar el uso único de la variable {0} con una expresión que la define. Puede presionar {1} y filtrar el menú de refactorización por <strong>iv</strong> (<strong>i</strong>nline <strong>v</strong>ariable). Elija este elemento o presione {2}.
java.refactoring.menu.introduce.constant=Finalmente, vamos a extraer una extensión del nombre del archivo. Nuevamente, puede presionar {0} y seleccionar {1} o presionar {2}
java.refactoring.menu.introduce.constant.eng=Finalmente, vamos a extraer una extensión del nombre del archivo. Nuevamente, puede presionar {0} y filtrar por <strong>ic</strong> (<strong>i</strong>ntroduce <strong>c</strong>onstant) o presionar {1}.
java.rename.confirm.accessors.rename=<ide/> está detectando los getters/setters correspondientes y sugiere renombrarlos en consecuencia. Ahora solo presione {0} o haga clic en {1}
java.rename.press.rename=Presione {0} para renombrar el campo {1}.
java.rename.type.new.name=Escriba un nuevo nombre para este campo (por ejemplo, {0}) y presione {1}.
java.run.configuration.lets.run=Hay más de una forma de ejecutar su código. Ejecutémoslo desde el margen haciendo clic en {0} y seleccionando el elemento {1}. Alternativamente, puede presionar {2}.
java.smart.type.completion.apply=El Completado de Tipo Inteligente filtra la lista de sugerencias para incluir solo los tipos aplicables dentro del contexto actual. Presione {0} para ver la lista de sugerencias coincidentes. Elija la primera presionando {1}.
java.smart.type.completion.return=El Completado de Tipo Inteligente también puede sugerir código para una declaración return. Presione {0} para ver el menú Lookup para un return. Elija el primero presionando {1}
java.statement.completion.complete.condition=Agregue una condición dentro de los paréntesis {0} y presione {1} para saltar a la declaración {2}.
java.statement.completion.complete.finish.body=Escriba una línea de código\: {0} y luego presione {1} para completar la declaración y aplicar el formato.
java.statement.completion.complete.for=Presione {0} para completar la declaración {1}.
java.statement.completion.complete.if=Escriba {0} y presione {1} para generar la declaración.
java.statement.completion.help.link=Completado de declaraciones
java.statement.completion.lesson.name=Completado de declaraciones
toggle.case.part=mayúsculas