0.field.is.always.initialized.not.null=El campo @{0} siempre se inicializa como no nulo
access.can.be.0=El acceso puede ser ''{0}''
access.can.be.package.private=El acceso puede ser package-private
access.to.field.code.ref.code.outside.of.declared.guards.loc=Acceso al campo <code>\#ref</code> fuera de los guardias declarados \#loc
add.explicit.type.arguments=Agregar argumentos de tipo explícitos
annotate.as.safevarargs=Anotar como '@SafeVarargs'
annotate.overridden.methods.parameters=Anotar parámetros del método sobrescrito como ''@{0}''
annotate.overridden.methods.parameters.family.name=Anotar parámetros del método sobrescrito
annotation.target.ANNOTATION_TYPE=tipo de anotación
annotation.target.CONSTRUCTOR=constructor
annotation.target.FIELD=campo
annotation.target.LOCAL_VARIABLE=variable local
annotation.target.METHOD=método
annotation.target.MODULE=módulo
annotation.target.PACKAGE=paquete
annotation.target.PARAMETER=parámetro
annotation.target.RECORD_COMPONENT=componente de registro
annotation.target.TYPE=tipo
annotation.target.TYPE_PARAMETER=parámetro de tipo
annotation.target.TYPE_USE=uso de tipo
anonymous.ref.loc.can.be.replaced.with.0=\#ref anónimo \#loc puede ser reemplazado con {0}
anonymous.ref.loc.can.be.replaced.with.lambda=\#ref anónimo \#loc puede ser reemplazado con lambda
arguments.count.mismatch=Se esperaban {0, choice, 0\#ningún argumento|1\#1 argumento|1<{0} argumentos} pero se encontraron {1}
assigning.a.collection.of.nullable.elements=Asignando una colección de elementos anulables a una colección de elementos no nulos
call.to.method.code.ref.code.outside.of.declared.guards.loc=Llamada al método <code>\#ref()</code> fuera de los guardias declarados \#loc
change.type.arguments=Cambiar argumentos de tipo
change.type.arguments.to.0=Cambiar argumentos de tipo a <{0}>
change.visibility.level=Hacer {0} {1}
chooser.popup.title.select.class.to.move.members.to=Seleccionar Clase Destino
comparision.between.object.and.primitive=La comparación entre Object y primitivo es ilegal y solo se acepta en Java 7
contract.return.validator.incompatible.return.parameter.type=el tipo de retorno ''{0}'' debe ser convertible desde el tipo de parámetro ''{1}''
contract.return.validator.method.return.incompatible.with.method.containing.class=el tipo de retorno del método debe ser compatible con la clase que contiene el método
contract.return.validator.not.applicable.for.constructor=no aplicable para constructor
contract.return.validator.not.applicable.primitive=no aplicable para tipo de retorno primitivo ''{0}''
contract.return.validator.not.applicable.static=no aplicable para método estático
contract.return.validator.return.type.must.be.boolean=el tipo de retorno del método debe ser 'boolean'
contract.return.validator.too.few.parameters=no aplicable para método que tiene {0, choice, 0\#ningún parámetro|1\#un parámetro|2\#{0} parámetros}
contract.return.value.validation.prefix=Valor de retorno del contrato ''{0}''\:
custom.exception.class.should.have.a.constructor=La clase de excepción personalizada debe tener un constructor con un único parámetro de mensaje de tipo String
dataflow.message.array.index.out.of.bounds=El índice del array está fuera de los límites
dataflow.message.arraystore=Almacenar un elemento de tipo <code>{0}</code> en un array de elementos <code>{1}</code> producirá <code>ArrayStoreException</code>
dataflow.message.assigning.null=<code>null</code> está siendo asignado a una variable anotada con @NotNull
dataflow.message.assigning.null.notannotated=Asignando valor <code>null</code> a un campo no anotado
dataflow.message.assigning.nullable=La expresión <code>\#ref</code> podría evaluar a null pero está asignada a una variable anotada con @NotNull
dataflow.message.assigning.nullable.notannotated=La expresión <code>\#ref</code> \#loc podría ser null pero está asignada a un campo no anotado
dataflow.message.cce=Convertir <code>{0}</code> a <code>\#ref</code> \#loc puede producir <code>ClassCastException</code>
dataflow.message.cce.always=Convertir <code>{0}</code> a <code>\#ref</code> \#loc producirá <code>ClassCastException</code> para cualquier valor no nulo
dataflow.message.constant.condition=La condición <code>\#ref</code> \#loc es siempre <code>{0, choice, 0\#false|1\#true}</code>
dataflow.message.constant.condition.when.reached=La condición <code>\#ref</code> \#loc es siempre <code>{0, choice, 0\#false|1\#true}</code> cuando se alcanza
dataflow.message.constant.expression=El resultado de <code>\#ref</code> \#loc es siempre ''{0}''
dataflow.message.constant.method.reference=El resultado de la referencia al método es siempre ''{0}''
dataflow.message.constant.no.ref=La condición es siempre {0, choice, 0\#false|1\#true}
dataflow.message.constant.value=El valor <code>\#ref</code> \#loc es siempre ''{0}''
dataflow.message.contract.fail=La llamada a '\#ref' siempre falla, según sus contratos de método
dataflow.message.contract.fail.index=La llamada a '\#ref' siempre falla porque un argumento está fuera de los límites
dataflow.message.fail=La llamada a '\#ref' siempre falla con una excepción
dataflow.message.immutable.modified=Se está modificando un objeto inmutable
dataflow.message.immutable.passed=Se está pasando un objeto inmutable donde se espera uno mutable
dataflow.message.negative.array.size=Tamaño de array negativo
dataflow.message.npe.array.access=El acceso al array <code>\#ref</code> \#loc puede producir <code>NullPointerException</code>
dataflow.message.npe.array.access.sure=El acceso al array <code>\#ref</code> \#loc producirá <code>NullPointerException</code>
dataflow.message.npe.field.access=La dereferencia de <code>\#ref</code> \#loc puede producir <code>NullPointerException</code>
dataflow.message.npe.field.access.sure=La dereferencia de <code>\#ref</code> \#loc producirá <code>NullPointerException</code>
dataflow.message.npe.inner.class.construction=La construcción de la clase interna puede producir <code>NullPointerException</code>
dataflow.message.npe.inner.class.construction.sure=La construcción de la clase interna producirá <code>NullPointerException</code>
dataflow.message.npe.method.invocation=La invocación del método <code>\#ref</code> \#loc puede producir <code>NullPointerException</code>
dataflow.message.npe.method.invocation.sure=La invocación del método <code>\#ref</code> \#loc producirá <code>NullPointerException</code>
dataflow.message.npe.methodref.invocation=La invocación de la referencia al método <code>\#ref</code> \#loc puede producir <code>NullPointerException</code>
dataflow.message.npe.template.invocation=La invocación del procesador de plantillas puede producir <code>NullPointerException</code>
dataflow.message.npe.template.invocation.sure=La invocación del procesador de plantillas producirá <code>NullPointerException</code>
dataflow.message.only.switch.label=La etiqueta switch <code>\#ref</code> \#loc es la única alcanzable en todo el switch
dataflow.message.passing.non.null.argument.to.optional='Optional.ofNullable()' con argumento no nulo debería reemplazarse por 'Optional.of()'
dataflow.message.passing.null.argument=Pasando argumento <code>null</code> a un parámetro anotado como @NotNull
dataflow.message.passing.null.argument.nonannotated=Pasando argumento <code>null</code> a un parámetro no anotado
dataflow.message.passing.null.argument.to.optional='Optional.ofNullable()' con argumento null debería reemplazarse por 'Optional.empty()'
dataflow.message.passing.nullable.argument=El argumento <code>\#ref</code> \#loc podría ser null
dataflow.message.passing.nullable.argument.methodref=El argumento de referencia al método podría ser null
dataflow.message.passing.nullable.argument.methodref.nonannotated=El argumento de referencia al método podría ser null pero se pasa a un parámetro no anotado
dataflow.message.passing.nullable.argument.nonannotated=El argumento <code>\#ref</code> \#loc podría ser null pero se pasa a un parámetro no anotado
dataflow.message.pointless.assignment.expression=La condición <code>\#ref</code> \#loc en el lado izquierdo de la expresión de asignación es siempre <code>{0}</code>. Puede simplificarse
dataflow.message.pointless.same.argument.and.result=El resultado de ''\#ref'' es el mismo que el {0,choice,1\#primer|2\#segundo} argumento haciendo que la llamada no tenga sentido
dataflow.message.pointless.same.arguments=Los argumentos de '\#ref' son los mismos. Llamar a este método con los mismos argumentos no tiene sentido
dataflow.message.redundant.assignment=La variable ya está asignada a este valor
dataflow.message.redundant.instanceof=La condición <code>\#ref</code> \#loc es redundante y puede reemplazarse con una comprobación de null
dataflow.message.redundant.update=La actualización de la variable no hace nada
dataflow.message.return.notnull.from.nullable=El método @{0} ''{1}'' siempre devuelve un valor no nulo
dataflow.message.return.null.from.notnull=<code>null</code> es devuelto por el método declarado como @{0}
dataflow.message.return.null.from.notnullable=<code>null</code> es devuelto por el método que no está declarado como @{0}
dataflow.message.return.nullable.from.notnull=La expresión <code>\#ref</code> podría evaluar a null pero es devuelta por el método declarado como @{0}
dataflow.message.return.nullable.from.notnull.function=La función puede devolver null, pero no está permitido aquí
dataflow.message.return.nullable.from.notnullable=La expresión <code>\#ref</code> podría evaluar a null pero es devuelta por el método que no está declarado como @{0}
dataflow.message.storing.array.null=<code>null</code> está almacenado en un array de elementos @NotNull
dataflow.message.storing.array.nullable=La expresión <code>\#ref</code> podría evaluar a null pero está almacenada en un array de elementos @NotNull
dataflow.message.stream.consumed=El stream podría haber sido ya enlazado o consumido
dataflow.message.stream.consumed.always=El stream ya ha sido enlazado o consumido
dataflow.message.unboxing=El unboxing de <code>\#ref</code> \#loc puede producir <code>NullPointerException</code>
dataflow.message.unboxing.method.reference=El uso de <code>\#ref</code> \#loc necesitaría unboxing que puede producir <code>NullPointerException</code>
dataflow.message.unboxing.nullable.argument.methodref=Pasar un argumento a la referencia del método requiere unboxing que puede producir <code>NullPointerException</code>
dataflow.message.unknown.nullability=\ (nulabilidad desconocida)
dataflow.message.unreachable.switch.label=La etiqueta switch <code>\#ref</code> \#loc es inalcanzable
dataflow.method.fails.with.null.argument=El método lanzará una excepción cuando el parámetro sea null
dataflow.not.precise={0} es complejo\: los resultados del flujo de datos podrían ser imprecisos
dataflow.too.complex={0} es demasiado complejo para analizar mediante el algoritmo de flujo de datos
delete.repeated.0=Eliminar ''{0}'' repetido
delete.repeated.interface=Eliminar interfaz repetida
delimiters.argument.contains.duplicated.characters=El argumento 'delimiters' de StringTokenizer contiene caracteres duplicados
deprecated.class.usage.group.xml=XML
deprecated.member.0.is.still.used=El miembro obsoleto ''{0}'' todavía está en uso
detach.library.quickfix.name=Desacoplar biblioteca
detach.library.roots.quickfix.name=Desacoplar raíces de biblioteca no utilizadas
dfa.find.cause.an.execution.might.exist.where=puede existir una ejecución donde\:
dfa.find.cause.and.another=y {0}
dfa.find.cause.array.length.is.always.non.negative=la longitud del array siempre es no negativa
dfa.find.cause.call.always.fails=la llamada siempre falla
dfa.find.cause.cast.may.fail=el cast puede fallar
dfa.find.cause.collection.size.is.always.non.negative=el tamaño de la colección siempre es no negativo
dfa.find.cause.comparison.arguments.are.different.constants=los argumentos de comparación son constantes diferentes
dfa.find.cause.comparison.arguments.are.the.same=los argumentos de comparación son iguales
dfa.find.cause.compile.time.constant=es una constante en tiempo de compilación que evalúa a ''{0}''
dfa.find.cause.condition.is.known.from.place=se sabe que ''{0}'' desde ___PLACE___
dfa.find.cause.condition.was.checked.before=la condición ''{0}'' fue verificada antes
dfa.find.cause.condition.was.deduced=la condición ''{0}'' fue deducida
dfa.find.cause.contract.kind.explicit=contrato
dfa.find.cause.contract.kind.hard.coded=contrato hard-coded
dfa.find.cause.contract.kind.inferred=contrato inferido
dfa.find.cause.contract.returns.on.condition=según {0}, {1} ''{2}'' devuelve ''{3}'' cuando {4}
dfa.find.cause.contract.throws.on.condition=según {0}, {1} ''{2}'' lanza excepción cuando {3}
dfa.find.cause.contract.trivial=según {0}, {1} ''{2}'' siempre devuelve el valor ''{3}''
dfa.find.cause.equality.established.from.condition=''{0}'' se estableció desde la condición
dfa.find.cause.field.assigned.nullability=se sabe que el campo ''{0}'' siempre se inicializa con el valor ''{1}''
dfa.find.cause.field.initializer.nullability=el campo ''{0}'' está inicializado con el valor ''{1}''
dfa.find.cause.instanceof.implies.non.nullity=la comprobación 'instanceof' implica no-nulidad
dfa.find.cause.left.operand.range.template=el operando izquierdo es %s
dfa.find.cause.may.be.null=puede ser null
dfa.find.cause.nonnull.expression.kind.concatenation=concatenación
dfa.find.cause.nonnull.expression.kind.literal=literal
dfa.find.cause.nonnull.expression.kind.newly.created.object=objeto recién creado
dfa.find.cause.nonnull.expression.kind.primitive.type=un valor del tipo primitivo ''{0}''
dfa.find.cause.nonnull.expression.kind.this.object=objeto 'this'
dfa.find.cause.nullability.explicitly.annotated={0} ''{1}'' está anotado como ''{2}''
dfa.find.cause.nullability.externally.annotated={0} ''{1}'' está anotado externamente como ''{2}''
dfa.find.cause.nullability.inferred={0} ''{1}'' fue inferido como ''{2}''
dfa.find.cause.nullability.inherited.from.class={0} ''{1}'' hereda la anotación de la clase {2}, por lo tanto ''{3}''
dfa.find.cause.nullability.inherited.from.container={0} ''{1}'' hereda la anotación del contenedor, por lo tanto ''{2}''
dfa.find.cause.nullability.inherited.from.named.element={0} ''{1}'' hereda de {2}, por lo tanto ''{3}''
dfa.find.cause.nullability.inherited.from.package={0} ''{1}'' hereda la anotación del paquete {2}, por lo tanto ''{3}''
dfa.find.cause.numeric.cast.operand.template=el operando del cast es %s
dfa.find.cause.numeric.range.generic.template=el valor es %s
dfa.find.cause.object.kind.expression=una expresión
dfa.find.cause.object.kind.generic=un objeto
dfa.find.cause.object.kind.method.return=retorno del método
dfa.find.cause.obviously.non.null.expression=la expresión no puede ser null ya que es {0}
dfa.find.cause.one.of.the.following.happens=ocurre uno de los siguientes casos\:
dfa.find.cause.operand.of.boolean.expression.is.the.same=el operando \#{0} de la cadena {1, choice, 0\#and|1\#or} es {2}
dfa.find.cause.or.another=o {0}
dfa.find.cause.place.here=aquí
dfa.find.cause.place.line.number=línea \#{0}
dfa.find.cause.primitive.boxed=el valor primitivo fue boxed
dfa.find.cause.range.is.known.from.place=el rango es conocido desde ___PLACE___
dfa.find.cause.range.is.specified.by.annotation=el rango de ''{0}'' está especificado por anotación como {1}
dfa.find.cause.result.of.numeric.operation.template=el resultado de ''{0}'' es %s
dfa.find.cause.result.of.primitive.cast.template=el resultado del cast ''({0})'' es %s
dfa.find.cause.right.operand.range.template=el operando derecho es %s
dfa.find.cause.size.is.always.zero=el tamaño siempre es cero
dfa.find.cause.special.field.of.something={0}/{1}
dfa.find.cause.string.length.is.always.non.negative=la longitud de la cadena siempre es no negativa
dfa.find.cause.type.is.known.from.place=el tipo de ''{0}'' es conocido desde ___PLACE___
dfa.find.cause.type.known=el tipo de {0} es {1}
dfa.find.cause.unable=No se puede encontrar la causa
dfa.find.cause.value.is.always.the.same=el valor siempre es {0}
dfa.find.cause.value.is.known.from.place=se sabe que ''{0}'' es ''{1}'' desde ___PLACE___
dfa.find.cause.value.x.is.always.the.same=el valor ''{0}'' siempre es ''{1}''
dfa.find.cause.values.cannot.be.equal.because=los valores no pueden ser iguales porque {0}
dfa.find.cause.variable.is.initialized={0} ''{1}'' está inicializado a {2}
dfa.find.cause.was.assigned=''{0}'' fue asignado
dfa.find.cause.was.assigned.to=''{0}'' fue asignado a ''{1}''
dfa.find.cause.was.dereferenced=''{0}'' fue dereferenciado
dfa.find.cause.was.passed.as.non.null.parameter=''{0}'' fue pasado como argumento a un método que acepta parámetro no null
dftype.presentation.empty.optional=Optional vacío
dftype.presentation.present.optional=Optional presente
don.t.report.unused.jars.inside.used.library=No reportar jars sin usar dentro de la biblioteca utilizada
duplication.policy.ask=Preguntar
duplication.policy.generate.duplicate=Generar método duplicado
duplication.policy.replace=Reemplazar existente
element.kind.keys=Claves
element.kind.objects=objetos
element.kind.values=valores
error.class.not.found=Clase {0} no encontrada
error.message.invalid.java.type=Tipo Java no válido
error.unnamed.field.not.allowed=No se permite un campo sin nombre
error.unnamed.method.parameter.not.allowed=No se permite un parámetro de método sin nombre
error.unnamed.variable.brackets=No se permiten corchetes después de una declaración de variable sin nombre
error.unnamed.variable.not.allowed.in.this.context=No se permite una declaración de variable sin nombre en este contexto
error.unnamed.variable.without.initializer=La declaración de variable sin nombre debe tener un inicializador
exception.handler.will.become.unreachable=La sección catch se volverá inalcanzable
explicit.type.argument.ref.loc.can.be.replaced.with=El argumento de tipo explícito \#ref \#loc puede reemplazarse con <>
exports.to.itself.delete.module.ref.fix=Eliminar referencia al módulo ''{0}''
exports.to.itself.delete.statement.fix=Eliminar directiva
find.searching.for.references.to.class.progress=Buscando referencias a la clase {0}…
find.usages.panel.title.base.methods=usos del método base
find.usages.panel.title.base.methods.cap=usos del método base
find.usages.panel.title.derived.classes=clases derivadas
find.usages.panel.title.derived.classes.cap=Clases derivadas
find.usages.panel.title.derived.interfaces=interfaces derivadas
find.usages.panel.title.derived.interfaces.cap=Interfaces derivadas
find.usages.panel.title.implementing.classes=clases que implementan
find.usages.panel.title.implementing.classes.cap=Clases que implementan
find.usages.panel.title.implementing.methods=métodos que implementan
find.usages.panel.title.implementing.methods.cap=Métodos que implementan
find.usages.panel.title.overloaded.methods.usages=métodos sobrecargados
find.usages.panel.title.overloaded.methods.usages.cap=Métodos sobrecargados
find.usages.panel.title.overriding.methods=métodos que sobrescriben
find.usages.panel.title.overriding.methods.cap=Métodos que sobrescriben
generate.members.position.after.equals.and.hashcode=Después de equals() y hashCode()
generate.members.position.at.caret=En el cursor
generate.members.position.at.the.end.of.class=Al final de la clase
highlighting.try.blocks=Resaltando bloques try…
html.classes.exposed.with.code.module.info.code.html=<html>Clases expuestas con <code>module-info</code></html>
html.ignore.overrides.of.deprecated.abstract.methods=<html>Ignorar sobreescrituras de métodos abstract obsoletos de supers no obsoletos</html>
ignore.casts.in.suspicious.collections.method.calls=Ignorar casteos aclaratorios
ignore.exceptions.thrown.by.entry.points.methods=Ignorar excepciones lanzadas por métodos de punto de entrada
ignore.in.the.same.outermost.class=Ignorar en la misma clase más externa
ignore.in.the.same.project=Ignorar API declarada en este proyecto
ignore.inside.deprecated.members=Ignorar dentro de miembros obsoletos
ignore.inside.non.static.imports=Ignorar dentro de imports no static
ignore.members.of.deprecated.classes=Ignorar miembros de clases obsoletas
ignore.operation.which.results.in.negative.value=Ignorar operación '<<' que resulta en valor negativo
inspection.annotate.method.quickfix.family.name=Anotar método
inspection.annotate.method.quickfix.name=Anotar método con ''@{0}''
inspection.annotate.overridden.method.and.self.quickfix.family.name=Anotar métodos que sobrescriben y a sí mismo
inspection.annotate.overridden.method.and.self.quickfix.name=Anotar métodos que sobrescriben y a sí mismo con ''@{0}''
inspection.annotate.overridden.method.nullable.quickfix.name=Anotar métodos que sobrescriben como ''@{0}''
inspection.annotate.overridden.method.quickfix.family.name=Anotar métodos que sobrescriben
inspection.annotate.overridden.method.quickfix.name=Anotar métodos que sobrescriben con ''@{0}''
inspection.anonymous.has.lambda.alternative.display.name=El tipo anónimo tiene una alternativa lambda más corta
inspection.block.marker.comments.display.name=Comentario marcador de bloque
inspection.c.style.array.declarations.option=Ignorar declaraciones de estilo C en variables
inspection.can.be.final.accept.quickfix=Hacer final
inspection.can.be.final.display.name=La declaración puede tener el modificador 'final'
inspection.can.be.final.option=Reportar clases
inspection.can.be.final.option1=Reportar métodos
inspection.can.be.final.option2=Reportar campos
inspection.can.be.local.parameter.problem.descriptor=El parámetro <code>\#ref</code> puede tener el modificador <code>final</code>
inspection.can.be.local.variable.problem.descriptor=La variable <code>\#ref</code> puede tener el modificador <code>final</code>
inspection.can.be.replaced.with.message=Puede ser reemplazado por ''{0}''
inspection.class.getclass.display.name=Llamada sospechosa a 'Class.getClass()'
inspection.class.getclass.fix.remove.name=Eliminar llamada a 'getClass()'
inspection.class.getclass.fix.replace.name=Reemplazar con 'Class.class'
inspection.class.getclass.message='getClass()' es llamado en instancia de Class
inspection.class.has.no.to.string.method.description=La clase ''{0}'' no sobreescribe el método ''toString()''
inspection.class.has.no.to.string.method.display.name=La clase no sobreescribe el método 'toString()'
inspection.class.has.no.to.string.method.exclude.classes.reg.exp.option=Excluir clases (exp reg)\:
inspection.class.has.no.to.string.method.ignore.abstract.classes.option=Ignorar clases abstractas
inspection.class.has.no.to.string.method.ignore.deprecated.classes.option=Ignorar clases obsoletas
inspection.class.has.no.to.string.method.ignore.enum.classes.option=Ignorar clases enum
inspection.class.has.no.to.string.method.ignore.exception.classes.option=Ignorar clases de excepción
inspection.class.has.no.to.string.method.ignore.inner.classes.option=Ignorar clases internas
inspection.class.has.no.to.string.method.ignore.records.option=Ignorar records
inspection.class.has.no.to.string.method.ignore.test.classes.option=Ignorar clases de test
inspection.common.if.parts.disable.highlight.tail.call=No resaltar partes comunes si la sentencia final es una llamada
inspection.common.if.parts.family=Extraer partes comunes de sentencia 'if'
inspection.common.if.parts.family.else.if=Fusionar sentencia 'else if'
inspection.common.if.parts.family.else.if.description=Se puede fusionar 'else if'
inspection.common.if.parts.family.else.if.invert=Fusionar sentencia 'else if' invirtiendo la segunda condición
inspection.common.if.parts.settings.highlight.else.if=Resaltar cadenas else-if que pueden simplificarse
inspection.common.if.parts.settings.highlight.when.tail.call=Resaltar cuando la última sentencia común es una llamada
inspection.compiler.javac.quirks.anno.array.comma.fix=Eliminar coma final
inspection.compiler.javac.quirks.anno.array.comma.problem=La coma final en inicializadores de arrays de anotaciones puede causar errores de compilación al usar versiones antiguas de javac (por ejemplo JDK 5 y JDK 6)
inspection.compiler.javac.quirks.illegal.forward.reference=Las referencias hacia adelante pueden causar errores de compilación al usar versiones antiguas de javac (por ejemplo JDK 5 y JDK 6)
inspection.compiler.javac.quirks.name=Peculiaridades de Javac
inspection.compiler.javac.quirks.qualifier.type.args.fix=Eliminar parámetro genérico
inspection.compiler.javac.quirks.qualifier.type.args.problem=Los genéricos en referencias calificadoras pueden causar errores de compilación al usar versiones antiguas de javac (por ejemplo JDK 5 y JDK 6)
inspection.constant.on.wrong.side.of.a.comparison.side.option=La constante debe estar en el|lado de una comparación
inspection.contract.checker.boolean.condition.for.nonboolean.parameter=El parámetro ''{0}'' tiene tipo ''{1}'' (se esperaba boolean)
inspection.contract.checker.clause.syntax=Una cláusula de contrato debe tener la forma arg1, ..., argN -> valor-retorno
inspection.contract.checker.contract.clause.never.satisfied=La cláusula de contrato ''{0}'' nunca se satisface ya que sus condiciones están cubiertas por contratos previos
inspection.contract.checker.contract.violated=La cláusula de contrato ''{0}'' es violada
inspection.contract.checker.empty.constraint=La restricción no debe estar vacía
inspection.contract.checker.inferred.notnull.parameter.notnull=Se infiere que el parámetro ''{0}'' es no nulo, por lo que ''\!null'' siempre se satisface
inspection.contract.checker.inferred.notnull.parameter.null=Se infiere que el parámetro ''{0}'' es no nulo, por lo que ''null'' no es aplicable
inspection.contract.checker.method.always.fails.nontrivial=El valor de retorno de la cláusula ''{0}'' podría reemplazarse con ''fail'' ya que el método siempre falla en este caso
inspection.contract.checker.method.always.fails.trivial=El valor de retorno de la cláusula ''{0}'' podría reemplazarse con ''fail'' ya que el método siempre falla
inspection.contract.checker.no.exception.thrown=La cláusula de contrato ''{0}'' es violada\: no se lanza ninguna excepción
inspection.contract.checker.notnull.parameter.notnull=El parámetro ''{0}'' está anotado como no nulo, por lo que ''\!null'' siempre se satisface
inspection.contract.checker.notnull.parameter.null=El parámetro ''{0}'' está anotado como no nulo, por lo que ''null'' no es aplicable
inspection.contract.checker.parameter.count.mismatch=El método toma {0} parámetros, mientras que la cláusula de contrato ''{1}'' espera {2}
inspection.contract.checker.primitive.parameter.nullability=El parámetro ''{0}'' tiene tipo primitivo ''{1}'', por lo que ''{2}'' no es aplicable
inspection.contract.checker.pure.method.mutation.contract=Un método puro no puede tener contrato de mutación
inspection.contract.checker.unknown.constraint=La restricción debe ser una de\: {0}. Encontrada\: {1}
inspection.contract.checker.unknown.return.value=El valor de retorno debe ser uno de\: {0}. Encontrado\: {1}
inspection.contract.checker.unreachable.contract.clause=La cláusula de contrato ''{0}'' es inalcanzable\: los contratos previos cubren todos los casos posibles
inspection.contract.display.name=Problemas de contrato
inspection.convert.2.diamond.display.name=El tipo explícito puede reemplazarse con '<>'
inspection.convert.2.lambda.display.name=El tipo anónimo puede reemplazarse con lambda
inspection.data.flow.redundant.instanceof.quickfix=Reemplazar con una comprobación de null
inspection.data.flow.simplify.boolean.expression.quickfix=Simplificar expresión booleana
inspection.data.flow.simplify.to.assignment.quickfix.name=Simplificar a asignación normal
inspection.data.flow.turn.off.constant.references.quickfix=No reportar valores que se garantiza que son constantes
inspection.data.flow.turn.off.nullable.returning.notnull.quickfix=No reportar métodos anulables que siempre devuelven valor no nulo
inspection.data.flow.turn.off.true.asserts.quickfix=No reportar aserciones siempre verdaderas
inspection.data.flow.warn.when.reading.a.value.guaranteed.to.be.constant=Advertir cuando una constante se almacena en una variable
inspection.depends.on.the.java.feature=Esta inspección depende de la característica Java ''{0}'', disponible desde Java {1}.
inspection.depends.on.the.java.features=Esta inspección depende de las siguientes características Java\:
inspection.depends.on.the.java.features.minimal.version=Estas características están disponibles desde Java {0}.
inspection.deprecated.class.usage.inspection.display.name=Uso de API obsoleta en XML
inspection.deprecated.is.still.used.display.name=Se sigue usando un miembro obsoleto
inspection.duplicate.throws.display.name=Throws duplicado
inspection.duplicate.throws.ignore.subclassing.option=Ignorar excepciones que hereden de otras
inspection.duplicate.throws.more.general.problem=Ya existe una excepción más general, ''{0}'', en la lista de throws.
inspection.duplicate.throws.problem=Throws duplicado
inspection.equals.hashcode.only.one.defined.problem.descriptor=La clase tiene definido {0} pero no define {1}
inspection.export.results.can.be.final.description=La declaración puede tener el modificador final
inspection.expression.can.be.replaced.with.message=La expresión puede ser reemplazada por ''{0}''
inspection.extract.method.dont.suggest.length=No sugerir extraer métodos tan cortos como este
inspection.extract.method.dont.suggest.parameters=No sugerir extraer método con {0} o más parámetros
inspection.extract.method.inspection.name=El método puede ser extraído
inspection.extract.method.message=Es posible extraer un método que devuelve ''{0}'' de un método circundante largo
inspection.extract.method.nothing=nada
inspection.extract.method.option.max.parameters=Número máximo de parámetros\:
inspection.extract.method.option.min.length=Longitud mínima del código a extraer\:|símbolos
inspection.extract.method.preview.html=Extraer {0} sentencias a un método que acepta {1} y devuelve <b>{2}</b>
inspection.field.access.not.guarded.display.name=Acceso a campo o llamada a método no protegido
inspection.field.not.used.in.to.string.description=El método ''{0}'' no se usa en el método ''toString()''
inspection.field.not.used.in.to.string.description2=El campo ''{0}'' no se usa en el método ''toString()''
inspection.field.not.used.in.to.string.display.name=Campo no usado en el método 'toString()'
inspection.fix.name.remove.scheduled.for.removal.annotation.by.attribute=Reemplazar @ScheduledForRemoval por el atributo 'forRemoval' en la anotación @Deprecated
inspection.i18n.quickfix.annotate=Anotar…
inspection.i18n.quickfix.annotate.as=Anotar como ''@{0}''
inspection.i18n.quickfix.annotate.element=Anotar {0} ''{1}''…
inspection.i18n.quickfix.annotate.element.as=Anotar {0} ''{1}'' como ''@{2}''
inspection.implicit.subclass.display.forClass=La clase ''{0}'' podría tener subclases implícitas y no debe ser final
inspection.implicit.subclass.display.name=La declaración final no puede ser sobrescrita en tiempo de ejecución
inspection.implicit.subclass.extendable=Hacer ''{0}'' sobrescribible
inspection.implicit.subclass.make.class.extendable=Hacer la clase ''{0}'' {1,choice,0\#|1\#y el método {2} |1<y {1} métodos requeridos }extensible
inspection.inconsistent.language.level.display.name=Configuración inconsistente del nivel de lenguaje
inspection.infinite.loop.option=Ignorar cuando se coloca en Thread.run
inspection.instance.guarded.by.static.display.name=Miembro de instancia protegido por campo static
inspection.invalid.comparator.method.reference.display.name=Referencia de método inválida usada para 'Comparator'
inspection.java.8.list.sort.display.name='Collections.sort()' puede ser reemplazado por 'List.sort()'
inspection.java.9.redundant.requires.statement.display.name=Directiva 'requires' redundante en module-info
inspection.java.module.naming=El nombre del módulo Java contradice la convención
inspection.java.module.naming.terminal.digits=El componente del nombre del módulo ''{0}'' debe evitar dígitos terminales
inspection.local.can.be.final.display.name=La variable local o parámetro puede ser 'final'
inspection.local.can.be.final.option=Reportar variables locales
inspection.local.can.be.final.option1=Reportar parámetros de método
inspection.local.can.be.final.option2=Reportar parámetros catch
inspection.local.can.be.final.option3=Reportar parámetros foreach
inspection.local.can.be.final.option4=<html>Reportar variables que son implícitamente final<br/>(parámetros multi-catch o try-with-resources)</html>
inspection.local.can.be.final.option5=Reportar variables de patrón
inspection.message.code.generation.different.nullability.annotation.will.be.used=El código generado usará ''@{1}'' en lugar de ''@{0}''
inspection.message.expression.compared.to.itself.description=La expresión se compara consigo misma
inspection.message.javac.quick.intersection.type.problem=El tipo de intersección ''{0}'' no puede ser instanciado porque ''{1}'' es final
inspection.message.non.annotated.method.implements.non.null.method=El método no anotado ''{0}'' de ''{1}'' implementa un método no-null de ''{2}''
inspection.message.non.annotated.parameter.should.not.override.non.null.parameter=El parámetro no anotado ''{0}'' en el método ''{1}'' de ''{2}'' no debería sobrescribir el parámetro no-null de ''{3}''
inspection.message.non.null.parameter.should.not.override.non.annotated.parameter=El parámetro no-null ''{0}'' en el método ''{1}'' de ''{2}'' no debería sobrescribir el parámetro no anotado de ''{3}''
inspection.message.non.null.parameter.should.not.override.nullable.parameter=El parámetro no-null ''{0}'' en el método ''{1}'' de ''{2}'' no debería sobrescribir el parámetro nullable de ''{3}''
inspection.message.nullable.method.implements.non.null.method=El método nullable ''{0}'' de ''{1}'' implementa un método no-null de ''{2}''
inspection.message.scheduled.for.removal.annotation.can.be.removed=La anotación @ScheduledForRemoval puede ser eliminada
inspection.message.scheduled.for.removal.annotation.can.be.replaced.by.attribute=La anotación @ScheduledForRemoval puede ser reemplazada por el atributo 'forRemoval' en la anotación @Deprecated
inspection.module.exports.package.to.itself=El módulo exporta/abre el paquete a sí mismo
inspection.name.can.be.replaced.with.long.hashcode=Se puede usar el método 'hashCode()' estándar
inspection.name.redundant.scheduled.for.removal.annotation=Anotación @ScheduledForRemoval redundante
inspection.non.final.field.in.immutable.display.name=Campo no final en clase '@Immutable'
inspection.non.final.guard.display.name=Campo '@GuardedBy' no final
inspection.nullable.problems.NotNull.parameter.overrides.Nullable=El parámetro anotado con @{0} no debe sobrescribir el parámetro @{1}
inspection.nullable.problems.NotNull.parameter.overrides.not.annotated=El parámetro anotado con @{0} no debería sobrescribir un parámetro no anotado
inspection.nullable.problems.NotNull.parameter.receives.null.literal=El parámetro anotado con @{0} no debería recibir ''null'' como argumento
inspection.nullable.problems.Nullable.NotNull.conflict=No se puede anotar con @{0} y @{1} simultáneamente
inspection.nullable.problems.Nullable.method.overrides.NotNull=El método anotado con @{0} no debe sobrescribir el método @{1}
inspection.nullable.problems.annotated.field.constructor.parameter.not.annotated=El parámetro del constructor para el campo @{0} podría estar anotado con @{0}
inspection.nullable.problems.annotated.field.getter.conflict=El getter para el campo @{0} está anotado con @{1}
inspection.nullable.problems.annotated.field.getter.not.annotated=El getter para el campo @{0} podría estar anotado con @{0}
inspection.nullable.problems.annotated.field.setter.parameter.conflict=El parámetro del setter para el campo @{0} está anotado con @{1}
inspection.nullable.problems.annotated.field.setter.parameter.not.annotated=El parámetro del setter para el campo @{0} podría estar anotado con @{0}
inspection.nullable.problems.applied.to.package=La anotación en el nombre completamente calificado debe colocarse antes del último componente
inspection.nullable.problems.at.class=La anotación de nulabilidad no es aplicable a clases
inspection.nullable.problems.at.constructor=La anotación de nulabilidad no es aplicable a constructores
inspection.nullable.problems.at.enum.constant=La anotación de nulabilidad no es aplicable a constantes enum
inspection.nullable.problems.at.local.variable=La anotación de nulabilidad no es aplicable a variables locales
inspection.nullable.problems.at.reference.list=La anotación de nulabilidad no es aplicable a cláusulas extends/implements
inspection.nullable.problems.at.type.parameter=La anotación de nulabilidad no es aplicable a parámetros de tipo
inspection.nullable.problems.at.wildcard=La anotación de nulabilidad no es aplicable a tipos comodín
inspection.nullable.problems.method.overrides.NotNull=Método no anotado sobrescribe método anotado con @{0}
inspection.nullable.problems.outer.type=El tipo externo es inherentemente no-null
inspection.nullable.problems.parameter.overrides.NotNull=Parámetro no anotado sobrescribe parámetro @{0}
inspection.nullable.problems.primitive.type.annotation=Los miembros de tipo primitivo no pueden ser anotados
inspection.nullable.problems.receiver.annotation=El parámetro receptor es inherentemente no-null
inspection.numeric.overflow.display.name=Desbordamiento numérico
inspection.objects.equals.can.be.simplified.display.name='Objects.equals()' puede ser reemplazado por 'equals()'
inspection.quirk.method.reference.return.type.message=El tipo de retorno del método destino menciona la clase inaccesible {0}, esto causará un IllegalAccessError en tiempo de ejecución
inspection.redundant.cast.display.name=Casting de tipo redundante
inspection.redundant.cast.methodref.descriptor=El casting es redundante
inspection.redundant.cast.problem.descriptor=El casting de <code>{0}</code> a <code>\#ref</code> \#loc es redundante
inspection.redundant.cast.remove.quickfix=Eliminar casting(s) redundante(s)
inspection.redundant.field.initialization.option=Solo advertir en la inicialización a null
inspection.redundant.requires.statement.description=Directiva redundante ''requires {0}''.
inspection.redundant.requires.statement.fix.family=Eliminar directiva 'requires' redundante
inspection.redundant.requires.statement.fix.name=Eliminar directiva ''requires {0}''
inspection.redundant.requires.statement.message.java.base.implicitly.required='java.base' es requerido implícitamente.
inspection.redundant.requires.statement.message.module.unused=No se encontraron usos de los paquetes del módulo.
inspection.redundant.requires.statement.message.transitive.dependencies.on.can.be.used.directly=Las dependencias transitivas en ''{0}'' pueden usarse directamente.
inspection.redundant.throws.display.name=Cláusula 'throws' redundante
inspection.redundant.throws.problem.descriptor=La excepción declarada <code>\#ref</code> nunca se lanza en ninguna implementación del método
inspection.redundant.throws.problem.descriptor1=La excepción declarada <code>\#ref</code> nunca se lanza en este método ni en sus métodos de sobrescritura
inspection.redundant.throws.problem.descriptor2=La excepción declarada <code>\#ref</code> nunca se lanza
inspection.redundant.throws.remove.quickfix=Eliminar declaraciones 'throws' innecesarias
inspection.redundant.tostring.option.notnull.qualifier=Reportar solo cuando se sabe que el calificador no es nulo
inspection.redundant.type.display.name=Argumentos de tipo redundantes
inspection.redundant.type.no.generics.method.reference.problem.descriptor=Los argumentos de tipo son redundantes para la referencia de método no genérico
inspection.redundant.type.no.generics.problem.descriptor=Los argumentos de tipo son redundantes para la llamada de método no genérico
inspection.redundant.type.problem.descriptor=Los argumentos de tipo explícitos pueden ser inferidos
inspection.redundant.type.remove.quickfix=Eliminar argumentos de tipo
inspection.reference.anonymous.class=clase anónima
inspection.reference.anonymous.name=anónimo ({0})
inspection.reference.default.lambda.name=lambda
inspection.reference.default.method.reference.name=referencia de método
inspection.reference.default.package=<default>
inspection.reference.implicit.class=clase implícita en archivo ''{0}''
inspection.reference.implicit.constructor.name=constructor implícito de {0}
inspection.reference.jsp.holder.method.anonymous.name=<% contenido de página %>
inspection.reference.lambda.name=lambda ({0})
inspection.reference.method.reference.name=referencia de método ({0})
inspection.requires.auto.module=Dependencias en módulos automáticos
inspection.requires.auto.module.message=Directiva 'requires' para un módulo automático
inspection.requires.auto.module.option=Resaltar solo dependencias transitivas
inspection.requires.auto.module.transitive=Directiva 'requires transitive' para un módulo automático
inspection.safe.varargs.detector.display.name=Posible contaminación del heap por tipo vararg parametrizado
inspection.same.return.value.display.name=El método siempre devuelve el mismo valor
inspection.same.return.value.problem.descriptor=El método <code>\#ref()</code> siempre devuelve <code>{0}</code>
inspection.same.return.value.problem.descriptor1=El método <code>\#ref()</code> y todos sus métodos de sobrescritura siempre devuelven <code>{0}</code>
inspection.same.return.value.problem.descriptor2=Todas las implementaciones del método <code>\#ref()</code> siempre devuelven <code>{0}</code>
inspection.static.guarded.by.instance.display.name=Miembro static protegido por campo de instancia o this
inspection.string.tokenizer.delimiter.display.name=Delimitadores duplicados en 'StringTokenizer'
inspection.surround.requirenonnull.quickfix=Reemplazar con ''Objects.requireNonNull({0})''
inspection.suspicious.array.method.call.display.name=Llamada sospechosa a método de 'Arrays'
inspection.suspicious.array.method.call.problem.arrays=Los tipos de array son incompatibles\: los arrays siempre son diferentes
inspection.suspicious.array.method.call.problem.element=El tipo de elemento no es compatible con el tipo de array
inspection.suspicious.collections.method.calls.display.name=Llamada sospechosa a método de colección
inspection.suspicious.collections.method.calls.problem.descriptor=''{0}'' puede no contener {2} de tipo ''{1}''
inspection.suspicious.collections.method.calls.problem.descriptor1=Llamada sospechosa a ''{0}''
inspection.suspicious.getter.setter.field.option=Advertir solo cuando existe un campo que coincide con el nombre del getter/setter
inspection.suspicious.integer.div.assignment.option=Reportar divisiones sospechosas pero posiblemente exactas
inspection.unary.plus.unary.binary.option=Reportar solo en contexto confuso de expresión binaria o unaria
inspection.unknown.guard.display.name=Campo '@GuardedBy' desconocido
inspection.unnecessary.super.qualifier.option=Ignorar calificador 'super' de aclaración
inspection.unsatisfied.range.display.name=El valor de retorno está fuera del rango declarado
inspection.unsatisfied.range.message=El rango del valor de retorno ''{0}'' está fuera del rango declarado ''{1}''
inspection.unsatisfied.range.message.value=El valor de retorno ''{0}'' está fuera del rango declarado ''{1}''
inspection.use.compare.method.display.name=Se puede usar el método 'compare()' para comparar números
inspection.use.compare.method.fix.family.name=Reemplazar con método de comparación único
inspection.use.compare.method.option.double=Sugerir 'Double.compare()' y 'Float.compare()'
inspection.use.compare.method.turn.off.double=No sugerir métodos Double.compare() y Float.compare()
inspection.visibility.accept.quickfix=Aceptar nivel de acceso sugerido
inspection.visibility.compose.suggestion=Puede ser {0}
inspection.visibility.option.constants=Sugerir visibilidad más débil para constantes
inspection.visibility.option.package.private.members=Sugerir nivel de visibilidad package-private para miembros de clase
inspection.visibility.package.private.top.level.classes=Sugerir nivel de visibilidad package-private para clases de nivel superior
inspection.visibility.private.inner.members=Sugerir 'private' para miembros de clase interna cuando solo se referencian desde la clase externa
inspection.weaker.access.display.name=El acceso de declaración puede ser más débil
instance.member.guarded.by.static.0.loc=Miembro de instancia protegido por static "{0}" \#loc
instance.member.guarded.by.static.ref.loc=Miembro de instancia protegido por static \#ref \#loc
intention.add.annotation.family=Agregar anotación
intention.add.type.annotation.family=Agregar anotación de tipo
intention.family.name.move.annotation.to.array=Mover anotación al array
intention.family.name.move.annotation.to.upper.bound=Mover anotación al límite superior
intention.family.name.move.members.into.class=Mover miembros a la clase
intention.family.name.move.members.to=Mover miembros a {0}
intention.family.name.remove.new.family.name=Eliminar 'new'
intention.family.name.remove.repeating.call=Eliminar llamada repetida
intention.family.name.replace.with.expression=Reemplazar con expresión
intention.family.name.replace.with.unnamed.pattern=Reemplazar con patrón sin nombre
intention.name.do.not.report.conditions.with.possible.side.effect=No reportar condiciones con posible efecto secundario
intention.name.ignore.exception=Ignorar excepción ''{0}''
intention.name.make.variable.effectively.final=Hacer variable efectivamente final
intention.name.move.members.into.class=Mover {0, choice, 1\#miembro|2\#miembros} a la clase
intention.name.qualify.expression=Calificar expresión {0} con ''{1}''
intention.name.remove.repeating.call=Eliminar llamada repetida ''{0}()''
intention.text.remove.annotation=Eliminar
make.0.default.annotation=Hacer "{0}" anotación por defecto
make.default.the.last.case.family.name=Hacer 'default' el último case
make.final.and.annotate.as.safevarargs=Hacer final y anotar como '@SafeVarargs'
message.class.inaccessible=La clase ''{0}'' no es accesible aquí
message.class.inaccessible.from.module=La clase ''{0}'' no es accesible desde el módulo ''{1}''
method.reference.mapped.to.comparator=La referencia de método mapeada a la interfaz 'Comparator' no cumple el contrato 'Comparator'
missorted.imports.inspection.display.name=Imports mal ordenados
module.0.with.language.level.1.depends.on.module.2.with.language.level.3=El módulo {0} con nivel de lenguaje {1} depende del módulo {2} con nivel de lenguaje {3}
move.0.to.the.beginning=Mover ''{0}'' al principio
move.annotations.to.package.info.file.family.name=Mover anotaciones a 'package-info.java'
move.to.front=Mover al frente
mutability.modifiable=modificable
mutability.must.not.modify=parámetro de entrada que no debe modificarse
mutability.unknown=desconocido
mutability.unmodifiable=no modificable
mutability.unmodifiable.view=vista no modificable
mutation.signature.problem.invalid.token=Token inválido\: {0}; los soportados son ''this'', ''io'', ''param1'', ''param2'', etc.
mutation.signature.problem.parameter.has.immutable.type=El parámetro \#{0} tiene tipo inmutable ''{1}''
mutation.signature.problem.reference.to.parameter.invalid=La referencia al parámetro \#{0} no es válida
mutation.signature.problem.static.method.cannot.mutate.this=El método static no puede mutar 'this'
navigate.to.overridden.methods.title=Métodos que sobrescriben {0}
non.final.field.code.ref.code.in.immutable.class.loc=Campo no final <code>\#ref</code> en clase @Immutable \#loc
non.final.guarded.by.field.0.loc=Campo @GuardedBy no final "{0}" \#loc
non.final.guarded.by.field.ref.loc=Campo @GuardedBy no final \#ref \#loc
non.null.type.argument.is.expected=Se espera un argumento de tipo no nulo
notification.content.cannot.move.file=No se puede mover ''{0}'' a ''{1}''\: {2}
notification.file.system.issue=Problema de operación de archivo
nullability.non.null=no nulo
nullability.null=null
nullability.nullable=nullable
nullable.stuff.error.overriding.notnull.with.nullable=Sobrescribiendo una colección de elementos no nulos con una colección de elementos nullables
nullable.stuff.error.overriding.nullable.with.notnull=Sobrescribiendo una colección de elementos nullables con una colección de elementos no nulos
nullable.stuff.problems.overridden.method.parameters.are.not.annotated=Los parámetros del método sobrescrito no están anotados
nullable.stuff.problems.overridden.methods.are.not.annotated=Los métodos sobrescritos no están anotados
parameter.can.be.null=El parámetro puede ser null
parameter.is.always.not.null=El parámetro siempre es no nulo
possible.heap.pollution.from.parameterized.vararg.type.loc=Posible contaminación del heap desde tipo vararg parametrizado \#loc
processing.method.usages=Procesando usos del método…
progress.title.searching.for.overridden.methods=Buscando métodos sobrescritos
provided.type=Proporcionado
qualify.0=Calificar {0}
qualify.with.0.this=Calificar con {0}.this
reassign.variable.display.name=Variable reasignada
redundant.block.marker=Marcador de bloque redundante
remove.annotation=Eliminar anotación
remove.block.marker.comments=Eliminar comentario de marcador de bloque
remove.dependency=Eliminar dependencia
remove.left.side.of.assignment=Eliminar lado izquierdo de la asignación
remove.switch.branch.0=Eliminar rama switch ''{0}''
remove.switch.label=Eliminar etiqueta switch
remove.switch.label.0=Eliminar etiqueta switch ''{0}''
replace.0.with=Reemplazar ''{0}'' con '\='
replace.anonymous.class.with.lambda.alternative=Reemplazar clase anónima con alternativa lambda
replace.get.class.with.class.literal=Reemplazar getClass() con literal .class
replace.operator.assignment.with.assignment=Reemplazar asignación de operador con asignación
replace.stringtokenizer.delimiters.parameter.with.unique.symbols=Eliminar duplicación del argumento 'delimiters'
replace.var.with.explicit.type=Reemplazar 'var' con tipo explícito
replace.with.0=Reemplazar con {0}
replace.with.boolean.equals=Reemplazar con Boolean.equals
replace.with.comparator=Reemplazar con comparator
replace.with.constant.value=Reemplazar con valor constante
replace.with.constant.value.title=Reemplazar con valor constante
replace.with.expression.lambda=Reemplazar con expresión lambda
replace.with.lambda=Reemplazar con lambda
replace.with.stream.api.fix=Contraer bucle con stream ''{0}()''
report.suspicious.but.possibly.correct.method.calls=Reportar llamadas a métodos sospechosas pero posiblemente correctas (&R)
report.when.interface.is.not.annotated.with.functional.interface=Reportar cuando la interfaz no está anotada con @FunctionalInterface
required.type=Tipo requerido
scope.package=Paquete {0}
searching.for.overriding.methods=Buscando métodos que sobrescriben
service.click.to.navigate=Clic para navegar
service.provides=Proporciona servicio
service.uses=Usa servicio
special.field.array.length=Longitud del array
special.field.collection.size=Tamaño
special.field.consumed.stream=Stream enlazado o consumido
special.field.enum.ordinal=Ordinal del enum
special.field.instantiable.class=Clase instanciable
special.field.optional.value=Valor opcional
special.field.string.length=Longitud de la cadena
special.field.unboxed.value=Valor desempaquetado
statement.lambda.can.be.replaced.with.expression.lambda=La lambda de declaración puede reemplazarse por una lambda de expresión
static.inheritrance.fix.replace.progress=Reemplazando usos de {0}
static.member.guarded.by.instance.0.loc=Miembro static protegido por instancia "{0}" \#loc
static.member.guarded.by.instance.ref.loc=Miembro static protegido por instancia \#ref \#loc
subclasses.search.progress.title=Buscando métodos sobrescritos
suggest.package.private.visibility.level.for.classes.in.exported.packages.java.9=Sugerir nivel de visibilidad package-private para clases en paquetes exportados (Java 9+)
suppress.all.for.class=Suprimir todas las inspecciones para la clase
suppress.for.parameter=Suprimir para parámetro
suppress.for.statement.with.comment=Suprimir para declaración con comentario
suppress.inspection.class=Suprimir para clase
suppress.inspection.field=Suprimir para campo
suppress.inspection.member=Suprimir para miembro
suppress.inspection.method=Suprimir para método
suppress.inspection.module=Suprimir para declaración de módulo
suspected.module.dependency.problem.descriptor=El módulo ''{0}'' no depende del módulo ''{1}''. Sin embargo, ''{1}'' no fue inspeccionado para las dependencias exportadas necesarias para el ámbito ''{2}''
suspicious.invocation.handler.implementation.display.name=Implementación sospechosa de 'InvocationHandler'
suspicious.invocation.handler.implementation.method.unused.message=El método nunca se usa en 'invoke()'\: es poco probable que 'hashCode()', 'equals()' y 'toString()' estén implementados correctamente
suspicious.invocation.handler.implementation.null.returned.for.toString.message=Se podría devolver null al hacer proxy del método 'toString()'\: esto no es recomendable
suspicious.invocation.handler.implementation.null.returned.message=Se podría devolver null al hacer proxy del método ''{0}()''\: esto puede causar NullPointerException
suspicious.invocation.handler.implementation.type.mismatch.message=Se podría devolver un tipo incompatible al hacer proxy del método ''{0}()''\: requerido\: {1}; obtenido\: {2}
text.raw.ctor.reference.with.type.parameters=Referencia raw al constructor con parámetros de tipo explícitos para el constructor
text.shebang.mechanism.in.java.files.not.permitted=No se permite el mecanismo shebang en archivos .java
text.unused.import.in.template=Import sin usar (especificado en la plantilla)
type.constraint.assignability.explanation.definitely.inconvertible=Se sabe que {0} es {1} que es definitivamente incompatible con {2}
type.constraint.assignability.explanation.exact={0} ya se sabe que es {1}
type.constraint.assignability.explanation.exact.not.subtype=El tipo {0} es exactamente {1} que no es un subtipo de {2}
type.constraint.assignability.explanation.exact.subtype=El tipo {0} es exactamente {1} que es un subtipo de {2}
type.constraint.assignability.explanation.not.instance.of=Se sabe que {0} no es {1}
type.constraint.assignability.explanation.not.instance.of.supertype=Se sabe que {0} no es {1} que es un supertipo de {2}
type.constraint.assignability.explanation.subtype.of.subtype=Ya se sabe que {0} es {1} que es un subtipo de {2}
type.mismatch.reason=razón\: {0}
uast.language.display.name=Lenguajes JVM
unknown.guardedby.reference.0.loc=Referencia @GuardedBy desconocida "{0}" \#loc
unknown.guardedby.reference.ref.loc=Referencia @GuardedBy desconocida \#ref \#loc
unnecessary.module.dependency.display.name=Dependencia de módulo innecesaria
unnecessary.module.dependency.problem.descriptor=Las fuentes del módulo ''{0}'' no dependen de las fuentes del módulo ''{1}''
unused.import.display.name=Import sin usar
unused.import.statement=Declaración de import sin usar
unused.library.display.name=Biblioteca sin usar
unused.library.problem.descriptor=Biblioteca sin usar ''{0}''
unused.library.roots.problem.descriptor=Raíces sin usar {0} de la biblioteca ''{1}''
var.can.be.replaced.with.explicit.type='var' puede reemplazarse por tipo explícito
vararg.method.call.with.50.poly.arguments=La llamada a método vararg con más de 50 argumentos poly puede ralentizar la compilación y el análisis