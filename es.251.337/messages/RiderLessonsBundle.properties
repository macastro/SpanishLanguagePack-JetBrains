alt.enter.invert.condition=Invertir condición
alt.enter.remove.parameter=Eliminar parámetro
basic.completion.activate=Si no se sugiere el completado automáticamente, invóquelo manualmente presionando {0}.
basic.completion.choose.first=La mejor coincidencia aparece resaltada en azul en la lista de completado\: selecciónela presionando {0}.
basic.completion.choose.item=Seleccione {0} en la lista de completado y presione {1}.
basic.completion.complete=Puede insertar automáticamente todos los elementos de sintaxis necesarios (paréntesis, llaves, punto y coma, etc.) y posicionarse donde puede comenzar a escribir la siguiente declaración. Presione {0} para completar esta declaración.
basic.completion.lesson.name=Autocompletado de código
basic.completion.start.typing=Por defecto, <ide/> muestra sugerencias de completado mientras escribe. Comience a escribir {0} justo donde está el cursor y verá sugerencias coincidentes.
comment.block.comment=Para comentar con comentario de bloque {0}, seleccione un bloque de código y presione {1}.
comment.block.uncomment=Para descomentar un comentario de bloque, coloque el cursor en cualquier parte dentro del bloque comentado y presione {0}.
comment.lesson.name=Comentar líneas y bloques de código
comment.line.uncomment.several.lines=Para descomentar múltiples líneas, seleccione todas las líneas comentadas y presione {0}.
comment.line.uncomment.that.line=Descomente la línea comentada con el mismo atajo\: coloque el cursor en cualquier parte de esa línea y presione {0}.
docker.balloon.right.click.project=Vamos a añadir soporte Docker al proyecto {0}. Haga clic derecho y seleccione <strong>Añadir</strong> | {1}
docker.check.out.dockerfile={0} ha generado un Dockerfile con todas las instrucciones necesarias para su proyecto
docker.click.debug=Presione {0} o haga clic en {1} para comenzar a depurar
docker.lesson.name=Conceptos básicos de Docker
docker.module.description=Comenzar con Docker en Rider
docker.module.name=Docker
docker.open.settings=Antes de comenzar, asegurémonos de que el daemon de Docker está ejecutándose en su máquina. Abra la configuración presionando {0}, o haciendo clic en {1} y eligiendo el elemento correspondiente
docker.run=Presione {0} o haga clic en este botón para ejecutar su proyecto en un contenedor Docker
docker.select.run.config=Para ejecutar su proyecto en un contenedor Docker, seleccione la configuración de ejecución Dockerfile
extract.variable.choose.name=Especifique un nombre de variable o deje el sugerido. Presione {0} nuevamente para completar la refactorización.
extract.variable.choose.type=Elija si usar ''var'' o un tipo explícito para la nueva variable y presione {0}.
extract.variable.replace.all=El código de ejemplo contiene 3 ocurrencias de la expresión seleccionada. Elija el elemento correspondiente para reemplazarlas todas.
file.structure.help.link=Estructura de archivo y otros comandos de navegación contextual
file.structure.lesson.name=Miembros y estructura del archivo
file.structure.open.popup=Un archivo grande puede ser difícil de navegar; una buena forma de empezar es ver sus miembros. Presione {0} para listar todos los miembros del archivo.
file.structure.request.prefixes=Suponga que quiere encontrar un método con las palabras {0} y {1} en su nombre. Escriba {2} (prefijos de las palabras requeridas) para filtrar la lista de miembros.
file.structure.toolwindow=También puede consultar la estructura del archivo en una ventana de herramientas dedicada\: presione {0} para abrirla.
got.it.balloon.button.text=Siguiente
help.refactor.this=Menú 'Refactorizar esto'
onboarding.module.description=Pasos iniciales para configurar y usar el IDE
onboarding.module.name=Comenzar
onboarding.tour.lesson.name=Tour de iniciación
refactoring.menu.extract.interface=Elijamos la refactorización {0} que ayuda a crear rápidamente una nueva interfaz basada en los miembros de la clase actual.
refactoring.menu.extract.interface.dialog=Especifique un nombre para la nueva interfaz y seleccione las casillas junto a los métodos que deben declararse allí, luego haga clic en <strong>Siguiente</strong> para finalizar la refactorización.
refactoring.menu.finish=Intente presionar {0} cuando el cursor esté sobre un miembro, variable o literal de cadena para ver las refactorizaciones disponibles en diferentes contextos.
rename.dialog.title=Renombrar
rename.epilogue=Observe que la refactorización no afectó a la propiedad <code>Name</code> de <strong>Person</strong>. Es seguro usar incluso si tiene símbolos con nombres similares en el mismo contexto.
rename.press.rename=La refactorización <strong>Renombrar</strong> actualiza automáticamente todas las referencias al símbolo renombrado. Puede iniciar la refactorización desde la declaración o cualquier uso del símbolo. Presione {0} para renombrar la propiedad {1} de la clase <code>Car</code>.
rename.type.new.name=Escriba un nuevo nombre para esta propiedad (por ejemplo, {0}) y presione {1}.
rider.onboarding.alt.enter={0} es su atajo principal en el editor. Por ejemplo, cuando su cursor está en el parámetro {1}, presiónelo para eliminar el parámetro y actualizar los usos.
rider.onboarding.alt.enter.menu=Antes de aplicar la corrección {0}, considere otras cosas útiles que puede hacer en esta ventana emergente.
rider.onboarding.balloon.open.file=Haga doble clic para abrir {0}
rider.onboarding.balloon.open.learn.window=Cambie a la ventana de herramientas {0} para continuar esta lección
rider.onboarding.balloon.project.directory=Haga doble clic en el nodo de solución, luego expanda el proyecto <strong>Learning</strong>
rider.onboarding.change.ui.settings=Para esta lección, Rider cambia algunas configuraciones de UI a los valores predeterminados. Sus preferencias se restaurarán cuando complete o salga de la lección.
rider.onboarding.debug.window.toolbar=Aquí puede encontrar todas las acciones de depuración. Por ahora, presionemos {0} o hagamos clic en {1} para reanudar el programa y dejarlo ejecutar hasta el final.
rider.onboarding.feedback.system.current.sdk=SDK actual\:
rider.onboarding.feedback.system.found.sdks=SDKs encontrados\:
rider.onboarding.finish=Eso es todo para esta lección. Ahora puede elegir <strong>Archivo</strong> | <strong>Nueva Solución</strong> del menú principal para iniciar su propia solución, o <strong>Archivo</strong> | <strong>Abrir</strong> para abrir una existente.
rider.onboarding.online.help=Ayuda en línea
rider.onboarding.project.view.description=Haga clic en el icono de la barra lateral o presione {0} para acceder a sus archivos de solución
rider.onboarding.resume=Presione {0} o haga clic en {1} para reanudar el programa y dejarlo ejecutar hasta el final
rider.onboarding.run.configuration.widget=Aquí puede configurar y lanzar configuraciones de ejecución. Presionemos {0} o hagamos clic en {1} para comenzar a depurar con la configuración actual.
rider.onboarding.search.everywhere=Para encontrar cualquier cosa, presione {0} dos veces o haga clic en {1}
rider.onboarding.search.everywhere.query=Hay varias pestañas que limitan su búsqueda a archivos, acciones, etc. Pero por ahora, quedémonos en la pestaña <strong>Todo</strong> y escribamos {0}.
rider.onboarding.search.everywhere.result=La consulta ha coincidido con {0} por las letras iniciales de su nombre compuesto. Selecciónelo en la lista y presione {1}.
rider.onboarding.settings=Lo último es dónde configurar todo. Presione {0}, o haga clic en {1} y elija el elemento correspondiente
rider.onboarding.settings.save=Para aplicar cualquier cambio, haga clic en {0}
rider.onboarding.settings.search=Use el campo de búsqueda para encontrar opciones específicas
rider.onboarding.settings.theme=Por ejemplo, puede cambiar entre temas claros y oscuros en la página {0} | {1}
rider.onboarding.toggle.breakpoint=Vamos a depurar nuestro programa. Primero, active un punto de interrupción\: haga clic en el número de línea o coloque el cursor en la línea y presione {0}.